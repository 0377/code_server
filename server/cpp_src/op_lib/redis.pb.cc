// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: redis.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "redis.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
class PlayerLoginInfoDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<PlayerLoginInfo> {
} _PlayerLoginInfo_default_instance_;

namespace protobuf_redis_2eproto {


namespace {

::google::protobuf::Metadata file_level_metadata[1];

}  // namespace

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTableField
    const TableStruct::entries[] = {
  {0, 0, 0, ::google::protobuf::internal::kInvalidMask, 0, 0},
};

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::AuxillaryParseTableField
    const TableStruct::aux[] = {
  ::google::protobuf::internal::AuxillaryParseTableField(),
};
PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTable const
    TableStruct::schema[] = {
  { NULL, NULL, 0, -1, -1, false },
};

const ::google::protobuf::uint32 TableStruct::offsets[] = {
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerLoginInfo, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerLoginInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerLoginInfo, session_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerLoginInfo, gate_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerLoginInfo, account_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerLoginInfo, guid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerLoginInfo, nickname_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerLoginInfo, vip_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerLoginInfo, login_time_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerLoginInfo, logout_time_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerLoginInfo, has_bank_password_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerLoginInfo, is_guest_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerLoginInfo, is_reconnect_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerLoginInfo, alipay_account_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerLoginInfo, alipay_name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerLoginInfo, change_alipay_num_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerLoginInfo, phone_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerLoginInfo, phone_type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerLoginInfo, version_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerLoginInfo, channel_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerLoginInfo, package_name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerLoginInfo, imei_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerLoginInfo, ip_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerLoginInfo, risk_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerLoginInfo, ip_area_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerLoginInfo, password_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerLoginInfo, create_channel_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerLoginInfo, enable_transfer_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerLoginInfo, is_first_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerLoginInfo, inviter_guid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerLoginInfo, invite_code_),
  15,
  16,
  0,
  17,
  1,
  18,
  19,
  20,
  22,
  23,
  24,
  2,
  3,
  21,
  4,
  5,
  6,
  7,
  8,
  9,
  10,
  26,
  11,
  12,
  13,
  25,
  28,
  27,
  14,
};

static const ::google::protobuf::internal::MigrationSchema schemas[] = {
  { 0, 34, sizeof(PlayerLoginInfo)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&_PlayerLoginInfo_default_instance_),
};

namespace {

void protobuf_AssignDescriptors() {
  AddDescriptors();
  ::google::protobuf::MessageFactory* factory = NULL;
  AssignDescriptors(
      "redis.proto", schemas, file_default_instances, TableStruct::offsets, factory,
      file_level_metadata, NULL, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 1);
}

}  // namespace

void TableStruct::Shutdown() {
  _PlayerLoginInfo_default_instance_.Shutdown();
  delete file_level_metadata[0].reflection;
}

void TableStruct::InitDefaultsImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::internal::InitProtobufDefaults();
  _PlayerLoginInfo_default_instance_.DefaultConstruct();
}

void InitDefaults() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &TableStruct::InitDefaultsImpl);
}
void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] = {
      "\n\013redis.proto\"\310\004\n\017PlayerLoginInfo\022\022\n\nses"
      "sion_id\030\001 \001(\005\022\017\n\007gate_id\030\002 \001(\005\022\017\n\007accoun"
      "t\030\003 \001(\t\022\014\n\004guid\030\004 \001(\005\022\020\n\010nickname\030\005 \001(\t\022"
      "\013\n\003vip\030\006 \001(\005\022\022\n\nlogin_time\030\007 \001(\005\022\023\n\013logo"
      "ut_time\030\010 \001(\005\022\031\n\021has_bank_password\030\t \001(\010"
      "\022\020\n\010is_guest\030\n \001(\010\022\024\n\014is_reconnect\030\013 \001(\010"
      "\022\026\n\016alipay_account\030\014 \001(\t\022\023\n\013alipay_name\030"
      "\r \001(\t\022\031\n\021change_alipay_num\030\016 \001(\005\022\r\n\005phon"
      "e\030\017 \001(\t\022\022\n\nphone_type\030\020 \001(\t\022\017\n\007version\030\021"
      " \001(\t\022\022\n\nchannel_id\030\022 \001(\t\022\024\n\014package_name"
      "\030\023 \001(\t\022\014\n\004imei\030\024 \001(\t\022\n\n\002ip\030\025 \001(\t\022\014\n\004risk"
      "\030\026 \001(\005\022\017\n\007ip_area\030\027 \001(\t\022\020\n\010password\030\030 \001("
      "\t\022\031\n\021create_channel_id\030\031 \001(\t\022\027\n\017enable_t"
      "ransfer\030\032 \001(\010\022\023\n\010is_first\030\033 \001(\005:\0012\022\027\n\014in"
      "viter_guid\030\034 \001(\005:\0010\022\023\n\013invite_code\030\035 \001(\t"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 600);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "redis.proto", &protobuf_RegisterTypes);
  ::google::protobuf::internal::OnShutdown(&TableStruct::Shutdown);
}

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;

}  // namespace protobuf_redis_2eproto


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PlayerLoginInfo::kSessionIdFieldNumber;
const int PlayerLoginInfo::kGateIdFieldNumber;
const int PlayerLoginInfo::kAccountFieldNumber;
const int PlayerLoginInfo::kGuidFieldNumber;
const int PlayerLoginInfo::kNicknameFieldNumber;
const int PlayerLoginInfo::kVipFieldNumber;
const int PlayerLoginInfo::kLoginTimeFieldNumber;
const int PlayerLoginInfo::kLogoutTimeFieldNumber;
const int PlayerLoginInfo::kHasBankPasswordFieldNumber;
const int PlayerLoginInfo::kIsGuestFieldNumber;
const int PlayerLoginInfo::kIsReconnectFieldNumber;
const int PlayerLoginInfo::kAlipayAccountFieldNumber;
const int PlayerLoginInfo::kAlipayNameFieldNumber;
const int PlayerLoginInfo::kChangeAlipayNumFieldNumber;
const int PlayerLoginInfo::kPhoneFieldNumber;
const int PlayerLoginInfo::kPhoneTypeFieldNumber;
const int PlayerLoginInfo::kVersionFieldNumber;
const int PlayerLoginInfo::kChannelIdFieldNumber;
const int PlayerLoginInfo::kPackageNameFieldNumber;
const int PlayerLoginInfo::kImeiFieldNumber;
const int PlayerLoginInfo::kIpFieldNumber;
const int PlayerLoginInfo::kRiskFieldNumber;
const int PlayerLoginInfo::kIpAreaFieldNumber;
const int PlayerLoginInfo::kPasswordFieldNumber;
const int PlayerLoginInfo::kCreateChannelIdFieldNumber;
const int PlayerLoginInfo::kEnableTransferFieldNumber;
const int PlayerLoginInfo::kIsFirstFieldNumber;
const int PlayerLoginInfo::kInviterGuidFieldNumber;
const int PlayerLoginInfo::kInviteCodeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PlayerLoginInfo::PlayerLoginInfo()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_redis_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:PlayerLoginInfo)
}
PlayerLoginInfo::PlayerLoginInfo(const PlayerLoginInfo& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  account_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_account()) {
    account_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.account_);
  }
  nickname_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_nickname()) {
    nickname_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.nickname_);
  }
  alipay_account_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_alipay_account()) {
    alipay_account_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.alipay_account_);
  }
  alipay_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_alipay_name()) {
    alipay_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.alipay_name_);
  }
  phone_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_phone()) {
    phone_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.phone_);
  }
  phone_type_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_phone_type()) {
    phone_type_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.phone_type_);
  }
  version_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_version()) {
    version_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.version_);
  }
  channel_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_channel_id()) {
    channel_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.channel_id_);
  }
  package_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_package_name()) {
    package_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.package_name_);
  }
  imei_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_imei()) {
    imei_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.imei_);
  }
  ip_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_ip()) {
    ip_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.ip_);
  }
  ip_area_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_ip_area()) {
    ip_area_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.ip_area_);
  }
  password_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_password()) {
    password_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.password_);
  }
  create_channel_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_create_channel_id()) {
    create_channel_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.create_channel_id_);
  }
  invite_code_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_invite_code()) {
    invite_code_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.invite_code_);
  }
  ::memcpy(&session_id_, &from.session_id_,
    reinterpret_cast<char*>(&is_first_) -
    reinterpret_cast<char*>(&session_id_) + sizeof(is_first_));
  // @@protoc_insertion_point(copy_constructor:PlayerLoginInfo)
}

void PlayerLoginInfo::SharedCtor() {
  _cached_size_ = 0;
  account_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  nickname_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  alipay_account_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  alipay_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  phone_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  phone_type_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  version_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  channel_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  package_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  imei_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ip_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ip_area_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  password_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  create_channel_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  invite_code_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&session_id_, 0, reinterpret_cast<char*>(&inviter_guid_) -
    reinterpret_cast<char*>(&session_id_) + sizeof(inviter_guid_));
  is_first_ = 2;
}

PlayerLoginInfo::~PlayerLoginInfo() {
  // @@protoc_insertion_point(destructor:PlayerLoginInfo)
  SharedDtor();
}

void PlayerLoginInfo::SharedDtor() {
  account_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  nickname_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  alipay_account_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  alipay_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  phone_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  phone_type_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  version_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  channel_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  package_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  imei_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ip_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ip_area_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  password_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  create_channel_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  invite_code_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void PlayerLoginInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PlayerLoginInfo::descriptor() {
  protobuf_redis_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_redis_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const PlayerLoginInfo& PlayerLoginInfo::default_instance() {
  protobuf_redis_2eproto::InitDefaults();
  return *internal_default_instance();
}

PlayerLoginInfo* PlayerLoginInfo::New(::google::protobuf::Arena* arena) const {
  PlayerLoginInfo* n = new PlayerLoginInfo;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void PlayerLoginInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:PlayerLoginInfo)
  if (_has_bits_[0 / 32] & 255u) {
    if (has_account()) {
      GOOGLE_DCHECK(!account_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*account_.UnsafeRawStringPointer())->clear();
    }
    if (has_nickname()) {
      GOOGLE_DCHECK(!nickname_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*nickname_.UnsafeRawStringPointer())->clear();
    }
    if (has_alipay_account()) {
      GOOGLE_DCHECK(!alipay_account_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*alipay_account_.UnsafeRawStringPointer())->clear();
    }
    if (has_alipay_name()) {
      GOOGLE_DCHECK(!alipay_name_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*alipay_name_.UnsafeRawStringPointer())->clear();
    }
    if (has_phone()) {
      GOOGLE_DCHECK(!phone_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*phone_.UnsafeRawStringPointer())->clear();
    }
    if (has_phone_type()) {
      GOOGLE_DCHECK(!phone_type_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*phone_type_.UnsafeRawStringPointer())->clear();
    }
    if (has_version()) {
      GOOGLE_DCHECK(!version_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*version_.UnsafeRawStringPointer())->clear();
    }
    if (has_channel_id()) {
      GOOGLE_DCHECK(!channel_id_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*channel_id_.UnsafeRawStringPointer())->clear();
    }
  }
  if (_has_bits_[8 / 32] & 32512u) {
    if (has_package_name()) {
      GOOGLE_DCHECK(!package_name_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*package_name_.UnsafeRawStringPointer())->clear();
    }
    if (has_imei()) {
      GOOGLE_DCHECK(!imei_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*imei_.UnsafeRawStringPointer())->clear();
    }
    if (has_ip()) {
      GOOGLE_DCHECK(!ip_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*ip_.UnsafeRawStringPointer())->clear();
    }
    if (has_ip_area()) {
      GOOGLE_DCHECK(!ip_area_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*ip_area_.UnsafeRawStringPointer())->clear();
    }
    if (has_password()) {
      GOOGLE_DCHECK(!password_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*password_.UnsafeRawStringPointer())->clear();
    }
    if (has_create_channel_id()) {
      GOOGLE_DCHECK(!create_channel_id_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*create_channel_id_.UnsafeRawStringPointer())->clear();
    }
    if (has_invite_code()) {
      GOOGLE_DCHECK(!invite_code_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*invite_code_.UnsafeRawStringPointer())->clear();
    }
  }
  session_id_ = 0;
  if (_has_bits_[16 / 32] & 16711680u) {
    ::memset(&gate_id_, 0, reinterpret_cast<char*>(&is_guest_) -
      reinterpret_cast<char*>(&gate_id_) + sizeof(is_guest_));
  }
  if (_has_bits_[24 / 32] & 520093696u) {
    ::memset(&is_reconnect_, 0, reinterpret_cast<char*>(&inviter_guid_) -
      reinterpret_cast<char*>(&is_reconnect_) + sizeof(inviter_guid_));
    is_first_ = 2;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool PlayerLoginInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:PlayerLoginInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 session_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_session_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &session_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 gate_id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_gate_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &gate_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string account = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_account()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->account().data(), this->account().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "PlayerLoginInfo.account");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 guid = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u)) {
          set_has_guid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &guid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string nickname = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_nickname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->nickname().data(), this->nickname().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "PlayerLoginInfo.nickname");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 vip = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u)) {
          set_has_vip();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &vip_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 login_time = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u)) {
          set_has_login_time();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &login_time_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 logout_time = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(64u)) {
          set_has_logout_time();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &logout_time_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool has_bank_password = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(72u)) {
          set_has_has_bank_password();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &has_bank_password_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool is_guest = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(80u)) {
          set_has_is_guest();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_guest_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool is_reconnect = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(88u)) {
          set_has_is_reconnect();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_reconnect_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string alipay_account = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(98u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_alipay_account()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->alipay_account().data(), this->alipay_account().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "PlayerLoginInfo.alipay_account");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string alipay_name = 13;
      case 13: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(106u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_alipay_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->alipay_name().data(), this->alipay_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "PlayerLoginInfo.alipay_name");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 change_alipay_num = 14;
      case 14: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(112u)) {
          set_has_change_alipay_num();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &change_alipay_num_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string phone = 15;
      case 15: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(122u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_phone()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->phone().data(), this->phone().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "PlayerLoginInfo.phone");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string phone_type = 16;
      case 16: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(130u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_phone_type()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->phone_type().data(), this->phone_type().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "PlayerLoginInfo.phone_type");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string version = 17;
      case 17: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(138u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_version()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->version().data(), this->version().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "PlayerLoginInfo.version");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string channel_id = 18;
      case 18: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(146u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_channel_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->channel_id().data(), this->channel_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "PlayerLoginInfo.channel_id");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string package_name = 19;
      case 19: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(154u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_package_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->package_name().data(), this->package_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "PlayerLoginInfo.package_name");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string imei = 20;
      case 20: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(162u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_imei()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->imei().data(), this->imei().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "PlayerLoginInfo.imei");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string ip = 21;
      case 21: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(170u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_ip()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->ip().data(), this->ip().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "PlayerLoginInfo.ip");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 risk = 22;
      case 22: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(176u)) {
          set_has_risk();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &risk_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string ip_area = 23;
      case 23: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(186u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_ip_area()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->ip_area().data(), this->ip_area().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "PlayerLoginInfo.ip_area");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string password = 24;
      case 24: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(194u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_password()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->password().data(), this->password().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "PlayerLoginInfo.password");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string create_channel_id = 25;
      case 25: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(202u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_create_channel_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->create_channel_id().data(), this->create_channel_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "PlayerLoginInfo.create_channel_id");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool enable_transfer = 26;
      case 26: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(208u)) {
          set_has_enable_transfer();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &enable_transfer_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 is_first = 27 [default = 2];
      case 27: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(216u)) {
          set_has_is_first();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &is_first_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 inviter_guid = 28 [default = 0];
      case 28: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(224u)) {
          set_has_inviter_guid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &inviter_guid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string invite_code = 29;
      case 29: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(234u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_invite_code()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->invite_code().data(), this->invite_code().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "PlayerLoginInfo.invite_code");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:PlayerLoginInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:PlayerLoginInfo)
  return false;
#undef DO_
}

void PlayerLoginInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:PlayerLoginInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 session_id = 1;
  if (cached_has_bits & 0x00008000u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->session_id(), output);
  }

  // optional int32 gate_id = 2;
  if (cached_has_bits & 0x00010000u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->gate_id(), output);
  }

  // optional string account = 3;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->account().data(), this->account().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "PlayerLoginInfo.account");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->account(), output);
  }

  // optional int32 guid = 4;
  if (cached_has_bits & 0x00020000u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->guid(), output);
  }

  // optional string nickname = 5;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->nickname().data(), this->nickname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "PlayerLoginInfo.nickname");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->nickname(), output);
  }

  // optional int32 vip = 6;
  if (cached_has_bits & 0x00040000u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->vip(), output);
  }

  // optional int32 login_time = 7;
  if (cached_has_bits & 0x00080000u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->login_time(), output);
  }

  // optional int32 logout_time = 8;
  if (cached_has_bits & 0x00100000u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->logout_time(), output);
  }

  // optional bool has_bank_password = 9;
  if (cached_has_bits & 0x00400000u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(9, this->has_bank_password(), output);
  }

  // optional bool is_guest = 10;
  if (cached_has_bits & 0x00800000u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(10, this->is_guest(), output);
  }

  // optional bool is_reconnect = 11;
  if (cached_has_bits & 0x01000000u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(11, this->is_reconnect(), output);
  }

  // optional string alipay_account = 12;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->alipay_account().data(), this->alipay_account().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "PlayerLoginInfo.alipay_account");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      12, this->alipay_account(), output);
  }

  // optional string alipay_name = 13;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->alipay_name().data(), this->alipay_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "PlayerLoginInfo.alipay_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      13, this->alipay_name(), output);
  }

  // optional int32 change_alipay_num = 14;
  if (cached_has_bits & 0x00200000u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(14, this->change_alipay_num(), output);
  }

  // optional string phone = 15;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->phone().data(), this->phone().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "PlayerLoginInfo.phone");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      15, this->phone(), output);
  }

  // optional string phone_type = 16;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->phone_type().data(), this->phone_type().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "PlayerLoginInfo.phone_type");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      16, this->phone_type(), output);
  }

  // optional string version = 17;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->version().data(), this->version().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "PlayerLoginInfo.version");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      17, this->version(), output);
  }

  // optional string channel_id = 18;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->channel_id().data(), this->channel_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "PlayerLoginInfo.channel_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      18, this->channel_id(), output);
  }

  // optional string package_name = 19;
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->package_name().data(), this->package_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "PlayerLoginInfo.package_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      19, this->package_name(), output);
  }

  // optional string imei = 20;
  if (cached_has_bits & 0x00000200u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->imei().data(), this->imei().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "PlayerLoginInfo.imei");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      20, this->imei(), output);
  }

  // optional string ip = 21;
  if (cached_has_bits & 0x00000400u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->ip().data(), this->ip().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "PlayerLoginInfo.ip");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      21, this->ip(), output);
  }

  // optional int32 risk = 22;
  if (cached_has_bits & 0x04000000u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(22, this->risk(), output);
  }

  // optional string ip_area = 23;
  if (cached_has_bits & 0x00000800u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->ip_area().data(), this->ip_area().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "PlayerLoginInfo.ip_area");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      23, this->ip_area(), output);
  }

  // optional string password = 24;
  if (cached_has_bits & 0x00001000u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->password().data(), this->password().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "PlayerLoginInfo.password");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      24, this->password(), output);
  }

  // optional string create_channel_id = 25;
  if (cached_has_bits & 0x00002000u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->create_channel_id().data(), this->create_channel_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "PlayerLoginInfo.create_channel_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      25, this->create_channel_id(), output);
  }

  // optional bool enable_transfer = 26;
  if (cached_has_bits & 0x02000000u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(26, this->enable_transfer(), output);
  }

  // optional int32 is_first = 27 [default = 2];
  if (cached_has_bits & 0x10000000u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(27, this->is_first(), output);
  }

  // optional int32 inviter_guid = 28 [default = 0];
  if (cached_has_bits & 0x08000000u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(28, this->inviter_guid(), output);
  }

  // optional string invite_code = 29;
  if (cached_has_bits & 0x00004000u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->invite_code().data(), this->invite_code().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "PlayerLoginInfo.invite_code");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      29, this->invite_code(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:PlayerLoginInfo)
}

::google::protobuf::uint8* PlayerLoginInfo::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:PlayerLoginInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 session_id = 1;
  if (cached_has_bits & 0x00008000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->session_id(), target);
  }

  // optional int32 gate_id = 2;
  if (cached_has_bits & 0x00010000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->gate_id(), target);
  }

  // optional string account = 3;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->account().data(), this->account().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "PlayerLoginInfo.account");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->account(), target);
  }

  // optional int32 guid = 4;
  if (cached_has_bits & 0x00020000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->guid(), target);
  }

  // optional string nickname = 5;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->nickname().data(), this->nickname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "PlayerLoginInfo.nickname");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->nickname(), target);
  }

  // optional int32 vip = 6;
  if (cached_has_bits & 0x00040000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->vip(), target);
  }

  // optional int32 login_time = 7;
  if (cached_has_bits & 0x00080000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->login_time(), target);
  }

  // optional int32 logout_time = 8;
  if (cached_has_bits & 0x00100000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->logout_time(), target);
  }

  // optional bool has_bank_password = 9;
  if (cached_has_bits & 0x00400000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(9, this->has_bank_password(), target);
  }

  // optional bool is_guest = 10;
  if (cached_has_bits & 0x00800000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(10, this->is_guest(), target);
  }

  // optional bool is_reconnect = 11;
  if (cached_has_bits & 0x01000000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(11, this->is_reconnect(), target);
  }

  // optional string alipay_account = 12;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->alipay_account().data(), this->alipay_account().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "PlayerLoginInfo.alipay_account");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        12, this->alipay_account(), target);
  }

  // optional string alipay_name = 13;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->alipay_name().data(), this->alipay_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "PlayerLoginInfo.alipay_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        13, this->alipay_name(), target);
  }

  // optional int32 change_alipay_num = 14;
  if (cached_has_bits & 0x00200000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(14, this->change_alipay_num(), target);
  }

  // optional string phone = 15;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->phone().data(), this->phone().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "PlayerLoginInfo.phone");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        15, this->phone(), target);
  }

  // optional string phone_type = 16;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->phone_type().data(), this->phone_type().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "PlayerLoginInfo.phone_type");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        16, this->phone_type(), target);
  }

  // optional string version = 17;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->version().data(), this->version().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "PlayerLoginInfo.version");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        17, this->version(), target);
  }

  // optional string channel_id = 18;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->channel_id().data(), this->channel_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "PlayerLoginInfo.channel_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        18, this->channel_id(), target);
  }

  // optional string package_name = 19;
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->package_name().data(), this->package_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "PlayerLoginInfo.package_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        19, this->package_name(), target);
  }

  // optional string imei = 20;
  if (cached_has_bits & 0x00000200u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->imei().data(), this->imei().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "PlayerLoginInfo.imei");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        20, this->imei(), target);
  }

  // optional string ip = 21;
  if (cached_has_bits & 0x00000400u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->ip().data(), this->ip().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "PlayerLoginInfo.ip");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        21, this->ip(), target);
  }

  // optional int32 risk = 22;
  if (cached_has_bits & 0x04000000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(22, this->risk(), target);
  }

  // optional string ip_area = 23;
  if (cached_has_bits & 0x00000800u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->ip_area().data(), this->ip_area().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "PlayerLoginInfo.ip_area");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        23, this->ip_area(), target);
  }

  // optional string password = 24;
  if (cached_has_bits & 0x00001000u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->password().data(), this->password().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "PlayerLoginInfo.password");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        24, this->password(), target);
  }

  // optional string create_channel_id = 25;
  if (cached_has_bits & 0x00002000u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->create_channel_id().data(), this->create_channel_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "PlayerLoginInfo.create_channel_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        25, this->create_channel_id(), target);
  }

  // optional bool enable_transfer = 26;
  if (cached_has_bits & 0x02000000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(26, this->enable_transfer(), target);
  }

  // optional int32 is_first = 27 [default = 2];
  if (cached_has_bits & 0x10000000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(27, this->is_first(), target);
  }

  // optional int32 inviter_guid = 28 [default = 0];
  if (cached_has_bits & 0x08000000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(28, this->inviter_guid(), target);
  }

  // optional string invite_code = 29;
  if (cached_has_bits & 0x00004000u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->invite_code().data(), this->invite_code().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "PlayerLoginInfo.invite_code");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        29, this->invite_code(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:PlayerLoginInfo)
  return target;
}

size_t PlayerLoginInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:PlayerLoginInfo)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 255u) {
    // optional string account = 3;
    if (has_account()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->account());
    }

    // optional string nickname = 5;
    if (has_nickname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->nickname());
    }

    // optional string alipay_account = 12;
    if (has_alipay_account()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->alipay_account());
    }

    // optional string alipay_name = 13;
    if (has_alipay_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->alipay_name());
    }

    // optional string phone = 15;
    if (has_phone()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->phone());
    }

    // optional string phone_type = 16;
    if (has_phone_type()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->phone_type());
    }

    // optional string version = 17;
    if (has_version()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->version());
    }

    // optional string channel_id = 18;
    if (has_channel_id()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->channel_id());
    }

  }
  if (_has_bits_[8 / 32] & 65280u) {
    // optional string package_name = 19;
    if (has_package_name()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->package_name());
    }

    // optional string imei = 20;
    if (has_imei()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->imei());
    }

    // optional string ip = 21;
    if (has_ip()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->ip());
    }

    // optional string ip_area = 23;
    if (has_ip_area()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->ip_area());
    }

    // optional string password = 24;
    if (has_password()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->password());
    }

    // optional string create_channel_id = 25;
    if (has_create_channel_id()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->create_channel_id());
    }

    // optional string invite_code = 29;
    if (has_invite_code()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->invite_code());
    }

    // optional int32 session_id = 1;
    if (has_session_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->session_id());
    }

  }
  if (_has_bits_[16 / 32] & 16711680u) {
    // optional int32 gate_id = 2;
    if (has_gate_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->gate_id());
    }

    // optional int32 guid = 4;
    if (has_guid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->guid());
    }

    // optional int32 vip = 6;
    if (has_vip()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->vip());
    }

    // optional int32 login_time = 7;
    if (has_login_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->login_time());
    }

    // optional int32 logout_time = 8;
    if (has_logout_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->logout_time());
    }

    // optional int32 change_alipay_num = 14;
    if (has_change_alipay_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->change_alipay_num());
    }

    // optional bool has_bank_password = 9;
    if (has_has_bank_password()) {
      total_size += 1 + 1;
    }

    // optional bool is_guest = 10;
    if (has_is_guest()) {
      total_size += 1 + 1;
    }

  }
  if (_has_bits_[24 / 32] & 520093696u) {
    // optional bool is_reconnect = 11;
    if (has_is_reconnect()) {
      total_size += 1 + 1;
    }

    // optional bool enable_transfer = 26;
    if (has_enable_transfer()) {
      total_size += 2 + 1;
    }

    // optional int32 risk = 22;
    if (has_risk()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->risk());
    }

    // optional int32 inviter_guid = 28 [default = 0];
    if (has_inviter_guid()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->inviter_guid());
    }

    // optional int32 is_first = 27 [default = 2];
    if (has_is_first()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->is_first());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PlayerLoginInfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:PlayerLoginInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const PlayerLoginInfo* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const PlayerLoginInfo>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:PlayerLoginInfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:PlayerLoginInfo)
    MergeFrom(*source);
  }
}

void PlayerLoginInfo::MergeFrom(const PlayerLoginInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:PlayerLoginInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_account();
      account_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.account_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_nickname();
      nickname_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.nickname_);
    }
    if (cached_has_bits & 0x00000004u) {
      set_has_alipay_account();
      alipay_account_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.alipay_account_);
    }
    if (cached_has_bits & 0x00000008u) {
      set_has_alipay_name();
      alipay_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.alipay_name_);
    }
    if (cached_has_bits & 0x00000010u) {
      set_has_phone();
      phone_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.phone_);
    }
    if (cached_has_bits & 0x00000020u) {
      set_has_phone_type();
      phone_type_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.phone_type_);
    }
    if (cached_has_bits & 0x00000040u) {
      set_has_version();
      version_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.version_);
    }
    if (cached_has_bits & 0x00000080u) {
      set_has_channel_id();
      channel_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.channel_id_);
    }
  }
  if (cached_has_bits & 65280u) {
    if (cached_has_bits & 0x00000100u) {
      set_has_package_name();
      package_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.package_name_);
    }
    if (cached_has_bits & 0x00000200u) {
      set_has_imei();
      imei_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.imei_);
    }
    if (cached_has_bits & 0x00000400u) {
      set_has_ip();
      ip_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.ip_);
    }
    if (cached_has_bits & 0x00000800u) {
      set_has_ip_area();
      ip_area_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.ip_area_);
    }
    if (cached_has_bits & 0x00001000u) {
      set_has_password();
      password_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.password_);
    }
    if (cached_has_bits & 0x00002000u) {
      set_has_create_channel_id();
      create_channel_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.create_channel_id_);
    }
    if (cached_has_bits & 0x00004000u) {
      set_has_invite_code();
      invite_code_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.invite_code_);
    }
    if (cached_has_bits & 0x00008000u) {
      session_id_ = from.session_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 16711680u) {
    if (cached_has_bits & 0x00010000u) {
      gate_id_ = from.gate_id_;
    }
    if (cached_has_bits & 0x00020000u) {
      guid_ = from.guid_;
    }
    if (cached_has_bits & 0x00040000u) {
      vip_ = from.vip_;
    }
    if (cached_has_bits & 0x00080000u) {
      login_time_ = from.login_time_;
    }
    if (cached_has_bits & 0x00100000u) {
      logout_time_ = from.logout_time_;
    }
    if (cached_has_bits & 0x00200000u) {
      change_alipay_num_ = from.change_alipay_num_;
    }
    if (cached_has_bits & 0x00400000u) {
      has_bank_password_ = from.has_bank_password_;
    }
    if (cached_has_bits & 0x00800000u) {
      is_guest_ = from.is_guest_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 520093696u) {
    if (cached_has_bits & 0x01000000u) {
      is_reconnect_ = from.is_reconnect_;
    }
    if (cached_has_bits & 0x02000000u) {
      enable_transfer_ = from.enable_transfer_;
    }
    if (cached_has_bits & 0x04000000u) {
      risk_ = from.risk_;
    }
    if (cached_has_bits & 0x08000000u) {
      inviter_guid_ = from.inviter_guid_;
    }
    if (cached_has_bits & 0x10000000u) {
      is_first_ = from.is_first_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void PlayerLoginInfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:PlayerLoginInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PlayerLoginInfo::CopyFrom(const PlayerLoginInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:PlayerLoginInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PlayerLoginInfo::IsInitialized() const {
  return true;
}

void PlayerLoginInfo::Swap(PlayerLoginInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PlayerLoginInfo::InternalSwap(PlayerLoginInfo* other) {
  account_.Swap(&other->account_);
  nickname_.Swap(&other->nickname_);
  alipay_account_.Swap(&other->alipay_account_);
  alipay_name_.Swap(&other->alipay_name_);
  phone_.Swap(&other->phone_);
  phone_type_.Swap(&other->phone_type_);
  version_.Swap(&other->version_);
  channel_id_.Swap(&other->channel_id_);
  package_name_.Swap(&other->package_name_);
  imei_.Swap(&other->imei_);
  ip_.Swap(&other->ip_);
  ip_area_.Swap(&other->ip_area_);
  password_.Swap(&other->password_);
  create_channel_id_.Swap(&other->create_channel_id_);
  invite_code_.Swap(&other->invite_code_);
  std::swap(session_id_, other->session_id_);
  std::swap(gate_id_, other->gate_id_);
  std::swap(guid_, other->guid_);
  std::swap(vip_, other->vip_);
  std::swap(login_time_, other->login_time_);
  std::swap(logout_time_, other->logout_time_);
  std::swap(change_alipay_num_, other->change_alipay_num_);
  std::swap(has_bank_password_, other->has_bank_password_);
  std::swap(is_guest_, other->is_guest_);
  std::swap(is_reconnect_, other->is_reconnect_);
  std::swap(enable_transfer_, other->enable_transfer_);
  std::swap(risk_, other->risk_);
  std::swap(inviter_guid_, other->inviter_guid_);
  std::swap(is_first_, other->is_first_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata PlayerLoginInfo::GetMetadata() const {
  protobuf_redis_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_redis_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// PlayerLoginInfo

// optional int32 session_id = 1;
bool PlayerLoginInfo::has_session_id() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
void PlayerLoginInfo::set_has_session_id() {
  _has_bits_[0] |= 0x00008000u;
}
void PlayerLoginInfo::clear_has_session_id() {
  _has_bits_[0] &= ~0x00008000u;
}
void PlayerLoginInfo::clear_session_id() {
  session_id_ = 0;
  clear_has_session_id();
}
::google::protobuf::int32 PlayerLoginInfo::session_id() const {
  // @@protoc_insertion_point(field_get:PlayerLoginInfo.session_id)
  return session_id_;
}
void PlayerLoginInfo::set_session_id(::google::protobuf::int32 value) {
  set_has_session_id();
  session_id_ = value;
  // @@protoc_insertion_point(field_set:PlayerLoginInfo.session_id)
}

// optional int32 gate_id = 2;
bool PlayerLoginInfo::has_gate_id() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
void PlayerLoginInfo::set_has_gate_id() {
  _has_bits_[0] |= 0x00010000u;
}
void PlayerLoginInfo::clear_has_gate_id() {
  _has_bits_[0] &= ~0x00010000u;
}
void PlayerLoginInfo::clear_gate_id() {
  gate_id_ = 0;
  clear_has_gate_id();
}
::google::protobuf::int32 PlayerLoginInfo::gate_id() const {
  // @@protoc_insertion_point(field_get:PlayerLoginInfo.gate_id)
  return gate_id_;
}
void PlayerLoginInfo::set_gate_id(::google::protobuf::int32 value) {
  set_has_gate_id();
  gate_id_ = value;
  // @@protoc_insertion_point(field_set:PlayerLoginInfo.gate_id)
}

// optional string account = 3;
bool PlayerLoginInfo::has_account() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void PlayerLoginInfo::set_has_account() {
  _has_bits_[0] |= 0x00000001u;
}
void PlayerLoginInfo::clear_has_account() {
  _has_bits_[0] &= ~0x00000001u;
}
void PlayerLoginInfo::clear_account() {
  account_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_account();
}
const ::std::string& PlayerLoginInfo::account() const {
  // @@protoc_insertion_point(field_get:PlayerLoginInfo.account)
  return account_.GetNoArena();
}
void PlayerLoginInfo::set_account(const ::std::string& value) {
  set_has_account();
  account_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:PlayerLoginInfo.account)
}
#if LANG_CXX11
void PlayerLoginInfo::set_account(::std::string&& value) {
  set_has_account();
  account_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:PlayerLoginInfo.account)
}
#endif
void PlayerLoginInfo::set_account(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_account();
  account_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:PlayerLoginInfo.account)
}
void PlayerLoginInfo::set_account(const char* value, size_t size) {
  set_has_account();
  account_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:PlayerLoginInfo.account)
}
::std::string* PlayerLoginInfo::mutable_account() {
  set_has_account();
  // @@protoc_insertion_point(field_mutable:PlayerLoginInfo.account)
  return account_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* PlayerLoginInfo::release_account() {
  // @@protoc_insertion_point(field_release:PlayerLoginInfo.account)
  clear_has_account();
  return account_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void PlayerLoginInfo::set_allocated_account(::std::string* account) {
  if (account != NULL) {
    set_has_account();
  } else {
    clear_has_account();
  }
  account_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), account);
  // @@protoc_insertion_point(field_set_allocated:PlayerLoginInfo.account)
}

// optional int32 guid = 4;
bool PlayerLoginInfo::has_guid() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
void PlayerLoginInfo::set_has_guid() {
  _has_bits_[0] |= 0x00020000u;
}
void PlayerLoginInfo::clear_has_guid() {
  _has_bits_[0] &= ~0x00020000u;
}
void PlayerLoginInfo::clear_guid() {
  guid_ = 0;
  clear_has_guid();
}
::google::protobuf::int32 PlayerLoginInfo::guid() const {
  // @@protoc_insertion_point(field_get:PlayerLoginInfo.guid)
  return guid_;
}
void PlayerLoginInfo::set_guid(::google::protobuf::int32 value) {
  set_has_guid();
  guid_ = value;
  // @@protoc_insertion_point(field_set:PlayerLoginInfo.guid)
}

// optional string nickname = 5;
bool PlayerLoginInfo::has_nickname() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void PlayerLoginInfo::set_has_nickname() {
  _has_bits_[0] |= 0x00000002u;
}
void PlayerLoginInfo::clear_has_nickname() {
  _has_bits_[0] &= ~0x00000002u;
}
void PlayerLoginInfo::clear_nickname() {
  nickname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_nickname();
}
const ::std::string& PlayerLoginInfo::nickname() const {
  // @@protoc_insertion_point(field_get:PlayerLoginInfo.nickname)
  return nickname_.GetNoArena();
}
void PlayerLoginInfo::set_nickname(const ::std::string& value) {
  set_has_nickname();
  nickname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:PlayerLoginInfo.nickname)
}
#if LANG_CXX11
void PlayerLoginInfo::set_nickname(::std::string&& value) {
  set_has_nickname();
  nickname_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:PlayerLoginInfo.nickname)
}
#endif
void PlayerLoginInfo::set_nickname(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_nickname();
  nickname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:PlayerLoginInfo.nickname)
}
void PlayerLoginInfo::set_nickname(const char* value, size_t size) {
  set_has_nickname();
  nickname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:PlayerLoginInfo.nickname)
}
::std::string* PlayerLoginInfo::mutable_nickname() {
  set_has_nickname();
  // @@protoc_insertion_point(field_mutable:PlayerLoginInfo.nickname)
  return nickname_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* PlayerLoginInfo::release_nickname() {
  // @@protoc_insertion_point(field_release:PlayerLoginInfo.nickname)
  clear_has_nickname();
  return nickname_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void PlayerLoginInfo::set_allocated_nickname(::std::string* nickname) {
  if (nickname != NULL) {
    set_has_nickname();
  } else {
    clear_has_nickname();
  }
  nickname_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), nickname);
  // @@protoc_insertion_point(field_set_allocated:PlayerLoginInfo.nickname)
}

// optional int32 vip = 6;
bool PlayerLoginInfo::has_vip() const {
  return (_has_bits_[0] & 0x00040000u) != 0;
}
void PlayerLoginInfo::set_has_vip() {
  _has_bits_[0] |= 0x00040000u;
}
void PlayerLoginInfo::clear_has_vip() {
  _has_bits_[0] &= ~0x00040000u;
}
void PlayerLoginInfo::clear_vip() {
  vip_ = 0;
  clear_has_vip();
}
::google::protobuf::int32 PlayerLoginInfo::vip() const {
  // @@protoc_insertion_point(field_get:PlayerLoginInfo.vip)
  return vip_;
}
void PlayerLoginInfo::set_vip(::google::protobuf::int32 value) {
  set_has_vip();
  vip_ = value;
  // @@protoc_insertion_point(field_set:PlayerLoginInfo.vip)
}

// optional int32 login_time = 7;
bool PlayerLoginInfo::has_login_time() const {
  return (_has_bits_[0] & 0x00080000u) != 0;
}
void PlayerLoginInfo::set_has_login_time() {
  _has_bits_[0] |= 0x00080000u;
}
void PlayerLoginInfo::clear_has_login_time() {
  _has_bits_[0] &= ~0x00080000u;
}
void PlayerLoginInfo::clear_login_time() {
  login_time_ = 0;
  clear_has_login_time();
}
::google::protobuf::int32 PlayerLoginInfo::login_time() const {
  // @@protoc_insertion_point(field_get:PlayerLoginInfo.login_time)
  return login_time_;
}
void PlayerLoginInfo::set_login_time(::google::protobuf::int32 value) {
  set_has_login_time();
  login_time_ = value;
  // @@protoc_insertion_point(field_set:PlayerLoginInfo.login_time)
}

// optional int32 logout_time = 8;
bool PlayerLoginInfo::has_logout_time() const {
  return (_has_bits_[0] & 0x00100000u) != 0;
}
void PlayerLoginInfo::set_has_logout_time() {
  _has_bits_[0] |= 0x00100000u;
}
void PlayerLoginInfo::clear_has_logout_time() {
  _has_bits_[0] &= ~0x00100000u;
}
void PlayerLoginInfo::clear_logout_time() {
  logout_time_ = 0;
  clear_has_logout_time();
}
::google::protobuf::int32 PlayerLoginInfo::logout_time() const {
  // @@protoc_insertion_point(field_get:PlayerLoginInfo.logout_time)
  return logout_time_;
}
void PlayerLoginInfo::set_logout_time(::google::protobuf::int32 value) {
  set_has_logout_time();
  logout_time_ = value;
  // @@protoc_insertion_point(field_set:PlayerLoginInfo.logout_time)
}

// optional bool has_bank_password = 9;
bool PlayerLoginInfo::has_has_bank_password() const {
  return (_has_bits_[0] & 0x00400000u) != 0;
}
void PlayerLoginInfo::set_has_has_bank_password() {
  _has_bits_[0] |= 0x00400000u;
}
void PlayerLoginInfo::clear_has_has_bank_password() {
  _has_bits_[0] &= ~0x00400000u;
}
void PlayerLoginInfo::clear_has_bank_password() {
  has_bank_password_ = false;
  clear_has_has_bank_password();
}
bool PlayerLoginInfo::has_bank_password() const {
  // @@protoc_insertion_point(field_get:PlayerLoginInfo.has_bank_password)
  return has_bank_password_;
}
void PlayerLoginInfo::set_has_bank_password(bool value) {
  set_has_has_bank_password();
  has_bank_password_ = value;
  // @@protoc_insertion_point(field_set:PlayerLoginInfo.has_bank_password)
}

// optional bool is_guest = 10;
bool PlayerLoginInfo::has_is_guest() const {
  return (_has_bits_[0] & 0x00800000u) != 0;
}
void PlayerLoginInfo::set_has_is_guest() {
  _has_bits_[0] |= 0x00800000u;
}
void PlayerLoginInfo::clear_has_is_guest() {
  _has_bits_[0] &= ~0x00800000u;
}
void PlayerLoginInfo::clear_is_guest() {
  is_guest_ = false;
  clear_has_is_guest();
}
bool PlayerLoginInfo::is_guest() const {
  // @@protoc_insertion_point(field_get:PlayerLoginInfo.is_guest)
  return is_guest_;
}
void PlayerLoginInfo::set_is_guest(bool value) {
  set_has_is_guest();
  is_guest_ = value;
  // @@protoc_insertion_point(field_set:PlayerLoginInfo.is_guest)
}

// optional bool is_reconnect = 11;
bool PlayerLoginInfo::has_is_reconnect() const {
  return (_has_bits_[0] & 0x01000000u) != 0;
}
void PlayerLoginInfo::set_has_is_reconnect() {
  _has_bits_[0] |= 0x01000000u;
}
void PlayerLoginInfo::clear_has_is_reconnect() {
  _has_bits_[0] &= ~0x01000000u;
}
void PlayerLoginInfo::clear_is_reconnect() {
  is_reconnect_ = false;
  clear_has_is_reconnect();
}
bool PlayerLoginInfo::is_reconnect() const {
  // @@protoc_insertion_point(field_get:PlayerLoginInfo.is_reconnect)
  return is_reconnect_;
}
void PlayerLoginInfo::set_is_reconnect(bool value) {
  set_has_is_reconnect();
  is_reconnect_ = value;
  // @@protoc_insertion_point(field_set:PlayerLoginInfo.is_reconnect)
}

// optional string alipay_account = 12;
bool PlayerLoginInfo::has_alipay_account() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void PlayerLoginInfo::set_has_alipay_account() {
  _has_bits_[0] |= 0x00000004u;
}
void PlayerLoginInfo::clear_has_alipay_account() {
  _has_bits_[0] &= ~0x00000004u;
}
void PlayerLoginInfo::clear_alipay_account() {
  alipay_account_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_alipay_account();
}
const ::std::string& PlayerLoginInfo::alipay_account() const {
  // @@protoc_insertion_point(field_get:PlayerLoginInfo.alipay_account)
  return alipay_account_.GetNoArena();
}
void PlayerLoginInfo::set_alipay_account(const ::std::string& value) {
  set_has_alipay_account();
  alipay_account_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:PlayerLoginInfo.alipay_account)
}
#if LANG_CXX11
void PlayerLoginInfo::set_alipay_account(::std::string&& value) {
  set_has_alipay_account();
  alipay_account_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:PlayerLoginInfo.alipay_account)
}
#endif
void PlayerLoginInfo::set_alipay_account(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_alipay_account();
  alipay_account_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:PlayerLoginInfo.alipay_account)
}
void PlayerLoginInfo::set_alipay_account(const char* value, size_t size) {
  set_has_alipay_account();
  alipay_account_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:PlayerLoginInfo.alipay_account)
}
::std::string* PlayerLoginInfo::mutable_alipay_account() {
  set_has_alipay_account();
  // @@protoc_insertion_point(field_mutable:PlayerLoginInfo.alipay_account)
  return alipay_account_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* PlayerLoginInfo::release_alipay_account() {
  // @@protoc_insertion_point(field_release:PlayerLoginInfo.alipay_account)
  clear_has_alipay_account();
  return alipay_account_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void PlayerLoginInfo::set_allocated_alipay_account(::std::string* alipay_account) {
  if (alipay_account != NULL) {
    set_has_alipay_account();
  } else {
    clear_has_alipay_account();
  }
  alipay_account_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), alipay_account);
  // @@protoc_insertion_point(field_set_allocated:PlayerLoginInfo.alipay_account)
}

// optional string alipay_name = 13;
bool PlayerLoginInfo::has_alipay_name() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void PlayerLoginInfo::set_has_alipay_name() {
  _has_bits_[0] |= 0x00000008u;
}
void PlayerLoginInfo::clear_has_alipay_name() {
  _has_bits_[0] &= ~0x00000008u;
}
void PlayerLoginInfo::clear_alipay_name() {
  alipay_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_alipay_name();
}
const ::std::string& PlayerLoginInfo::alipay_name() const {
  // @@protoc_insertion_point(field_get:PlayerLoginInfo.alipay_name)
  return alipay_name_.GetNoArena();
}
void PlayerLoginInfo::set_alipay_name(const ::std::string& value) {
  set_has_alipay_name();
  alipay_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:PlayerLoginInfo.alipay_name)
}
#if LANG_CXX11
void PlayerLoginInfo::set_alipay_name(::std::string&& value) {
  set_has_alipay_name();
  alipay_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:PlayerLoginInfo.alipay_name)
}
#endif
void PlayerLoginInfo::set_alipay_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_alipay_name();
  alipay_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:PlayerLoginInfo.alipay_name)
}
void PlayerLoginInfo::set_alipay_name(const char* value, size_t size) {
  set_has_alipay_name();
  alipay_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:PlayerLoginInfo.alipay_name)
}
::std::string* PlayerLoginInfo::mutable_alipay_name() {
  set_has_alipay_name();
  // @@protoc_insertion_point(field_mutable:PlayerLoginInfo.alipay_name)
  return alipay_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* PlayerLoginInfo::release_alipay_name() {
  // @@protoc_insertion_point(field_release:PlayerLoginInfo.alipay_name)
  clear_has_alipay_name();
  return alipay_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void PlayerLoginInfo::set_allocated_alipay_name(::std::string* alipay_name) {
  if (alipay_name != NULL) {
    set_has_alipay_name();
  } else {
    clear_has_alipay_name();
  }
  alipay_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), alipay_name);
  // @@protoc_insertion_point(field_set_allocated:PlayerLoginInfo.alipay_name)
}

// optional int32 change_alipay_num = 14;
bool PlayerLoginInfo::has_change_alipay_num() const {
  return (_has_bits_[0] & 0x00200000u) != 0;
}
void PlayerLoginInfo::set_has_change_alipay_num() {
  _has_bits_[0] |= 0x00200000u;
}
void PlayerLoginInfo::clear_has_change_alipay_num() {
  _has_bits_[0] &= ~0x00200000u;
}
void PlayerLoginInfo::clear_change_alipay_num() {
  change_alipay_num_ = 0;
  clear_has_change_alipay_num();
}
::google::protobuf::int32 PlayerLoginInfo::change_alipay_num() const {
  // @@protoc_insertion_point(field_get:PlayerLoginInfo.change_alipay_num)
  return change_alipay_num_;
}
void PlayerLoginInfo::set_change_alipay_num(::google::protobuf::int32 value) {
  set_has_change_alipay_num();
  change_alipay_num_ = value;
  // @@protoc_insertion_point(field_set:PlayerLoginInfo.change_alipay_num)
}

// optional string phone = 15;
bool PlayerLoginInfo::has_phone() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void PlayerLoginInfo::set_has_phone() {
  _has_bits_[0] |= 0x00000010u;
}
void PlayerLoginInfo::clear_has_phone() {
  _has_bits_[0] &= ~0x00000010u;
}
void PlayerLoginInfo::clear_phone() {
  phone_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_phone();
}
const ::std::string& PlayerLoginInfo::phone() const {
  // @@protoc_insertion_point(field_get:PlayerLoginInfo.phone)
  return phone_.GetNoArena();
}
void PlayerLoginInfo::set_phone(const ::std::string& value) {
  set_has_phone();
  phone_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:PlayerLoginInfo.phone)
}
#if LANG_CXX11
void PlayerLoginInfo::set_phone(::std::string&& value) {
  set_has_phone();
  phone_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:PlayerLoginInfo.phone)
}
#endif
void PlayerLoginInfo::set_phone(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_phone();
  phone_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:PlayerLoginInfo.phone)
}
void PlayerLoginInfo::set_phone(const char* value, size_t size) {
  set_has_phone();
  phone_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:PlayerLoginInfo.phone)
}
::std::string* PlayerLoginInfo::mutable_phone() {
  set_has_phone();
  // @@protoc_insertion_point(field_mutable:PlayerLoginInfo.phone)
  return phone_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* PlayerLoginInfo::release_phone() {
  // @@protoc_insertion_point(field_release:PlayerLoginInfo.phone)
  clear_has_phone();
  return phone_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void PlayerLoginInfo::set_allocated_phone(::std::string* phone) {
  if (phone != NULL) {
    set_has_phone();
  } else {
    clear_has_phone();
  }
  phone_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), phone);
  // @@protoc_insertion_point(field_set_allocated:PlayerLoginInfo.phone)
}

// optional string phone_type = 16;
bool PlayerLoginInfo::has_phone_type() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void PlayerLoginInfo::set_has_phone_type() {
  _has_bits_[0] |= 0x00000020u;
}
void PlayerLoginInfo::clear_has_phone_type() {
  _has_bits_[0] &= ~0x00000020u;
}
void PlayerLoginInfo::clear_phone_type() {
  phone_type_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_phone_type();
}
const ::std::string& PlayerLoginInfo::phone_type() const {
  // @@protoc_insertion_point(field_get:PlayerLoginInfo.phone_type)
  return phone_type_.GetNoArena();
}
void PlayerLoginInfo::set_phone_type(const ::std::string& value) {
  set_has_phone_type();
  phone_type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:PlayerLoginInfo.phone_type)
}
#if LANG_CXX11
void PlayerLoginInfo::set_phone_type(::std::string&& value) {
  set_has_phone_type();
  phone_type_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:PlayerLoginInfo.phone_type)
}
#endif
void PlayerLoginInfo::set_phone_type(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_phone_type();
  phone_type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:PlayerLoginInfo.phone_type)
}
void PlayerLoginInfo::set_phone_type(const char* value, size_t size) {
  set_has_phone_type();
  phone_type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:PlayerLoginInfo.phone_type)
}
::std::string* PlayerLoginInfo::mutable_phone_type() {
  set_has_phone_type();
  // @@protoc_insertion_point(field_mutable:PlayerLoginInfo.phone_type)
  return phone_type_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* PlayerLoginInfo::release_phone_type() {
  // @@protoc_insertion_point(field_release:PlayerLoginInfo.phone_type)
  clear_has_phone_type();
  return phone_type_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void PlayerLoginInfo::set_allocated_phone_type(::std::string* phone_type) {
  if (phone_type != NULL) {
    set_has_phone_type();
  } else {
    clear_has_phone_type();
  }
  phone_type_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), phone_type);
  // @@protoc_insertion_point(field_set_allocated:PlayerLoginInfo.phone_type)
}

// optional string version = 17;
bool PlayerLoginInfo::has_version() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void PlayerLoginInfo::set_has_version() {
  _has_bits_[0] |= 0x00000040u;
}
void PlayerLoginInfo::clear_has_version() {
  _has_bits_[0] &= ~0x00000040u;
}
void PlayerLoginInfo::clear_version() {
  version_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_version();
}
const ::std::string& PlayerLoginInfo::version() const {
  // @@protoc_insertion_point(field_get:PlayerLoginInfo.version)
  return version_.GetNoArena();
}
void PlayerLoginInfo::set_version(const ::std::string& value) {
  set_has_version();
  version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:PlayerLoginInfo.version)
}
#if LANG_CXX11
void PlayerLoginInfo::set_version(::std::string&& value) {
  set_has_version();
  version_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:PlayerLoginInfo.version)
}
#endif
void PlayerLoginInfo::set_version(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_version();
  version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:PlayerLoginInfo.version)
}
void PlayerLoginInfo::set_version(const char* value, size_t size) {
  set_has_version();
  version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:PlayerLoginInfo.version)
}
::std::string* PlayerLoginInfo::mutable_version() {
  set_has_version();
  // @@protoc_insertion_point(field_mutable:PlayerLoginInfo.version)
  return version_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* PlayerLoginInfo::release_version() {
  // @@protoc_insertion_point(field_release:PlayerLoginInfo.version)
  clear_has_version();
  return version_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void PlayerLoginInfo::set_allocated_version(::std::string* version) {
  if (version != NULL) {
    set_has_version();
  } else {
    clear_has_version();
  }
  version_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), version);
  // @@protoc_insertion_point(field_set_allocated:PlayerLoginInfo.version)
}

// optional string channel_id = 18;
bool PlayerLoginInfo::has_channel_id() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void PlayerLoginInfo::set_has_channel_id() {
  _has_bits_[0] |= 0x00000080u;
}
void PlayerLoginInfo::clear_has_channel_id() {
  _has_bits_[0] &= ~0x00000080u;
}
void PlayerLoginInfo::clear_channel_id() {
  channel_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_channel_id();
}
const ::std::string& PlayerLoginInfo::channel_id() const {
  // @@protoc_insertion_point(field_get:PlayerLoginInfo.channel_id)
  return channel_id_.GetNoArena();
}
void PlayerLoginInfo::set_channel_id(const ::std::string& value) {
  set_has_channel_id();
  channel_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:PlayerLoginInfo.channel_id)
}
#if LANG_CXX11
void PlayerLoginInfo::set_channel_id(::std::string&& value) {
  set_has_channel_id();
  channel_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:PlayerLoginInfo.channel_id)
}
#endif
void PlayerLoginInfo::set_channel_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_channel_id();
  channel_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:PlayerLoginInfo.channel_id)
}
void PlayerLoginInfo::set_channel_id(const char* value, size_t size) {
  set_has_channel_id();
  channel_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:PlayerLoginInfo.channel_id)
}
::std::string* PlayerLoginInfo::mutable_channel_id() {
  set_has_channel_id();
  // @@protoc_insertion_point(field_mutable:PlayerLoginInfo.channel_id)
  return channel_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* PlayerLoginInfo::release_channel_id() {
  // @@protoc_insertion_point(field_release:PlayerLoginInfo.channel_id)
  clear_has_channel_id();
  return channel_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void PlayerLoginInfo::set_allocated_channel_id(::std::string* channel_id) {
  if (channel_id != NULL) {
    set_has_channel_id();
  } else {
    clear_has_channel_id();
  }
  channel_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), channel_id);
  // @@protoc_insertion_point(field_set_allocated:PlayerLoginInfo.channel_id)
}

// optional string package_name = 19;
bool PlayerLoginInfo::has_package_name() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
void PlayerLoginInfo::set_has_package_name() {
  _has_bits_[0] |= 0x00000100u;
}
void PlayerLoginInfo::clear_has_package_name() {
  _has_bits_[0] &= ~0x00000100u;
}
void PlayerLoginInfo::clear_package_name() {
  package_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_package_name();
}
const ::std::string& PlayerLoginInfo::package_name() const {
  // @@protoc_insertion_point(field_get:PlayerLoginInfo.package_name)
  return package_name_.GetNoArena();
}
void PlayerLoginInfo::set_package_name(const ::std::string& value) {
  set_has_package_name();
  package_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:PlayerLoginInfo.package_name)
}
#if LANG_CXX11
void PlayerLoginInfo::set_package_name(::std::string&& value) {
  set_has_package_name();
  package_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:PlayerLoginInfo.package_name)
}
#endif
void PlayerLoginInfo::set_package_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_package_name();
  package_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:PlayerLoginInfo.package_name)
}
void PlayerLoginInfo::set_package_name(const char* value, size_t size) {
  set_has_package_name();
  package_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:PlayerLoginInfo.package_name)
}
::std::string* PlayerLoginInfo::mutable_package_name() {
  set_has_package_name();
  // @@protoc_insertion_point(field_mutable:PlayerLoginInfo.package_name)
  return package_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* PlayerLoginInfo::release_package_name() {
  // @@protoc_insertion_point(field_release:PlayerLoginInfo.package_name)
  clear_has_package_name();
  return package_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void PlayerLoginInfo::set_allocated_package_name(::std::string* package_name) {
  if (package_name != NULL) {
    set_has_package_name();
  } else {
    clear_has_package_name();
  }
  package_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), package_name);
  // @@protoc_insertion_point(field_set_allocated:PlayerLoginInfo.package_name)
}

// optional string imei = 20;
bool PlayerLoginInfo::has_imei() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
void PlayerLoginInfo::set_has_imei() {
  _has_bits_[0] |= 0x00000200u;
}
void PlayerLoginInfo::clear_has_imei() {
  _has_bits_[0] &= ~0x00000200u;
}
void PlayerLoginInfo::clear_imei() {
  imei_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_imei();
}
const ::std::string& PlayerLoginInfo::imei() const {
  // @@protoc_insertion_point(field_get:PlayerLoginInfo.imei)
  return imei_.GetNoArena();
}
void PlayerLoginInfo::set_imei(const ::std::string& value) {
  set_has_imei();
  imei_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:PlayerLoginInfo.imei)
}
#if LANG_CXX11
void PlayerLoginInfo::set_imei(::std::string&& value) {
  set_has_imei();
  imei_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:PlayerLoginInfo.imei)
}
#endif
void PlayerLoginInfo::set_imei(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_imei();
  imei_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:PlayerLoginInfo.imei)
}
void PlayerLoginInfo::set_imei(const char* value, size_t size) {
  set_has_imei();
  imei_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:PlayerLoginInfo.imei)
}
::std::string* PlayerLoginInfo::mutable_imei() {
  set_has_imei();
  // @@protoc_insertion_point(field_mutable:PlayerLoginInfo.imei)
  return imei_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* PlayerLoginInfo::release_imei() {
  // @@protoc_insertion_point(field_release:PlayerLoginInfo.imei)
  clear_has_imei();
  return imei_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void PlayerLoginInfo::set_allocated_imei(::std::string* imei) {
  if (imei != NULL) {
    set_has_imei();
  } else {
    clear_has_imei();
  }
  imei_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), imei);
  // @@protoc_insertion_point(field_set_allocated:PlayerLoginInfo.imei)
}

// optional string ip = 21;
bool PlayerLoginInfo::has_ip() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
void PlayerLoginInfo::set_has_ip() {
  _has_bits_[0] |= 0x00000400u;
}
void PlayerLoginInfo::clear_has_ip() {
  _has_bits_[0] &= ~0x00000400u;
}
void PlayerLoginInfo::clear_ip() {
  ip_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_ip();
}
const ::std::string& PlayerLoginInfo::ip() const {
  // @@protoc_insertion_point(field_get:PlayerLoginInfo.ip)
  return ip_.GetNoArena();
}
void PlayerLoginInfo::set_ip(const ::std::string& value) {
  set_has_ip();
  ip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:PlayerLoginInfo.ip)
}
#if LANG_CXX11
void PlayerLoginInfo::set_ip(::std::string&& value) {
  set_has_ip();
  ip_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:PlayerLoginInfo.ip)
}
#endif
void PlayerLoginInfo::set_ip(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_ip();
  ip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:PlayerLoginInfo.ip)
}
void PlayerLoginInfo::set_ip(const char* value, size_t size) {
  set_has_ip();
  ip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:PlayerLoginInfo.ip)
}
::std::string* PlayerLoginInfo::mutable_ip() {
  set_has_ip();
  // @@protoc_insertion_point(field_mutable:PlayerLoginInfo.ip)
  return ip_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* PlayerLoginInfo::release_ip() {
  // @@protoc_insertion_point(field_release:PlayerLoginInfo.ip)
  clear_has_ip();
  return ip_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void PlayerLoginInfo::set_allocated_ip(::std::string* ip) {
  if (ip != NULL) {
    set_has_ip();
  } else {
    clear_has_ip();
  }
  ip_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ip);
  // @@protoc_insertion_point(field_set_allocated:PlayerLoginInfo.ip)
}

// optional int32 risk = 22;
bool PlayerLoginInfo::has_risk() const {
  return (_has_bits_[0] & 0x04000000u) != 0;
}
void PlayerLoginInfo::set_has_risk() {
  _has_bits_[0] |= 0x04000000u;
}
void PlayerLoginInfo::clear_has_risk() {
  _has_bits_[0] &= ~0x04000000u;
}
void PlayerLoginInfo::clear_risk() {
  risk_ = 0;
  clear_has_risk();
}
::google::protobuf::int32 PlayerLoginInfo::risk() const {
  // @@protoc_insertion_point(field_get:PlayerLoginInfo.risk)
  return risk_;
}
void PlayerLoginInfo::set_risk(::google::protobuf::int32 value) {
  set_has_risk();
  risk_ = value;
  // @@protoc_insertion_point(field_set:PlayerLoginInfo.risk)
}

// optional string ip_area = 23;
bool PlayerLoginInfo::has_ip_area() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
void PlayerLoginInfo::set_has_ip_area() {
  _has_bits_[0] |= 0x00000800u;
}
void PlayerLoginInfo::clear_has_ip_area() {
  _has_bits_[0] &= ~0x00000800u;
}
void PlayerLoginInfo::clear_ip_area() {
  ip_area_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_ip_area();
}
const ::std::string& PlayerLoginInfo::ip_area() const {
  // @@protoc_insertion_point(field_get:PlayerLoginInfo.ip_area)
  return ip_area_.GetNoArena();
}
void PlayerLoginInfo::set_ip_area(const ::std::string& value) {
  set_has_ip_area();
  ip_area_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:PlayerLoginInfo.ip_area)
}
#if LANG_CXX11
void PlayerLoginInfo::set_ip_area(::std::string&& value) {
  set_has_ip_area();
  ip_area_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:PlayerLoginInfo.ip_area)
}
#endif
void PlayerLoginInfo::set_ip_area(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_ip_area();
  ip_area_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:PlayerLoginInfo.ip_area)
}
void PlayerLoginInfo::set_ip_area(const char* value, size_t size) {
  set_has_ip_area();
  ip_area_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:PlayerLoginInfo.ip_area)
}
::std::string* PlayerLoginInfo::mutable_ip_area() {
  set_has_ip_area();
  // @@protoc_insertion_point(field_mutable:PlayerLoginInfo.ip_area)
  return ip_area_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* PlayerLoginInfo::release_ip_area() {
  // @@protoc_insertion_point(field_release:PlayerLoginInfo.ip_area)
  clear_has_ip_area();
  return ip_area_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void PlayerLoginInfo::set_allocated_ip_area(::std::string* ip_area) {
  if (ip_area != NULL) {
    set_has_ip_area();
  } else {
    clear_has_ip_area();
  }
  ip_area_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ip_area);
  // @@protoc_insertion_point(field_set_allocated:PlayerLoginInfo.ip_area)
}

// optional string password = 24;
bool PlayerLoginInfo::has_password() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
void PlayerLoginInfo::set_has_password() {
  _has_bits_[0] |= 0x00001000u;
}
void PlayerLoginInfo::clear_has_password() {
  _has_bits_[0] &= ~0x00001000u;
}
void PlayerLoginInfo::clear_password() {
  password_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_password();
}
const ::std::string& PlayerLoginInfo::password() const {
  // @@protoc_insertion_point(field_get:PlayerLoginInfo.password)
  return password_.GetNoArena();
}
void PlayerLoginInfo::set_password(const ::std::string& value) {
  set_has_password();
  password_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:PlayerLoginInfo.password)
}
#if LANG_CXX11
void PlayerLoginInfo::set_password(::std::string&& value) {
  set_has_password();
  password_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:PlayerLoginInfo.password)
}
#endif
void PlayerLoginInfo::set_password(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_password();
  password_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:PlayerLoginInfo.password)
}
void PlayerLoginInfo::set_password(const char* value, size_t size) {
  set_has_password();
  password_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:PlayerLoginInfo.password)
}
::std::string* PlayerLoginInfo::mutable_password() {
  set_has_password();
  // @@protoc_insertion_point(field_mutable:PlayerLoginInfo.password)
  return password_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* PlayerLoginInfo::release_password() {
  // @@protoc_insertion_point(field_release:PlayerLoginInfo.password)
  clear_has_password();
  return password_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void PlayerLoginInfo::set_allocated_password(::std::string* password) {
  if (password != NULL) {
    set_has_password();
  } else {
    clear_has_password();
  }
  password_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), password);
  // @@protoc_insertion_point(field_set_allocated:PlayerLoginInfo.password)
}

// optional string create_channel_id = 25;
bool PlayerLoginInfo::has_create_channel_id() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
void PlayerLoginInfo::set_has_create_channel_id() {
  _has_bits_[0] |= 0x00002000u;
}
void PlayerLoginInfo::clear_has_create_channel_id() {
  _has_bits_[0] &= ~0x00002000u;
}
void PlayerLoginInfo::clear_create_channel_id() {
  create_channel_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_create_channel_id();
}
const ::std::string& PlayerLoginInfo::create_channel_id() const {
  // @@protoc_insertion_point(field_get:PlayerLoginInfo.create_channel_id)
  return create_channel_id_.GetNoArena();
}
void PlayerLoginInfo::set_create_channel_id(const ::std::string& value) {
  set_has_create_channel_id();
  create_channel_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:PlayerLoginInfo.create_channel_id)
}
#if LANG_CXX11
void PlayerLoginInfo::set_create_channel_id(::std::string&& value) {
  set_has_create_channel_id();
  create_channel_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:PlayerLoginInfo.create_channel_id)
}
#endif
void PlayerLoginInfo::set_create_channel_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_create_channel_id();
  create_channel_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:PlayerLoginInfo.create_channel_id)
}
void PlayerLoginInfo::set_create_channel_id(const char* value, size_t size) {
  set_has_create_channel_id();
  create_channel_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:PlayerLoginInfo.create_channel_id)
}
::std::string* PlayerLoginInfo::mutable_create_channel_id() {
  set_has_create_channel_id();
  // @@protoc_insertion_point(field_mutable:PlayerLoginInfo.create_channel_id)
  return create_channel_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* PlayerLoginInfo::release_create_channel_id() {
  // @@protoc_insertion_point(field_release:PlayerLoginInfo.create_channel_id)
  clear_has_create_channel_id();
  return create_channel_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void PlayerLoginInfo::set_allocated_create_channel_id(::std::string* create_channel_id) {
  if (create_channel_id != NULL) {
    set_has_create_channel_id();
  } else {
    clear_has_create_channel_id();
  }
  create_channel_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), create_channel_id);
  // @@protoc_insertion_point(field_set_allocated:PlayerLoginInfo.create_channel_id)
}

// optional bool enable_transfer = 26;
bool PlayerLoginInfo::has_enable_transfer() const {
  return (_has_bits_[0] & 0x02000000u) != 0;
}
void PlayerLoginInfo::set_has_enable_transfer() {
  _has_bits_[0] |= 0x02000000u;
}
void PlayerLoginInfo::clear_has_enable_transfer() {
  _has_bits_[0] &= ~0x02000000u;
}
void PlayerLoginInfo::clear_enable_transfer() {
  enable_transfer_ = false;
  clear_has_enable_transfer();
}
bool PlayerLoginInfo::enable_transfer() const {
  // @@protoc_insertion_point(field_get:PlayerLoginInfo.enable_transfer)
  return enable_transfer_;
}
void PlayerLoginInfo::set_enable_transfer(bool value) {
  set_has_enable_transfer();
  enable_transfer_ = value;
  // @@protoc_insertion_point(field_set:PlayerLoginInfo.enable_transfer)
}

// optional int32 is_first = 27 [default = 2];
bool PlayerLoginInfo::has_is_first() const {
  return (_has_bits_[0] & 0x10000000u) != 0;
}
void PlayerLoginInfo::set_has_is_first() {
  _has_bits_[0] |= 0x10000000u;
}
void PlayerLoginInfo::clear_has_is_first() {
  _has_bits_[0] &= ~0x10000000u;
}
void PlayerLoginInfo::clear_is_first() {
  is_first_ = 2;
  clear_has_is_first();
}
::google::protobuf::int32 PlayerLoginInfo::is_first() const {
  // @@protoc_insertion_point(field_get:PlayerLoginInfo.is_first)
  return is_first_;
}
void PlayerLoginInfo::set_is_first(::google::protobuf::int32 value) {
  set_has_is_first();
  is_first_ = value;
  // @@protoc_insertion_point(field_set:PlayerLoginInfo.is_first)
}

// optional int32 inviter_guid = 28 [default = 0];
bool PlayerLoginInfo::has_inviter_guid() const {
  return (_has_bits_[0] & 0x08000000u) != 0;
}
void PlayerLoginInfo::set_has_inviter_guid() {
  _has_bits_[0] |= 0x08000000u;
}
void PlayerLoginInfo::clear_has_inviter_guid() {
  _has_bits_[0] &= ~0x08000000u;
}
void PlayerLoginInfo::clear_inviter_guid() {
  inviter_guid_ = 0;
  clear_has_inviter_guid();
}
::google::protobuf::int32 PlayerLoginInfo::inviter_guid() const {
  // @@protoc_insertion_point(field_get:PlayerLoginInfo.inviter_guid)
  return inviter_guid_;
}
void PlayerLoginInfo::set_inviter_guid(::google::protobuf::int32 value) {
  set_has_inviter_guid();
  inviter_guid_ = value;
  // @@protoc_insertion_point(field_set:PlayerLoginInfo.inviter_guid)
}

// optional string invite_code = 29;
bool PlayerLoginInfo::has_invite_code() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
void PlayerLoginInfo::set_has_invite_code() {
  _has_bits_[0] |= 0x00004000u;
}
void PlayerLoginInfo::clear_has_invite_code() {
  _has_bits_[0] &= ~0x00004000u;
}
void PlayerLoginInfo::clear_invite_code() {
  invite_code_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_invite_code();
}
const ::std::string& PlayerLoginInfo::invite_code() const {
  // @@protoc_insertion_point(field_get:PlayerLoginInfo.invite_code)
  return invite_code_.GetNoArena();
}
void PlayerLoginInfo::set_invite_code(const ::std::string& value) {
  set_has_invite_code();
  invite_code_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:PlayerLoginInfo.invite_code)
}
#if LANG_CXX11
void PlayerLoginInfo::set_invite_code(::std::string&& value) {
  set_has_invite_code();
  invite_code_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:PlayerLoginInfo.invite_code)
}
#endif
void PlayerLoginInfo::set_invite_code(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_invite_code();
  invite_code_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:PlayerLoginInfo.invite_code)
}
void PlayerLoginInfo::set_invite_code(const char* value, size_t size) {
  set_has_invite_code();
  invite_code_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:PlayerLoginInfo.invite_code)
}
::std::string* PlayerLoginInfo::mutable_invite_code() {
  set_has_invite_code();
  // @@protoc_insertion_point(field_mutable:PlayerLoginInfo.invite_code)
  return invite_code_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* PlayerLoginInfo::release_invite_code() {
  // @@protoc_insertion_point(field_release:PlayerLoginInfo.invite_code)
  clear_has_invite_code();
  return invite_code_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void PlayerLoginInfo::set_allocated_invite_code(::std::string* invite_code) {
  if (invite_code != NULL) {
    set_has_invite_code();
  } else {
    clear_has_invite_code();
  }
  invite_code_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), invite_code);
  // @@protoc_insertion_point(field_set_allocated:PlayerLoginInfo.invite_code)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)
