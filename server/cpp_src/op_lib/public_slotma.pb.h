// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: public_slotma.proto

#ifndef PROTOBUF_public_5fslotma_2eproto__INCLUDED
#define PROTOBUF_public_5fslotma_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3003000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3003000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
class CS_SlotmaLeaveGame;
class CS_SlotmaLeaveGameDefaultTypeInternal;
extern CS_SlotmaLeaveGameDefaultTypeInternal _CS_SlotmaLeaveGame_default_instance_;
class CS_SlotmaPlayerConnectGame;
class CS_SlotmaPlayerConnectGameDefaultTypeInternal;
extern CS_SlotmaPlayerConnectGameDefaultTypeInternal _CS_SlotmaPlayerConnectGame_default_instance_;
class CS_Slotma_Start;
class CS_Slotma_StartDefaultTypeInternal;
extern CS_Slotma_StartDefaultTypeInternal _CS_Slotma_Start_default_instance_;
class SC_Slotma_Start;
class SC_Slotma_StartDefaultTypeInternal;
extern SC_Slotma_StartDefaultTypeInternal _SC_Slotma_Start_default_instance_;
class WinningLine;
class WinningLineDefaultTypeInternal;
extern WinningLineDefaultTypeInternal _WinningLine_default_instance_;

namespace protobuf_public_5fslotma_2eproto {
// Internal implementation detail -- do not call these.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[];
  static const ::google::protobuf::uint32 offsets[];
  static void InitDefaultsImpl();
  static void Shutdown();
};
void AddDescriptors();
void InitDefaults();
}  // namespace protobuf_public_5fslotma_2eproto

enum CS_SlotmaPlayerConnectGame_MsgID {
  CS_SlotmaPlayerConnectGame_MsgID_ID = 22004
};
bool CS_SlotmaPlayerConnectGame_MsgID_IsValid(int value);
const CS_SlotmaPlayerConnectGame_MsgID CS_SlotmaPlayerConnectGame_MsgID_MsgID_MIN = CS_SlotmaPlayerConnectGame_MsgID_ID;
const CS_SlotmaPlayerConnectGame_MsgID CS_SlotmaPlayerConnectGame_MsgID_MsgID_MAX = CS_SlotmaPlayerConnectGame_MsgID_ID;
const int CS_SlotmaPlayerConnectGame_MsgID_MsgID_ARRAYSIZE = CS_SlotmaPlayerConnectGame_MsgID_MsgID_MAX + 1;

const ::google::protobuf::EnumDescriptor* CS_SlotmaPlayerConnectGame_MsgID_descriptor();
inline const ::std::string& CS_SlotmaPlayerConnectGame_MsgID_Name(CS_SlotmaPlayerConnectGame_MsgID value) {
  return ::google::protobuf::internal::NameOfEnum(
    CS_SlotmaPlayerConnectGame_MsgID_descriptor(), value);
}
inline bool CS_SlotmaPlayerConnectGame_MsgID_Parse(
    const ::std::string& name, CS_SlotmaPlayerConnectGame_MsgID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<CS_SlotmaPlayerConnectGame_MsgID>(
    CS_SlotmaPlayerConnectGame_MsgID_descriptor(), name, value);
}
enum CS_SlotmaLeaveGame_MsgID {
  CS_SlotmaLeaveGame_MsgID_ID = 22005
};
bool CS_SlotmaLeaveGame_MsgID_IsValid(int value);
const CS_SlotmaLeaveGame_MsgID CS_SlotmaLeaveGame_MsgID_MsgID_MIN = CS_SlotmaLeaveGame_MsgID_ID;
const CS_SlotmaLeaveGame_MsgID CS_SlotmaLeaveGame_MsgID_MsgID_MAX = CS_SlotmaLeaveGame_MsgID_ID;
const int CS_SlotmaLeaveGame_MsgID_MsgID_ARRAYSIZE = CS_SlotmaLeaveGame_MsgID_MsgID_MAX + 1;

const ::google::protobuf::EnumDescriptor* CS_SlotmaLeaveGame_MsgID_descriptor();
inline const ::std::string& CS_SlotmaLeaveGame_MsgID_Name(CS_SlotmaLeaveGame_MsgID value) {
  return ::google::protobuf::internal::NameOfEnum(
    CS_SlotmaLeaveGame_MsgID_descriptor(), value);
}
inline bool CS_SlotmaLeaveGame_MsgID_Parse(
    const ::std::string& name, CS_SlotmaLeaveGame_MsgID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<CS_SlotmaLeaveGame_MsgID>(
    CS_SlotmaLeaveGame_MsgID_descriptor(), name, value);
}
enum SC_Slotma_Start_MsgID {
  SC_Slotma_Start_MsgID_ID = 22002
};
bool SC_Slotma_Start_MsgID_IsValid(int value);
const SC_Slotma_Start_MsgID SC_Slotma_Start_MsgID_MsgID_MIN = SC_Slotma_Start_MsgID_ID;
const SC_Slotma_Start_MsgID SC_Slotma_Start_MsgID_MsgID_MAX = SC_Slotma_Start_MsgID_ID;
const int SC_Slotma_Start_MsgID_MsgID_ARRAYSIZE = SC_Slotma_Start_MsgID_MsgID_MAX + 1;

const ::google::protobuf::EnumDescriptor* SC_Slotma_Start_MsgID_descriptor();
inline const ::std::string& SC_Slotma_Start_MsgID_Name(SC_Slotma_Start_MsgID value) {
  return ::google::protobuf::internal::NameOfEnum(
    SC_Slotma_Start_MsgID_descriptor(), value);
}
inline bool SC_Slotma_Start_MsgID_Parse(
    const ::std::string& name, SC_Slotma_Start_MsgID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<SC_Slotma_Start_MsgID>(
    SC_Slotma_Start_MsgID_descriptor(), name, value);
}
enum CS_Slotma_Start_MsgID {
  CS_Slotma_Start_MsgID_ID = 22003,
  CS_Slotma_Start_MsgID_Target = 2
};
bool CS_Slotma_Start_MsgID_IsValid(int value);
const CS_Slotma_Start_MsgID CS_Slotma_Start_MsgID_MsgID_MIN = CS_Slotma_Start_MsgID_Target;
const CS_Slotma_Start_MsgID CS_Slotma_Start_MsgID_MsgID_MAX = CS_Slotma_Start_MsgID_ID;
const int CS_Slotma_Start_MsgID_MsgID_ARRAYSIZE = CS_Slotma_Start_MsgID_MsgID_MAX + 1;

const ::google::protobuf::EnumDescriptor* CS_Slotma_Start_MsgID_descriptor();
inline const ::std::string& CS_Slotma_Start_MsgID_Name(CS_Slotma_Start_MsgID value) {
  return ::google::protobuf::internal::NameOfEnum(
    CS_Slotma_Start_MsgID_descriptor(), value);
}
inline bool CS_Slotma_Start_MsgID_Parse(
    const ::std::string& name, CS_Slotma_Start_MsgID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<CS_Slotma_Start_MsgID>(
    CS_Slotma_Start_MsgID_descriptor(), name, value);
}
enum SLOTMA_TYPE {
  SLOTMA_TYPE_SUCESS = 0,
  SLOTMA_TYPE_ERRORID = 1,
  SLOTMA_TYPE_NOMONEY = 2,
  SLOTMA_TYPE_LINERROR = 3,
  SLOTMA_TYPE_NOLINE = 4
};
bool SLOTMA_TYPE_IsValid(int value);
const SLOTMA_TYPE SLOTMA_TYPE_MIN = SLOTMA_TYPE_SUCESS;
const SLOTMA_TYPE SLOTMA_TYPE_MAX = SLOTMA_TYPE_NOLINE;
const int SLOTMA_TYPE_ARRAYSIZE = SLOTMA_TYPE_MAX + 1;

const ::google::protobuf::EnumDescriptor* SLOTMA_TYPE_descriptor();
inline const ::std::string& SLOTMA_TYPE_Name(SLOTMA_TYPE value) {
  return ::google::protobuf::internal::NameOfEnum(
    SLOTMA_TYPE_descriptor(), value);
}
inline bool SLOTMA_TYPE_Parse(
    const ::std::string& name, SLOTMA_TYPE* value) {
  return ::google::protobuf::internal::ParseNamedEnum<SLOTMA_TYPE>(
    SLOTMA_TYPE_descriptor(), name, value);
}
// ===================================================================

class CS_SlotmaPlayerConnectGame : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:CS_SlotmaPlayerConnectGame) */ {
 public:
  CS_SlotmaPlayerConnectGame();
  virtual ~CS_SlotmaPlayerConnectGame();

  CS_SlotmaPlayerConnectGame(const CS_SlotmaPlayerConnectGame& from);

  inline CS_SlotmaPlayerConnectGame& operator=(const CS_SlotmaPlayerConnectGame& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CS_SlotmaPlayerConnectGame& default_instance();

  static inline const CS_SlotmaPlayerConnectGame* internal_default_instance() {
    return reinterpret_cast<const CS_SlotmaPlayerConnectGame*>(
               &_CS_SlotmaPlayerConnectGame_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    0;

  void Swap(CS_SlotmaPlayerConnectGame* other);

  // implements Message ----------------------------------------------

  inline CS_SlotmaPlayerConnectGame* New() const PROTOBUF_FINAL { return New(NULL); }

  CS_SlotmaPlayerConnectGame* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const CS_SlotmaPlayerConnectGame& from);
  void MergeFrom(const CS_SlotmaPlayerConnectGame& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(CS_SlotmaPlayerConnectGame* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  typedef CS_SlotmaPlayerConnectGame_MsgID MsgID;
  static const MsgID ID =
    CS_SlotmaPlayerConnectGame_MsgID_ID;
  static inline bool MsgID_IsValid(int value) {
    return CS_SlotmaPlayerConnectGame_MsgID_IsValid(value);
  }
  static const MsgID MsgID_MIN =
    CS_SlotmaPlayerConnectGame_MsgID_MsgID_MIN;
  static const MsgID MsgID_MAX =
    CS_SlotmaPlayerConnectGame_MsgID_MsgID_MAX;
  static const int MsgID_ARRAYSIZE =
    CS_SlotmaPlayerConnectGame_MsgID_MsgID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  MsgID_descriptor() {
    return CS_SlotmaPlayerConnectGame_MsgID_descriptor();
  }
  static inline const ::std::string& MsgID_Name(MsgID value) {
    return CS_SlotmaPlayerConnectGame_MsgID_Name(value);
  }
  static inline bool MsgID_Parse(const ::std::string& name,
      MsgID* value) {
    return CS_SlotmaPlayerConnectGame_MsgID_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional int32 guid = 1;
  bool has_guid() const;
  void clear_guid();
  static const int kGuidFieldNumber = 1;
  ::google::protobuf::int32 guid() const;
  void set_guid(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:CS_SlotmaPlayerConnectGame)
 private:
  void set_has_guid();
  void clear_has_guid();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::int32 guid_;
  friend struct protobuf_public_5fslotma_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class CS_SlotmaLeaveGame : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:CS_SlotmaLeaveGame) */ {
 public:
  CS_SlotmaLeaveGame();
  virtual ~CS_SlotmaLeaveGame();

  CS_SlotmaLeaveGame(const CS_SlotmaLeaveGame& from);

  inline CS_SlotmaLeaveGame& operator=(const CS_SlotmaLeaveGame& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CS_SlotmaLeaveGame& default_instance();

  static inline const CS_SlotmaLeaveGame* internal_default_instance() {
    return reinterpret_cast<const CS_SlotmaLeaveGame*>(
               &_CS_SlotmaLeaveGame_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    1;

  void Swap(CS_SlotmaLeaveGame* other);

  // implements Message ----------------------------------------------

  inline CS_SlotmaLeaveGame* New() const PROTOBUF_FINAL { return New(NULL); }

  CS_SlotmaLeaveGame* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const CS_SlotmaLeaveGame& from);
  void MergeFrom(const CS_SlotmaLeaveGame& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(CS_SlotmaLeaveGame* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  typedef CS_SlotmaLeaveGame_MsgID MsgID;
  static const MsgID ID =
    CS_SlotmaLeaveGame_MsgID_ID;
  static inline bool MsgID_IsValid(int value) {
    return CS_SlotmaLeaveGame_MsgID_IsValid(value);
  }
  static const MsgID MsgID_MIN =
    CS_SlotmaLeaveGame_MsgID_MsgID_MIN;
  static const MsgID MsgID_MAX =
    CS_SlotmaLeaveGame_MsgID_MsgID_MAX;
  static const int MsgID_ARRAYSIZE =
    CS_SlotmaLeaveGame_MsgID_MsgID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  MsgID_descriptor() {
    return CS_SlotmaLeaveGame_MsgID_descriptor();
  }
  static inline const ::std::string& MsgID_Name(MsgID value) {
    return CS_SlotmaLeaveGame_MsgID_Name(value);
  }
  static inline bool MsgID_Parse(const ::std::string& name,
      MsgID* value) {
    return CS_SlotmaLeaveGame_MsgID_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional int32 guid = 1;
  bool has_guid() const;
  void clear_guid();
  static const int kGuidFieldNumber = 1;
  ::google::protobuf::int32 guid() const;
  void set_guid(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:CS_SlotmaLeaveGame)
 private:
  void set_has_guid();
  void clear_has_guid();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::int32 guid_;
  friend struct protobuf_public_5fslotma_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class WinningLine : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:WinningLine) */ {
 public:
  WinningLine();
  virtual ~WinningLine();

  WinningLine(const WinningLine& from);

  inline WinningLine& operator=(const WinningLine& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const WinningLine& default_instance();

  static inline const WinningLine* internal_default_instance() {
    return reinterpret_cast<const WinningLine*>(
               &_WinningLine_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    2;

  void Swap(WinningLine* other);

  // implements Message ----------------------------------------------

  inline WinningLine* New() const PROTOBUF_FINAL { return New(NULL); }

  WinningLine* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const WinningLine& from);
  void MergeFrom(const WinningLine& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(WinningLine* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 lineid = 1;
  bool has_lineid() const;
  void clear_lineid();
  static const int kLineidFieldNumber = 1;
  ::google::protobuf::int32 lineid() const;
  void set_lineid(::google::protobuf::int32 value);

  // optional int32 itemid = 2;
  bool has_itemid() const;
  void clear_itemid();
  static const int kItemidFieldNumber = 2;
  ::google::protobuf::int32 itemid() const;
  void set_itemid(::google::protobuf::int32 value);

  // optional int32 itemNum = 3;
  bool has_itemnum() const;
  void clear_itemnum();
  static const int kItemNumFieldNumber = 3;
  ::google::protobuf::int32 itemnum() const;
  void set_itemnum(::google::protobuf::int32 value);

  // optional int32 times = 4;
  bool has_times() const;
  void clear_times();
  static const int kTimesFieldNumber = 4;
  ::google::protobuf::int32 times() const;
  void set_times(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:WinningLine)
 private:
  void set_has_lineid();
  void clear_has_lineid();
  void set_has_itemid();
  void clear_has_itemid();
  void set_has_itemnum();
  void clear_has_itemnum();
  void set_has_times();
  void clear_has_times();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::int32 lineid_;
  ::google::protobuf::int32 itemid_;
  ::google::protobuf::int32 itemnum_;
  ::google::protobuf::int32 times_;
  friend struct protobuf_public_5fslotma_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class SC_Slotma_Start : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:SC_Slotma_Start) */ {
 public:
  SC_Slotma_Start();
  virtual ~SC_Slotma_Start();

  SC_Slotma_Start(const SC_Slotma_Start& from);

  inline SC_Slotma_Start& operator=(const SC_Slotma_Start& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SC_Slotma_Start& default_instance();

  static inline const SC_Slotma_Start* internal_default_instance() {
    return reinterpret_cast<const SC_Slotma_Start*>(
               &_SC_Slotma_Start_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    3;

  void Swap(SC_Slotma_Start* other);

  // implements Message ----------------------------------------------

  inline SC_Slotma_Start* New() const PROTOBUF_FINAL { return New(NULL); }

  SC_Slotma_Start* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const SC_Slotma_Start& from);
  void MergeFrom(const SC_Slotma_Start& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(SC_Slotma_Start* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  typedef SC_Slotma_Start_MsgID MsgID;
  static const MsgID ID =
    SC_Slotma_Start_MsgID_ID;
  static inline bool MsgID_IsValid(int value) {
    return SC_Slotma_Start_MsgID_IsValid(value);
  }
  static const MsgID MsgID_MIN =
    SC_Slotma_Start_MsgID_MsgID_MIN;
  static const MsgID MsgID_MAX =
    SC_Slotma_Start_MsgID_MsgID_MAX;
  static const int MsgID_ARRAYSIZE =
    SC_Slotma_Start_MsgID_MsgID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  MsgID_descriptor() {
    return SC_Slotma_Start_MsgID_descriptor();
  }
  static inline const ::std::string& MsgID_Name(MsgID value) {
    return SC_Slotma_Start_MsgID_Name(value);
  }
  static inline bool MsgID_Parse(const ::std::string& name,
      MsgID* value) {
    return SC_Slotma_Start_MsgID_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // repeated int32 items = 1;
  int items_size() const;
  void clear_items();
  static const int kItemsFieldNumber = 1;
  ::google::protobuf::int32 items(int index) const;
  void set_items(int index, ::google::protobuf::int32 value);
  void add_items(::google::protobuf::int32 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      items() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_items();

  // repeated .WinningLine pb_winline = 4;
  int pb_winline_size() const;
  void clear_pb_winline();
  static const int kPbWinlineFieldNumber = 4;
  const ::WinningLine& pb_winline(int index) const;
  ::WinningLine* mutable_pb_winline(int index);
  ::WinningLine* add_pb_winline();
  ::google::protobuf::RepeatedPtrField< ::WinningLine >*
      mutable_pb_winline();
  const ::google::protobuf::RepeatedPtrField< ::WinningLine >&
      pb_winline() const;

  // optional int64 money = 2;
  bool has_money() const;
  void clear_money();
  static const int kMoneyFieldNumber = 2;
  ::google::protobuf::int64 money() const;
  void set_money(::google::protobuf::int64 value);

  // optional int32 tax = 3;
  bool has_tax() const;
  void clear_tax();
  static const int kTaxFieldNumber = 3;
  ::google::protobuf::int32 tax() const;
  void set_tax(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:SC_Slotma_Start)
 private:
  void set_has_money();
  void clear_has_money();
  void set_has_tax();
  void clear_has_tax();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > items_;
  ::google::protobuf::RepeatedPtrField< ::WinningLine > pb_winline_;
  ::google::protobuf::int64 money_;
  ::google::protobuf::int32 tax_;
  friend struct protobuf_public_5fslotma_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class CS_Slotma_Start : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:CS_Slotma_Start) */ {
 public:
  CS_Slotma_Start();
  virtual ~CS_Slotma_Start();

  CS_Slotma_Start(const CS_Slotma_Start& from);

  inline CS_Slotma_Start& operator=(const CS_Slotma_Start& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CS_Slotma_Start& default_instance();

  static inline const CS_Slotma_Start* internal_default_instance() {
    return reinterpret_cast<const CS_Slotma_Start*>(
               &_CS_Slotma_Start_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    4;

  void Swap(CS_Slotma_Start* other);

  // implements Message ----------------------------------------------

  inline CS_Slotma_Start* New() const PROTOBUF_FINAL { return New(NULL); }

  CS_Slotma_Start* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const CS_Slotma_Start& from);
  void MergeFrom(const CS_Slotma_Start& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(CS_Slotma_Start* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  typedef CS_Slotma_Start_MsgID MsgID;
  static const MsgID ID =
    CS_Slotma_Start_MsgID_ID;
  static const MsgID Target =
    CS_Slotma_Start_MsgID_Target;
  static inline bool MsgID_IsValid(int value) {
    return CS_Slotma_Start_MsgID_IsValid(value);
  }
  static const MsgID MsgID_MIN =
    CS_Slotma_Start_MsgID_MsgID_MIN;
  static const MsgID MsgID_MAX =
    CS_Slotma_Start_MsgID_MsgID_MAX;
  static const int MsgID_ARRAYSIZE =
    CS_Slotma_Start_MsgID_MsgID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  MsgID_descriptor() {
    return CS_Slotma_Start_MsgID_descriptor();
  }
  static inline const ::std::string& MsgID_Name(MsgID value) {
    return CS_Slotma_Start_MsgID_Name(value);
  }
  static inline bool MsgID_Parse(const ::std::string& name,
      MsgID* value) {
    return CS_Slotma_Start_MsgID_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // repeated int32 lines = 2;
  int lines_size() const;
  void clear_lines();
  static const int kLinesFieldNumber = 2;
  ::google::protobuf::int32 lines(int index) const;
  void set_lines(int index, ::google::protobuf::int32 value);
  void add_lines(::google::protobuf::int32 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      lines() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_lines();

  // optional int32 cell_times = 1;
  bool has_cell_times() const;
  void clear_cell_times();
  static const int kCellTimesFieldNumber = 1;
  ::google::protobuf::int32 cell_times() const;
  void set_cell_times(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:CS_Slotma_Start)
 private:
  void set_has_cell_times();
  void clear_has_cell_times();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > lines_;
  ::google::protobuf::int32 cell_times_;
  friend struct protobuf_public_5fslotma_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
// CS_SlotmaPlayerConnectGame

// optional int32 guid = 1;
inline bool CS_SlotmaPlayerConnectGame::has_guid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CS_SlotmaPlayerConnectGame::set_has_guid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CS_SlotmaPlayerConnectGame::clear_has_guid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CS_SlotmaPlayerConnectGame::clear_guid() {
  guid_ = 0;
  clear_has_guid();
}
inline ::google::protobuf::int32 CS_SlotmaPlayerConnectGame::guid() const {
  // @@protoc_insertion_point(field_get:CS_SlotmaPlayerConnectGame.guid)
  return guid_;
}
inline void CS_SlotmaPlayerConnectGame::set_guid(::google::protobuf::int32 value) {
  set_has_guid();
  guid_ = value;
  // @@protoc_insertion_point(field_set:CS_SlotmaPlayerConnectGame.guid)
}

// -------------------------------------------------------------------

// CS_SlotmaLeaveGame

// optional int32 guid = 1;
inline bool CS_SlotmaLeaveGame::has_guid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CS_SlotmaLeaveGame::set_has_guid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CS_SlotmaLeaveGame::clear_has_guid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CS_SlotmaLeaveGame::clear_guid() {
  guid_ = 0;
  clear_has_guid();
}
inline ::google::protobuf::int32 CS_SlotmaLeaveGame::guid() const {
  // @@protoc_insertion_point(field_get:CS_SlotmaLeaveGame.guid)
  return guid_;
}
inline void CS_SlotmaLeaveGame::set_guid(::google::protobuf::int32 value) {
  set_has_guid();
  guid_ = value;
  // @@protoc_insertion_point(field_set:CS_SlotmaLeaveGame.guid)
}

// -------------------------------------------------------------------

// WinningLine

// optional int32 lineid = 1;
inline bool WinningLine::has_lineid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void WinningLine::set_has_lineid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void WinningLine::clear_has_lineid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void WinningLine::clear_lineid() {
  lineid_ = 0;
  clear_has_lineid();
}
inline ::google::protobuf::int32 WinningLine::lineid() const {
  // @@protoc_insertion_point(field_get:WinningLine.lineid)
  return lineid_;
}
inline void WinningLine::set_lineid(::google::protobuf::int32 value) {
  set_has_lineid();
  lineid_ = value;
  // @@protoc_insertion_point(field_set:WinningLine.lineid)
}

// optional int32 itemid = 2;
inline bool WinningLine::has_itemid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void WinningLine::set_has_itemid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void WinningLine::clear_has_itemid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void WinningLine::clear_itemid() {
  itemid_ = 0;
  clear_has_itemid();
}
inline ::google::protobuf::int32 WinningLine::itemid() const {
  // @@protoc_insertion_point(field_get:WinningLine.itemid)
  return itemid_;
}
inline void WinningLine::set_itemid(::google::protobuf::int32 value) {
  set_has_itemid();
  itemid_ = value;
  // @@protoc_insertion_point(field_set:WinningLine.itemid)
}

// optional int32 itemNum = 3;
inline bool WinningLine::has_itemnum() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void WinningLine::set_has_itemnum() {
  _has_bits_[0] |= 0x00000004u;
}
inline void WinningLine::clear_has_itemnum() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void WinningLine::clear_itemnum() {
  itemnum_ = 0;
  clear_has_itemnum();
}
inline ::google::protobuf::int32 WinningLine::itemnum() const {
  // @@protoc_insertion_point(field_get:WinningLine.itemNum)
  return itemnum_;
}
inline void WinningLine::set_itemnum(::google::protobuf::int32 value) {
  set_has_itemnum();
  itemnum_ = value;
  // @@protoc_insertion_point(field_set:WinningLine.itemNum)
}

// optional int32 times = 4;
inline bool WinningLine::has_times() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void WinningLine::set_has_times() {
  _has_bits_[0] |= 0x00000008u;
}
inline void WinningLine::clear_has_times() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void WinningLine::clear_times() {
  times_ = 0;
  clear_has_times();
}
inline ::google::protobuf::int32 WinningLine::times() const {
  // @@protoc_insertion_point(field_get:WinningLine.times)
  return times_;
}
inline void WinningLine::set_times(::google::protobuf::int32 value) {
  set_has_times();
  times_ = value;
  // @@protoc_insertion_point(field_set:WinningLine.times)
}

// -------------------------------------------------------------------

// SC_Slotma_Start

// repeated int32 items = 1;
inline int SC_Slotma_Start::items_size() const {
  return items_.size();
}
inline void SC_Slotma_Start::clear_items() {
  items_.Clear();
}
inline ::google::protobuf::int32 SC_Slotma_Start::items(int index) const {
  // @@protoc_insertion_point(field_get:SC_Slotma_Start.items)
  return items_.Get(index);
}
inline void SC_Slotma_Start::set_items(int index, ::google::protobuf::int32 value) {
  items_.Set(index, value);
  // @@protoc_insertion_point(field_set:SC_Slotma_Start.items)
}
inline void SC_Slotma_Start::add_items(::google::protobuf::int32 value) {
  items_.Add(value);
  // @@protoc_insertion_point(field_add:SC_Slotma_Start.items)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
SC_Slotma_Start::items() const {
  // @@protoc_insertion_point(field_list:SC_Slotma_Start.items)
  return items_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
SC_Slotma_Start::mutable_items() {
  // @@protoc_insertion_point(field_mutable_list:SC_Slotma_Start.items)
  return &items_;
}

// optional int64 money = 2;
inline bool SC_Slotma_Start::has_money() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SC_Slotma_Start::set_has_money() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SC_Slotma_Start::clear_has_money() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SC_Slotma_Start::clear_money() {
  money_ = GOOGLE_LONGLONG(0);
  clear_has_money();
}
inline ::google::protobuf::int64 SC_Slotma_Start::money() const {
  // @@protoc_insertion_point(field_get:SC_Slotma_Start.money)
  return money_;
}
inline void SC_Slotma_Start::set_money(::google::protobuf::int64 value) {
  set_has_money();
  money_ = value;
  // @@protoc_insertion_point(field_set:SC_Slotma_Start.money)
}

// optional int32 tax = 3;
inline bool SC_Slotma_Start::has_tax() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SC_Slotma_Start::set_has_tax() {
  _has_bits_[0] |= 0x00000002u;
}
inline void SC_Slotma_Start::clear_has_tax() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void SC_Slotma_Start::clear_tax() {
  tax_ = 0;
  clear_has_tax();
}
inline ::google::protobuf::int32 SC_Slotma_Start::tax() const {
  // @@protoc_insertion_point(field_get:SC_Slotma_Start.tax)
  return tax_;
}
inline void SC_Slotma_Start::set_tax(::google::protobuf::int32 value) {
  set_has_tax();
  tax_ = value;
  // @@protoc_insertion_point(field_set:SC_Slotma_Start.tax)
}

// repeated .WinningLine pb_winline = 4;
inline int SC_Slotma_Start::pb_winline_size() const {
  return pb_winline_.size();
}
inline void SC_Slotma_Start::clear_pb_winline() {
  pb_winline_.Clear();
}
inline const ::WinningLine& SC_Slotma_Start::pb_winline(int index) const {
  // @@protoc_insertion_point(field_get:SC_Slotma_Start.pb_winline)
  return pb_winline_.Get(index);
}
inline ::WinningLine* SC_Slotma_Start::mutable_pb_winline(int index) {
  // @@protoc_insertion_point(field_mutable:SC_Slotma_Start.pb_winline)
  return pb_winline_.Mutable(index);
}
inline ::WinningLine* SC_Slotma_Start::add_pb_winline() {
  // @@protoc_insertion_point(field_add:SC_Slotma_Start.pb_winline)
  return pb_winline_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::WinningLine >*
SC_Slotma_Start::mutable_pb_winline() {
  // @@protoc_insertion_point(field_mutable_list:SC_Slotma_Start.pb_winline)
  return &pb_winline_;
}
inline const ::google::protobuf::RepeatedPtrField< ::WinningLine >&
SC_Slotma_Start::pb_winline() const {
  // @@protoc_insertion_point(field_list:SC_Slotma_Start.pb_winline)
  return pb_winline_;
}

// -------------------------------------------------------------------

// CS_Slotma_Start

// optional int32 cell_times = 1;
inline bool CS_Slotma_Start::has_cell_times() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CS_Slotma_Start::set_has_cell_times() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CS_Slotma_Start::clear_has_cell_times() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CS_Slotma_Start::clear_cell_times() {
  cell_times_ = 0;
  clear_has_cell_times();
}
inline ::google::protobuf::int32 CS_Slotma_Start::cell_times() const {
  // @@protoc_insertion_point(field_get:CS_Slotma_Start.cell_times)
  return cell_times_;
}
inline void CS_Slotma_Start::set_cell_times(::google::protobuf::int32 value) {
  set_has_cell_times();
  cell_times_ = value;
  // @@protoc_insertion_point(field_set:CS_Slotma_Start.cell_times)
}

// repeated int32 lines = 2;
inline int CS_Slotma_Start::lines_size() const {
  return lines_.size();
}
inline void CS_Slotma_Start::clear_lines() {
  lines_.Clear();
}
inline ::google::protobuf::int32 CS_Slotma_Start::lines(int index) const {
  // @@protoc_insertion_point(field_get:CS_Slotma_Start.lines)
  return lines_.Get(index);
}
inline void CS_Slotma_Start::set_lines(int index, ::google::protobuf::int32 value) {
  lines_.Set(index, value);
  // @@protoc_insertion_point(field_set:CS_Slotma_Start.lines)
}
inline void CS_Slotma_Start::add_lines(::google::protobuf::int32 value) {
  lines_.Add(value);
  // @@protoc_insertion_point(field_add:CS_Slotma_Start.lines)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
CS_Slotma_Start::lines() const {
  // @@protoc_insertion_point(field_list:CS_Slotma_Start.lines)
  return lines_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
CS_Slotma_Start::mutable_lines() {
  // @@protoc_insertion_point(field_mutable_list:CS_Slotma_Start.lines)
  return &lines_;
}

#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)


#ifndef SWIG
namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::CS_SlotmaPlayerConnectGame_MsgID> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::CS_SlotmaPlayerConnectGame_MsgID>() {
  return ::CS_SlotmaPlayerConnectGame_MsgID_descriptor();
}
template <> struct is_proto_enum< ::CS_SlotmaLeaveGame_MsgID> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::CS_SlotmaLeaveGame_MsgID>() {
  return ::CS_SlotmaLeaveGame_MsgID_descriptor();
}
template <> struct is_proto_enum< ::SC_Slotma_Start_MsgID> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::SC_Slotma_Start_MsgID>() {
  return ::SC_Slotma_Start_MsgID_descriptor();
}
template <> struct is_proto_enum< ::CS_Slotma_Start_MsgID> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::CS_Slotma_Start_MsgID>() {
  return ::CS_Slotma_Start_MsgID_descriptor();
}
template <> struct is_proto_enum< ::SLOTMA_TYPE> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::SLOTMA_TYPE>() {
  return ::SLOTMA_TYPE_descriptor();
}

}  // namespace protobuf
}  // namespace google
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_public_5fslotma_2eproto__INCLUDED
