// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: redis.proto

#ifndef PROTOBUF_redis_2eproto__INCLUDED
#define PROTOBUF_redis_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3003000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3003000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
class PlayerLoginInfo;
class PlayerLoginInfoDefaultTypeInternal;
extern PlayerLoginInfoDefaultTypeInternal _PlayerLoginInfo_default_instance_;

namespace protobuf_redis_2eproto {
// Internal implementation detail -- do not call these.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[];
  static const ::google::protobuf::uint32 offsets[];
  static void InitDefaultsImpl();
  static void Shutdown();
};
void AddDescriptors();
void InitDefaults();
}  // namespace protobuf_redis_2eproto

// ===================================================================

class PlayerLoginInfo : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:PlayerLoginInfo) */ {
 public:
  PlayerLoginInfo();
  virtual ~PlayerLoginInfo();

  PlayerLoginInfo(const PlayerLoginInfo& from);

  inline PlayerLoginInfo& operator=(const PlayerLoginInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const PlayerLoginInfo& default_instance();

  static inline const PlayerLoginInfo* internal_default_instance() {
    return reinterpret_cast<const PlayerLoginInfo*>(
               &_PlayerLoginInfo_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    0;

  void Swap(PlayerLoginInfo* other);

  // implements Message ----------------------------------------------

  inline PlayerLoginInfo* New() const PROTOBUF_FINAL { return New(NULL); }

  PlayerLoginInfo* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const PlayerLoginInfo& from);
  void MergeFrom(const PlayerLoginInfo& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(PlayerLoginInfo* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string account = 3;
  bool has_account() const;
  void clear_account();
  static const int kAccountFieldNumber = 3;
  const ::std::string& account() const;
  void set_account(const ::std::string& value);
  #if LANG_CXX11
  void set_account(::std::string&& value);
  #endif
  void set_account(const char* value);
  void set_account(const char* value, size_t size);
  ::std::string* mutable_account();
  ::std::string* release_account();
  void set_allocated_account(::std::string* account);

  // optional string nickname = 5;
  bool has_nickname() const;
  void clear_nickname();
  static const int kNicknameFieldNumber = 5;
  const ::std::string& nickname() const;
  void set_nickname(const ::std::string& value);
  #if LANG_CXX11
  void set_nickname(::std::string&& value);
  #endif
  void set_nickname(const char* value);
  void set_nickname(const char* value, size_t size);
  ::std::string* mutable_nickname();
  ::std::string* release_nickname();
  void set_allocated_nickname(::std::string* nickname);

  // optional string alipay_account = 12;
  bool has_alipay_account() const;
  void clear_alipay_account();
  static const int kAlipayAccountFieldNumber = 12;
  const ::std::string& alipay_account() const;
  void set_alipay_account(const ::std::string& value);
  #if LANG_CXX11
  void set_alipay_account(::std::string&& value);
  #endif
  void set_alipay_account(const char* value);
  void set_alipay_account(const char* value, size_t size);
  ::std::string* mutable_alipay_account();
  ::std::string* release_alipay_account();
  void set_allocated_alipay_account(::std::string* alipay_account);

  // optional string alipay_name = 13;
  bool has_alipay_name() const;
  void clear_alipay_name();
  static const int kAlipayNameFieldNumber = 13;
  const ::std::string& alipay_name() const;
  void set_alipay_name(const ::std::string& value);
  #if LANG_CXX11
  void set_alipay_name(::std::string&& value);
  #endif
  void set_alipay_name(const char* value);
  void set_alipay_name(const char* value, size_t size);
  ::std::string* mutable_alipay_name();
  ::std::string* release_alipay_name();
  void set_allocated_alipay_name(::std::string* alipay_name);

  // optional string phone = 15;
  bool has_phone() const;
  void clear_phone();
  static const int kPhoneFieldNumber = 15;
  const ::std::string& phone() const;
  void set_phone(const ::std::string& value);
  #if LANG_CXX11
  void set_phone(::std::string&& value);
  #endif
  void set_phone(const char* value);
  void set_phone(const char* value, size_t size);
  ::std::string* mutable_phone();
  ::std::string* release_phone();
  void set_allocated_phone(::std::string* phone);

  // optional string phone_type = 16;
  bool has_phone_type() const;
  void clear_phone_type();
  static const int kPhoneTypeFieldNumber = 16;
  const ::std::string& phone_type() const;
  void set_phone_type(const ::std::string& value);
  #if LANG_CXX11
  void set_phone_type(::std::string&& value);
  #endif
  void set_phone_type(const char* value);
  void set_phone_type(const char* value, size_t size);
  ::std::string* mutable_phone_type();
  ::std::string* release_phone_type();
  void set_allocated_phone_type(::std::string* phone_type);

  // optional string version = 17;
  bool has_version() const;
  void clear_version();
  static const int kVersionFieldNumber = 17;
  const ::std::string& version() const;
  void set_version(const ::std::string& value);
  #if LANG_CXX11
  void set_version(::std::string&& value);
  #endif
  void set_version(const char* value);
  void set_version(const char* value, size_t size);
  ::std::string* mutable_version();
  ::std::string* release_version();
  void set_allocated_version(::std::string* version);

  // optional string channel_id = 18;
  bool has_channel_id() const;
  void clear_channel_id();
  static const int kChannelIdFieldNumber = 18;
  const ::std::string& channel_id() const;
  void set_channel_id(const ::std::string& value);
  #if LANG_CXX11
  void set_channel_id(::std::string&& value);
  #endif
  void set_channel_id(const char* value);
  void set_channel_id(const char* value, size_t size);
  ::std::string* mutable_channel_id();
  ::std::string* release_channel_id();
  void set_allocated_channel_id(::std::string* channel_id);

  // optional string package_name = 19;
  bool has_package_name() const;
  void clear_package_name();
  static const int kPackageNameFieldNumber = 19;
  const ::std::string& package_name() const;
  void set_package_name(const ::std::string& value);
  #if LANG_CXX11
  void set_package_name(::std::string&& value);
  #endif
  void set_package_name(const char* value);
  void set_package_name(const char* value, size_t size);
  ::std::string* mutable_package_name();
  ::std::string* release_package_name();
  void set_allocated_package_name(::std::string* package_name);

  // optional string imei = 20;
  bool has_imei() const;
  void clear_imei();
  static const int kImeiFieldNumber = 20;
  const ::std::string& imei() const;
  void set_imei(const ::std::string& value);
  #if LANG_CXX11
  void set_imei(::std::string&& value);
  #endif
  void set_imei(const char* value);
  void set_imei(const char* value, size_t size);
  ::std::string* mutable_imei();
  ::std::string* release_imei();
  void set_allocated_imei(::std::string* imei);

  // optional string ip = 21;
  bool has_ip() const;
  void clear_ip();
  static const int kIpFieldNumber = 21;
  const ::std::string& ip() const;
  void set_ip(const ::std::string& value);
  #if LANG_CXX11
  void set_ip(::std::string&& value);
  #endif
  void set_ip(const char* value);
  void set_ip(const char* value, size_t size);
  ::std::string* mutable_ip();
  ::std::string* release_ip();
  void set_allocated_ip(::std::string* ip);

  // optional string ip_area = 23;
  bool has_ip_area() const;
  void clear_ip_area();
  static const int kIpAreaFieldNumber = 23;
  const ::std::string& ip_area() const;
  void set_ip_area(const ::std::string& value);
  #if LANG_CXX11
  void set_ip_area(::std::string&& value);
  #endif
  void set_ip_area(const char* value);
  void set_ip_area(const char* value, size_t size);
  ::std::string* mutable_ip_area();
  ::std::string* release_ip_area();
  void set_allocated_ip_area(::std::string* ip_area);

  // optional string password = 24;
  bool has_password() const;
  void clear_password();
  static const int kPasswordFieldNumber = 24;
  const ::std::string& password() const;
  void set_password(const ::std::string& value);
  #if LANG_CXX11
  void set_password(::std::string&& value);
  #endif
  void set_password(const char* value);
  void set_password(const char* value, size_t size);
  ::std::string* mutable_password();
  ::std::string* release_password();
  void set_allocated_password(::std::string* password);

  // optional string create_channel_id = 25;
  bool has_create_channel_id() const;
  void clear_create_channel_id();
  static const int kCreateChannelIdFieldNumber = 25;
  const ::std::string& create_channel_id() const;
  void set_create_channel_id(const ::std::string& value);
  #if LANG_CXX11
  void set_create_channel_id(::std::string&& value);
  #endif
  void set_create_channel_id(const char* value);
  void set_create_channel_id(const char* value, size_t size);
  ::std::string* mutable_create_channel_id();
  ::std::string* release_create_channel_id();
  void set_allocated_create_channel_id(::std::string* create_channel_id);

  // optional string invite_code = 29;
  bool has_invite_code() const;
  void clear_invite_code();
  static const int kInviteCodeFieldNumber = 29;
  const ::std::string& invite_code() const;
  void set_invite_code(const ::std::string& value);
  #if LANG_CXX11
  void set_invite_code(::std::string&& value);
  #endif
  void set_invite_code(const char* value);
  void set_invite_code(const char* value, size_t size);
  ::std::string* mutable_invite_code();
  ::std::string* release_invite_code();
  void set_allocated_invite_code(::std::string* invite_code);

  // optional int32 session_id = 1;
  bool has_session_id() const;
  void clear_session_id();
  static const int kSessionIdFieldNumber = 1;
  ::google::protobuf::int32 session_id() const;
  void set_session_id(::google::protobuf::int32 value);

  // optional int32 gate_id = 2;
  bool has_gate_id() const;
  void clear_gate_id();
  static const int kGateIdFieldNumber = 2;
  ::google::protobuf::int32 gate_id() const;
  void set_gate_id(::google::protobuf::int32 value);

  // optional int32 guid = 4;
  bool has_guid() const;
  void clear_guid();
  static const int kGuidFieldNumber = 4;
  ::google::protobuf::int32 guid() const;
  void set_guid(::google::protobuf::int32 value);

  // optional int32 vip = 6;
  bool has_vip() const;
  void clear_vip();
  static const int kVipFieldNumber = 6;
  ::google::protobuf::int32 vip() const;
  void set_vip(::google::protobuf::int32 value);

  // optional int32 login_time = 7;
  bool has_login_time() const;
  void clear_login_time();
  static const int kLoginTimeFieldNumber = 7;
  ::google::protobuf::int32 login_time() const;
  void set_login_time(::google::protobuf::int32 value);

  // optional int32 logout_time = 8;
  bool has_logout_time() const;
  void clear_logout_time();
  static const int kLogoutTimeFieldNumber = 8;
  ::google::protobuf::int32 logout_time() const;
  void set_logout_time(::google::protobuf::int32 value);

  // optional int32 change_alipay_num = 14;
  bool has_change_alipay_num() const;
  void clear_change_alipay_num();
  static const int kChangeAlipayNumFieldNumber = 14;
  ::google::protobuf::int32 change_alipay_num() const;
  void set_change_alipay_num(::google::protobuf::int32 value);

  // optional bool has_bank_password = 9;
  bool has_has_bank_password() const;
  void clear_has_bank_password();
  static const int kHasBankPasswordFieldNumber = 9;
  bool has_bank_password() const;
  void set_has_bank_password(bool value);

  // optional bool is_guest = 10;
  bool has_is_guest() const;
  void clear_is_guest();
  static const int kIsGuestFieldNumber = 10;
  bool is_guest() const;
  void set_is_guest(bool value);

  // optional bool is_reconnect = 11;
  bool has_is_reconnect() const;
  void clear_is_reconnect();
  static const int kIsReconnectFieldNumber = 11;
  bool is_reconnect() const;
  void set_is_reconnect(bool value);

  // optional bool enable_transfer = 26;
  bool has_enable_transfer() const;
  void clear_enable_transfer();
  static const int kEnableTransferFieldNumber = 26;
  bool enable_transfer() const;
  void set_enable_transfer(bool value);

  // optional int32 risk = 22;
  bool has_risk() const;
  void clear_risk();
  static const int kRiskFieldNumber = 22;
  ::google::protobuf::int32 risk() const;
  void set_risk(::google::protobuf::int32 value);

  // optional int32 inviter_guid = 28 [default = 0];
  bool has_inviter_guid() const;
  void clear_inviter_guid();
  static const int kInviterGuidFieldNumber = 28;
  ::google::protobuf::int32 inviter_guid() const;
  void set_inviter_guid(::google::protobuf::int32 value);

  // optional int32 is_first = 27 [default = 2];
  bool has_is_first() const;
  void clear_is_first();
  static const int kIsFirstFieldNumber = 27;
  ::google::protobuf::int32 is_first() const;
  void set_is_first(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:PlayerLoginInfo)
 private:
  void set_has_session_id();
  void clear_has_session_id();
  void set_has_gate_id();
  void clear_has_gate_id();
  void set_has_account();
  void clear_has_account();
  void set_has_guid();
  void clear_has_guid();
  void set_has_nickname();
  void clear_has_nickname();
  void set_has_vip();
  void clear_has_vip();
  void set_has_login_time();
  void clear_has_login_time();
  void set_has_logout_time();
  void clear_has_logout_time();
  void set_has_has_bank_password();
  void clear_has_has_bank_password();
  void set_has_is_guest();
  void clear_has_is_guest();
  void set_has_is_reconnect();
  void clear_has_is_reconnect();
  void set_has_alipay_account();
  void clear_has_alipay_account();
  void set_has_alipay_name();
  void clear_has_alipay_name();
  void set_has_change_alipay_num();
  void clear_has_change_alipay_num();
  void set_has_phone();
  void clear_has_phone();
  void set_has_phone_type();
  void clear_has_phone_type();
  void set_has_version();
  void clear_has_version();
  void set_has_channel_id();
  void clear_has_channel_id();
  void set_has_package_name();
  void clear_has_package_name();
  void set_has_imei();
  void clear_has_imei();
  void set_has_ip();
  void clear_has_ip();
  void set_has_risk();
  void clear_has_risk();
  void set_has_ip_area();
  void clear_has_ip_area();
  void set_has_password();
  void clear_has_password();
  void set_has_create_channel_id();
  void clear_has_create_channel_id();
  void set_has_enable_transfer();
  void clear_has_enable_transfer();
  void set_has_is_first();
  void clear_has_is_first();
  void set_has_inviter_guid();
  void clear_has_inviter_guid();
  void set_has_invite_code();
  void clear_has_invite_code();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr account_;
  ::google::protobuf::internal::ArenaStringPtr nickname_;
  ::google::protobuf::internal::ArenaStringPtr alipay_account_;
  ::google::protobuf::internal::ArenaStringPtr alipay_name_;
  ::google::protobuf::internal::ArenaStringPtr phone_;
  ::google::protobuf::internal::ArenaStringPtr phone_type_;
  ::google::protobuf::internal::ArenaStringPtr version_;
  ::google::protobuf::internal::ArenaStringPtr channel_id_;
  ::google::protobuf::internal::ArenaStringPtr package_name_;
  ::google::protobuf::internal::ArenaStringPtr imei_;
  ::google::protobuf::internal::ArenaStringPtr ip_;
  ::google::protobuf::internal::ArenaStringPtr ip_area_;
  ::google::protobuf::internal::ArenaStringPtr password_;
  ::google::protobuf::internal::ArenaStringPtr create_channel_id_;
  ::google::protobuf::internal::ArenaStringPtr invite_code_;
  ::google::protobuf::int32 session_id_;
  ::google::protobuf::int32 gate_id_;
  ::google::protobuf::int32 guid_;
  ::google::protobuf::int32 vip_;
  ::google::protobuf::int32 login_time_;
  ::google::protobuf::int32 logout_time_;
  ::google::protobuf::int32 change_alipay_num_;
  bool has_bank_password_;
  bool is_guest_;
  bool is_reconnect_;
  bool enable_transfer_;
  ::google::protobuf::int32 risk_;
  ::google::protobuf::int32 inviter_guid_;
  ::google::protobuf::int32 is_first_;
  friend struct protobuf_redis_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
// PlayerLoginInfo

// optional int32 session_id = 1;
inline bool PlayerLoginInfo::has_session_id() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
inline void PlayerLoginInfo::set_has_session_id() {
  _has_bits_[0] |= 0x00008000u;
}
inline void PlayerLoginInfo::clear_has_session_id() {
  _has_bits_[0] &= ~0x00008000u;
}
inline void PlayerLoginInfo::clear_session_id() {
  session_id_ = 0;
  clear_has_session_id();
}
inline ::google::protobuf::int32 PlayerLoginInfo::session_id() const {
  // @@protoc_insertion_point(field_get:PlayerLoginInfo.session_id)
  return session_id_;
}
inline void PlayerLoginInfo::set_session_id(::google::protobuf::int32 value) {
  set_has_session_id();
  session_id_ = value;
  // @@protoc_insertion_point(field_set:PlayerLoginInfo.session_id)
}

// optional int32 gate_id = 2;
inline bool PlayerLoginInfo::has_gate_id() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
inline void PlayerLoginInfo::set_has_gate_id() {
  _has_bits_[0] |= 0x00010000u;
}
inline void PlayerLoginInfo::clear_has_gate_id() {
  _has_bits_[0] &= ~0x00010000u;
}
inline void PlayerLoginInfo::clear_gate_id() {
  gate_id_ = 0;
  clear_has_gate_id();
}
inline ::google::protobuf::int32 PlayerLoginInfo::gate_id() const {
  // @@protoc_insertion_point(field_get:PlayerLoginInfo.gate_id)
  return gate_id_;
}
inline void PlayerLoginInfo::set_gate_id(::google::protobuf::int32 value) {
  set_has_gate_id();
  gate_id_ = value;
  // @@protoc_insertion_point(field_set:PlayerLoginInfo.gate_id)
}

// optional string account = 3;
inline bool PlayerLoginInfo::has_account() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PlayerLoginInfo::set_has_account() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PlayerLoginInfo::clear_has_account() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PlayerLoginInfo::clear_account() {
  account_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_account();
}
inline const ::std::string& PlayerLoginInfo::account() const {
  // @@protoc_insertion_point(field_get:PlayerLoginInfo.account)
  return account_.GetNoArena();
}
inline void PlayerLoginInfo::set_account(const ::std::string& value) {
  set_has_account();
  account_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:PlayerLoginInfo.account)
}
#if LANG_CXX11
inline void PlayerLoginInfo::set_account(::std::string&& value) {
  set_has_account();
  account_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:PlayerLoginInfo.account)
}
#endif
inline void PlayerLoginInfo::set_account(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_account();
  account_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:PlayerLoginInfo.account)
}
inline void PlayerLoginInfo::set_account(const char* value, size_t size) {
  set_has_account();
  account_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:PlayerLoginInfo.account)
}
inline ::std::string* PlayerLoginInfo::mutable_account() {
  set_has_account();
  // @@protoc_insertion_point(field_mutable:PlayerLoginInfo.account)
  return account_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* PlayerLoginInfo::release_account() {
  // @@protoc_insertion_point(field_release:PlayerLoginInfo.account)
  clear_has_account();
  return account_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PlayerLoginInfo::set_allocated_account(::std::string* account) {
  if (account != NULL) {
    set_has_account();
  } else {
    clear_has_account();
  }
  account_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), account);
  // @@protoc_insertion_point(field_set_allocated:PlayerLoginInfo.account)
}

// optional int32 guid = 4;
inline bool PlayerLoginInfo::has_guid() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
inline void PlayerLoginInfo::set_has_guid() {
  _has_bits_[0] |= 0x00020000u;
}
inline void PlayerLoginInfo::clear_has_guid() {
  _has_bits_[0] &= ~0x00020000u;
}
inline void PlayerLoginInfo::clear_guid() {
  guid_ = 0;
  clear_has_guid();
}
inline ::google::protobuf::int32 PlayerLoginInfo::guid() const {
  // @@protoc_insertion_point(field_get:PlayerLoginInfo.guid)
  return guid_;
}
inline void PlayerLoginInfo::set_guid(::google::protobuf::int32 value) {
  set_has_guid();
  guid_ = value;
  // @@protoc_insertion_point(field_set:PlayerLoginInfo.guid)
}

// optional string nickname = 5;
inline bool PlayerLoginInfo::has_nickname() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void PlayerLoginInfo::set_has_nickname() {
  _has_bits_[0] |= 0x00000002u;
}
inline void PlayerLoginInfo::clear_has_nickname() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void PlayerLoginInfo::clear_nickname() {
  nickname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_nickname();
}
inline const ::std::string& PlayerLoginInfo::nickname() const {
  // @@protoc_insertion_point(field_get:PlayerLoginInfo.nickname)
  return nickname_.GetNoArena();
}
inline void PlayerLoginInfo::set_nickname(const ::std::string& value) {
  set_has_nickname();
  nickname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:PlayerLoginInfo.nickname)
}
#if LANG_CXX11
inline void PlayerLoginInfo::set_nickname(::std::string&& value) {
  set_has_nickname();
  nickname_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:PlayerLoginInfo.nickname)
}
#endif
inline void PlayerLoginInfo::set_nickname(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_nickname();
  nickname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:PlayerLoginInfo.nickname)
}
inline void PlayerLoginInfo::set_nickname(const char* value, size_t size) {
  set_has_nickname();
  nickname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:PlayerLoginInfo.nickname)
}
inline ::std::string* PlayerLoginInfo::mutable_nickname() {
  set_has_nickname();
  // @@protoc_insertion_point(field_mutable:PlayerLoginInfo.nickname)
  return nickname_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* PlayerLoginInfo::release_nickname() {
  // @@protoc_insertion_point(field_release:PlayerLoginInfo.nickname)
  clear_has_nickname();
  return nickname_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PlayerLoginInfo::set_allocated_nickname(::std::string* nickname) {
  if (nickname != NULL) {
    set_has_nickname();
  } else {
    clear_has_nickname();
  }
  nickname_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), nickname);
  // @@protoc_insertion_point(field_set_allocated:PlayerLoginInfo.nickname)
}

// optional int32 vip = 6;
inline bool PlayerLoginInfo::has_vip() const {
  return (_has_bits_[0] & 0x00040000u) != 0;
}
inline void PlayerLoginInfo::set_has_vip() {
  _has_bits_[0] |= 0x00040000u;
}
inline void PlayerLoginInfo::clear_has_vip() {
  _has_bits_[0] &= ~0x00040000u;
}
inline void PlayerLoginInfo::clear_vip() {
  vip_ = 0;
  clear_has_vip();
}
inline ::google::protobuf::int32 PlayerLoginInfo::vip() const {
  // @@protoc_insertion_point(field_get:PlayerLoginInfo.vip)
  return vip_;
}
inline void PlayerLoginInfo::set_vip(::google::protobuf::int32 value) {
  set_has_vip();
  vip_ = value;
  // @@protoc_insertion_point(field_set:PlayerLoginInfo.vip)
}

// optional int32 login_time = 7;
inline bool PlayerLoginInfo::has_login_time() const {
  return (_has_bits_[0] & 0x00080000u) != 0;
}
inline void PlayerLoginInfo::set_has_login_time() {
  _has_bits_[0] |= 0x00080000u;
}
inline void PlayerLoginInfo::clear_has_login_time() {
  _has_bits_[0] &= ~0x00080000u;
}
inline void PlayerLoginInfo::clear_login_time() {
  login_time_ = 0;
  clear_has_login_time();
}
inline ::google::protobuf::int32 PlayerLoginInfo::login_time() const {
  // @@protoc_insertion_point(field_get:PlayerLoginInfo.login_time)
  return login_time_;
}
inline void PlayerLoginInfo::set_login_time(::google::protobuf::int32 value) {
  set_has_login_time();
  login_time_ = value;
  // @@protoc_insertion_point(field_set:PlayerLoginInfo.login_time)
}

// optional int32 logout_time = 8;
inline bool PlayerLoginInfo::has_logout_time() const {
  return (_has_bits_[0] & 0x00100000u) != 0;
}
inline void PlayerLoginInfo::set_has_logout_time() {
  _has_bits_[0] |= 0x00100000u;
}
inline void PlayerLoginInfo::clear_has_logout_time() {
  _has_bits_[0] &= ~0x00100000u;
}
inline void PlayerLoginInfo::clear_logout_time() {
  logout_time_ = 0;
  clear_has_logout_time();
}
inline ::google::protobuf::int32 PlayerLoginInfo::logout_time() const {
  // @@protoc_insertion_point(field_get:PlayerLoginInfo.logout_time)
  return logout_time_;
}
inline void PlayerLoginInfo::set_logout_time(::google::protobuf::int32 value) {
  set_has_logout_time();
  logout_time_ = value;
  // @@protoc_insertion_point(field_set:PlayerLoginInfo.logout_time)
}

// optional bool has_bank_password = 9;
inline bool PlayerLoginInfo::has_has_bank_password() const {
  return (_has_bits_[0] & 0x00400000u) != 0;
}
inline void PlayerLoginInfo::set_has_has_bank_password() {
  _has_bits_[0] |= 0x00400000u;
}
inline void PlayerLoginInfo::clear_has_has_bank_password() {
  _has_bits_[0] &= ~0x00400000u;
}
inline void PlayerLoginInfo::clear_has_bank_password() {
  has_bank_password_ = false;
  clear_has_has_bank_password();
}
inline bool PlayerLoginInfo::has_bank_password() const {
  // @@protoc_insertion_point(field_get:PlayerLoginInfo.has_bank_password)
  return has_bank_password_;
}
inline void PlayerLoginInfo::set_has_bank_password(bool value) {
  set_has_has_bank_password();
  has_bank_password_ = value;
  // @@protoc_insertion_point(field_set:PlayerLoginInfo.has_bank_password)
}

// optional bool is_guest = 10;
inline bool PlayerLoginInfo::has_is_guest() const {
  return (_has_bits_[0] & 0x00800000u) != 0;
}
inline void PlayerLoginInfo::set_has_is_guest() {
  _has_bits_[0] |= 0x00800000u;
}
inline void PlayerLoginInfo::clear_has_is_guest() {
  _has_bits_[0] &= ~0x00800000u;
}
inline void PlayerLoginInfo::clear_is_guest() {
  is_guest_ = false;
  clear_has_is_guest();
}
inline bool PlayerLoginInfo::is_guest() const {
  // @@protoc_insertion_point(field_get:PlayerLoginInfo.is_guest)
  return is_guest_;
}
inline void PlayerLoginInfo::set_is_guest(bool value) {
  set_has_is_guest();
  is_guest_ = value;
  // @@protoc_insertion_point(field_set:PlayerLoginInfo.is_guest)
}

// optional bool is_reconnect = 11;
inline bool PlayerLoginInfo::has_is_reconnect() const {
  return (_has_bits_[0] & 0x01000000u) != 0;
}
inline void PlayerLoginInfo::set_has_is_reconnect() {
  _has_bits_[0] |= 0x01000000u;
}
inline void PlayerLoginInfo::clear_has_is_reconnect() {
  _has_bits_[0] &= ~0x01000000u;
}
inline void PlayerLoginInfo::clear_is_reconnect() {
  is_reconnect_ = false;
  clear_has_is_reconnect();
}
inline bool PlayerLoginInfo::is_reconnect() const {
  // @@protoc_insertion_point(field_get:PlayerLoginInfo.is_reconnect)
  return is_reconnect_;
}
inline void PlayerLoginInfo::set_is_reconnect(bool value) {
  set_has_is_reconnect();
  is_reconnect_ = value;
  // @@protoc_insertion_point(field_set:PlayerLoginInfo.is_reconnect)
}

// optional string alipay_account = 12;
inline bool PlayerLoginInfo::has_alipay_account() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void PlayerLoginInfo::set_has_alipay_account() {
  _has_bits_[0] |= 0x00000004u;
}
inline void PlayerLoginInfo::clear_has_alipay_account() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void PlayerLoginInfo::clear_alipay_account() {
  alipay_account_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_alipay_account();
}
inline const ::std::string& PlayerLoginInfo::alipay_account() const {
  // @@protoc_insertion_point(field_get:PlayerLoginInfo.alipay_account)
  return alipay_account_.GetNoArena();
}
inline void PlayerLoginInfo::set_alipay_account(const ::std::string& value) {
  set_has_alipay_account();
  alipay_account_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:PlayerLoginInfo.alipay_account)
}
#if LANG_CXX11
inline void PlayerLoginInfo::set_alipay_account(::std::string&& value) {
  set_has_alipay_account();
  alipay_account_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:PlayerLoginInfo.alipay_account)
}
#endif
inline void PlayerLoginInfo::set_alipay_account(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_alipay_account();
  alipay_account_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:PlayerLoginInfo.alipay_account)
}
inline void PlayerLoginInfo::set_alipay_account(const char* value, size_t size) {
  set_has_alipay_account();
  alipay_account_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:PlayerLoginInfo.alipay_account)
}
inline ::std::string* PlayerLoginInfo::mutable_alipay_account() {
  set_has_alipay_account();
  // @@protoc_insertion_point(field_mutable:PlayerLoginInfo.alipay_account)
  return alipay_account_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* PlayerLoginInfo::release_alipay_account() {
  // @@protoc_insertion_point(field_release:PlayerLoginInfo.alipay_account)
  clear_has_alipay_account();
  return alipay_account_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PlayerLoginInfo::set_allocated_alipay_account(::std::string* alipay_account) {
  if (alipay_account != NULL) {
    set_has_alipay_account();
  } else {
    clear_has_alipay_account();
  }
  alipay_account_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), alipay_account);
  // @@protoc_insertion_point(field_set_allocated:PlayerLoginInfo.alipay_account)
}

// optional string alipay_name = 13;
inline bool PlayerLoginInfo::has_alipay_name() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void PlayerLoginInfo::set_has_alipay_name() {
  _has_bits_[0] |= 0x00000008u;
}
inline void PlayerLoginInfo::clear_has_alipay_name() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void PlayerLoginInfo::clear_alipay_name() {
  alipay_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_alipay_name();
}
inline const ::std::string& PlayerLoginInfo::alipay_name() const {
  // @@protoc_insertion_point(field_get:PlayerLoginInfo.alipay_name)
  return alipay_name_.GetNoArena();
}
inline void PlayerLoginInfo::set_alipay_name(const ::std::string& value) {
  set_has_alipay_name();
  alipay_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:PlayerLoginInfo.alipay_name)
}
#if LANG_CXX11
inline void PlayerLoginInfo::set_alipay_name(::std::string&& value) {
  set_has_alipay_name();
  alipay_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:PlayerLoginInfo.alipay_name)
}
#endif
inline void PlayerLoginInfo::set_alipay_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_alipay_name();
  alipay_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:PlayerLoginInfo.alipay_name)
}
inline void PlayerLoginInfo::set_alipay_name(const char* value, size_t size) {
  set_has_alipay_name();
  alipay_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:PlayerLoginInfo.alipay_name)
}
inline ::std::string* PlayerLoginInfo::mutable_alipay_name() {
  set_has_alipay_name();
  // @@protoc_insertion_point(field_mutable:PlayerLoginInfo.alipay_name)
  return alipay_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* PlayerLoginInfo::release_alipay_name() {
  // @@protoc_insertion_point(field_release:PlayerLoginInfo.alipay_name)
  clear_has_alipay_name();
  return alipay_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PlayerLoginInfo::set_allocated_alipay_name(::std::string* alipay_name) {
  if (alipay_name != NULL) {
    set_has_alipay_name();
  } else {
    clear_has_alipay_name();
  }
  alipay_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), alipay_name);
  // @@protoc_insertion_point(field_set_allocated:PlayerLoginInfo.alipay_name)
}

// optional int32 change_alipay_num = 14;
inline bool PlayerLoginInfo::has_change_alipay_num() const {
  return (_has_bits_[0] & 0x00200000u) != 0;
}
inline void PlayerLoginInfo::set_has_change_alipay_num() {
  _has_bits_[0] |= 0x00200000u;
}
inline void PlayerLoginInfo::clear_has_change_alipay_num() {
  _has_bits_[0] &= ~0x00200000u;
}
inline void PlayerLoginInfo::clear_change_alipay_num() {
  change_alipay_num_ = 0;
  clear_has_change_alipay_num();
}
inline ::google::protobuf::int32 PlayerLoginInfo::change_alipay_num() const {
  // @@protoc_insertion_point(field_get:PlayerLoginInfo.change_alipay_num)
  return change_alipay_num_;
}
inline void PlayerLoginInfo::set_change_alipay_num(::google::protobuf::int32 value) {
  set_has_change_alipay_num();
  change_alipay_num_ = value;
  // @@protoc_insertion_point(field_set:PlayerLoginInfo.change_alipay_num)
}

// optional string phone = 15;
inline bool PlayerLoginInfo::has_phone() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void PlayerLoginInfo::set_has_phone() {
  _has_bits_[0] |= 0x00000010u;
}
inline void PlayerLoginInfo::clear_has_phone() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void PlayerLoginInfo::clear_phone() {
  phone_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_phone();
}
inline const ::std::string& PlayerLoginInfo::phone() const {
  // @@protoc_insertion_point(field_get:PlayerLoginInfo.phone)
  return phone_.GetNoArena();
}
inline void PlayerLoginInfo::set_phone(const ::std::string& value) {
  set_has_phone();
  phone_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:PlayerLoginInfo.phone)
}
#if LANG_CXX11
inline void PlayerLoginInfo::set_phone(::std::string&& value) {
  set_has_phone();
  phone_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:PlayerLoginInfo.phone)
}
#endif
inline void PlayerLoginInfo::set_phone(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_phone();
  phone_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:PlayerLoginInfo.phone)
}
inline void PlayerLoginInfo::set_phone(const char* value, size_t size) {
  set_has_phone();
  phone_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:PlayerLoginInfo.phone)
}
inline ::std::string* PlayerLoginInfo::mutable_phone() {
  set_has_phone();
  // @@protoc_insertion_point(field_mutable:PlayerLoginInfo.phone)
  return phone_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* PlayerLoginInfo::release_phone() {
  // @@protoc_insertion_point(field_release:PlayerLoginInfo.phone)
  clear_has_phone();
  return phone_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PlayerLoginInfo::set_allocated_phone(::std::string* phone) {
  if (phone != NULL) {
    set_has_phone();
  } else {
    clear_has_phone();
  }
  phone_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), phone);
  // @@protoc_insertion_point(field_set_allocated:PlayerLoginInfo.phone)
}

// optional string phone_type = 16;
inline bool PlayerLoginInfo::has_phone_type() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void PlayerLoginInfo::set_has_phone_type() {
  _has_bits_[0] |= 0x00000020u;
}
inline void PlayerLoginInfo::clear_has_phone_type() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void PlayerLoginInfo::clear_phone_type() {
  phone_type_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_phone_type();
}
inline const ::std::string& PlayerLoginInfo::phone_type() const {
  // @@protoc_insertion_point(field_get:PlayerLoginInfo.phone_type)
  return phone_type_.GetNoArena();
}
inline void PlayerLoginInfo::set_phone_type(const ::std::string& value) {
  set_has_phone_type();
  phone_type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:PlayerLoginInfo.phone_type)
}
#if LANG_CXX11
inline void PlayerLoginInfo::set_phone_type(::std::string&& value) {
  set_has_phone_type();
  phone_type_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:PlayerLoginInfo.phone_type)
}
#endif
inline void PlayerLoginInfo::set_phone_type(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_phone_type();
  phone_type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:PlayerLoginInfo.phone_type)
}
inline void PlayerLoginInfo::set_phone_type(const char* value, size_t size) {
  set_has_phone_type();
  phone_type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:PlayerLoginInfo.phone_type)
}
inline ::std::string* PlayerLoginInfo::mutable_phone_type() {
  set_has_phone_type();
  // @@protoc_insertion_point(field_mutable:PlayerLoginInfo.phone_type)
  return phone_type_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* PlayerLoginInfo::release_phone_type() {
  // @@protoc_insertion_point(field_release:PlayerLoginInfo.phone_type)
  clear_has_phone_type();
  return phone_type_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PlayerLoginInfo::set_allocated_phone_type(::std::string* phone_type) {
  if (phone_type != NULL) {
    set_has_phone_type();
  } else {
    clear_has_phone_type();
  }
  phone_type_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), phone_type);
  // @@protoc_insertion_point(field_set_allocated:PlayerLoginInfo.phone_type)
}

// optional string version = 17;
inline bool PlayerLoginInfo::has_version() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void PlayerLoginInfo::set_has_version() {
  _has_bits_[0] |= 0x00000040u;
}
inline void PlayerLoginInfo::clear_has_version() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void PlayerLoginInfo::clear_version() {
  version_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_version();
}
inline const ::std::string& PlayerLoginInfo::version() const {
  // @@protoc_insertion_point(field_get:PlayerLoginInfo.version)
  return version_.GetNoArena();
}
inline void PlayerLoginInfo::set_version(const ::std::string& value) {
  set_has_version();
  version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:PlayerLoginInfo.version)
}
#if LANG_CXX11
inline void PlayerLoginInfo::set_version(::std::string&& value) {
  set_has_version();
  version_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:PlayerLoginInfo.version)
}
#endif
inline void PlayerLoginInfo::set_version(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_version();
  version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:PlayerLoginInfo.version)
}
inline void PlayerLoginInfo::set_version(const char* value, size_t size) {
  set_has_version();
  version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:PlayerLoginInfo.version)
}
inline ::std::string* PlayerLoginInfo::mutable_version() {
  set_has_version();
  // @@protoc_insertion_point(field_mutable:PlayerLoginInfo.version)
  return version_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* PlayerLoginInfo::release_version() {
  // @@protoc_insertion_point(field_release:PlayerLoginInfo.version)
  clear_has_version();
  return version_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PlayerLoginInfo::set_allocated_version(::std::string* version) {
  if (version != NULL) {
    set_has_version();
  } else {
    clear_has_version();
  }
  version_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), version);
  // @@protoc_insertion_point(field_set_allocated:PlayerLoginInfo.version)
}

// optional string channel_id = 18;
inline bool PlayerLoginInfo::has_channel_id() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void PlayerLoginInfo::set_has_channel_id() {
  _has_bits_[0] |= 0x00000080u;
}
inline void PlayerLoginInfo::clear_has_channel_id() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void PlayerLoginInfo::clear_channel_id() {
  channel_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_channel_id();
}
inline const ::std::string& PlayerLoginInfo::channel_id() const {
  // @@protoc_insertion_point(field_get:PlayerLoginInfo.channel_id)
  return channel_id_.GetNoArena();
}
inline void PlayerLoginInfo::set_channel_id(const ::std::string& value) {
  set_has_channel_id();
  channel_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:PlayerLoginInfo.channel_id)
}
#if LANG_CXX11
inline void PlayerLoginInfo::set_channel_id(::std::string&& value) {
  set_has_channel_id();
  channel_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:PlayerLoginInfo.channel_id)
}
#endif
inline void PlayerLoginInfo::set_channel_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_channel_id();
  channel_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:PlayerLoginInfo.channel_id)
}
inline void PlayerLoginInfo::set_channel_id(const char* value, size_t size) {
  set_has_channel_id();
  channel_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:PlayerLoginInfo.channel_id)
}
inline ::std::string* PlayerLoginInfo::mutable_channel_id() {
  set_has_channel_id();
  // @@protoc_insertion_point(field_mutable:PlayerLoginInfo.channel_id)
  return channel_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* PlayerLoginInfo::release_channel_id() {
  // @@protoc_insertion_point(field_release:PlayerLoginInfo.channel_id)
  clear_has_channel_id();
  return channel_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PlayerLoginInfo::set_allocated_channel_id(::std::string* channel_id) {
  if (channel_id != NULL) {
    set_has_channel_id();
  } else {
    clear_has_channel_id();
  }
  channel_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), channel_id);
  // @@protoc_insertion_point(field_set_allocated:PlayerLoginInfo.channel_id)
}

// optional string package_name = 19;
inline bool PlayerLoginInfo::has_package_name() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void PlayerLoginInfo::set_has_package_name() {
  _has_bits_[0] |= 0x00000100u;
}
inline void PlayerLoginInfo::clear_has_package_name() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void PlayerLoginInfo::clear_package_name() {
  package_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_package_name();
}
inline const ::std::string& PlayerLoginInfo::package_name() const {
  // @@protoc_insertion_point(field_get:PlayerLoginInfo.package_name)
  return package_name_.GetNoArena();
}
inline void PlayerLoginInfo::set_package_name(const ::std::string& value) {
  set_has_package_name();
  package_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:PlayerLoginInfo.package_name)
}
#if LANG_CXX11
inline void PlayerLoginInfo::set_package_name(::std::string&& value) {
  set_has_package_name();
  package_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:PlayerLoginInfo.package_name)
}
#endif
inline void PlayerLoginInfo::set_package_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_package_name();
  package_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:PlayerLoginInfo.package_name)
}
inline void PlayerLoginInfo::set_package_name(const char* value, size_t size) {
  set_has_package_name();
  package_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:PlayerLoginInfo.package_name)
}
inline ::std::string* PlayerLoginInfo::mutable_package_name() {
  set_has_package_name();
  // @@protoc_insertion_point(field_mutable:PlayerLoginInfo.package_name)
  return package_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* PlayerLoginInfo::release_package_name() {
  // @@protoc_insertion_point(field_release:PlayerLoginInfo.package_name)
  clear_has_package_name();
  return package_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PlayerLoginInfo::set_allocated_package_name(::std::string* package_name) {
  if (package_name != NULL) {
    set_has_package_name();
  } else {
    clear_has_package_name();
  }
  package_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), package_name);
  // @@protoc_insertion_point(field_set_allocated:PlayerLoginInfo.package_name)
}

// optional string imei = 20;
inline bool PlayerLoginInfo::has_imei() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void PlayerLoginInfo::set_has_imei() {
  _has_bits_[0] |= 0x00000200u;
}
inline void PlayerLoginInfo::clear_has_imei() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void PlayerLoginInfo::clear_imei() {
  imei_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_imei();
}
inline const ::std::string& PlayerLoginInfo::imei() const {
  // @@protoc_insertion_point(field_get:PlayerLoginInfo.imei)
  return imei_.GetNoArena();
}
inline void PlayerLoginInfo::set_imei(const ::std::string& value) {
  set_has_imei();
  imei_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:PlayerLoginInfo.imei)
}
#if LANG_CXX11
inline void PlayerLoginInfo::set_imei(::std::string&& value) {
  set_has_imei();
  imei_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:PlayerLoginInfo.imei)
}
#endif
inline void PlayerLoginInfo::set_imei(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_imei();
  imei_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:PlayerLoginInfo.imei)
}
inline void PlayerLoginInfo::set_imei(const char* value, size_t size) {
  set_has_imei();
  imei_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:PlayerLoginInfo.imei)
}
inline ::std::string* PlayerLoginInfo::mutable_imei() {
  set_has_imei();
  // @@protoc_insertion_point(field_mutable:PlayerLoginInfo.imei)
  return imei_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* PlayerLoginInfo::release_imei() {
  // @@protoc_insertion_point(field_release:PlayerLoginInfo.imei)
  clear_has_imei();
  return imei_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PlayerLoginInfo::set_allocated_imei(::std::string* imei) {
  if (imei != NULL) {
    set_has_imei();
  } else {
    clear_has_imei();
  }
  imei_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), imei);
  // @@protoc_insertion_point(field_set_allocated:PlayerLoginInfo.imei)
}

// optional string ip = 21;
inline bool PlayerLoginInfo::has_ip() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void PlayerLoginInfo::set_has_ip() {
  _has_bits_[0] |= 0x00000400u;
}
inline void PlayerLoginInfo::clear_has_ip() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void PlayerLoginInfo::clear_ip() {
  ip_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_ip();
}
inline const ::std::string& PlayerLoginInfo::ip() const {
  // @@protoc_insertion_point(field_get:PlayerLoginInfo.ip)
  return ip_.GetNoArena();
}
inline void PlayerLoginInfo::set_ip(const ::std::string& value) {
  set_has_ip();
  ip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:PlayerLoginInfo.ip)
}
#if LANG_CXX11
inline void PlayerLoginInfo::set_ip(::std::string&& value) {
  set_has_ip();
  ip_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:PlayerLoginInfo.ip)
}
#endif
inline void PlayerLoginInfo::set_ip(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_ip();
  ip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:PlayerLoginInfo.ip)
}
inline void PlayerLoginInfo::set_ip(const char* value, size_t size) {
  set_has_ip();
  ip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:PlayerLoginInfo.ip)
}
inline ::std::string* PlayerLoginInfo::mutable_ip() {
  set_has_ip();
  // @@protoc_insertion_point(field_mutable:PlayerLoginInfo.ip)
  return ip_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* PlayerLoginInfo::release_ip() {
  // @@protoc_insertion_point(field_release:PlayerLoginInfo.ip)
  clear_has_ip();
  return ip_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PlayerLoginInfo::set_allocated_ip(::std::string* ip) {
  if (ip != NULL) {
    set_has_ip();
  } else {
    clear_has_ip();
  }
  ip_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ip);
  // @@protoc_insertion_point(field_set_allocated:PlayerLoginInfo.ip)
}

// optional int32 risk = 22;
inline bool PlayerLoginInfo::has_risk() const {
  return (_has_bits_[0] & 0x04000000u) != 0;
}
inline void PlayerLoginInfo::set_has_risk() {
  _has_bits_[0] |= 0x04000000u;
}
inline void PlayerLoginInfo::clear_has_risk() {
  _has_bits_[0] &= ~0x04000000u;
}
inline void PlayerLoginInfo::clear_risk() {
  risk_ = 0;
  clear_has_risk();
}
inline ::google::protobuf::int32 PlayerLoginInfo::risk() const {
  // @@protoc_insertion_point(field_get:PlayerLoginInfo.risk)
  return risk_;
}
inline void PlayerLoginInfo::set_risk(::google::protobuf::int32 value) {
  set_has_risk();
  risk_ = value;
  // @@protoc_insertion_point(field_set:PlayerLoginInfo.risk)
}

// optional string ip_area = 23;
inline bool PlayerLoginInfo::has_ip_area() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void PlayerLoginInfo::set_has_ip_area() {
  _has_bits_[0] |= 0x00000800u;
}
inline void PlayerLoginInfo::clear_has_ip_area() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void PlayerLoginInfo::clear_ip_area() {
  ip_area_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_ip_area();
}
inline const ::std::string& PlayerLoginInfo::ip_area() const {
  // @@protoc_insertion_point(field_get:PlayerLoginInfo.ip_area)
  return ip_area_.GetNoArena();
}
inline void PlayerLoginInfo::set_ip_area(const ::std::string& value) {
  set_has_ip_area();
  ip_area_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:PlayerLoginInfo.ip_area)
}
#if LANG_CXX11
inline void PlayerLoginInfo::set_ip_area(::std::string&& value) {
  set_has_ip_area();
  ip_area_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:PlayerLoginInfo.ip_area)
}
#endif
inline void PlayerLoginInfo::set_ip_area(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_ip_area();
  ip_area_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:PlayerLoginInfo.ip_area)
}
inline void PlayerLoginInfo::set_ip_area(const char* value, size_t size) {
  set_has_ip_area();
  ip_area_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:PlayerLoginInfo.ip_area)
}
inline ::std::string* PlayerLoginInfo::mutable_ip_area() {
  set_has_ip_area();
  // @@protoc_insertion_point(field_mutable:PlayerLoginInfo.ip_area)
  return ip_area_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* PlayerLoginInfo::release_ip_area() {
  // @@protoc_insertion_point(field_release:PlayerLoginInfo.ip_area)
  clear_has_ip_area();
  return ip_area_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PlayerLoginInfo::set_allocated_ip_area(::std::string* ip_area) {
  if (ip_area != NULL) {
    set_has_ip_area();
  } else {
    clear_has_ip_area();
  }
  ip_area_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ip_area);
  // @@protoc_insertion_point(field_set_allocated:PlayerLoginInfo.ip_area)
}

// optional string password = 24;
inline bool PlayerLoginInfo::has_password() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void PlayerLoginInfo::set_has_password() {
  _has_bits_[0] |= 0x00001000u;
}
inline void PlayerLoginInfo::clear_has_password() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void PlayerLoginInfo::clear_password() {
  password_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_password();
}
inline const ::std::string& PlayerLoginInfo::password() const {
  // @@protoc_insertion_point(field_get:PlayerLoginInfo.password)
  return password_.GetNoArena();
}
inline void PlayerLoginInfo::set_password(const ::std::string& value) {
  set_has_password();
  password_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:PlayerLoginInfo.password)
}
#if LANG_CXX11
inline void PlayerLoginInfo::set_password(::std::string&& value) {
  set_has_password();
  password_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:PlayerLoginInfo.password)
}
#endif
inline void PlayerLoginInfo::set_password(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_password();
  password_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:PlayerLoginInfo.password)
}
inline void PlayerLoginInfo::set_password(const char* value, size_t size) {
  set_has_password();
  password_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:PlayerLoginInfo.password)
}
inline ::std::string* PlayerLoginInfo::mutable_password() {
  set_has_password();
  // @@protoc_insertion_point(field_mutable:PlayerLoginInfo.password)
  return password_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* PlayerLoginInfo::release_password() {
  // @@protoc_insertion_point(field_release:PlayerLoginInfo.password)
  clear_has_password();
  return password_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PlayerLoginInfo::set_allocated_password(::std::string* password) {
  if (password != NULL) {
    set_has_password();
  } else {
    clear_has_password();
  }
  password_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), password);
  // @@protoc_insertion_point(field_set_allocated:PlayerLoginInfo.password)
}

// optional string create_channel_id = 25;
inline bool PlayerLoginInfo::has_create_channel_id() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void PlayerLoginInfo::set_has_create_channel_id() {
  _has_bits_[0] |= 0x00002000u;
}
inline void PlayerLoginInfo::clear_has_create_channel_id() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void PlayerLoginInfo::clear_create_channel_id() {
  create_channel_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_create_channel_id();
}
inline const ::std::string& PlayerLoginInfo::create_channel_id() const {
  // @@protoc_insertion_point(field_get:PlayerLoginInfo.create_channel_id)
  return create_channel_id_.GetNoArena();
}
inline void PlayerLoginInfo::set_create_channel_id(const ::std::string& value) {
  set_has_create_channel_id();
  create_channel_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:PlayerLoginInfo.create_channel_id)
}
#if LANG_CXX11
inline void PlayerLoginInfo::set_create_channel_id(::std::string&& value) {
  set_has_create_channel_id();
  create_channel_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:PlayerLoginInfo.create_channel_id)
}
#endif
inline void PlayerLoginInfo::set_create_channel_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_create_channel_id();
  create_channel_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:PlayerLoginInfo.create_channel_id)
}
inline void PlayerLoginInfo::set_create_channel_id(const char* value, size_t size) {
  set_has_create_channel_id();
  create_channel_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:PlayerLoginInfo.create_channel_id)
}
inline ::std::string* PlayerLoginInfo::mutable_create_channel_id() {
  set_has_create_channel_id();
  // @@protoc_insertion_point(field_mutable:PlayerLoginInfo.create_channel_id)
  return create_channel_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* PlayerLoginInfo::release_create_channel_id() {
  // @@protoc_insertion_point(field_release:PlayerLoginInfo.create_channel_id)
  clear_has_create_channel_id();
  return create_channel_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PlayerLoginInfo::set_allocated_create_channel_id(::std::string* create_channel_id) {
  if (create_channel_id != NULL) {
    set_has_create_channel_id();
  } else {
    clear_has_create_channel_id();
  }
  create_channel_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), create_channel_id);
  // @@protoc_insertion_point(field_set_allocated:PlayerLoginInfo.create_channel_id)
}

// optional bool enable_transfer = 26;
inline bool PlayerLoginInfo::has_enable_transfer() const {
  return (_has_bits_[0] & 0x02000000u) != 0;
}
inline void PlayerLoginInfo::set_has_enable_transfer() {
  _has_bits_[0] |= 0x02000000u;
}
inline void PlayerLoginInfo::clear_has_enable_transfer() {
  _has_bits_[0] &= ~0x02000000u;
}
inline void PlayerLoginInfo::clear_enable_transfer() {
  enable_transfer_ = false;
  clear_has_enable_transfer();
}
inline bool PlayerLoginInfo::enable_transfer() const {
  // @@protoc_insertion_point(field_get:PlayerLoginInfo.enable_transfer)
  return enable_transfer_;
}
inline void PlayerLoginInfo::set_enable_transfer(bool value) {
  set_has_enable_transfer();
  enable_transfer_ = value;
  // @@protoc_insertion_point(field_set:PlayerLoginInfo.enable_transfer)
}

// optional int32 is_first = 27 [default = 2];
inline bool PlayerLoginInfo::has_is_first() const {
  return (_has_bits_[0] & 0x10000000u) != 0;
}
inline void PlayerLoginInfo::set_has_is_first() {
  _has_bits_[0] |= 0x10000000u;
}
inline void PlayerLoginInfo::clear_has_is_first() {
  _has_bits_[0] &= ~0x10000000u;
}
inline void PlayerLoginInfo::clear_is_first() {
  is_first_ = 2;
  clear_has_is_first();
}
inline ::google::protobuf::int32 PlayerLoginInfo::is_first() const {
  // @@protoc_insertion_point(field_get:PlayerLoginInfo.is_first)
  return is_first_;
}
inline void PlayerLoginInfo::set_is_first(::google::protobuf::int32 value) {
  set_has_is_first();
  is_first_ = value;
  // @@protoc_insertion_point(field_set:PlayerLoginInfo.is_first)
}

// optional int32 inviter_guid = 28 [default = 0];
inline bool PlayerLoginInfo::has_inviter_guid() const {
  return (_has_bits_[0] & 0x08000000u) != 0;
}
inline void PlayerLoginInfo::set_has_inviter_guid() {
  _has_bits_[0] |= 0x08000000u;
}
inline void PlayerLoginInfo::clear_has_inviter_guid() {
  _has_bits_[0] &= ~0x08000000u;
}
inline void PlayerLoginInfo::clear_inviter_guid() {
  inviter_guid_ = 0;
  clear_has_inviter_guid();
}
inline ::google::protobuf::int32 PlayerLoginInfo::inviter_guid() const {
  // @@protoc_insertion_point(field_get:PlayerLoginInfo.inviter_guid)
  return inviter_guid_;
}
inline void PlayerLoginInfo::set_inviter_guid(::google::protobuf::int32 value) {
  set_has_inviter_guid();
  inviter_guid_ = value;
  // @@protoc_insertion_point(field_set:PlayerLoginInfo.inviter_guid)
}

// optional string invite_code = 29;
inline bool PlayerLoginInfo::has_invite_code() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void PlayerLoginInfo::set_has_invite_code() {
  _has_bits_[0] |= 0x00004000u;
}
inline void PlayerLoginInfo::clear_has_invite_code() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void PlayerLoginInfo::clear_invite_code() {
  invite_code_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_invite_code();
}
inline const ::std::string& PlayerLoginInfo::invite_code() const {
  // @@protoc_insertion_point(field_get:PlayerLoginInfo.invite_code)
  return invite_code_.GetNoArena();
}
inline void PlayerLoginInfo::set_invite_code(const ::std::string& value) {
  set_has_invite_code();
  invite_code_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:PlayerLoginInfo.invite_code)
}
#if LANG_CXX11
inline void PlayerLoginInfo::set_invite_code(::std::string&& value) {
  set_has_invite_code();
  invite_code_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:PlayerLoginInfo.invite_code)
}
#endif
inline void PlayerLoginInfo::set_invite_code(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_invite_code();
  invite_code_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:PlayerLoginInfo.invite_code)
}
inline void PlayerLoginInfo::set_invite_code(const char* value, size_t size) {
  set_has_invite_code();
  invite_code_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:PlayerLoginInfo.invite_code)
}
inline ::std::string* PlayerLoginInfo::mutable_invite_code() {
  set_has_invite_code();
  // @@protoc_insertion_point(field_mutable:PlayerLoginInfo.invite_code)
  return invite_code_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* PlayerLoginInfo::release_invite_code() {
  // @@protoc_insertion_point(field_release:PlayerLoginInfo.invite_code)
  clear_has_invite_code();
  return invite_code_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PlayerLoginInfo::set_allocated_invite_code(::std::string* invite_code) {
  if (invite_code != NULL) {
    set_has_invite_code();
  } else {
    clear_has_invite_code();
  }
  invite_code_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), invite_code);
  // @@protoc_insertion_point(field_set_allocated:PlayerLoginInfo.invite_code)
}

#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)


// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_redis_2eproto__INCLUDED
