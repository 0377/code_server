// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: public_texas.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "public_texas.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
class UserInfoDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<UserInfo> {
} _UserInfo_default_instance_;
class TexasTableDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<TexasTable> {
} _TexasTable_default_instance_;
class SC_TexasTableInfoDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<SC_TexasTableInfo> {
} _SC_TexasTableInfo_default_instance_;
class SC_TexasSendUserCardsDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<SC_TexasSendUserCards> {
} _SC_TexasSendUserCards_default_instance_;
class SC_TexasSendPublicCardsDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<SC_TexasSendPublicCards> {
} _SC_TexasSendPublicCards_default_instance_;
class SC_TexasUserActionDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<SC_TexasUserAction> {
} _SC_TexasUserAction_default_instance_;
class SC_TexasNewUserDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<SC_TexasNewUser> {
} _SC_TexasNewUser_default_instance_;
class SC_TexasUserLeaveDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<SC_TexasUserLeave> {
} _SC_TexasUserLeave_default_instance_;
class SC_TexasForceLeaveDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<SC_TexasForceLeave> {
} _SC_TexasForceLeave_default_instance_;
class SC_TexasTableEndDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<SC_TexasTableEnd> {
} _SC_TexasTableEnd_default_instance_;
class SC_TexasGiveTipsDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<SC_TexasGiveTips> {
} _SC_TexasGiveTips_default_instance_;
class SC_TexasShowCardsDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<SC_TexasShowCards> {
} _SC_TexasShowCards_default_instance_;
class SC_TexasShowCardsPermissionDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<SC_TexasShowCardsPermission> {
} _SC_TexasShowCardsPermission_default_instance_;
class SC_TexasErrorDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<SC_TexasError> {
} _SC_TexasError_default_instance_;
class CS_TexasUserActionDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CS_TexasUserAction> {
} _CS_TexasUserAction_default_instance_;
class CS_TexasEnterTableDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CS_TexasEnterTable> {
} _CS_TexasEnterTable_default_instance_;
class CS_TexasLeaveTableDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CS_TexasLeaveTable> {
} _CS_TexasLeaveTable_default_instance_;
class CS_TexasGiveTipsDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CS_TexasGiveTips> {
} _CS_TexasGiveTips_default_instance_;
class CS_TexasShowCardsDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CS_TexasShowCards> {
} _CS_TexasShowCards_default_instance_;

namespace protobuf_public_5ftexas_2eproto {


namespace {

::google::protobuf::Metadata file_level_metadata[19];
const ::google::protobuf::EnumDescriptor* file_level_enum_descriptors[22];

}  // namespace

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTableField
    const TableStruct::entries[] = {
  {0, 0, 0, ::google::protobuf::internal::kInvalidMask, 0, 0},
};

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::AuxillaryParseTableField
    const TableStruct::aux[] = {
  ::google::protobuf::internal::AuxillaryParseTableField(),
};
PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTable const
    TableStruct::schema[] = {
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
};

const ::google::protobuf::uint32 TableStruct::offsets[] = {
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserInfo, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserInfo, guid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserInfo, chair_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserInfo, name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserInfo, icon_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserInfo, money_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserInfo, bet_money_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserInfo, action_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserInfo, position_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserInfo, hole_cards_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserInfo, countdown_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserInfo, cards_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserInfo, cards_type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserInfo, tax_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserInfo, victory_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserInfo, biggest_winner_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserInfo, win_money_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserInfo, main_pot_money_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserInfo, side_pot_money_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserInfo, cards_show_),
  2,
  3,
  0,
  1,
  4,
  5,
  6,
  7,
  8,
  9,
  ~0u,
  11,
  10,
  12,
  14,
  13,
  15,
  ~0u,
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TexasTable, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TexasTable, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TexasTable, state_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TexasTable, max_bet_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TexasTable, min_bet_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TexasTable, blind_bet_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TexasTable, pot_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TexasTable, side_pot_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TexasTable, think_time_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TexasTable, public_cards_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TexasTable, own_chair_),
  3,
  0,
  1,
  2,
  5,
  ~0u,
  4,
  ~0u,
  6,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SC_TexasTableInfo, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SC_TexasTableInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SC_TexasTableInfo, pb_table_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SC_TexasTableInfo, pb_user_),
  0,
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SC_TexasSendUserCards, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SC_TexasSendUserCards, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SC_TexasSendUserCards, pb_user_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SC_TexasSendUserCards, pb_table_),
  ~0u,
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SC_TexasSendPublicCards, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SC_TexasSendPublicCards, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SC_TexasSendPublicCards, pb_table_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SC_TexasSendPublicCards, pb_user_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SC_TexasSendPublicCards, public_cards_),
  0,
  ~0u,
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SC_TexasUserAction, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SC_TexasUserAction, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SC_TexasUserAction, pb_action_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SC_TexasUserAction, pb_table_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SC_TexasUserAction, chair_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SC_TexasUserAction, action_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SC_TexasUserAction, bet_money_),
  0,
  1,
  2,
  3,
  4,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SC_TexasNewUser, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SC_TexasNewUser, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SC_TexasNewUser, pb_user_),
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SC_TexasUserLeave, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SC_TexasUserLeave, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SC_TexasUserLeave, pb_user_),
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SC_TexasForceLeave, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SC_TexasForceLeave, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SC_TexasForceLeave, reason_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SC_TexasForceLeave, num_),
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SC_TexasTableEnd, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SC_TexasTableEnd, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SC_TexasTableEnd, pb_user_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SC_TexasTableEnd, pb_table_),
  ~0u,
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SC_TexasGiveTips, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SC_TexasGiveTips, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SC_TexasGiveTips, chair_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SC_TexasGiveTips, money_),
  1,
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SC_TexasShowCards, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SC_TexasShowCards, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SC_TexasShowCards, chair_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SC_TexasShowCards, user_cards_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SC_TexasShowCards, cards_type_),
  0,
  ~0u,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SC_TexasShowCardsPermission, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SC_TexasShowCardsPermission, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SC_TexasShowCardsPermission, chair_),
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SC_TexasError, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SC_TexasError, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SC_TexasError, error_),
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CS_TexasUserAction, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CS_TexasUserAction, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CS_TexasUserAction, action_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CS_TexasUserAction, bet_money_),
  1,
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CS_TexasEnterTable, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CS_TexasEnterTable, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CS_TexasLeaveTable, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CS_TexasLeaveTable, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CS_TexasGiveTips, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CS_TexasGiveTips, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CS_TexasShowCards, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CS_TexasShowCards, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CS_TexasShowCards, show_cards_),
  0,
};

static const ::google::protobuf::internal::MigrationSchema schemas[] = {
  { 0, 24, sizeof(UserInfo)},
  { 43, 57, sizeof(TexasTable)},
  { 66, 73, sizeof(SC_TexasTableInfo)},
  { 75, 82, sizeof(SC_TexasSendUserCards)},
  { 84, 92, sizeof(SC_TexasSendPublicCards)},
  { 95, 105, sizeof(SC_TexasUserAction)},
  { 110, 116, sizeof(SC_TexasNewUser)},
  { 117, 123, sizeof(SC_TexasUserLeave)},
  { 124, 131, sizeof(SC_TexasForceLeave)},
  { 133, 140, sizeof(SC_TexasTableEnd)},
  { 142, 149, sizeof(SC_TexasGiveTips)},
  { 151, 159, sizeof(SC_TexasShowCards)},
  { 162, 168, sizeof(SC_TexasShowCardsPermission)},
  { 169, 175, sizeof(SC_TexasError)},
  { 176, 183, sizeof(CS_TexasUserAction)},
  { 185, 190, sizeof(CS_TexasEnterTable)},
  { 190, 195, sizeof(CS_TexasLeaveTable)},
  { 195, 200, sizeof(CS_TexasGiveTips)},
  { 200, 206, sizeof(CS_TexasShowCards)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&_UserInfo_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_TexasTable_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_SC_TexasTableInfo_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_SC_TexasSendUserCards_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_SC_TexasSendPublicCards_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_SC_TexasUserAction_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_SC_TexasNewUser_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_SC_TexasUserLeave_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_SC_TexasForceLeave_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_SC_TexasTableEnd_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_SC_TexasGiveTips_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_SC_TexasShowCards_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_SC_TexasShowCardsPermission_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_SC_TexasError_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CS_TexasUserAction_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CS_TexasEnterTable_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CS_TexasLeaveTable_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CS_TexasGiveTips_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CS_TexasShowCards_default_instance_),
};

namespace {

void protobuf_AssignDescriptors() {
  AddDescriptors();
  ::google::protobuf::MessageFactory* factory = NULL;
  AssignDescriptors(
      "public_texas.proto", schemas, file_default_instances, TableStruct::offsets, factory,
      file_level_metadata, file_level_enum_descriptors, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 19);
}

}  // namespace

void TableStruct::Shutdown() {
  _UserInfo_default_instance_.Shutdown();
  delete file_level_metadata[0].reflection;
  _TexasTable_default_instance_.Shutdown();
  delete file_level_metadata[1].reflection;
  _SC_TexasTableInfo_default_instance_.Shutdown();
  delete file_level_metadata[2].reflection;
  _SC_TexasSendUserCards_default_instance_.Shutdown();
  delete file_level_metadata[3].reflection;
  _SC_TexasSendPublicCards_default_instance_.Shutdown();
  delete file_level_metadata[4].reflection;
  _SC_TexasUserAction_default_instance_.Shutdown();
  delete file_level_metadata[5].reflection;
  _SC_TexasNewUser_default_instance_.Shutdown();
  delete file_level_metadata[6].reflection;
  _SC_TexasUserLeave_default_instance_.Shutdown();
  delete file_level_metadata[7].reflection;
  _SC_TexasForceLeave_default_instance_.Shutdown();
  delete file_level_metadata[8].reflection;
  _SC_TexasTableEnd_default_instance_.Shutdown();
  delete file_level_metadata[9].reflection;
  _SC_TexasGiveTips_default_instance_.Shutdown();
  delete file_level_metadata[10].reflection;
  _SC_TexasShowCards_default_instance_.Shutdown();
  delete file_level_metadata[11].reflection;
  _SC_TexasShowCardsPermission_default_instance_.Shutdown();
  delete file_level_metadata[12].reflection;
  _SC_TexasError_default_instance_.Shutdown();
  delete file_level_metadata[13].reflection;
  _CS_TexasUserAction_default_instance_.Shutdown();
  delete file_level_metadata[14].reflection;
  _CS_TexasEnterTable_default_instance_.Shutdown();
  delete file_level_metadata[15].reflection;
  _CS_TexasLeaveTable_default_instance_.Shutdown();
  delete file_level_metadata[16].reflection;
  _CS_TexasGiveTips_default_instance_.Shutdown();
  delete file_level_metadata[17].reflection;
  _CS_TexasShowCards_default_instance_.Shutdown();
  delete file_level_metadata[18].reflection;
}

void TableStruct::InitDefaultsImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::internal::InitProtobufDefaults();
  _UserInfo_default_instance_.DefaultConstruct();
  _TexasTable_default_instance_.DefaultConstruct();
  _SC_TexasTableInfo_default_instance_.DefaultConstruct();
  _SC_TexasSendUserCards_default_instance_.DefaultConstruct();
  _SC_TexasSendPublicCards_default_instance_.DefaultConstruct();
  _SC_TexasUserAction_default_instance_.DefaultConstruct();
  _SC_TexasNewUser_default_instance_.DefaultConstruct();
  _SC_TexasUserLeave_default_instance_.DefaultConstruct();
  _SC_TexasForceLeave_default_instance_.DefaultConstruct();
  _SC_TexasTableEnd_default_instance_.DefaultConstruct();
  _SC_TexasGiveTips_default_instance_.DefaultConstruct();
  _SC_TexasShowCards_default_instance_.DefaultConstruct();
  _SC_TexasShowCardsPermission_default_instance_.DefaultConstruct();
  _SC_TexasError_default_instance_.DefaultConstruct();
  _CS_TexasUserAction_default_instance_.DefaultConstruct();
  _CS_TexasEnterTable_default_instance_.DefaultConstruct();
  _CS_TexasLeaveTable_default_instance_.DefaultConstruct();
  _CS_TexasGiveTips_default_instance_.DefaultConstruct();
  _CS_TexasShowCards_default_instance_.DefaultConstruct();
  _SC_TexasTableInfo_default_instance_.get_mutable()->pb_table_ = const_cast< ::TexasTable*>(
      ::TexasTable::internal_default_instance());
  _SC_TexasSendUserCards_default_instance_.get_mutable()->pb_table_ = const_cast< ::TexasTable*>(
      ::TexasTable::internal_default_instance());
  _SC_TexasSendPublicCards_default_instance_.get_mutable()->pb_table_ = const_cast< ::TexasTable*>(
      ::TexasTable::internal_default_instance());
  _SC_TexasUserAction_default_instance_.get_mutable()->pb_action_ = const_cast< ::UserInfo*>(
      ::UserInfo::internal_default_instance());
  _SC_TexasUserAction_default_instance_.get_mutable()->pb_table_ = const_cast< ::TexasTable*>(
      ::TexasTable::internal_default_instance());
  _SC_TexasNewUser_default_instance_.get_mutable()->pb_user_ = const_cast< ::UserInfo*>(
      ::UserInfo::internal_default_instance());
  _SC_TexasUserLeave_default_instance_.get_mutable()->pb_user_ = const_cast< ::UserInfo*>(
      ::UserInfo::internal_default_instance());
  _SC_TexasTableEnd_default_instance_.get_mutable()->pb_table_ = const_cast< ::TexasTable*>(
      ::TexasTable::internal_default_instance());
}

void InitDefaults() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &TableStruct::InitDefaultsImpl);
}
void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] = {
      "\n\022public_texas.proto\"\336\002\n\010UserInfo\022\014\n\004gui"
      "d\030\001 \002(\005\022\r\n\005chair\030\002 \002(\005\022\014\n\004name\030\003 \001(\t\022\014\n\004"
      "icon\030\004 \001(\t\022\r\n\005money\030\005 \002(\003\022\021\n\tbet_money\030\006"
      " \002(\003\022\016\n\006action\030\007 \001(\005\022\020\n\010position\030\010 \001(\005\022\022"
      "\n\nhole_cards\030\t \002(\005\022\021\n\tcountdown\030\n \002(\005\022\r\n"
      "\005cards\030\013 \003(\005\022\022\n\ncards_type\030\014 \001(\005\022\013\n\003tax\030"
      "\r \001(\003\022\017\n\007victory\030\016 \001(\005\022\026\n\016biggest_winner"
      "\030\017 \001(\005\022\021\n\twin_money\030\020 \002(\003\022\026\n\016main_pot_mo"
      "ney\030\021 \002(\005\022\026\n\016side_pot_money\030\022 \003(\005\022\022\n\ncar"
      "ds_show\030\023 \003(\005\"\254\001\n\nTexasTable\022\r\n\005state\030\001 "
      "\001(\005\022\017\n\007max_bet\030\002 \001(\003\022\017\n\007min_bet\030\003 \001(\003\022\021\n"
      "\tblind_bet\030\004 \001(\003\022\013\n\003pot\030\005 \002(\003\022\020\n\010side_po"
      "t\030\006 \003(\003\022\022\n\nthink_time\030\007 \001(\005\022\024\n\014public_ca"
      "rds\030\010 \003(\005\022\021\n\town_chair\030\t \001(\005\"a\n\021SC_Texas"
      "TableInfo\022\035\n\010pb_table\030\001 \001(\0132\013.TexasTable"
      "\022\032\n\007pb_user\030\002 \003(\0132\t.UserInfo\"\021\n\005MsgID\022\010\n"
      "\002ID\020\250\303\001\"e\n\025SC_TexasSendUserCards\022\032\n\007pb_u"
      "ser\030\001 \003(\0132\t.UserInfo\022\035\n\010pb_table\030\002 \001(\0132\013"
      ".TexasTable\"\021\n\005MsgID\022\010\n\002ID\020\252\303\001\"}\n\027SC_Tex"
      "asSendPublicCards\022\035\n\010pb_table\030\001 \001(\0132\013.Te"
      "xasTable\022\032\n\007pb_user\030\002 \003(\0132\t.UserInfo\022\024\n\014"
      "public_cards\030\003 \003(\005\"\021\n\005MsgID\022\010\n\002ID\020\251\303\001\"\226\001"
      "\n\022SC_TexasUserAction\022\034\n\tpb_action\030\001 \001(\0132"
      "\t.UserInfo\022\035\n\010pb_table\030\002 \001(\0132\013.TexasTabl"
      "e\022\r\n\005chair\030\003 \002(\005\022\016\n\006action\030\004 \002(\005\022\021\n\tbet_"
      "money\030\005 \002(\003\"\021\n\005MsgID\022\010\n\002ID\020\253\303\001\"@\n\017SC_Tex"
      "asNewUser\022\032\n\007pb_user\030\001 \001(\0132\t.UserInfo\"\021\n"
      "\005MsgID\022\010\n\002ID\020\254\303\001\"B\n\021SC_TexasUserLeave\022\032\n"
      "\007pb_user\030\001 \001(\0132\t.UserInfo\"\021\n\005MsgID\022\010\n\002ID"
      "\020\255\303\001\"D\n\022SC_TexasForceLeave\022\016\n\006reason\030\001 \001"
      "(\t\022\013\n\003num\030\002 \001(\005\"\021\n\005MsgID\022\010\n\002ID\020\257\303\001\"`\n\020SC"
      "_TexasTableEnd\022\032\n\007pb_user\030\001 \003(\0132\t.UserIn"
      "fo\022\035\n\010pb_table\030\002 \001(\0132\013.TexasTable\"\021\n\005Msg"
      "ID\022\010\n\002ID\020\256\303\001\"C\n\020SC_TexasGiveTips\022\r\n\005chai"
      "r\030\001 \002(\005\022\r\n\005money\030\002 \001(\003\"\021\n\005MsgID\022\010\n\002ID\020\260\303"
      "\001\"]\n\021SC_TexasShowCards\022\r\n\005chair\030\001 \002(\005\022\022\n"
      "\nuser_cards\030\002 \003(\005\022\022\n\ncards_type\030\003 \001(\005\"\021\n"
      "\005MsgID\022\010\n\002ID\020\261\303\001\"\?\n\033SC_TexasShowCardsPer"
      "mission\022\r\n\005chair\030\001 \002(\005\"\021\n\005MsgID\022\010\n\002ID\020\262\303"
      "\001\"1\n\rSC_TexasError\022\r\n\005error\030\001 \001(\005\"\021\n\005Msg"
      "ID\022\010\n\002ID\020\217\313\001\"J\n\022CS_TexasUserAction\022\016\n\006ac"
      "tion\030\001 \002(\005\022\021\n\tbet_money\030\002 \002(\003\"\021\n\005MsgID\022\010"
      "\n\002ID\020\214\304\001\"\'\n\022CS_TexasEnterTable\"\021\n\005MsgID\022"
      "\010\n\002ID\020\215\304\001\"\'\n\022CS_TexasLeaveTable\"\021\n\005MsgID"
      "\022\010\n\002ID\020\216\304\001\"%\n\020CS_TexasGiveTips\"\021\n\005MsgID\022"
      "\010\n\002ID\020\217\304\001\":\n\021CS_TexasShowCards\022\022\n\nshow_c"
      "ards\030\001 \002(\010\"\021\n\005MsgID\022\010\n\002ID\020\220\304\001*\315\001\n\016TexasC"
      "ardsType\022\020\n\014CT_HIGH_CARD\020\001\022\017\n\013CT_ONE_PAI"
      "R\020\002\022\020\n\014CT_TWO_PAIRS\020\003\022\026\n\022CT_THREE_OF_A_K"
      "IND\020\004\022\017\n\013CT_STRAIGHT\020\005\022\014\n\010CT_FLUSH\020\006\022\021\n\r"
      "CT_FULL_HOUSE\020\007\022\023\n\017CT_FOUR_OF_KIND\020\010\022\023\n\017"
      "CT_STRAIT_FLUSH\020\t\022\022\n\016CT_ROYAL_FLUSH\020\n*\207\001"
      "\n\013TexasAction\022\014\n\010ACT_CALL\020\001\022\r\n\tACT_RAISE"
      "\020\002\022\r\n\tACT_CHECK\020\003\022\014\n\010ACT_FOLD\020\004\022\016\n\nACT_A"
      "LL_IN\020\005\022\016\n\nACT_NORMAL\020\006\022\r\n\tACT_THINK\020\007\022\017"
      "\n\013ACT_WAITING\020\010*\200\001\n\013TexasStatus\022\022\n\016STATU"
      "S_WAITING\020\001\022\023\n\017STATUS_PRE_FLOP\020\002\022\017\n\013STAT"
      "US_FLOP\020\003\022\017\n\013STATUS_TURN\020\004\022\020\n\014STATUS_RIV"
      "ER\020\005\022\024\n\020STATUS_SHOW_DOWN\020\006*p\n\021TexasUserP"
      "osition\022\031\n\025POSITION_LITTLE_BLIND\020\001\022\026\n\022PO"
      "SITION_BIG_BLIND\020\002\022\023\n\017POSITION_BOTTON\020\003\022"
      "\023\n\017POSITION_NORMAL\020\004*1\n\nTexasError\022\020\n\014CS"
      "_ERR_MONEY\020\001\022\021\n\rCS_ERR_STATUS\020\002"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 2511);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "public_texas.proto", &protobuf_RegisterTypes);
  ::google::protobuf::internal::OnShutdown(&TableStruct::Shutdown);
}

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;

}  // namespace protobuf_public_5ftexas_2eproto

const ::google::protobuf::EnumDescriptor* SC_TexasTableInfo_MsgID_descriptor() {
  protobuf_public_5ftexas_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_public_5ftexas_2eproto::file_level_enum_descriptors[0];
}
bool SC_TexasTableInfo_MsgID_IsValid(int value) {
  switch (value) {
    case 25000:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const SC_TexasTableInfo_MsgID SC_TexasTableInfo::ID;
const SC_TexasTableInfo_MsgID SC_TexasTableInfo::MsgID_MIN;
const SC_TexasTableInfo_MsgID SC_TexasTableInfo::MsgID_MAX;
const int SC_TexasTableInfo::MsgID_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* SC_TexasSendUserCards_MsgID_descriptor() {
  protobuf_public_5ftexas_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_public_5ftexas_2eproto::file_level_enum_descriptors[1];
}
bool SC_TexasSendUserCards_MsgID_IsValid(int value) {
  switch (value) {
    case 25002:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const SC_TexasSendUserCards_MsgID SC_TexasSendUserCards::ID;
const SC_TexasSendUserCards_MsgID SC_TexasSendUserCards::MsgID_MIN;
const SC_TexasSendUserCards_MsgID SC_TexasSendUserCards::MsgID_MAX;
const int SC_TexasSendUserCards::MsgID_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* SC_TexasSendPublicCards_MsgID_descriptor() {
  protobuf_public_5ftexas_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_public_5ftexas_2eproto::file_level_enum_descriptors[2];
}
bool SC_TexasSendPublicCards_MsgID_IsValid(int value) {
  switch (value) {
    case 25001:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const SC_TexasSendPublicCards_MsgID SC_TexasSendPublicCards::ID;
const SC_TexasSendPublicCards_MsgID SC_TexasSendPublicCards::MsgID_MIN;
const SC_TexasSendPublicCards_MsgID SC_TexasSendPublicCards::MsgID_MAX;
const int SC_TexasSendPublicCards::MsgID_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* SC_TexasUserAction_MsgID_descriptor() {
  protobuf_public_5ftexas_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_public_5ftexas_2eproto::file_level_enum_descriptors[3];
}
bool SC_TexasUserAction_MsgID_IsValid(int value) {
  switch (value) {
    case 25003:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const SC_TexasUserAction_MsgID SC_TexasUserAction::ID;
const SC_TexasUserAction_MsgID SC_TexasUserAction::MsgID_MIN;
const SC_TexasUserAction_MsgID SC_TexasUserAction::MsgID_MAX;
const int SC_TexasUserAction::MsgID_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* SC_TexasNewUser_MsgID_descriptor() {
  protobuf_public_5ftexas_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_public_5ftexas_2eproto::file_level_enum_descriptors[4];
}
bool SC_TexasNewUser_MsgID_IsValid(int value) {
  switch (value) {
    case 25004:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const SC_TexasNewUser_MsgID SC_TexasNewUser::ID;
const SC_TexasNewUser_MsgID SC_TexasNewUser::MsgID_MIN;
const SC_TexasNewUser_MsgID SC_TexasNewUser::MsgID_MAX;
const int SC_TexasNewUser::MsgID_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* SC_TexasUserLeave_MsgID_descriptor() {
  protobuf_public_5ftexas_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_public_5ftexas_2eproto::file_level_enum_descriptors[5];
}
bool SC_TexasUserLeave_MsgID_IsValid(int value) {
  switch (value) {
    case 25005:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const SC_TexasUserLeave_MsgID SC_TexasUserLeave::ID;
const SC_TexasUserLeave_MsgID SC_TexasUserLeave::MsgID_MIN;
const SC_TexasUserLeave_MsgID SC_TexasUserLeave::MsgID_MAX;
const int SC_TexasUserLeave::MsgID_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* SC_TexasForceLeave_MsgID_descriptor() {
  protobuf_public_5ftexas_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_public_5ftexas_2eproto::file_level_enum_descriptors[6];
}
bool SC_TexasForceLeave_MsgID_IsValid(int value) {
  switch (value) {
    case 25007:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const SC_TexasForceLeave_MsgID SC_TexasForceLeave::ID;
const SC_TexasForceLeave_MsgID SC_TexasForceLeave::MsgID_MIN;
const SC_TexasForceLeave_MsgID SC_TexasForceLeave::MsgID_MAX;
const int SC_TexasForceLeave::MsgID_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* SC_TexasTableEnd_MsgID_descriptor() {
  protobuf_public_5ftexas_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_public_5ftexas_2eproto::file_level_enum_descriptors[7];
}
bool SC_TexasTableEnd_MsgID_IsValid(int value) {
  switch (value) {
    case 25006:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const SC_TexasTableEnd_MsgID SC_TexasTableEnd::ID;
const SC_TexasTableEnd_MsgID SC_TexasTableEnd::MsgID_MIN;
const SC_TexasTableEnd_MsgID SC_TexasTableEnd::MsgID_MAX;
const int SC_TexasTableEnd::MsgID_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* SC_TexasGiveTips_MsgID_descriptor() {
  protobuf_public_5ftexas_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_public_5ftexas_2eproto::file_level_enum_descriptors[8];
}
bool SC_TexasGiveTips_MsgID_IsValid(int value) {
  switch (value) {
    case 25008:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const SC_TexasGiveTips_MsgID SC_TexasGiveTips::ID;
const SC_TexasGiveTips_MsgID SC_TexasGiveTips::MsgID_MIN;
const SC_TexasGiveTips_MsgID SC_TexasGiveTips::MsgID_MAX;
const int SC_TexasGiveTips::MsgID_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* SC_TexasShowCards_MsgID_descriptor() {
  protobuf_public_5ftexas_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_public_5ftexas_2eproto::file_level_enum_descriptors[9];
}
bool SC_TexasShowCards_MsgID_IsValid(int value) {
  switch (value) {
    case 25009:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const SC_TexasShowCards_MsgID SC_TexasShowCards::ID;
const SC_TexasShowCards_MsgID SC_TexasShowCards::MsgID_MIN;
const SC_TexasShowCards_MsgID SC_TexasShowCards::MsgID_MAX;
const int SC_TexasShowCards::MsgID_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* SC_TexasShowCardsPermission_MsgID_descriptor() {
  protobuf_public_5ftexas_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_public_5ftexas_2eproto::file_level_enum_descriptors[10];
}
bool SC_TexasShowCardsPermission_MsgID_IsValid(int value) {
  switch (value) {
    case 25010:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const SC_TexasShowCardsPermission_MsgID SC_TexasShowCardsPermission::ID;
const SC_TexasShowCardsPermission_MsgID SC_TexasShowCardsPermission::MsgID_MIN;
const SC_TexasShowCardsPermission_MsgID SC_TexasShowCardsPermission::MsgID_MAX;
const int SC_TexasShowCardsPermission::MsgID_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* SC_TexasError_MsgID_descriptor() {
  protobuf_public_5ftexas_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_public_5ftexas_2eproto::file_level_enum_descriptors[11];
}
bool SC_TexasError_MsgID_IsValid(int value) {
  switch (value) {
    case 25999:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const SC_TexasError_MsgID SC_TexasError::ID;
const SC_TexasError_MsgID SC_TexasError::MsgID_MIN;
const SC_TexasError_MsgID SC_TexasError::MsgID_MAX;
const int SC_TexasError::MsgID_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* CS_TexasUserAction_MsgID_descriptor() {
  protobuf_public_5ftexas_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_public_5ftexas_2eproto::file_level_enum_descriptors[12];
}
bool CS_TexasUserAction_MsgID_IsValid(int value) {
  switch (value) {
    case 25100:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const CS_TexasUserAction_MsgID CS_TexasUserAction::ID;
const CS_TexasUserAction_MsgID CS_TexasUserAction::MsgID_MIN;
const CS_TexasUserAction_MsgID CS_TexasUserAction::MsgID_MAX;
const int CS_TexasUserAction::MsgID_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* CS_TexasEnterTable_MsgID_descriptor() {
  protobuf_public_5ftexas_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_public_5ftexas_2eproto::file_level_enum_descriptors[13];
}
bool CS_TexasEnterTable_MsgID_IsValid(int value) {
  switch (value) {
    case 25101:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const CS_TexasEnterTable_MsgID CS_TexasEnterTable::ID;
const CS_TexasEnterTable_MsgID CS_TexasEnterTable::MsgID_MIN;
const CS_TexasEnterTable_MsgID CS_TexasEnterTable::MsgID_MAX;
const int CS_TexasEnterTable::MsgID_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* CS_TexasLeaveTable_MsgID_descriptor() {
  protobuf_public_5ftexas_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_public_5ftexas_2eproto::file_level_enum_descriptors[14];
}
bool CS_TexasLeaveTable_MsgID_IsValid(int value) {
  switch (value) {
    case 25102:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const CS_TexasLeaveTable_MsgID CS_TexasLeaveTable::ID;
const CS_TexasLeaveTable_MsgID CS_TexasLeaveTable::MsgID_MIN;
const CS_TexasLeaveTable_MsgID CS_TexasLeaveTable::MsgID_MAX;
const int CS_TexasLeaveTable::MsgID_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* CS_TexasGiveTips_MsgID_descriptor() {
  protobuf_public_5ftexas_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_public_5ftexas_2eproto::file_level_enum_descriptors[15];
}
bool CS_TexasGiveTips_MsgID_IsValid(int value) {
  switch (value) {
    case 25103:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const CS_TexasGiveTips_MsgID CS_TexasGiveTips::ID;
const CS_TexasGiveTips_MsgID CS_TexasGiveTips::MsgID_MIN;
const CS_TexasGiveTips_MsgID CS_TexasGiveTips::MsgID_MAX;
const int CS_TexasGiveTips::MsgID_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* CS_TexasShowCards_MsgID_descriptor() {
  protobuf_public_5ftexas_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_public_5ftexas_2eproto::file_level_enum_descriptors[16];
}
bool CS_TexasShowCards_MsgID_IsValid(int value) {
  switch (value) {
    case 25104:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const CS_TexasShowCards_MsgID CS_TexasShowCards::ID;
const CS_TexasShowCards_MsgID CS_TexasShowCards::MsgID_MIN;
const CS_TexasShowCards_MsgID CS_TexasShowCards::MsgID_MAX;
const int CS_TexasShowCards::MsgID_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* TexasCardsType_descriptor() {
  protobuf_public_5ftexas_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_public_5ftexas_2eproto::file_level_enum_descriptors[17];
}
bool TexasCardsType_IsValid(int value) {
  switch (value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* TexasAction_descriptor() {
  protobuf_public_5ftexas_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_public_5ftexas_2eproto::file_level_enum_descriptors[18];
}
bool TexasAction_IsValid(int value) {
  switch (value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* TexasStatus_descriptor() {
  protobuf_public_5ftexas_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_public_5ftexas_2eproto::file_level_enum_descriptors[19];
}
bool TexasStatus_IsValid(int value) {
  switch (value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* TexasUserPosition_descriptor() {
  protobuf_public_5ftexas_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_public_5ftexas_2eproto::file_level_enum_descriptors[20];
}
bool TexasUserPosition_IsValid(int value) {
  switch (value) {
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* TexasError_descriptor() {
  protobuf_public_5ftexas_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_public_5ftexas_2eproto::file_level_enum_descriptors[21];
}
bool TexasError_IsValid(int value) {
  switch (value) {
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int UserInfo::kGuidFieldNumber;
const int UserInfo::kChairFieldNumber;
const int UserInfo::kNameFieldNumber;
const int UserInfo::kIconFieldNumber;
const int UserInfo::kMoneyFieldNumber;
const int UserInfo::kBetMoneyFieldNumber;
const int UserInfo::kActionFieldNumber;
const int UserInfo::kPositionFieldNumber;
const int UserInfo::kHoleCardsFieldNumber;
const int UserInfo::kCountdownFieldNumber;
const int UserInfo::kCardsFieldNumber;
const int UserInfo::kCardsTypeFieldNumber;
const int UserInfo::kTaxFieldNumber;
const int UserInfo::kVictoryFieldNumber;
const int UserInfo::kBiggestWinnerFieldNumber;
const int UserInfo::kWinMoneyFieldNumber;
const int UserInfo::kMainPotMoneyFieldNumber;
const int UserInfo::kSidePotMoneyFieldNumber;
const int UserInfo::kCardsShowFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

UserInfo::UserInfo()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_public_5ftexas_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:UserInfo)
}
UserInfo::UserInfo(const UserInfo& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      cards_(from.cards_),
      side_pot_money_(from.side_pot_money_),
      cards_show_(from.cards_show_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_name()) {
    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  icon_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_icon()) {
    icon_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.icon_);
  }
  ::memcpy(&guid_, &from.guid_,
    reinterpret_cast<char*>(&main_pot_money_) -
    reinterpret_cast<char*>(&guid_) + sizeof(main_pot_money_));
  // @@protoc_insertion_point(copy_constructor:UserInfo)
}

void UserInfo::SharedCtor() {
  _cached_size_ = 0;
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  icon_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&guid_, 0, reinterpret_cast<char*>(&main_pot_money_) -
    reinterpret_cast<char*>(&guid_) + sizeof(main_pot_money_));
}

UserInfo::~UserInfo() {
  // @@protoc_insertion_point(destructor:UserInfo)
  SharedDtor();
}

void UserInfo::SharedDtor() {
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  icon_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void UserInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UserInfo::descriptor() {
  protobuf_public_5ftexas_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_public_5ftexas_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const UserInfo& UserInfo::default_instance() {
  protobuf_public_5ftexas_2eproto::InitDefaults();
  return *internal_default_instance();
}

UserInfo* UserInfo::New(::google::protobuf::Arena* arena) const {
  UserInfo* n = new UserInfo;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void UserInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:UserInfo)
  cards_.Clear();
  side_pot_money_.Clear();
  cards_show_.Clear();
  if (_has_bits_[0 / 32] & 3u) {
    if (has_name()) {
      GOOGLE_DCHECK(!name_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*name_.UnsafeRawStringPointer())->clear();
    }
    if (has_icon()) {
      GOOGLE_DCHECK(!icon_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*icon_.UnsafeRawStringPointer())->clear();
    }
  }
  if (_has_bits_[0 / 32] & 252u) {
    ::memset(&guid_, 0, reinterpret_cast<char*>(&position_) -
      reinterpret_cast<char*>(&guid_) + sizeof(position_));
  }
  if (_has_bits_[8 / 32] & 65280u) {
    ::memset(&hole_cards_, 0, reinterpret_cast<char*>(&main_pot_money_) -
      reinterpret_cast<char*>(&hole_cards_) + sizeof(main_pot_money_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool UserInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:UserInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 guid = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_guid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &guid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 chair = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_chair();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &chair_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string name = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "UserInfo.name");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string icon = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_icon()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->icon().data(), this->icon().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "UserInfo.icon");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int64 money = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u)) {
          set_has_money();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &money_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int64 bet_money = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u)) {
          set_has_bet_money();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &bet_money_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 action = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u)) {
          set_has_action();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &action_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 position = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(64u)) {
          set_has_position();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &position_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 hole_cards = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(72u)) {
          set_has_hole_cards();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &hole_cards_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 countdown = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(80u)) {
          set_has_countdown();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &countdown_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated int32 cards = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(88u)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 88u, input, this->mutable_cards())));
        } else if (static_cast< ::google::protobuf::uint8>(tag) ==
                   static_cast< ::google::protobuf::uint8>(90u)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_cards())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 cards_type = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(96u)) {
          set_has_cards_type();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &cards_type_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 tax = 13;
      case 13: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(104u)) {
          set_has_tax();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &tax_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 victory = 14;
      case 14: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(112u)) {
          set_has_victory();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &victory_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 biggest_winner = 15;
      case 15: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(120u)) {
          set_has_biggest_winner();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &biggest_winner_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int64 win_money = 16;
      case 16: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(128u)) {
          set_has_win_money();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &win_money_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 main_pot_money = 17;
      case 17: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(136u)) {
          set_has_main_pot_money();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &main_pot_money_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated int32 side_pot_money = 18;
      case 18: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(144u)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 2, 144u, input, this->mutable_side_pot_money())));
        } else if (static_cast< ::google::protobuf::uint8>(tag) ==
                   static_cast< ::google::protobuf::uint8>(146u)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_side_pot_money())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated int32 cards_show = 19;
      case 19: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(152u)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 2, 152u, input, this->mutable_cards_show())));
        } else if (static_cast< ::google::protobuf::uint8>(tag) ==
                   static_cast< ::google::protobuf::uint8>(154u)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_cards_show())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:UserInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:UserInfo)
  return false;
#undef DO_
}

void UserInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:UserInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 guid = 1;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->guid(), output);
  }

  // required int32 chair = 2;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->chair(), output);
  }

  // optional string name = 3;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "UserInfo.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->name(), output);
  }

  // optional string icon = 4;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->icon().data(), this->icon().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "UserInfo.icon");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->icon(), output);
  }

  // required int64 money = 5;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(5, this->money(), output);
  }

  // required int64 bet_money = 6;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(6, this->bet_money(), output);
  }

  // optional int32 action = 7;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->action(), output);
  }

  // optional int32 position = 8;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->position(), output);
  }

  // required int32 hole_cards = 9;
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->hole_cards(), output);
  }

  // required int32 countdown = 10;
  if (cached_has_bits & 0x00000200u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->countdown(), output);
  }

  // repeated int32 cards = 11;
  for (int i = 0, n = this->cards_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      11, this->cards(i), output);
  }

  // optional int32 cards_type = 12;
  if (cached_has_bits & 0x00000800u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(12, this->cards_type(), output);
  }

  // optional int64 tax = 13;
  if (cached_has_bits & 0x00000400u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(13, this->tax(), output);
  }

  // optional int32 victory = 14;
  if (cached_has_bits & 0x00001000u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(14, this->victory(), output);
  }

  // optional int32 biggest_winner = 15;
  if (cached_has_bits & 0x00004000u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(15, this->biggest_winner(), output);
  }

  // required int64 win_money = 16;
  if (cached_has_bits & 0x00002000u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(16, this->win_money(), output);
  }

  // required int32 main_pot_money = 17;
  if (cached_has_bits & 0x00008000u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(17, this->main_pot_money(), output);
  }

  // repeated int32 side_pot_money = 18;
  for (int i = 0, n = this->side_pot_money_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      18, this->side_pot_money(i), output);
  }

  // repeated int32 cards_show = 19;
  for (int i = 0, n = this->cards_show_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      19, this->cards_show(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:UserInfo)
}

::google::protobuf::uint8* UserInfo::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:UserInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 guid = 1;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->guid(), target);
  }

  // required int32 chair = 2;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->chair(), target);
  }

  // optional string name = 3;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "UserInfo.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->name(), target);
  }

  // optional string icon = 4;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->icon().data(), this->icon().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "UserInfo.icon");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->icon(), target);
  }

  // required int64 money = 5;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(5, this->money(), target);
  }

  // required int64 bet_money = 6;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(6, this->bet_money(), target);
  }

  // optional int32 action = 7;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->action(), target);
  }

  // optional int32 position = 8;
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->position(), target);
  }

  // required int32 hole_cards = 9;
  if (cached_has_bits & 0x00000100u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->hole_cards(), target);
  }

  // required int32 countdown = 10;
  if (cached_has_bits & 0x00000200u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(10, this->countdown(), target);
  }

  // repeated int32 cards = 11;
  target = ::google::protobuf::internal::WireFormatLite::
    WriteInt32ToArray(11, this->cards_, target);

  // optional int32 cards_type = 12;
  if (cached_has_bits & 0x00000800u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(12, this->cards_type(), target);
  }

  // optional int64 tax = 13;
  if (cached_has_bits & 0x00000400u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(13, this->tax(), target);
  }

  // optional int32 victory = 14;
  if (cached_has_bits & 0x00001000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(14, this->victory(), target);
  }

  // optional int32 biggest_winner = 15;
  if (cached_has_bits & 0x00004000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(15, this->biggest_winner(), target);
  }

  // required int64 win_money = 16;
  if (cached_has_bits & 0x00002000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(16, this->win_money(), target);
  }

  // required int32 main_pot_money = 17;
  if (cached_has_bits & 0x00008000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(17, this->main_pot_money(), target);
  }

  // repeated int32 side_pot_money = 18;
  target = ::google::protobuf::internal::WireFormatLite::
    WriteInt32ToArray(18, this->side_pot_money_, target);

  // repeated int32 cards_show = 19;
  target = ::google::protobuf::internal::WireFormatLite::
    WriteInt32ToArray(19, this->cards_show_, target);

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:UserInfo)
  return target;
}

size_t UserInfo::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:UserInfo)
  size_t total_size = 0;

  if (has_guid()) {
    // required int32 guid = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->guid());
  }

  if (has_chair()) {
    // required int32 chair = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->chair());
  }

  if (has_money()) {
    // required int64 money = 5;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->money());
  }

  if (has_bet_money()) {
    // required int64 bet_money = 6;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->bet_money());
  }

  if (has_hole_cards()) {
    // required int32 hole_cards = 9;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->hole_cards());
  }

  if (has_countdown()) {
    // required int32 countdown = 10;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->countdown());
  }

  if (has_win_money()) {
    // required int64 win_money = 16;
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->win_money());
  }

  if (has_main_pot_money()) {
    // required int32 main_pot_money = 17;
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->main_pot_money());
  }

  return total_size;
}
size_t UserInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:UserInfo)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (((_has_bits_[0] & 0x0000a33c) ^ 0x0000a33c) == 0) {  // All required fields are present.
    // required int32 guid = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->guid());

    // required int32 chair = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->chair());

    // required int64 money = 5;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->money());

    // required int64 bet_money = 6;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->bet_money());

    // required int32 hole_cards = 9;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->hole_cards());

    // required int32 countdown = 10;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->countdown());

    // required int64 win_money = 16;
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->win_money());

    // required int32 main_pot_money = 17;
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->main_pot_money());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  // repeated int32 cards = 11;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      Int32Size(this->cards_);
    total_size += 1 *
                  ::google::protobuf::internal::FromIntSize(this->cards_size());
    total_size += data_size;
  }

  // repeated int32 side_pot_money = 18;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      Int32Size(this->side_pot_money_);
    total_size += 2 *
                  ::google::protobuf::internal::FromIntSize(this->side_pot_money_size());
    total_size += data_size;
  }

  // repeated int32 cards_show = 19;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      Int32Size(this->cards_show_);
    total_size += 2 *
                  ::google::protobuf::internal::FromIntSize(this->cards_show_size());
    total_size += data_size;
  }

  if (_has_bits_[0 / 32] & 3u) {
    // optional string name = 3;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional string icon = 4;
    if (has_icon()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->icon());
    }

  }
  if (_has_bits_[0 / 32] & 192u) {
    // optional int32 action = 7;
    if (has_action()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->action());
    }

    // optional int32 position = 8;
    if (has_position()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->position());
    }

  }
  if (_has_bits_[8 / 32] & 7168u) {
    // optional int64 tax = 13;
    if (has_tax()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->tax());
    }

    // optional int32 cards_type = 12;
    if (has_cards_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->cards_type());
    }

    // optional int32 victory = 14;
    if (has_victory()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->victory());
    }

  }
  // optional int32 biggest_winner = 15;
  if (has_biggest_winner()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->biggest_winner());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UserInfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:UserInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const UserInfo* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const UserInfo>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:UserInfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:UserInfo)
    MergeFrom(*source);
  }
}

void UserInfo::MergeFrom(const UserInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:UserInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cards_.MergeFrom(from.cards_);
  side_pot_money_.MergeFrom(from.side_pot_money_);
  cards_show_.MergeFrom(from.cards_show_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_name();
      name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_icon();
      icon_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.icon_);
    }
    if (cached_has_bits & 0x00000004u) {
      guid_ = from.guid_;
    }
    if (cached_has_bits & 0x00000008u) {
      chair_ = from.chair_;
    }
    if (cached_has_bits & 0x00000010u) {
      money_ = from.money_;
    }
    if (cached_has_bits & 0x00000020u) {
      bet_money_ = from.bet_money_;
    }
    if (cached_has_bits & 0x00000040u) {
      action_ = from.action_;
    }
    if (cached_has_bits & 0x00000080u) {
      position_ = from.position_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 65280u) {
    if (cached_has_bits & 0x00000100u) {
      hole_cards_ = from.hole_cards_;
    }
    if (cached_has_bits & 0x00000200u) {
      countdown_ = from.countdown_;
    }
    if (cached_has_bits & 0x00000400u) {
      tax_ = from.tax_;
    }
    if (cached_has_bits & 0x00000800u) {
      cards_type_ = from.cards_type_;
    }
    if (cached_has_bits & 0x00001000u) {
      victory_ = from.victory_;
    }
    if (cached_has_bits & 0x00002000u) {
      win_money_ = from.win_money_;
    }
    if (cached_has_bits & 0x00004000u) {
      biggest_winner_ = from.biggest_winner_;
    }
    if (cached_has_bits & 0x00008000u) {
      main_pot_money_ = from.main_pot_money_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void UserInfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:UserInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UserInfo::CopyFrom(const UserInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:UserInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UserInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000a33c) != 0x0000a33c) return false;
  return true;
}

void UserInfo::Swap(UserInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void UserInfo::InternalSwap(UserInfo* other) {
  cards_.InternalSwap(&other->cards_);
  side_pot_money_.InternalSwap(&other->side_pot_money_);
  cards_show_.InternalSwap(&other->cards_show_);
  name_.Swap(&other->name_);
  icon_.Swap(&other->icon_);
  std::swap(guid_, other->guid_);
  std::swap(chair_, other->chair_);
  std::swap(money_, other->money_);
  std::swap(bet_money_, other->bet_money_);
  std::swap(action_, other->action_);
  std::swap(position_, other->position_);
  std::swap(hole_cards_, other->hole_cards_);
  std::swap(countdown_, other->countdown_);
  std::swap(tax_, other->tax_);
  std::swap(cards_type_, other->cards_type_);
  std::swap(victory_, other->victory_);
  std::swap(win_money_, other->win_money_);
  std::swap(biggest_winner_, other->biggest_winner_);
  std::swap(main_pot_money_, other->main_pot_money_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata UserInfo::GetMetadata() const {
  protobuf_public_5ftexas_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_public_5ftexas_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// UserInfo

// required int32 guid = 1;
bool UserInfo::has_guid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void UserInfo::set_has_guid() {
  _has_bits_[0] |= 0x00000004u;
}
void UserInfo::clear_has_guid() {
  _has_bits_[0] &= ~0x00000004u;
}
void UserInfo::clear_guid() {
  guid_ = 0;
  clear_has_guid();
}
::google::protobuf::int32 UserInfo::guid() const {
  // @@protoc_insertion_point(field_get:UserInfo.guid)
  return guid_;
}
void UserInfo::set_guid(::google::protobuf::int32 value) {
  set_has_guid();
  guid_ = value;
  // @@protoc_insertion_point(field_set:UserInfo.guid)
}

// required int32 chair = 2;
bool UserInfo::has_chair() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void UserInfo::set_has_chair() {
  _has_bits_[0] |= 0x00000008u;
}
void UserInfo::clear_has_chair() {
  _has_bits_[0] &= ~0x00000008u;
}
void UserInfo::clear_chair() {
  chair_ = 0;
  clear_has_chair();
}
::google::protobuf::int32 UserInfo::chair() const {
  // @@protoc_insertion_point(field_get:UserInfo.chair)
  return chair_;
}
void UserInfo::set_chair(::google::protobuf::int32 value) {
  set_has_chair();
  chair_ = value;
  // @@protoc_insertion_point(field_set:UserInfo.chair)
}

// optional string name = 3;
bool UserInfo::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void UserInfo::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
void UserInfo::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
void UserInfo::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_name();
}
const ::std::string& UserInfo::name() const {
  // @@protoc_insertion_point(field_get:UserInfo.name)
  return name_.GetNoArena();
}
void UserInfo::set_name(const ::std::string& value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:UserInfo.name)
}
#if LANG_CXX11
void UserInfo::set_name(::std::string&& value) {
  set_has_name();
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:UserInfo.name)
}
#endif
void UserInfo::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:UserInfo.name)
}
void UserInfo::set_name(const char* value, size_t size) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:UserInfo.name)
}
::std::string* UserInfo::mutable_name() {
  set_has_name();
  // @@protoc_insertion_point(field_mutable:UserInfo.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* UserInfo::release_name() {
  // @@protoc_insertion_point(field_release:UserInfo.name)
  clear_has_name();
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void UserInfo::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    set_has_name();
  } else {
    clear_has_name();
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:UserInfo.name)
}

// optional string icon = 4;
bool UserInfo::has_icon() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void UserInfo::set_has_icon() {
  _has_bits_[0] |= 0x00000002u;
}
void UserInfo::clear_has_icon() {
  _has_bits_[0] &= ~0x00000002u;
}
void UserInfo::clear_icon() {
  icon_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_icon();
}
const ::std::string& UserInfo::icon() const {
  // @@protoc_insertion_point(field_get:UserInfo.icon)
  return icon_.GetNoArena();
}
void UserInfo::set_icon(const ::std::string& value) {
  set_has_icon();
  icon_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:UserInfo.icon)
}
#if LANG_CXX11
void UserInfo::set_icon(::std::string&& value) {
  set_has_icon();
  icon_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:UserInfo.icon)
}
#endif
void UserInfo::set_icon(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_icon();
  icon_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:UserInfo.icon)
}
void UserInfo::set_icon(const char* value, size_t size) {
  set_has_icon();
  icon_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:UserInfo.icon)
}
::std::string* UserInfo::mutable_icon() {
  set_has_icon();
  // @@protoc_insertion_point(field_mutable:UserInfo.icon)
  return icon_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* UserInfo::release_icon() {
  // @@protoc_insertion_point(field_release:UserInfo.icon)
  clear_has_icon();
  return icon_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void UserInfo::set_allocated_icon(::std::string* icon) {
  if (icon != NULL) {
    set_has_icon();
  } else {
    clear_has_icon();
  }
  icon_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), icon);
  // @@protoc_insertion_point(field_set_allocated:UserInfo.icon)
}

// required int64 money = 5;
bool UserInfo::has_money() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void UserInfo::set_has_money() {
  _has_bits_[0] |= 0x00000010u;
}
void UserInfo::clear_has_money() {
  _has_bits_[0] &= ~0x00000010u;
}
void UserInfo::clear_money() {
  money_ = GOOGLE_LONGLONG(0);
  clear_has_money();
}
::google::protobuf::int64 UserInfo::money() const {
  // @@protoc_insertion_point(field_get:UserInfo.money)
  return money_;
}
void UserInfo::set_money(::google::protobuf::int64 value) {
  set_has_money();
  money_ = value;
  // @@protoc_insertion_point(field_set:UserInfo.money)
}

// required int64 bet_money = 6;
bool UserInfo::has_bet_money() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void UserInfo::set_has_bet_money() {
  _has_bits_[0] |= 0x00000020u;
}
void UserInfo::clear_has_bet_money() {
  _has_bits_[0] &= ~0x00000020u;
}
void UserInfo::clear_bet_money() {
  bet_money_ = GOOGLE_LONGLONG(0);
  clear_has_bet_money();
}
::google::protobuf::int64 UserInfo::bet_money() const {
  // @@protoc_insertion_point(field_get:UserInfo.bet_money)
  return bet_money_;
}
void UserInfo::set_bet_money(::google::protobuf::int64 value) {
  set_has_bet_money();
  bet_money_ = value;
  // @@protoc_insertion_point(field_set:UserInfo.bet_money)
}

// optional int32 action = 7;
bool UserInfo::has_action() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void UserInfo::set_has_action() {
  _has_bits_[0] |= 0x00000040u;
}
void UserInfo::clear_has_action() {
  _has_bits_[0] &= ~0x00000040u;
}
void UserInfo::clear_action() {
  action_ = 0;
  clear_has_action();
}
::google::protobuf::int32 UserInfo::action() const {
  // @@protoc_insertion_point(field_get:UserInfo.action)
  return action_;
}
void UserInfo::set_action(::google::protobuf::int32 value) {
  set_has_action();
  action_ = value;
  // @@protoc_insertion_point(field_set:UserInfo.action)
}

// optional int32 position = 8;
bool UserInfo::has_position() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void UserInfo::set_has_position() {
  _has_bits_[0] |= 0x00000080u;
}
void UserInfo::clear_has_position() {
  _has_bits_[0] &= ~0x00000080u;
}
void UserInfo::clear_position() {
  position_ = 0;
  clear_has_position();
}
::google::protobuf::int32 UserInfo::position() const {
  // @@protoc_insertion_point(field_get:UserInfo.position)
  return position_;
}
void UserInfo::set_position(::google::protobuf::int32 value) {
  set_has_position();
  position_ = value;
  // @@protoc_insertion_point(field_set:UserInfo.position)
}

// required int32 hole_cards = 9;
bool UserInfo::has_hole_cards() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
void UserInfo::set_has_hole_cards() {
  _has_bits_[0] |= 0x00000100u;
}
void UserInfo::clear_has_hole_cards() {
  _has_bits_[0] &= ~0x00000100u;
}
void UserInfo::clear_hole_cards() {
  hole_cards_ = 0;
  clear_has_hole_cards();
}
::google::protobuf::int32 UserInfo::hole_cards() const {
  // @@protoc_insertion_point(field_get:UserInfo.hole_cards)
  return hole_cards_;
}
void UserInfo::set_hole_cards(::google::protobuf::int32 value) {
  set_has_hole_cards();
  hole_cards_ = value;
  // @@protoc_insertion_point(field_set:UserInfo.hole_cards)
}

// required int32 countdown = 10;
bool UserInfo::has_countdown() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
void UserInfo::set_has_countdown() {
  _has_bits_[0] |= 0x00000200u;
}
void UserInfo::clear_has_countdown() {
  _has_bits_[0] &= ~0x00000200u;
}
void UserInfo::clear_countdown() {
  countdown_ = 0;
  clear_has_countdown();
}
::google::protobuf::int32 UserInfo::countdown() const {
  // @@protoc_insertion_point(field_get:UserInfo.countdown)
  return countdown_;
}
void UserInfo::set_countdown(::google::protobuf::int32 value) {
  set_has_countdown();
  countdown_ = value;
  // @@protoc_insertion_point(field_set:UserInfo.countdown)
}

// repeated int32 cards = 11;
int UserInfo::cards_size() const {
  return cards_.size();
}
void UserInfo::clear_cards() {
  cards_.Clear();
}
::google::protobuf::int32 UserInfo::cards(int index) const {
  // @@protoc_insertion_point(field_get:UserInfo.cards)
  return cards_.Get(index);
}
void UserInfo::set_cards(int index, ::google::protobuf::int32 value) {
  cards_.Set(index, value);
  // @@protoc_insertion_point(field_set:UserInfo.cards)
}
void UserInfo::add_cards(::google::protobuf::int32 value) {
  cards_.Add(value);
  // @@protoc_insertion_point(field_add:UserInfo.cards)
}
const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
UserInfo::cards() const {
  // @@protoc_insertion_point(field_list:UserInfo.cards)
  return cards_;
}
::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
UserInfo::mutable_cards() {
  // @@protoc_insertion_point(field_mutable_list:UserInfo.cards)
  return &cards_;
}

// optional int32 cards_type = 12;
bool UserInfo::has_cards_type() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
void UserInfo::set_has_cards_type() {
  _has_bits_[0] |= 0x00000800u;
}
void UserInfo::clear_has_cards_type() {
  _has_bits_[0] &= ~0x00000800u;
}
void UserInfo::clear_cards_type() {
  cards_type_ = 0;
  clear_has_cards_type();
}
::google::protobuf::int32 UserInfo::cards_type() const {
  // @@protoc_insertion_point(field_get:UserInfo.cards_type)
  return cards_type_;
}
void UserInfo::set_cards_type(::google::protobuf::int32 value) {
  set_has_cards_type();
  cards_type_ = value;
  // @@protoc_insertion_point(field_set:UserInfo.cards_type)
}

// optional int64 tax = 13;
bool UserInfo::has_tax() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
void UserInfo::set_has_tax() {
  _has_bits_[0] |= 0x00000400u;
}
void UserInfo::clear_has_tax() {
  _has_bits_[0] &= ~0x00000400u;
}
void UserInfo::clear_tax() {
  tax_ = GOOGLE_LONGLONG(0);
  clear_has_tax();
}
::google::protobuf::int64 UserInfo::tax() const {
  // @@protoc_insertion_point(field_get:UserInfo.tax)
  return tax_;
}
void UserInfo::set_tax(::google::protobuf::int64 value) {
  set_has_tax();
  tax_ = value;
  // @@protoc_insertion_point(field_set:UserInfo.tax)
}

// optional int32 victory = 14;
bool UserInfo::has_victory() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
void UserInfo::set_has_victory() {
  _has_bits_[0] |= 0x00001000u;
}
void UserInfo::clear_has_victory() {
  _has_bits_[0] &= ~0x00001000u;
}
void UserInfo::clear_victory() {
  victory_ = 0;
  clear_has_victory();
}
::google::protobuf::int32 UserInfo::victory() const {
  // @@protoc_insertion_point(field_get:UserInfo.victory)
  return victory_;
}
void UserInfo::set_victory(::google::protobuf::int32 value) {
  set_has_victory();
  victory_ = value;
  // @@protoc_insertion_point(field_set:UserInfo.victory)
}

// optional int32 biggest_winner = 15;
bool UserInfo::has_biggest_winner() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
void UserInfo::set_has_biggest_winner() {
  _has_bits_[0] |= 0x00004000u;
}
void UserInfo::clear_has_biggest_winner() {
  _has_bits_[0] &= ~0x00004000u;
}
void UserInfo::clear_biggest_winner() {
  biggest_winner_ = 0;
  clear_has_biggest_winner();
}
::google::protobuf::int32 UserInfo::biggest_winner() const {
  // @@protoc_insertion_point(field_get:UserInfo.biggest_winner)
  return biggest_winner_;
}
void UserInfo::set_biggest_winner(::google::protobuf::int32 value) {
  set_has_biggest_winner();
  biggest_winner_ = value;
  // @@protoc_insertion_point(field_set:UserInfo.biggest_winner)
}

// required int64 win_money = 16;
bool UserInfo::has_win_money() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
void UserInfo::set_has_win_money() {
  _has_bits_[0] |= 0x00002000u;
}
void UserInfo::clear_has_win_money() {
  _has_bits_[0] &= ~0x00002000u;
}
void UserInfo::clear_win_money() {
  win_money_ = GOOGLE_LONGLONG(0);
  clear_has_win_money();
}
::google::protobuf::int64 UserInfo::win_money() const {
  // @@protoc_insertion_point(field_get:UserInfo.win_money)
  return win_money_;
}
void UserInfo::set_win_money(::google::protobuf::int64 value) {
  set_has_win_money();
  win_money_ = value;
  // @@protoc_insertion_point(field_set:UserInfo.win_money)
}

// required int32 main_pot_money = 17;
bool UserInfo::has_main_pot_money() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
void UserInfo::set_has_main_pot_money() {
  _has_bits_[0] |= 0x00008000u;
}
void UserInfo::clear_has_main_pot_money() {
  _has_bits_[0] &= ~0x00008000u;
}
void UserInfo::clear_main_pot_money() {
  main_pot_money_ = 0;
  clear_has_main_pot_money();
}
::google::protobuf::int32 UserInfo::main_pot_money() const {
  // @@protoc_insertion_point(field_get:UserInfo.main_pot_money)
  return main_pot_money_;
}
void UserInfo::set_main_pot_money(::google::protobuf::int32 value) {
  set_has_main_pot_money();
  main_pot_money_ = value;
  // @@protoc_insertion_point(field_set:UserInfo.main_pot_money)
}

// repeated int32 side_pot_money = 18;
int UserInfo::side_pot_money_size() const {
  return side_pot_money_.size();
}
void UserInfo::clear_side_pot_money() {
  side_pot_money_.Clear();
}
::google::protobuf::int32 UserInfo::side_pot_money(int index) const {
  // @@protoc_insertion_point(field_get:UserInfo.side_pot_money)
  return side_pot_money_.Get(index);
}
void UserInfo::set_side_pot_money(int index, ::google::protobuf::int32 value) {
  side_pot_money_.Set(index, value);
  // @@protoc_insertion_point(field_set:UserInfo.side_pot_money)
}
void UserInfo::add_side_pot_money(::google::protobuf::int32 value) {
  side_pot_money_.Add(value);
  // @@protoc_insertion_point(field_add:UserInfo.side_pot_money)
}
const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
UserInfo::side_pot_money() const {
  // @@protoc_insertion_point(field_list:UserInfo.side_pot_money)
  return side_pot_money_;
}
::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
UserInfo::mutable_side_pot_money() {
  // @@protoc_insertion_point(field_mutable_list:UserInfo.side_pot_money)
  return &side_pot_money_;
}

// repeated int32 cards_show = 19;
int UserInfo::cards_show_size() const {
  return cards_show_.size();
}
void UserInfo::clear_cards_show() {
  cards_show_.Clear();
}
::google::protobuf::int32 UserInfo::cards_show(int index) const {
  // @@protoc_insertion_point(field_get:UserInfo.cards_show)
  return cards_show_.Get(index);
}
void UserInfo::set_cards_show(int index, ::google::protobuf::int32 value) {
  cards_show_.Set(index, value);
  // @@protoc_insertion_point(field_set:UserInfo.cards_show)
}
void UserInfo::add_cards_show(::google::protobuf::int32 value) {
  cards_show_.Add(value);
  // @@protoc_insertion_point(field_add:UserInfo.cards_show)
}
const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
UserInfo::cards_show() const {
  // @@protoc_insertion_point(field_list:UserInfo.cards_show)
  return cards_show_;
}
::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
UserInfo::mutable_cards_show() {
  // @@protoc_insertion_point(field_mutable_list:UserInfo.cards_show)
  return &cards_show_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TexasTable::kStateFieldNumber;
const int TexasTable::kMaxBetFieldNumber;
const int TexasTable::kMinBetFieldNumber;
const int TexasTable::kBlindBetFieldNumber;
const int TexasTable::kPotFieldNumber;
const int TexasTable::kSidePotFieldNumber;
const int TexasTable::kThinkTimeFieldNumber;
const int TexasTable::kPublicCardsFieldNumber;
const int TexasTable::kOwnChairFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TexasTable::TexasTable()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_public_5ftexas_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:TexasTable)
}
TexasTable::TexasTable(const TexasTable& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      side_pot_(from.side_pot_),
      public_cards_(from.public_cards_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&max_bet_, &from.max_bet_,
    reinterpret_cast<char*>(&own_chair_) -
    reinterpret_cast<char*>(&max_bet_) + sizeof(own_chair_));
  // @@protoc_insertion_point(copy_constructor:TexasTable)
}

void TexasTable::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&max_bet_, 0, reinterpret_cast<char*>(&own_chair_) -
    reinterpret_cast<char*>(&max_bet_) + sizeof(own_chair_));
}

TexasTable::~TexasTable() {
  // @@protoc_insertion_point(destructor:TexasTable)
  SharedDtor();
}

void TexasTable::SharedDtor() {
}

void TexasTable::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TexasTable::descriptor() {
  protobuf_public_5ftexas_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_public_5ftexas_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const TexasTable& TexasTable::default_instance() {
  protobuf_public_5ftexas_2eproto::InitDefaults();
  return *internal_default_instance();
}

TexasTable* TexasTable::New(::google::protobuf::Arena* arena) const {
  TexasTable* n = new TexasTable;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void TexasTable::Clear() {
// @@protoc_insertion_point(message_clear_start:TexasTable)
  side_pot_.Clear();
  public_cards_.Clear();
  if (_has_bits_[0 / 32] & 127u) {
    ::memset(&max_bet_, 0, reinterpret_cast<char*>(&own_chair_) -
      reinterpret_cast<char*>(&max_bet_) + sizeof(own_chair_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool TexasTable::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:TexasTable)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 state = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_state();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &state_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 max_bet = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_max_bet();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &max_bet_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 min_bet = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {
          set_has_min_bet();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &min_bet_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 blind_bet = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u)) {
          set_has_blind_bet();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &blind_bet_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int64 pot = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u)) {
          set_has_pot();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &pot_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated int64 side_pot = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 1, 48u, input, this->mutable_side_pot())));
        } else if (static_cast< ::google::protobuf::uint8>(tag) ==
                   static_cast< ::google::protobuf::uint8>(50u)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, this->mutable_side_pot())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 think_time = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u)) {
          set_has_think_time();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &think_time_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated int32 public_cards = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(64u)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 64u, input, this->mutable_public_cards())));
        } else if (static_cast< ::google::protobuf::uint8>(tag) ==
                   static_cast< ::google::protobuf::uint8>(66u)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_public_cards())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 own_chair = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(72u)) {
          set_has_own_chair();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &own_chair_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:TexasTable)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:TexasTable)
  return false;
#undef DO_
}

void TexasTable::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:TexasTable)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 state = 1;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->state(), output);
  }

  // optional int64 max_bet = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->max_bet(), output);
  }

  // optional int64 min_bet = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->min_bet(), output);
  }

  // optional int64 blind_bet = 4;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(4, this->blind_bet(), output);
  }

  // required int64 pot = 5;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(5, this->pot(), output);
  }

  // repeated int64 side_pot = 6;
  for (int i = 0, n = this->side_pot_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(
      6, this->side_pot(i), output);
  }

  // optional int32 think_time = 7;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->think_time(), output);
  }

  // repeated int32 public_cards = 8;
  for (int i = 0, n = this->public_cards_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      8, this->public_cards(i), output);
  }

  // optional int32 own_chair = 9;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->own_chair(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:TexasTable)
}

::google::protobuf::uint8* TexasTable::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:TexasTable)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 state = 1;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->state(), target);
  }

  // optional int64 max_bet = 2;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->max_bet(), target);
  }

  // optional int64 min_bet = 3;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->min_bet(), target);
  }

  // optional int64 blind_bet = 4;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(4, this->blind_bet(), target);
  }

  // required int64 pot = 5;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(5, this->pot(), target);
  }

  // repeated int64 side_pot = 6;
  target = ::google::protobuf::internal::WireFormatLite::
    WriteInt64ToArray(6, this->side_pot_, target);

  // optional int32 think_time = 7;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->think_time(), target);
  }

  // repeated int32 public_cards = 8;
  target = ::google::protobuf::internal::WireFormatLite::
    WriteInt32ToArray(8, this->public_cards_, target);

  // optional int32 own_chair = 9;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->own_chair(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TexasTable)
  return target;
}

size_t TexasTable::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TexasTable)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // required int64 pot = 5;
  if (has_pot()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->pot());
  }
  // repeated int64 side_pot = 6;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      Int64Size(this->side_pot_);
    total_size += 1 *
                  ::google::protobuf::internal::FromIntSize(this->side_pot_size());
    total_size += data_size;
  }

  // repeated int32 public_cards = 8;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      Int32Size(this->public_cards_);
    total_size += 1 *
                  ::google::protobuf::internal::FromIntSize(this->public_cards_size());
    total_size += data_size;
  }

  if (_has_bits_[0 / 32] & 31u) {
    // optional int64 max_bet = 2;
    if (has_max_bet()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->max_bet());
    }

    // optional int64 min_bet = 3;
    if (has_min_bet()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->min_bet());
    }

    // optional int64 blind_bet = 4;
    if (has_blind_bet()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->blind_bet());
    }

    // optional int32 state = 1;
    if (has_state()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->state());
    }

    // optional int32 think_time = 7;
    if (has_think_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->think_time());
    }

  }
  // optional int32 own_chair = 9;
  if (has_own_chair()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->own_chair());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TexasTable::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:TexasTable)
  GOOGLE_DCHECK_NE(&from, this);
  const TexasTable* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const TexasTable>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:TexasTable)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:TexasTable)
    MergeFrom(*source);
  }
}

void TexasTable::MergeFrom(const TexasTable& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TexasTable)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  side_pot_.MergeFrom(from.side_pot_);
  public_cards_.MergeFrom(from.public_cards_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 127u) {
    if (cached_has_bits & 0x00000001u) {
      max_bet_ = from.max_bet_;
    }
    if (cached_has_bits & 0x00000002u) {
      min_bet_ = from.min_bet_;
    }
    if (cached_has_bits & 0x00000004u) {
      blind_bet_ = from.blind_bet_;
    }
    if (cached_has_bits & 0x00000008u) {
      state_ = from.state_;
    }
    if (cached_has_bits & 0x00000010u) {
      think_time_ = from.think_time_;
    }
    if (cached_has_bits & 0x00000020u) {
      pot_ = from.pot_;
    }
    if (cached_has_bits & 0x00000040u) {
      own_chair_ = from.own_chair_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void TexasTable::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:TexasTable)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TexasTable::CopyFrom(const TexasTable& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TexasTable)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TexasTable::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000020) != 0x00000020) return false;
  return true;
}

void TexasTable::Swap(TexasTable* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TexasTable::InternalSwap(TexasTable* other) {
  side_pot_.InternalSwap(&other->side_pot_);
  public_cards_.InternalSwap(&other->public_cards_);
  std::swap(max_bet_, other->max_bet_);
  std::swap(min_bet_, other->min_bet_);
  std::swap(blind_bet_, other->blind_bet_);
  std::swap(state_, other->state_);
  std::swap(think_time_, other->think_time_);
  std::swap(pot_, other->pot_);
  std::swap(own_chair_, other->own_chair_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata TexasTable::GetMetadata() const {
  protobuf_public_5ftexas_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_public_5ftexas_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// TexasTable

// optional int32 state = 1;
bool TexasTable::has_state() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void TexasTable::set_has_state() {
  _has_bits_[0] |= 0x00000008u;
}
void TexasTable::clear_has_state() {
  _has_bits_[0] &= ~0x00000008u;
}
void TexasTable::clear_state() {
  state_ = 0;
  clear_has_state();
}
::google::protobuf::int32 TexasTable::state() const {
  // @@protoc_insertion_point(field_get:TexasTable.state)
  return state_;
}
void TexasTable::set_state(::google::protobuf::int32 value) {
  set_has_state();
  state_ = value;
  // @@protoc_insertion_point(field_set:TexasTable.state)
}

// optional int64 max_bet = 2;
bool TexasTable::has_max_bet() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void TexasTable::set_has_max_bet() {
  _has_bits_[0] |= 0x00000001u;
}
void TexasTable::clear_has_max_bet() {
  _has_bits_[0] &= ~0x00000001u;
}
void TexasTable::clear_max_bet() {
  max_bet_ = GOOGLE_LONGLONG(0);
  clear_has_max_bet();
}
::google::protobuf::int64 TexasTable::max_bet() const {
  // @@protoc_insertion_point(field_get:TexasTable.max_bet)
  return max_bet_;
}
void TexasTable::set_max_bet(::google::protobuf::int64 value) {
  set_has_max_bet();
  max_bet_ = value;
  // @@protoc_insertion_point(field_set:TexasTable.max_bet)
}

// optional int64 min_bet = 3;
bool TexasTable::has_min_bet() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void TexasTable::set_has_min_bet() {
  _has_bits_[0] |= 0x00000002u;
}
void TexasTable::clear_has_min_bet() {
  _has_bits_[0] &= ~0x00000002u;
}
void TexasTable::clear_min_bet() {
  min_bet_ = GOOGLE_LONGLONG(0);
  clear_has_min_bet();
}
::google::protobuf::int64 TexasTable::min_bet() const {
  // @@protoc_insertion_point(field_get:TexasTable.min_bet)
  return min_bet_;
}
void TexasTable::set_min_bet(::google::protobuf::int64 value) {
  set_has_min_bet();
  min_bet_ = value;
  // @@protoc_insertion_point(field_set:TexasTable.min_bet)
}

// optional int64 blind_bet = 4;
bool TexasTable::has_blind_bet() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void TexasTable::set_has_blind_bet() {
  _has_bits_[0] |= 0x00000004u;
}
void TexasTable::clear_has_blind_bet() {
  _has_bits_[0] &= ~0x00000004u;
}
void TexasTable::clear_blind_bet() {
  blind_bet_ = GOOGLE_LONGLONG(0);
  clear_has_blind_bet();
}
::google::protobuf::int64 TexasTable::blind_bet() const {
  // @@protoc_insertion_point(field_get:TexasTable.blind_bet)
  return blind_bet_;
}
void TexasTable::set_blind_bet(::google::protobuf::int64 value) {
  set_has_blind_bet();
  blind_bet_ = value;
  // @@protoc_insertion_point(field_set:TexasTable.blind_bet)
}

// required int64 pot = 5;
bool TexasTable::has_pot() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void TexasTable::set_has_pot() {
  _has_bits_[0] |= 0x00000020u;
}
void TexasTable::clear_has_pot() {
  _has_bits_[0] &= ~0x00000020u;
}
void TexasTable::clear_pot() {
  pot_ = GOOGLE_LONGLONG(0);
  clear_has_pot();
}
::google::protobuf::int64 TexasTable::pot() const {
  // @@protoc_insertion_point(field_get:TexasTable.pot)
  return pot_;
}
void TexasTable::set_pot(::google::protobuf::int64 value) {
  set_has_pot();
  pot_ = value;
  // @@protoc_insertion_point(field_set:TexasTable.pot)
}

// repeated int64 side_pot = 6;
int TexasTable::side_pot_size() const {
  return side_pot_.size();
}
void TexasTable::clear_side_pot() {
  side_pot_.Clear();
}
::google::protobuf::int64 TexasTable::side_pot(int index) const {
  // @@protoc_insertion_point(field_get:TexasTable.side_pot)
  return side_pot_.Get(index);
}
void TexasTable::set_side_pot(int index, ::google::protobuf::int64 value) {
  side_pot_.Set(index, value);
  // @@protoc_insertion_point(field_set:TexasTable.side_pot)
}
void TexasTable::add_side_pot(::google::protobuf::int64 value) {
  side_pot_.Add(value);
  // @@protoc_insertion_point(field_add:TexasTable.side_pot)
}
const ::google::protobuf::RepeatedField< ::google::protobuf::int64 >&
TexasTable::side_pot() const {
  // @@protoc_insertion_point(field_list:TexasTable.side_pot)
  return side_pot_;
}
::google::protobuf::RepeatedField< ::google::protobuf::int64 >*
TexasTable::mutable_side_pot() {
  // @@protoc_insertion_point(field_mutable_list:TexasTable.side_pot)
  return &side_pot_;
}

// optional int32 think_time = 7;
bool TexasTable::has_think_time() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void TexasTable::set_has_think_time() {
  _has_bits_[0] |= 0x00000010u;
}
void TexasTable::clear_has_think_time() {
  _has_bits_[0] &= ~0x00000010u;
}
void TexasTable::clear_think_time() {
  think_time_ = 0;
  clear_has_think_time();
}
::google::protobuf::int32 TexasTable::think_time() const {
  // @@protoc_insertion_point(field_get:TexasTable.think_time)
  return think_time_;
}
void TexasTable::set_think_time(::google::protobuf::int32 value) {
  set_has_think_time();
  think_time_ = value;
  // @@protoc_insertion_point(field_set:TexasTable.think_time)
}

// repeated int32 public_cards = 8;
int TexasTable::public_cards_size() const {
  return public_cards_.size();
}
void TexasTable::clear_public_cards() {
  public_cards_.Clear();
}
::google::protobuf::int32 TexasTable::public_cards(int index) const {
  // @@protoc_insertion_point(field_get:TexasTable.public_cards)
  return public_cards_.Get(index);
}
void TexasTable::set_public_cards(int index, ::google::protobuf::int32 value) {
  public_cards_.Set(index, value);
  // @@protoc_insertion_point(field_set:TexasTable.public_cards)
}
void TexasTable::add_public_cards(::google::protobuf::int32 value) {
  public_cards_.Add(value);
  // @@protoc_insertion_point(field_add:TexasTable.public_cards)
}
const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
TexasTable::public_cards() const {
  // @@protoc_insertion_point(field_list:TexasTable.public_cards)
  return public_cards_;
}
::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
TexasTable::mutable_public_cards() {
  // @@protoc_insertion_point(field_mutable_list:TexasTable.public_cards)
  return &public_cards_;
}

// optional int32 own_chair = 9;
bool TexasTable::has_own_chair() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void TexasTable::set_has_own_chair() {
  _has_bits_[0] |= 0x00000040u;
}
void TexasTable::clear_has_own_chair() {
  _has_bits_[0] &= ~0x00000040u;
}
void TexasTable::clear_own_chair() {
  own_chair_ = 0;
  clear_has_own_chair();
}
::google::protobuf::int32 TexasTable::own_chair() const {
  // @@protoc_insertion_point(field_get:TexasTable.own_chair)
  return own_chair_;
}
void TexasTable::set_own_chair(::google::protobuf::int32 value) {
  set_has_own_chair();
  own_chair_ = value;
  // @@protoc_insertion_point(field_set:TexasTable.own_chair)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SC_TexasTableInfo::kPbTableFieldNumber;
const int SC_TexasTableInfo::kPbUserFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SC_TexasTableInfo::SC_TexasTableInfo()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_public_5ftexas_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:SC_TexasTableInfo)
}
SC_TexasTableInfo::SC_TexasTableInfo(const SC_TexasTableInfo& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      pb_user_(from.pb_user_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_pb_table()) {
    pb_table_ = new ::TexasTable(*from.pb_table_);
  } else {
    pb_table_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:SC_TexasTableInfo)
}

void SC_TexasTableInfo::SharedCtor() {
  _cached_size_ = 0;
  pb_table_ = NULL;
}

SC_TexasTableInfo::~SC_TexasTableInfo() {
  // @@protoc_insertion_point(destructor:SC_TexasTableInfo)
  SharedDtor();
}

void SC_TexasTableInfo::SharedDtor() {
  if (this != internal_default_instance()) {
    delete pb_table_;
  }
}

void SC_TexasTableInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SC_TexasTableInfo::descriptor() {
  protobuf_public_5ftexas_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_public_5ftexas_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const SC_TexasTableInfo& SC_TexasTableInfo::default_instance() {
  protobuf_public_5ftexas_2eproto::InitDefaults();
  return *internal_default_instance();
}

SC_TexasTableInfo* SC_TexasTableInfo::New(::google::protobuf::Arena* arena) const {
  SC_TexasTableInfo* n = new SC_TexasTableInfo;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SC_TexasTableInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:SC_TexasTableInfo)
  pb_user_.Clear();
  if (has_pb_table()) {
    GOOGLE_DCHECK(pb_table_ != NULL);
    pb_table_->::TexasTable::Clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool SC_TexasTableInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:SC_TexasTableInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .TexasTable pb_table = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_pb_table()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .UserInfo pb_user = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_pb_user()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:SC_TexasTableInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:SC_TexasTableInfo)
  return false;
#undef DO_
}

void SC_TexasTableInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:SC_TexasTableInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .TexasTable pb_table = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->pb_table_, output);
  }

  // repeated .UserInfo pb_user = 2;
  for (unsigned int i = 0, n = this->pb_user_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->pb_user(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:SC_TexasTableInfo)
}

::google::protobuf::uint8* SC_TexasTableInfo::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:SC_TexasTableInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .TexasTable pb_table = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->pb_table_, deterministic, target);
  }

  // repeated .UserInfo pb_user = 2;
  for (unsigned int i = 0, n = this->pb_user_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, this->pb_user(i), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SC_TexasTableInfo)
  return target;
}

size_t SC_TexasTableInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SC_TexasTableInfo)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // repeated .UserInfo pb_user = 2;
  {
    unsigned int count = this->pb_user_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->pb_user(i));
    }
  }

  // optional .TexasTable pb_table = 1;
  if (has_pb_table()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->pb_table_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SC_TexasTableInfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:SC_TexasTableInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const SC_TexasTableInfo* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SC_TexasTableInfo>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:SC_TexasTableInfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:SC_TexasTableInfo)
    MergeFrom(*source);
  }
}

void SC_TexasTableInfo::MergeFrom(const SC_TexasTableInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:SC_TexasTableInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  pb_user_.MergeFrom(from.pb_user_);
  if (from.has_pb_table()) {
    mutable_pb_table()->::TexasTable::MergeFrom(from.pb_table());
  }
}

void SC_TexasTableInfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:SC_TexasTableInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SC_TexasTableInfo::CopyFrom(const SC_TexasTableInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SC_TexasTableInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SC_TexasTableInfo::IsInitialized() const {
  if (!::google::protobuf::internal::AllAreInitialized(this->pb_user())) return false;
  if (has_pb_table()) {
    if (!this->pb_table_->IsInitialized()) return false;
  }
  return true;
}

void SC_TexasTableInfo::Swap(SC_TexasTableInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SC_TexasTableInfo::InternalSwap(SC_TexasTableInfo* other) {
  pb_user_.InternalSwap(&other->pb_user_);
  std::swap(pb_table_, other->pb_table_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SC_TexasTableInfo::GetMetadata() const {
  protobuf_public_5ftexas_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_public_5ftexas_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SC_TexasTableInfo

// optional .TexasTable pb_table = 1;
bool SC_TexasTableInfo::has_pb_table() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void SC_TexasTableInfo::set_has_pb_table() {
  _has_bits_[0] |= 0x00000001u;
}
void SC_TexasTableInfo::clear_has_pb_table() {
  _has_bits_[0] &= ~0x00000001u;
}
void SC_TexasTableInfo::clear_pb_table() {
  if (pb_table_ != NULL) pb_table_->::TexasTable::Clear();
  clear_has_pb_table();
}
const ::TexasTable& SC_TexasTableInfo::pb_table() const {
  // @@protoc_insertion_point(field_get:SC_TexasTableInfo.pb_table)
  return pb_table_ != NULL ? *pb_table_
                         : *::TexasTable::internal_default_instance();
}
::TexasTable* SC_TexasTableInfo::mutable_pb_table() {
  set_has_pb_table();
  if (pb_table_ == NULL) {
    pb_table_ = new ::TexasTable;
  }
  // @@protoc_insertion_point(field_mutable:SC_TexasTableInfo.pb_table)
  return pb_table_;
}
::TexasTable* SC_TexasTableInfo::release_pb_table() {
  // @@protoc_insertion_point(field_release:SC_TexasTableInfo.pb_table)
  clear_has_pb_table();
  ::TexasTable* temp = pb_table_;
  pb_table_ = NULL;
  return temp;
}
void SC_TexasTableInfo::set_allocated_pb_table(::TexasTable* pb_table) {
  delete pb_table_;
  pb_table_ = pb_table;
  if (pb_table) {
    set_has_pb_table();
  } else {
    clear_has_pb_table();
  }
  // @@protoc_insertion_point(field_set_allocated:SC_TexasTableInfo.pb_table)
}

// repeated .UserInfo pb_user = 2;
int SC_TexasTableInfo::pb_user_size() const {
  return pb_user_.size();
}
void SC_TexasTableInfo::clear_pb_user() {
  pb_user_.Clear();
}
const ::UserInfo& SC_TexasTableInfo::pb_user(int index) const {
  // @@protoc_insertion_point(field_get:SC_TexasTableInfo.pb_user)
  return pb_user_.Get(index);
}
::UserInfo* SC_TexasTableInfo::mutable_pb_user(int index) {
  // @@protoc_insertion_point(field_mutable:SC_TexasTableInfo.pb_user)
  return pb_user_.Mutable(index);
}
::UserInfo* SC_TexasTableInfo::add_pb_user() {
  // @@protoc_insertion_point(field_add:SC_TexasTableInfo.pb_user)
  return pb_user_.Add();
}
::google::protobuf::RepeatedPtrField< ::UserInfo >*
SC_TexasTableInfo::mutable_pb_user() {
  // @@protoc_insertion_point(field_mutable_list:SC_TexasTableInfo.pb_user)
  return &pb_user_;
}
const ::google::protobuf::RepeatedPtrField< ::UserInfo >&
SC_TexasTableInfo::pb_user() const {
  // @@protoc_insertion_point(field_list:SC_TexasTableInfo.pb_user)
  return pb_user_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SC_TexasSendUserCards::kPbUserFieldNumber;
const int SC_TexasSendUserCards::kPbTableFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SC_TexasSendUserCards::SC_TexasSendUserCards()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_public_5ftexas_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:SC_TexasSendUserCards)
}
SC_TexasSendUserCards::SC_TexasSendUserCards(const SC_TexasSendUserCards& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      pb_user_(from.pb_user_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_pb_table()) {
    pb_table_ = new ::TexasTable(*from.pb_table_);
  } else {
    pb_table_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:SC_TexasSendUserCards)
}

void SC_TexasSendUserCards::SharedCtor() {
  _cached_size_ = 0;
  pb_table_ = NULL;
}

SC_TexasSendUserCards::~SC_TexasSendUserCards() {
  // @@protoc_insertion_point(destructor:SC_TexasSendUserCards)
  SharedDtor();
}

void SC_TexasSendUserCards::SharedDtor() {
  if (this != internal_default_instance()) {
    delete pb_table_;
  }
}

void SC_TexasSendUserCards::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SC_TexasSendUserCards::descriptor() {
  protobuf_public_5ftexas_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_public_5ftexas_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const SC_TexasSendUserCards& SC_TexasSendUserCards::default_instance() {
  protobuf_public_5ftexas_2eproto::InitDefaults();
  return *internal_default_instance();
}

SC_TexasSendUserCards* SC_TexasSendUserCards::New(::google::protobuf::Arena* arena) const {
  SC_TexasSendUserCards* n = new SC_TexasSendUserCards;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SC_TexasSendUserCards::Clear() {
// @@protoc_insertion_point(message_clear_start:SC_TexasSendUserCards)
  pb_user_.Clear();
  if (has_pb_table()) {
    GOOGLE_DCHECK(pb_table_ != NULL);
    pb_table_->::TexasTable::Clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool SC_TexasSendUserCards::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:SC_TexasSendUserCards)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .UserInfo pb_user = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_pb_user()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .TexasTable pb_table = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_pb_table()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:SC_TexasSendUserCards)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:SC_TexasSendUserCards)
  return false;
#undef DO_
}

void SC_TexasSendUserCards::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:SC_TexasSendUserCards)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .UserInfo pb_user = 1;
  for (unsigned int i = 0, n = this->pb_user_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->pb_user(i), output);
  }

  cached_has_bits = _has_bits_[0];
  // optional .TexasTable pb_table = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->pb_table_, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:SC_TexasSendUserCards)
}

::google::protobuf::uint8* SC_TexasSendUserCards::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:SC_TexasSendUserCards)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .UserInfo pb_user = 1;
  for (unsigned int i = 0, n = this->pb_user_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, this->pb_user(i), deterministic, target);
  }

  cached_has_bits = _has_bits_[0];
  // optional .TexasTable pb_table = 2;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->pb_table_, deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SC_TexasSendUserCards)
  return target;
}

size_t SC_TexasSendUserCards::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SC_TexasSendUserCards)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // repeated .UserInfo pb_user = 1;
  {
    unsigned int count = this->pb_user_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->pb_user(i));
    }
  }

  // optional .TexasTable pb_table = 2;
  if (has_pb_table()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->pb_table_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SC_TexasSendUserCards::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:SC_TexasSendUserCards)
  GOOGLE_DCHECK_NE(&from, this);
  const SC_TexasSendUserCards* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SC_TexasSendUserCards>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:SC_TexasSendUserCards)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:SC_TexasSendUserCards)
    MergeFrom(*source);
  }
}

void SC_TexasSendUserCards::MergeFrom(const SC_TexasSendUserCards& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:SC_TexasSendUserCards)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  pb_user_.MergeFrom(from.pb_user_);
  if (from.has_pb_table()) {
    mutable_pb_table()->::TexasTable::MergeFrom(from.pb_table());
  }
}

void SC_TexasSendUserCards::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:SC_TexasSendUserCards)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SC_TexasSendUserCards::CopyFrom(const SC_TexasSendUserCards& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SC_TexasSendUserCards)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SC_TexasSendUserCards::IsInitialized() const {
  if (!::google::protobuf::internal::AllAreInitialized(this->pb_user())) return false;
  if (has_pb_table()) {
    if (!this->pb_table_->IsInitialized()) return false;
  }
  return true;
}

void SC_TexasSendUserCards::Swap(SC_TexasSendUserCards* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SC_TexasSendUserCards::InternalSwap(SC_TexasSendUserCards* other) {
  pb_user_.InternalSwap(&other->pb_user_);
  std::swap(pb_table_, other->pb_table_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SC_TexasSendUserCards::GetMetadata() const {
  protobuf_public_5ftexas_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_public_5ftexas_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SC_TexasSendUserCards

// repeated .UserInfo pb_user = 1;
int SC_TexasSendUserCards::pb_user_size() const {
  return pb_user_.size();
}
void SC_TexasSendUserCards::clear_pb_user() {
  pb_user_.Clear();
}
const ::UserInfo& SC_TexasSendUserCards::pb_user(int index) const {
  // @@protoc_insertion_point(field_get:SC_TexasSendUserCards.pb_user)
  return pb_user_.Get(index);
}
::UserInfo* SC_TexasSendUserCards::mutable_pb_user(int index) {
  // @@protoc_insertion_point(field_mutable:SC_TexasSendUserCards.pb_user)
  return pb_user_.Mutable(index);
}
::UserInfo* SC_TexasSendUserCards::add_pb_user() {
  // @@protoc_insertion_point(field_add:SC_TexasSendUserCards.pb_user)
  return pb_user_.Add();
}
::google::protobuf::RepeatedPtrField< ::UserInfo >*
SC_TexasSendUserCards::mutable_pb_user() {
  // @@protoc_insertion_point(field_mutable_list:SC_TexasSendUserCards.pb_user)
  return &pb_user_;
}
const ::google::protobuf::RepeatedPtrField< ::UserInfo >&
SC_TexasSendUserCards::pb_user() const {
  // @@protoc_insertion_point(field_list:SC_TexasSendUserCards.pb_user)
  return pb_user_;
}

// optional .TexasTable pb_table = 2;
bool SC_TexasSendUserCards::has_pb_table() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void SC_TexasSendUserCards::set_has_pb_table() {
  _has_bits_[0] |= 0x00000001u;
}
void SC_TexasSendUserCards::clear_has_pb_table() {
  _has_bits_[0] &= ~0x00000001u;
}
void SC_TexasSendUserCards::clear_pb_table() {
  if (pb_table_ != NULL) pb_table_->::TexasTable::Clear();
  clear_has_pb_table();
}
const ::TexasTable& SC_TexasSendUserCards::pb_table() const {
  // @@protoc_insertion_point(field_get:SC_TexasSendUserCards.pb_table)
  return pb_table_ != NULL ? *pb_table_
                         : *::TexasTable::internal_default_instance();
}
::TexasTable* SC_TexasSendUserCards::mutable_pb_table() {
  set_has_pb_table();
  if (pb_table_ == NULL) {
    pb_table_ = new ::TexasTable;
  }
  // @@protoc_insertion_point(field_mutable:SC_TexasSendUserCards.pb_table)
  return pb_table_;
}
::TexasTable* SC_TexasSendUserCards::release_pb_table() {
  // @@protoc_insertion_point(field_release:SC_TexasSendUserCards.pb_table)
  clear_has_pb_table();
  ::TexasTable* temp = pb_table_;
  pb_table_ = NULL;
  return temp;
}
void SC_TexasSendUserCards::set_allocated_pb_table(::TexasTable* pb_table) {
  delete pb_table_;
  pb_table_ = pb_table;
  if (pb_table) {
    set_has_pb_table();
  } else {
    clear_has_pb_table();
  }
  // @@protoc_insertion_point(field_set_allocated:SC_TexasSendUserCards.pb_table)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SC_TexasSendPublicCards::kPbTableFieldNumber;
const int SC_TexasSendPublicCards::kPbUserFieldNumber;
const int SC_TexasSendPublicCards::kPublicCardsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SC_TexasSendPublicCards::SC_TexasSendPublicCards()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_public_5ftexas_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:SC_TexasSendPublicCards)
}
SC_TexasSendPublicCards::SC_TexasSendPublicCards(const SC_TexasSendPublicCards& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      pb_user_(from.pb_user_),
      public_cards_(from.public_cards_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_pb_table()) {
    pb_table_ = new ::TexasTable(*from.pb_table_);
  } else {
    pb_table_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:SC_TexasSendPublicCards)
}

void SC_TexasSendPublicCards::SharedCtor() {
  _cached_size_ = 0;
  pb_table_ = NULL;
}

SC_TexasSendPublicCards::~SC_TexasSendPublicCards() {
  // @@protoc_insertion_point(destructor:SC_TexasSendPublicCards)
  SharedDtor();
}

void SC_TexasSendPublicCards::SharedDtor() {
  if (this != internal_default_instance()) {
    delete pb_table_;
  }
}

void SC_TexasSendPublicCards::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SC_TexasSendPublicCards::descriptor() {
  protobuf_public_5ftexas_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_public_5ftexas_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const SC_TexasSendPublicCards& SC_TexasSendPublicCards::default_instance() {
  protobuf_public_5ftexas_2eproto::InitDefaults();
  return *internal_default_instance();
}

SC_TexasSendPublicCards* SC_TexasSendPublicCards::New(::google::protobuf::Arena* arena) const {
  SC_TexasSendPublicCards* n = new SC_TexasSendPublicCards;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SC_TexasSendPublicCards::Clear() {
// @@protoc_insertion_point(message_clear_start:SC_TexasSendPublicCards)
  pb_user_.Clear();
  public_cards_.Clear();
  if (has_pb_table()) {
    GOOGLE_DCHECK(pb_table_ != NULL);
    pb_table_->::TexasTable::Clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool SC_TexasSendPublicCards::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:SC_TexasSendPublicCards)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .TexasTable pb_table = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_pb_table()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .UserInfo pb_user = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_pb_user()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated int32 public_cards = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 24u, input, this->mutable_public_cards())));
        } else if (static_cast< ::google::protobuf::uint8>(tag) ==
                   static_cast< ::google::protobuf::uint8>(26u)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_public_cards())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:SC_TexasSendPublicCards)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:SC_TexasSendPublicCards)
  return false;
#undef DO_
}

void SC_TexasSendPublicCards::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:SC_TexasSendPublicCards)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .TexasTable pb_table = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->pb_table_, output);
  }

  // repeated .UserInfo pb_user = 2;
  for (unsigned int i = 0, n = this->pb_user_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->pb_user(i), output);
  }

  // repeated int32 public_cards = 3;
  for (int i = 0, n = this->public_cards_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      3, this->public_cards(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:SC_TexasSendPublicCards)
}

::google::protobuf::uint8* SC_TexasSendPublicCards::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:SC_TexasSendPublicCards)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .TexasTable pb_table = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->pb_table_, deterministic, target);
  }

  // repeated .UserInfo pb_user = 2;
  for (unsigned int i = 0, n = this->pb_user_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, this->pb_user(i), deterministic, target);
  }

  // repeated int32 public_cards = 3;
  target = ::google::protobuf::internal::WireFormatLite::
    WriteInt32ToArray(3, this->public_cards_, target);

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SC_TexasSendPublicCards)
  return target;
}

size_t SC_TexasSendPublicCards::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SC_TexasSendPublicCards)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // repeated .UserInfo pb_user = 2;
  {
    unsigned int count = this->pb_user_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->pb_user(i));
    }
  }

  // repeated int32 public_cards = 3;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      Int32Size(this->public_cards_);
    total_size += 1 *
                  ::google::protobuf::internal::FromIntSize(this->public_cards_size());
    total_size += data_size;
  }

  // optional .TexasTable pb_table = 1;
  if (has_pb_table()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->pb_table_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SC_TexasSendPublicCards::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:SC_TexasSendPublicCards)
  GOOGLE_DCHECK_NE(&from, this);
  const SC_TexasSendPublicCards* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SC_TexasSendPublicCards>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:SC_TexasSendPublicCards)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:SC_TexasSendPublicCards)
    MergeFrom(*source);
  }
}

void SC_TexasSendPublicCards::MergeFrom(const SC_TexasSendPublicCards& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:SC_TexasSendPublicCards)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  pb_user_.MergeFrom(from.pb_user_);
  public_cards_.MergeFrom(from.public_cards_);
  if (from.has_pb_table()) {
    mutable_pb_table()->::TexasTable::MergeFrom(from.pb_table());
  }
}

void SC_TexasSendPublicCards::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:SC_TexasSendPublicCards)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SC_TexasSendPublicCards::CopyFrom(const SC_TexasSendPublicCards& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SC_TexasSendPublicCards)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SC_TexasSendPublicCards::IsInitialized() const {
  if (!::google::protobuf::internal::AllAreInitialized(this->pb_user())) return false;
  if (has_pb_table()) {
    if (!this->pb_table_->IsInitialized()) return false;
  }
  return true;
}

void SC_TexasSendPublicCards::Swap(SC_TexasSendPublicCards* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SC_TexasSendPublicCards::InternalSwap(SC_TexasSendPublicCards* other) {
  pb_user_.InternalSwap(&other->pb_user_);
  public_cards_.InternalSwap(&other->public_cards_);
  std::swap(pb_table_, other->pb_table_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SC_TexasSendPublicCards::GetMetadata() const {
  protobuf_public_5ftexas_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_public_5ftexas_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SC_TexasSendPublicCards

// optional .TexasTable pb_table = 1;
bool SC_TexasSendPublicCards::has_pb_table() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void SC_TexasSendPublicCards::set_has_pb_table() {
  _has_bits_[0] |= 0x00000001u;
}
void SC_TexasSendPublicCards::clear_has_pb_table() {
  _has_bits_[0] &= ~0x00000001u;
}
void SC_TexasSendPublicCards::clear_pb_table() {
  if (pb_table_ != NULL) pb_table_->::TexasTable::Clear();
  clear_has_pb_table();
}
const ::TexasTable& SC_TexasSendPublicCards::pb_table() const {
  // @@protoc_insertion_point(field_get:SC_TexasSendPublicCards.pb_table)
  return pb_table_ != NULL ? *pb_table_
                         : *::TexasTable::internal_default_instance();
}
::TexasTable* SC_TexasSendPublicCards::mutable_pb_table() {
  set_has_pb_table();
  if (pb_table_ == NULL) {
    pb_table_ = new ::TexasTable;
  }
  // @@protoc_insertion_point(field_mutable:SC_TexasSendPublicCards.pb_table)
  return pb_table_;
}
::TexasTable* SC_TexasSendPublicCards::release_pb_table() {
  // @@protoc_insertion_point(field_release:SC_TexasSendPublicCards.pb_table)
  clear_has_pb_table();
  ::TexasTable* temp = pb_table_;
  pb_table_ = NULL;
  return temp;
}
void SC_TexasSendPublicCards::set_allocated_pb_table(::TexasTable* pb_table) {
  delete pb_table_;
  pb_table_ = pb_table;
  if (pb_table) {
    set_has_pb_table();
  } else {
    clear_has_pb_table();
  }
  // @@protoc_insertion_point(field_set_allocated:SC_TexasSendPublicCards.pb_table)
}

// repeated .UserInfo pb_user = 2;
int SC_TexasSendPublicCards::pb_user_size() const {
  return pb_user_.size();
}
void SC_TexasSendPublicCards::clear_pb_user() {
  pb_user_.Clear();
}
const ::UserInfo& SC_TexasSendPublicCards::pb_user(int index) const {
  // @@protoc_insertion_point(field_get:SC_TexasSendPublicCards.pb_user)
  return pb_user_.Get(index);
}
::UserInfo* SC_TexasSendPublicCards::mutable_pb_user(int index) {
  // @@protoc_insertion_point(field_mutable:SC_TexasSendPublicCards.pb_user)
  return pb_user_.Mutable(index);
}
::UserInfo* SC_TexasSendPublicCards::add_pb_user() {
  // @@protoc_insertion_point(field_add:SC_TexasSendPublicCards.pb_user)
  return pb_user_.Add();
}
::google::protobuf::RepeatedPtrField< ::UserInfo >*
SC_TexasSendPublicCards::mutable_pb_user() {
  // @@protoc_insertion_point(field_mutable_list:SC_TexasSendPublicCards.pb_user)
  return &pb_user_;
}
const ::google::protobuf::RepeatedPtrField< ::UserInfo >&
SC_TexasSendPublicCards::pb_user() const {
  // @@protoc_insertion_point(field_list:SC_TexasSendPublicCards.pb_user)
  return pb_user_;
}

// repeated int32 public_cards = 3;
int SC_TexasSendPublicCards::public_cards_size() const {
  return public_cards_.size();
}
void SC_TexasSendPublicCards::clear_public_cards() {
  public_cards_.Clear();
}
::google::protobuf::int32 SC_TexasSendPublicCards::public_cards(int index) const {
  // @@protoc_insertion_point(field_get:SC_TexasSendPublicCards.public_cards)
  return public_cards_.Get(index);
}
void SC_TexasSendPublicCards::set_public_cards(int index, ::google::protobuf::int32 value) {
  public_cards_.Set(index, value);
  // @@protoc_insertion_point(field_set:SC_TexasSendPublicCards.public_cards)
}
void SC_TexasSendPublicCards::add_public_cards(::google::protobuf::int32 value) {
  public_cards_.Add(value);
  // @@protoc_insertion_point(field_add:SC_TexasSendPublicCards.public_cards)
}
const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
SC_TexasSendPublicCards::public_cards() const {
  // @@protoc_insertion_point(field_list:SC_TexasSendPublicCards.public_cards)
  return public_cards_;
}
::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
SC_TexasSendPublicCards::mutable_public_cards() {
  // @@protoc_insertion_point(field_mutable_list:SC_TexasSendPublicCards.public_cards)
  return &public_cards_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SC_TexasUserAction::kPbActionFieldNumber;
const int SC_TexasUserAction::kPbTableFieldNumber;
const int SC_TexasUserAction::kChairFieldNumber;
const int SC_TexasUserAction::kActionFieldNumber;
const int SC_TexasUserAction::kBetMoneyFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SC_TexasUserAction::SC_TexasUserAction()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_public_5ftexas_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:SC_TexasUserAction)
}
SC_TexasUserAction::SC_TexasUserAction(const SC_TexasUserAction& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_pb_action()) {
    pb_action_ = new ::UserInfo(*from.pb_action_);
  } else {
    pb_action_ = NULL;
  }
  if (from.has_pb_table()) {
    pb_table_ = new ::TexasTable(*from.pb_table_);
  } else {
    pb_table_ = NULL;
  }
  ::memcpy(&chair_, &from.chair_,
    reinterpret_cast<char*>(&bet_money_) -
    reinterpret_cast<char*>(&chair_) + sizeof(bet_money_));
  // @@protoc_insertion_point(copy_constructor:SC_TexasUserAction)
}

void SC_TexasUserAction::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&pb_action_, 0, reinterpret_cast<char*>(&bet_money_) -
    reinterpret_cast<char*>(&pb_action_) + sizeof(bet_money_));
}

SC_TexasUserAction::~SC_TexasUserAction() {
  // @@protoc_insertion_point(destructor:SC_TexasUserAction)
  SharedDtor();
}

void SC_TexasUserAction::SharedDtor() {
  if (this != internal_default_instance()) {
    delete pb_action_;
  }
  if (this != internal_default_instance()) {
    delete pb_table_;
  }
}

void SC_TexasUserAction::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SC_TexasUserAction::descriptor() {
  protobuf_public_5ftexas_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_public_5ftexas_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const SC_TexasUserAction& SC_TexasUserAction::default_instance() {
  protobuf_public_5ftexas_2eproto::InitDefaults();
  return *internal_default_instance();
}

SC_TexasUserAction* SC_TexasUserAction::New(::google::protobuf::Arena* arena) const {
  SC_TexasUserAction* n = new SC_TexasUserAction;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SC_TexasUserAction::Clear() {
// @@protoc_insertion_point(message_clear_start:SC_TexasUserAction)
  if (_has_bits_[0 / 32] & 3u) {
    if (has_pb_action()) {
      GOOGLE_DCHECK(pb_action_ != NULL);
      pb_action_->::UserInfo::Clear();
    }
    if (has_pb_table()) {
      GOOGLE_DCHECK(pb_table_ != NULL);
      pb_table_->::TexasTable::Clear();
    }
  }
  if (_has_bits_[0 / 32] & 28u) {
    ::memset(&chair_, 0, reinterpret_cast<char*>(&bet_money_) -
      reinterpret_cast<char*>(&chair_) + sizeof(bet_money_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool SC_TexasUserAction::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:SC_TexasUserAction)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .UserInfo pb_action = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_pb_action()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .TexasTable pb_table = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_pb_table()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 chair = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {
          set_has_chair();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &chair_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 action = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u)) {
          set_has_action();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &action_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int64 bet_money = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u)) {
          set_has_bet_money();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &bet_money_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:SC_TexasUserAction)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:SC_TexasUserAction)
  return false;
#undef DO_
}

void SC_TexasUserAction::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:SC_TexasUserAction)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .UserInfo pb_action = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->pb_action_, output);
  }

  // optional .TexasTable pb_table = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->pb_table_, output);
  }

  // required int32 chair = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->chair(), output);
  }

  // required int32 action = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->action(), output);
  }

  // required int64 bet_money = 5;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(5, this->bet_money(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:SC_TexasUserAction)
}

::google::protobuf::uint8* SC_TexasUserAction::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:SC_TexasUserAction)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .UserInfo pb_action = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->pb_action_, deterministic, target);
  }

  // optional .TexasTable pb_table = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->pb_table_, deterministic, target);
  }

  // required int32 chair = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->chair(), target);
  }

  // required int32 action = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->action(), target);
  }

  // required int64 bet_money = 5;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(5, this->bet_money(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SC_TexasUserAction)
  return target;
}

size_t SC_TexasUserAction::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:SC_TexasUserAction)
  size_t total_size = 0;

  if (has_chair()) {
    // required int32 chair = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->chair());
  }

  if (has_action()) {
    // required int32 action = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->action());
  }

  if (has_bet_money()) {
    // required int64 bet_money = 5;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->bet_money());
  }

  return total_size;
}
size_t SC_TexasUserAction::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SC_TexasUserAction)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (((_has_bits_[0] & 0x0000001c) ^ 0x0000001c) == 0) {  // All required fields are present.
    // required int32 chair = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->chair());

    // required int32 action = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->action());

    // required int64 bet_money = 5;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->bet_money());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  if (_has_bits_[0 / 32] & 3u) {
    // optional .UserInfo pb_action = 1;
    if (has_pb_action()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->pb_action_);
    }

    // optional .TexasTable pb_table = 2;
    if (has_pb_table()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->pb_table_);
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SC_TexasUserAction::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:SC_TexasUserAction)
  GOOGLE_DCHECK_NE(&from, this);
  const SC_TexasUserAction* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SC_TexasUserAction>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:SC_TexasUserAction)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:SC_TexasUserAction)
    MergeFrom(*source);
  }
}

void SC_TexasUserAction::MergeFrom(const SC_TexasUserAction& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:SC_TexasUserAction)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 31u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_pb_action()->::UserInfo::MergeFrom(from.pb_action());
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_pb_table()->::TexasTable::MergeFrom(from.pb_table());
    }
    if (cached_has_bits & 0x00000004u) {
      chair_ = from.chair_;
    }
    if (cached_has_bits & 0x00000008u) {
      action_ = from.action_;
    }
    if (cached_has_bits & 0x00000010u) {
      bet_money_ = from.bet_money_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void SC_TexasUserAction::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:SC_TexasUserAction)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SC_TexasUserAction::CopyFrom(const SC_TexasUserAction& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SC_TexasUserAction)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SC_TexasUserAction::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000001c) != 0x0000001c) return false;
  if (has_pb_action()) {
    if (!this->pb_action_->IsInitialized()) return false;
  }
  if (has_pb_table()) {
    if (!this->pb_table_->IsInitialized()) return false;
  }
  return true;
}

void SC_TexasUserAction::Swap(SC_TexasUserAction* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SC_TexasUserAction::InternalSwap(SC_TexasUserAction* other) {
  std::swap(pb_action_, other->pb_action_);
  std::swap(pb_table_, other->pb_table_);
  std::swap(chair_, other->chair_);
  std::swap(action_, other->action_);
  std::swap(bet_money_, other->bet_money_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SC_TexasUserAction::GetMetadata() const {
  protobuf_public_5ftexas_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_public_5ftexas_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SC_TexasUserAction

// optional .UserInfo pb_action = 1;
bool SC_TexasUserAction::has_pb_action() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void SC_TexasUserAction::set_has_pb_action() {
  _has_bits_[0] |= 0x00000001u;
}
void SC_TexasUserAction::clear_has_pb_action() {
  _has_bits_[0] &= ~0x00000001u;
}
void SC_TexasUserAction::clear_pb_action() {
  if (pb_action_ != NULL) pb_action_->::UserInfo::Clear();
  clear_has_pb_action();
}
const ::UserInfo& SC_TexasUserAction::pb_action() const {
  // @@protoc_insertion_point(field_get:SC_TexasUserAction.pb_action)
  return pb_action_ != NULL ? *pb_action_
                         : *::UserInfo::internal_default_instance();
}
::UserInfo* SC_TexasUserAction::mutable_pb_action() {
  set_has_pb_action();
  if (pb_action_ == NULL) {
    pb_action_ = new ::UserInfo;
  }
  // @@protoc_insertion_point(field_mutable:SC_TexasUserAction.pb_action)
  return pb_action_;
}
::UserInfo* SC_TexasUserAction::release_pb_action() {
  // @@protoc_insertion_point(field_release:SC_TexasUserAction.pb_action)
  clear_has_pb_action();
  ::UserInfo* temp = pb_action_;
  pb_action_ = NULL;
  return temp;
}
void SC_TexasUserAction::set_allocated_pb_action(::UserInfo* pb_action) {
  delete pb_action_;
  pb_action_ = pb_action;
  if (pb_action) {
    set_has_pb_action();
  } else {
    clear_has_pb_action();
  }
  // @@protoc_insertion_point(field_set_allocated:SC_TexasUserAction.pb_action)
}

// optional .TexasTable pb_table = 2;
bool SC_TexasUserAction::has_pb_table() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void SC_TexasUserAction::set_has_pb_table() {
  _has_bits_[0] |= 0x00000002u;
}
void SC_TexasUserAction::clear_has_pb_table() {
  _has_bits_[0] &= ~0x00000002u;
}
void SC_TexasUserAction::clear_pb_table() {
  if (pb_table_ != NULL) pb_table_->::TexasTable::Clear();
  clear_has_pb_table();
}
const ::TexasTable& SC_TexasUserAction::pb_table() const {
  // @@protoc_insertion_point(field_get:SC_TexasUserAction.pb_table)
  return pb_table_ != NULL ? *pb_table_
                         : *::TexasTable::internal_default_instance();
}
::TexasTable* SC_TexasUserAction::mutable_pb_table() {
  set_has_pb_table();
  if (pb_table_ == NULL) {
    pb_table_ = new ::TexasTable;
  }
  // @@protoc_insertion_point(field_mutable:SC_TexasUserAction.pb_table)
  return pb_table_;
}
::TexasTable* SC_TexasUserAction::release_pb_table() {
  // @@protoc_insertion_point(field_release:SC_TexasUserAction.pb_table)
  clear_has_pb_table();
  ::TexasTable* temp = pb_table_;
  pb_table_ = NULL;
  return temp;
}
void SC_TexasUserAction::set_allocated_pb_table(::TexasTable* pb_table) {
  delete pb_table_;
  pb_table_ = pb_table;
  if (pb_table) {
    set_has_pb_table();
  } else {
    clear_has_pb_table();
  }
  // @@protoc_insertion_point(field_set_allocated:SC_TexasUserAction.pb_table)
}

// required int32 chair = 3;
bool SC_TexasUserAction::has_chair() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void SC_TexasUserAction::set_has_chair() {
  _has_bits_[0] |= 0x00000004u;
}
void SC_TexasUserAction::clear_has_chair() {
  _has_bits_[0] &= ~0x00000004u;
}
void SC_TexasUserAction::clear_chair() {
  chair_ = 0;
  clear_has_chair();
}
::google::protobuf::int32 SC_TexasUserAction::chair() const {
  // @@protoc_insertion_point(field_get:SC_TexasUserAction.chair)
  return chair_;
}
void SC_TexasUserAction::set_chair(::google::protobuf::int32 value) {
  set_has_chair();
  chair_ = value;
  // @@protoc_insertion_point(field_set:SC_TexasUserAction.chair)
}

// required int32 action = 4;
bool SC_TexasUserAction::has_action() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void SC_TexasUserAction::set_has_action() {
  _has_bits_[0] |= 0x00000008u;
}
void SC_TexasUserAction::clear_has_action() {
  _has_bits_[0] &= ~0x00000008u;
}
void SC_TexasUserAction::clear_action() {
  action_ = 0;
  clear_has_action();
}
::google::protobuf::int32 SC_TexasUserAction::action() const {
  // @@protoc_insertion_point(field_get:SC_TexasUserAction.action)
  return action_;
}
void SC_TexasUserAction::set_action(::google::protobuf::int32 value) {
  set_has_action();
  action_ = value;
  // @@protoc_insertion_point(field_set:SC_TexasUserAction.action)
}

// required int64 bet_money = 5;
bool SC_TexasUserAction::has_bet_money() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void SC_TexasUserAction::set_has_bet_money() {
  _has_bits_[0] |= 0x00000010u;
}
void SC_TexasUserAction::clear_has_bet_money() {
  _has_bits_[0] &= ~0x00000010u;
}
void SC_TexasUserAction::clear_bet_money() {
  bet_money_ = GOOGLE_LONGLONG(0);
  clear_has_bet_money();
}
::google::protobuf::int64 SC_TexasUserAction::bet_money() const {
  // @@protoc_insertion_point(field_get:SC_TexasUserAction.bet_money)
  return bet_money_;
}
void SC_TexasUserAction::set_bet_money(::google::protobuf::int64 value) {
  set_has_bet_money();
  bet_money_ = value;
  // @@protoc_insertion_point(field_set:SC_TexasUserAction.bet_money)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SC_TexasNewUser::kPbUserFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SC_TexasNewUser::SC_TexasNewUser()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_public_5ftexas_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:SC_TexasNewUser)
}
SC_TexasNewUser::SC_TexasNewUser(const SC_TexasNewUser& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_pb_user()) {
    pb_user_ = new ::UserInfo(*from.pb_user_);
  } else {
    pb_user_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:SC_TexasNewUser)
}

void SC_TexasNewUser::SharedCtor() {
  _cached_size_ = 0;
  pb_user_ = NULL;
}

SC_TexasNewUser::~SC_TexasNewUser() {
  // @@protoc_insertion_point(destructor:SC_TexasNewUser)
  SharedDtor();
}

void SC_TexasNewUser::SharedDtor() {
  if (this != internal_default_instance()) {
    delete pb_user_;
  }
}

void SC_TexasNewUser::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SC_TexasNewUser::descriptor() {
  protobuf_public_5ftexas_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_public_5ftexas_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const SC_TexasNewUser& SC_TexasNewUser::default_instance() {
  protobuf_public_5ftexas_2eproto::InitDefaults();
  return *internal_default_instance();
}

SC_TexasNewUser* SC_TexasNewUser::New(::google::protobuf::Arena* arena) const {
  SC_TexasNewUser* n = new SC_TexasNewUser;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SC_TexasNewUser::Clear() {
// @@protoc_insertion_point(message_clear_start:SC_TexasNewUser)
  if (has_pb_user()) {
    GOOGLE_DCHECK(pb_user_ != NULL);
    pb_user_->::UserInfo::Clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool SC_TexasNewUser::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:SC_TexasNewUser)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .UserInfo pb_user = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_pb_user()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:SC_TexasNewUser)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:SC_TexasNewUser)
  return false;
#undef DO_
}

void SC_TexasNewUser::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:SC_TexasNewUser)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .UserInfo pb_user = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->pb_user_, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:SC_TexasNewUser)
}

::google::protobuf::uint8* SC_TexasNewUser::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:SC_TexasNewUser)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .UserInfo pb_user = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->pb_user_, deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SC_TexasNewUser)
  return target;
}

size_t SC_TexasNewUser::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SC_TexasNewUser)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // optional .UserInfo pb_user = 1;
  if (has_pb_user()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->pb_user_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SC_TexasNewUser::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:SC_TexasNewUser)
  GOOGLE_DCHECK_NE(&from, this);
  const SC_TexasNewUser* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SC_TexasNewUser>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:SC_TexasNewUser)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:SC_TexasNewUser)
    MergeFrom(*source);
  }
}

void SC_TexasNewUser::MergeFrom(const SC_TexasNewUser& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:SC_TexasNewUser)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_pb_user()) {
    mutable_pb_user()->::UserInfo::MergeFrom(from.pb_user());
  }
}

void SC_TexasNewUser::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:SC_TexasNewUser)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SC_TexasNewUser::CopyFrom(const SC_TexasNewUser& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SC_TexasNewUser)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SC_TexasNewUser::IsInitialized() const {
  if (has_pb_user()) {
    if (!this->pb_user_->IsInitialized()) return false;
  }
  return true;
}

void SC_TexasNewUser::Swap(SC_TexasNewUser* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SC_TexasNewUser::InternalSwap(SC_TexasNewUser* other) {
  std::swap(pb_user_, other->pb_user_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SC_TexasNewUser::GetMetadata() const {
  protobuf_public_5ftexas_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_public_5ftexas_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SC_TexasNewUser

// optional .UserInfo pb_user = 1;
bool SC_TexasNewUser::has_pb_user() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void SC_TexasNewUser::set_has_pb_user() {
  _has_bits_[0] |= 0x00000001u;
}
void SC_TexasNewUser::clear_has_pb_user() {
  _has_bits_[0] &= ~0x00000001u;
}
void SC_TexasNewUser::clear_pb_user() {
  if (pb_user_ != NULL) pb_user_->::UserInfo::Clear();
  clear_has_pb_user();
}
const ::UserInfo& SC_TexasNewUser::pb_user() const {
  // @@protoc_insertion_point(field_get:SC_TexasNewUser.pb_user)
  return pb_user_ != NULL ? *pb_user_
                         : *::UserInfo::internal_default_instance();
}
::UserInfo* SC_TexasNewUser::mutable_pb_user() {
  set_has_pb_user();
  if (pb_user_ == NULL) {
    pb_user_ = new ::UserInfo;
  }
  // @@protoc_insertion_point(field_mutable:SC_TexasNewUser.pb_user)
  return pb_user_;
}
::UserInfo* SC_TexasNewUser::release_pb_user() {
  // @@protoc_insertion_point(field_release:SC_TexasNewUser.pb_user)
  clear_has_pb_user();
  ::UserInfo* temp = pb_user_;
  pb_user_ = NULL;
  return temp;
}
void SC_TexasNewUser::set_allocated_pb_user(::UserInfo* pb_user) {
  delete pb_user_;
  pb_user_ = pb_user;
  if (pb_user) {
    set_has_pb_user();
  } else {
    clear_has_pb_user();
  }
  // @@protoc_insertion_point(field_set_allocated:SC_TexasNewUser.pb_user)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SC_TexasUserLeave::kPbUserFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SC_TexasUserLeave::SC_TexasUserLeave()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_public_5ftexas_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:SC_TexasUserLeave)
}
SC_TexasUserLeave::SC_TexasUserLeave(const SC_TexasUserLeave& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_pb_user()) {
    pb_user_ = new ::UserInfo(*from.pb_user_);
  } else {
    pb_user_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:SC_TexasUserLeave)
}

void SC_TexasUserLeave::SharedCtor() {
  _cached_size_ = 0;
  pb_user_ = NULL;
}

SC_TexasUserLeave::~SC_TexasUserLeave() {
  // @@protoc_insertion_point(destructor:SC_TexasUserLeave)
  SharedDtor();
}

void SC_TexasUserLeave::SharedDtor() {
  if (this != internal_default_instance()) {
    delete pb_user_;
  }
}

void SC_TexasUserLeave::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SC_TexasUserLeave::descriptor() {
  protobuf_public_5ftexas_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_public_5ftexas_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const SC_TexasUserLeave& SC_TexasUserLeave::default_instance() {
  protobuf_public_5ftexas_2eproto::InitDefaults();
  return *internal_default_instance();
}

SC_TexasUserLeave* SC_TexasUserLeave::New(::google::protobuf::Arena* arena) const {
  SC_TexasUserLeave* n = new SC_TexasUserLeave;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SC_TexasUserLeave::Clear() {
// @@protoc_insertion_point(message_clear_start:SC_TexasUserLeave)
  if (has_pb_user()) {
    GOOGLE_DCHECK(pb_user_ != NULL);
    pb_user_->::UserInfo::Clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool SC_TexasUserLeave::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:SC_TexasUserLeave)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .UserInfo pb_user = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_pb_user()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:SC_TexasUserLeave)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:SC_TexasUserLeave)
  return false;
#undef DO_
}

void SC_TexasUserLeave::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:SC_TexasUserLeave)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .UserInfo pb_user = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->pb_user_, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:SC_TexasUserLeave)
}

::google::protobuf::uint8* SC_TexasUserLeave::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:SC_TexasUserLeave)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .UserInfo pb_user = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->pb_user_, deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SC_TexasUserLeave)
  return target;
}

size_t SC_TexasUserLeave::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SC_TexasUserLeave)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // optional .UserInfo pb_user = 1;
  if (has_pb_user()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->pb_user_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SC_TexasUserLeave::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:SC_TexasUserLeave)
  GOOGLE_DCHECK_NE(&from, this);
  const SC_TexasUserLeave* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SC_TexasUserLeave>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:SC_TexasUserLeave)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:SC_TexasUserLeave)
    MergeFrom(*source);
  }
}

void SC_TexasUserLeave::MergeFrom(const SC_TexasUserLeave& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:SC_TexasUserLeave)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_pb_user()) {
    mutable_pb_user()->::UserInfo::MergeFrom(from.pb_user());
  }
}

void SC_TexasUserLeave::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:SC_TexasUserLeave)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SC_TexasUserLeave::CopyFrom(const SC_TexasUserLeave& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SC_TexasUserLeave)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SC_TexasUserLeave::IsInitialized() const {
  if (has_pb_user()) {
    if (!this->pb_user_->IsInitialized()) return false;
  }
  return true;
}

void SC_TexasUserLeave::Swap(SC_TexasUserLeave* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SC_TexasUserLeave::InternalSwap(SC_TexasUserLeave* other) {
  std::swap(pb_user_, other->pb_user_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SC_TexasUserLeave::GetMetadata() const {
  protobuf_public_5ftexas_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_public_5ftexas_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SC_TexasUserLeave

// optional .UserInfo pb_user = 1;
bool SC_TexasUserLeave::has_pb_user() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void SC_TexasUserLeave::set_has_pb_user() {
  _has_bits_[0] |= 0x00000001u;
}
void SC_TexasUserLeave::clear_has_pb_user() {
  _has_bits_[0] &= ~0x00000001u;
}
void SC_TexasUserLeave::clear_pb_user() {
  if (pb_user_ != NULL) pb_user_->::UserInfo::Clear();
  clear_has_pb_user();
}
const ::UserInfo& SC_TexasUserLeave::pb_user() const {
  // @@protoc_insertion_point(field_get:SC_TexasUserLeave.pb_user)
  return pb_user_ != NULL ? *pb_user_
                         : *::UserInfo::internal_default_instance();
}
::UserInfo* SC_TexasUserLeave::mutable_pb_user() {
  set_has_pb_user();
  if (pb_user_ == NULL) {
    pb_user_ = new ::UserInfo;
  }
  // @@protoc_insertion_point(field_mutable:SC_TexasUserLeave.pb_user)
  return pb_user_;
}
::UserInfo* SC_TexasUserLeave::release_pb_user() {
  // @@protoc_insertion_point(field_release:SC_TexasUserLeave.pb_user)
  clear_has_pb_user();
  ::UserInfo* temp = pb_user_;
  pb_user_ = NULL;
  return temp;
}
void SC_TexasUserLeave::set_allocated_pb_user(::UserInfo* pb_user) {
  delete pb_user_;
  pb_user_ = pb_user;
  if (pb_user) {
    set_has_pb_user();
  } else {
    clear_has_pb_user();
  }
  // @@protoc_insertion_point(field_set_allocated:SC_TexasUserLeave.pb_user)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SC_TexasForceLeave::kReasonFieldNumber;
const int SC_TexasForceLeave::kNumFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SC_TexasForceLeave::SC_TexasForceLeave()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_public_5ftexas_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:SC_TexasForceLeave)
}
SC_TexasForceLeave::SC_TexasForceLeave(const SC_TexasForceLeave& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  reason_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_reason()) {
    reason_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.reason_);
  }
  num_ = from.num_;
  // @@protoc_insertion_point(copy_constructor:SC_TexasForceLeave)
}

void SC_TexasForceLeave::SharedCtor() {
  _cached_size_ = 0;
  reason_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  num_ = 0;
}

SC_TexasForceLeave::~SC_TexasForceLeave() {
  // @@protoc_insertion_point(destructor:SC_TexasForceLeave)
  SharedDtor();
}

void SC_TexasForceLeave::SharedDtor() {
  reason_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void SC_TexasForceLeave::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SC_TexasForceLeave::descriptor() {
  protobuf_public_5ftexas_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_public_5ftexas_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const SC_TexasForceLeave& SC_TexasForceLeave::default_instance() {
  protobuf_public_5ftexas_2eproto::InitDefaults();
  return *internal_default_instance();
}

SC_TexasForceLeave* SC_TexasForceLeave::New(::google::protobuf::Arena* arena) const {
  SC_TexasForceLeave* n = new SC_TexasForceLeave;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SC_TexasForceLeave::Clear() {
// @@protoc_insertion_point(message_clear_start:SC_TexasForceLeave)
  if (has_reason()) {
    GOOGLE_DCHECK(!reason_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
    (*reason_.UnsafeRawStringPointer())->clear();
  }
  num_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool SC_TexasForceLeave::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:SC_TexasForceLeave)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string reason = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_reason()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->reason().data(), this->reason().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "SC_TexasForceLeave.reason");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 num = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_num();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &num_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:SC_TexasForceLeave)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:SC_TexasForceLeave)
  return false;
#undef DO_
}

void SC_TexasForceLeave::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:SC_TexasForceLeave)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string reason = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->reason().data(), this->reason().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "SC_TexasForceLeave.reason");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->reason(), output);
  }

  // optional int32 num = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->num(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:SC_TexasForceLeave)
}

::google::protobuf::uint8* SC_TexasForceLeave::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:SC_TexasForceLeave)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string reason = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->reason().data(), this->reason().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "SC_TexasForceLeave.reason");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->reason(), target);
  }

  // optional int32 num = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->num(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SC_TexasForceLeave)
  return target;
}

size_t SC_TexasForceLeave::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SC_TexasForceLeave)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 3u) {
    // optional string reason = 1;
    if (has_reason()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->reason());
    }

    // optional int32 num = 2;
    if (has_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->num());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SC_TexasForceLeave::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:SC_TexasForceLeave)
  GOOGLE_DCHECK_NE(&from, this);
  const SC_TexasForceLeave* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SC_TexasForceLeave>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:SC_TexasForceLeave)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:SC_TexasForceLeave)
    MergeFrom(*source);
  }
}

void SC_TexasForceLeave::MergeFrom(const SC_TexasForceLeave& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:SC_TexasForceLeave)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_reason();
      reason_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.reason_);
    }
    if (cached_has_bits & 0x00000002u) {
      num_ = from.num_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void SC_TexasForceLeave::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:SC_TexasForceLeave)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SC_TexasForceLeave::CopyFrom(const SC_TexasForceLeave& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SC_TexasForceLeave)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SC_TexasForceLeave::IsInitialized() const {
  return true;
}

void SC_TexasForceLeave::Swap(SC_TexasForceLeave* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SC_TexasForceLeave::InternalSwap(SC_TexasForceLeave* other) {
  reason_.Swap(&other->reason_);
  std::swap(num_, other->num_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SC_TexasForceLeave::GetMetadata() const {
  protobuf_public_5ftexas_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_public_5ftexas_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SC_TexasForceLeave

// optional string reason = 1;
bool SC_TexasForceLeave::has_reason() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void SC_TexasForceLeave::set_has_reason() {
  _has_bits_[0] |= 0x00000001u;
}
void SC_TexasForceLeave::clear_has_reason() {
  _has_bits_[0] &= ~0x00000001u;
}
void SC_TexasForceLeave::clear_reason() {
  reason_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_reason();
}
const ::std::string& SC_TexasForceLeave::reason() const {
  // @@protoc_insertion_point(field_get:SC_TexasForceLeave.reason)
  return reason_.GetNoArena();
}
void SC_TexasForceLeave::set_reason(const ::std::string& value) {
  set_has_reason();
  reason_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:SC_TexasForceLeave.reason)
}
#if LANG_CXX11
void SC_TexasForceLeave::set_reason(::std::string&& value) {
  set_has_reason();
  reason_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:SC_TexasForceLeave.reason)
}
#endif
void SC_TexasForceLeave::set_reason(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_reason();
  reason_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:SC_TexasForceLeave.reason)
}
void SC_TexasForceLeave::set_reason(const char* value, size_t size) {
  set_has_reason();
  reason_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:SC_TexasForceLeave.reason)
}
::std::string* SC_TexasForceLeave::mutable_reason() {
  set_has_reason();
  // @@protoc_insertion_point(field_mutable:SC_TexasForceLeave.reason)
  return reason_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* SC_TexasForceLeave::release_reason() {
  // @@protoc_insertion_point(field_release:SC_TexasForceLeave.reason)
  clear_has_reason();
  return reason_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void SC_TexasForceLeave::set_allocated_reason(::std::string* reason) {
  if (reason != NULL) {
    set_has_reason();
  } else {
    clear_has_reason();
  }
  reason_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), reason);
  // @@protoc_insertion_point(field_set_allocated:SC_TexasForceLeave.reason)
}

// optional int32 num = 2;
bool SC_TexasForceLeave::has_num() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void SC_TexasForceLeave::set_has_num() {
  _has_bits_[0] |= 0x00000002u;
}
void SC_TexasForceLeave::clear_has_num() {
  _has_bits_[0] &= ~0x00000002u;
}
void SC_TexasForceLeave::clear_num() {
  num_ = 0;
  clear_has_num();
}
::google::protobuf::int32 SC_TexasForceLeave::num() const {
  // @@protoc_insertion_point(field_get:SC_TexasForceLeave.num)
  return num_;
}
void SC_TexasForceLeave::set_num(::google::protobuf::int32 value) {
  set_has_num();
  num_ = value;
  // @@protoc_insertion_point(field_set:SC_TexasForceLeave.num)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SC_TexasTableEnd::kPbUserFieldNumber;
const int SC_TexasTableEnd::kPbTableFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SC_TexasTableEnd::SC_TexasTableEnd()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_public_5ftexas_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:SC_TexasTableEnd)
}
SC_TexasTableEnd::SC_TexasTableEnd(const SC_TexasTableEnd& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      pb_user_(from.pb_user_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_pb_table()) {
    pb_table_ = new ::TexasTable(*from.pb_table_);
  } else {
    pb_table_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:SC_TexasTableEnd)
}

void SC_TexasTableEnd::SharedCtor() {
  _cached_size_ = 0;
  pb_table_ = NULL;
}

SC_TexasTableEnd::~SC_TexasTableEnd() {
  // @@protoc_insertion_point(destructor:SC_TexasTableEnd)
  SharedDtor();
}

void SC_TexasTableEnd::SharedDtor() {
  if (this != internal_default_instance()) {
    delete pb_table_;
  }
}

void SC_TexasTableEnd::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SC_TexasTableEnd::descriptor() {
  protobuf_public_5ftexas_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_public_5ftexas_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const SC_TexasTableEnd& SC_TexasTableEnd::default_instance() {
  protobuf_public_5ftexas_2eproto::InitDefaults();
  return *internal_default_instance();
}

SC_TexasTableEnd* SC_TexasTableEnd::New(::google::protobuf::Arena* arena) const {
  SC_TexasTableEnd* n = new SC_TexasTableEnd;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SC_TexasTableEnd::Clear() {
// @@protoc_insertion_point(message_clear_start:SC_TexasTableEnd)
  pb_user_.Clear();
  if (has_pb_table()) {
    GOOGLE_DCHECK(pb_table_ != NULL);
    pb_table_->::TexasTable::Clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool SC_TexasTableEnd::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:SC_TexasTableEnd)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .UserInfo pb_user = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_pb_user()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .TexasTable pb_table = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_pb_table()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:SC_TexasTableEnd)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:SC_TexasTableEnd)
  return false;
#undef DO_
}

void SC_TexasTableEnd::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:SC_TexasTableEnd)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .UserInfo pb_user = 1;
  for (unsigned int i = 0, n = this->pb_user_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->pb_user(i), output);
  }

  cached_has_bits = _has_bits_[0];
  // optional .TexasTable pb_table = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->pb_table_, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:SC_TexasTableEnd)
}

::google::protobuf::uint8* SC_TexasTableEnd::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:SC_TexasTableEnd)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .UserInfo pb_user = 1;
  for (unsigned int i = 0, n = this->pb_user_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, this->pb_user(i), deterministic, target);
  }

  cached_has_bits = _has_bits_[0];
  // optional .TexasTable pb_table = 2;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->pb_table_, deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SC_TexasTableEnd)
  return target;
}

size_t SC_TexasTableEnd::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SC_TexasTableEnd)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // repeated .UserInfo pb_user = 1;
  {
    unsigned int count = this->pb_user_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->pb_user(i));
    }
  }

  // optional .TexasTable pb_table = 2;
  if (has_pb_table()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->pb_table_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SC_TexasTableEnd::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:SC_TexasTableEnd)
  GOOGLE_DCHECK_NE(&from, this);
  const SC_TexasTableEnd* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SC_TexasTableEnd>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:SC_TexasTableEnd)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:SC_TexasTableEnd)
    MergeFrom(*source);
  }
}

void SC_TexasTableEnd::MergeFrom(const SC_TexasTableEnd& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:SC_TexasTableEnd)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  pb_user_.MergeFrom(from.pb_user_);
  if (from.has_pb_table()) {
    mutable_pb_table()->::TexasTable::MergeFrom(from.pb_table());
  }
}

void SC_TexasTableEnd::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:SC_TexasTableEnd)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SC_TexasTableEnd::CopyFrom(const SC_TexasTableEnd& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SC_TexasTableEnd)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SC_TexasTableEnd::IsInitialized() const {
  if (!::google::protobuf::internal::AllAreInitialized(this->pb_user())) return false;
  if (has_pb_table()) {
    if (!this->pb_table_->IsInitialized()) return false;
  }
  return true;
}

void SC_TexasTableEnd::Swap(SC_TexasTableEnd* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SC_TexasTableEnd::InternalSwap(SC_TexasTableEnd* other) {
  pb_user_.InternalSwap(&other->pb_user_);
  std::swap(pb_table_, other->pb_table_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SC_TexasTableEnd::GetMetadata() const {
  protobuf_public_5ftexas_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_public_5ftexas_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SC_TexasTableEnd

// repeated .UserInfo pb_user = 1;
int SC_TexasTableEnd::pb_user_size() const {
  return pb_user_.size();
}
void SC_TexasTableEnd::clear_pb_user() {
  pb_user_.Clear();
}
const ::UserInfo& SC_TexasTableEnd::pb_user(int index) const {
  // @@protoc_insertion_point(field_get:SC_TexasTableEnd.pb_user)
  return pb_user_.Get(index);
}
::UserInfo* SC_TexasTableEnd::mutable_pb_user(int index) {
  // @@protoc_insertion_point(field_mutable:SC_TexasTableEnd.pb_user)
  return pb_user_.Mutable(index);
}
::UserInfo* SC_TexasTableEnd::add_pb_user() {
  // @@protoc_insertion_point(field_add:SC_TexasTableEnd.pb_user)
  return pb_user_.Add();
}
::google::protobuf::RepeatedPtrField< ::UserInfo >*
SC_TexasTableEnd::mutable_pb_user() {
  // @@protoc_insertion_point(field_mutable_list:SC_TexasTableEnd.pb_user)
  return &pb_user_;
}
const ::google::protobuf::RepeatedPtrField< ::UserInfo >&
SC_TexasTableEnd::pb_user() const {
  // @@protoc_insertion_point(field_list:SC_TexasTableEnd.pb_user)
  return pb_user_;
}

// optional .TexasTable pb_table = 2;
bool SC_TexasTableEnd::has_pb_table() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void SC_TexasTableEnd::set_has_pb_table() {
  _has_bits_[0] |= 0x00000001u;
}
void SC_TexasTableEnd::clear_has_pb_table() {
  _has_bits_[0] &= ~0x00000001u;
}
void SC_TexasTableEnd::clear_pb_table() {
  if (pb_table_ != NULL) pb_table_->::TexasTable::Clear();
  clear_has_pb_table();
}
const ::TexasTable& SC_TexasTableEnd::pb_table() const {
  // @@protoc_insertion_point(field_get:SC_TexasTableEnd.pb_table)
  return pb_table_ != NULL ? *pb_table_
                         : *::TexasTable::internal_default_instance();
}
::TexasTable* SC_TexasTableEnd::mutable_pb_table() {
  set_has_pb_table();
  if (pb_table_ == NULL) {
    pb_table_ = new ::TexasTable;
  }
  // @@protoc_insertion_point(field_mutable:SC_TexasTableEnd.pb_table)
  return pb_table_;
}
::TexasTable* SC_TexasTableEnd::release_pb_table() {
  // @@protoc_insertion_point(field_release:SC_TexasTableEnd.pb_table)
  clear_has_pb_table();
  ::TexasTable* temp = pb_table_;
  pb_table_ = NULL;
  return temp;
}
void SC_TexasTableEnd::set_allocated_pb_table(::TexasTable* pb_table) {
  delete pb_table_;
  pb_table_ = pb_table;
  if (pb_table) {
    set_has_pb_table();
  } else {
    clear_has_pb_table();
  }
  // @@protoc_insertion_point(field_set_allocated:SC_TexasTableEnd.pb_table)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SC_TexasGiveTips::kChairFieldNumber;
const int SC_TexasGiveTips::kMoneyFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SC_TexasGiveTips::SC_TexasGiveTips()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_public_5ftexas_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:SC_TexasGiveTips)
}
SC_TexasGiveTips::SC_TexasGiveTips(const SC_TexasGiveTips& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&money_, &from.money_,
    reinterpret_cast<char*>(&chair_) -
    reinterpret_cast<char*>(&money_) + sizeof(chair_));
  // @@protoc_insertion_point(copy_constructor:SC_TexasGiveTips)
}

void SC_TexasGiveTips::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&money_, 0, reinterpret_cast<char*>(&chair_) -
    reinterpret_cast<char*>(&money_) + sizeof(chair_));
}

SC_TexasGiveTips::~SC_TexasGiveTips() {
  // @@protoc_insertion_point(destructor:SC_TexasGiveTips)
  SharedDtor();
}

void SC_TexasGiveTips::SharedDtor() {
}

void SC_TexasGiveTips::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SC_TexasGiveTips::descriptor() {
  protobuf_public_5ftexas_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_public_5ftexas_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const SC_TexasGiveTips& SC_TexasGiveTips::default_instance() {
  protobuf_public_5ftexas_2eproto::InitDefaults();
  return *internal_default_instance();
}

SC_TexasGiveTips* SC_TexasGiveTips::New(::google::protobuf::Arena* arena) const {
  SC_TexasGiveTips* n = new SC_TexasGiveTips;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SC_TexasGiveTips::Clear() {
// @@protoc_insertion_point(message_clear_start:SC_TexasGiveTips)
  if (_has_bits_[0 / 32] & 3u) {
    ::memset(&money_, 0, reinterpret_cast<char*>(&chair_) -
      reinterpret_cast<char*>(&money_) + sizeof(chair_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool SC_TexasGiveTips::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:SC_TexasGiveTips)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 chair = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_chair();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &chair_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 money = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_money();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &money_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:SC_TexasGiveTips)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:SC_TexasGiveTips)
  return false;
#undef DO_
}

void SC_TexasGiveTips::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:SC_TexasGiveTips)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 chair = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->chair(), output);
  }

  // optional int64 money = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->money(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:SC_TexasGiveTips)
}

::google::protobuf::uint8* SC_TexasGiveTips::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:SC_TexasGiveTips)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 chair = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->chair(), target);
  }

  // optional int64 money = 2;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->money(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SC_TexasGiveTips)
  return target;
}

size_t SC_TexasGiveTips::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SC_TexasGiveTips)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // required int32 chair = 1;
  if (has_chair()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->chair());
  }
  // optional int64 money = 2;
  if (has_money()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->money());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SC_TexasGiveTips::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:SC_TexasGiveTips)
  GOOGLE_DCHECK_NE(&from, this);
  const SC_TexasGiveTips* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SC_TexasGiveTips>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:SC_TexasGiveTips)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:SC_TexasGiveTips)
    MergeFrom(*source);
  }
}

void SC_TexasGiveTips::MergeFrom(const SC_TexasGiveTips& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:SC_TexasGiveTips)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      money_ = from.money_;
    }
    if (cached_has_bits & 0x00000002u) {
      chair_ = from.chair_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void SC_TexasGiveTips::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:SC_TexasGiveTips)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SC_TexasGiveTips::CopyFrom(const SC_TexasGiveTips& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SC_TexasGiveTips)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SC_TexasGiveTips::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000002) != 0x00000002) return false;
  return true;
}

void SC_TexasGiveTips::Swap(SC_TexasGiveTips* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SC_TexasGiveTips::InternalSwap(SC_TexasGiveTips* other) {
  std::swap(money_, other->money_);
  std::swap(chair_, other->chair_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SC_TexasGiveTips::GetMetadata() const {
  protobuf_public_5ftexas_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_public_5ftexas_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SC_TexasGiveTips

// required int32 chair = 1;
bool SC_TexasGiveTips::has_chair() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void SC_TexasGiveTips::set_has_chair() {
  _has_bits_[0] |= 0x00000002u;
}
void SC_TexasGiveTips::clear_has_chair() {
  _has_bits_[0] &= ~0x00000002u;
}
void SC_TexasGiveTips::clear_chair() {
  chair_ = 0;
  clear_has_chair();
}
::google::protobuf::int32 SC_TexasGiveTips::chair() const {
  // @@protoc_insertion_point(field_get:SC_TexasGiveTips.chair)
  return chair_;
}
void SC_TexasGiveTips::set_chair(::google::protobuf::int32 value) {
  set_has_chair();
  chair_ = value;
  // @@protoc_insertion_point(field_set:SC_TexasGiveTips.chair)
}

// optional int64 money = 2;
bool SC_TexasGiveTips::has_money() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void SC_TexasGiveTips::set_has_money() {
  _has_bits_[0] |= 0x00000001u;
}
void SC_TexasGiveTips::clear_has_money() {
  _has_bits_[0] &= ~0x00000001u;
}
void SC_TexasGiveTips::clear_money() {
  money_ = GOOGLE_LONGLONG(0);
  clear_has_money();
}
::google::protobuf::int64 SC_TexasGiveTips::money() const {
  // @@protoc_insertion_point(field_get:SC_TexasGiveTips.money)
  return money_;
}
void SC_TexasGiveTips::set_money(::google::protobuf::int64 value) {
  set_has_money();
  money_ = value;
  // @@protoc_insertion_point(field_set:SC_TexasGiveTips.money)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SC_TexasShowCards::kChairFieldNumber;
const int SC_TexasShowCards::kUserCardsFieldNumber;
const int SC_TexasShowCards::kCardsTypeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SC_TexasShowCards::SC_TexasShowCards()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_public_5ftexas_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:SC_TexasShowCards)
}
SC_TexasShowCards::SC_TexasShowCards(const SC_TexasShowCards& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      user_cards_(from.user_cards_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&chair_, &from.chair_,
    reinterpret_cast<char*>(&cards_type_) -
    reinterpret_cast<char*>(&chair_) + sizeof(cards_type_));
  // @@protoc_insertion_point(copy_constructor:SC_TexasShowCards)
}

void SC_TexasShowCards::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&chair_, 0, reinterpret_cast<char*>(&cards_type_) -
    reinterpret_cast<char*>(&chair_) + sizeof(cards_type_));
}

SC_TexasShowCards::~SC_TexasShowCards() {
  // @@protoc_insertion_point(destructor:SC_TexasShowCards)
  SharedDtor();
}

void SC_TexasShowCards::SharedDtor() {
}

void SC_TexasShowCards::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SC_TexasShowCards::descriptor() {
  protobuf_public_5ftexas_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_public_5ftexas_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const SC_TexasShowCards& SC_TexasShowCards::default_instance() {
  protobuf_public_5ftexas_2eproto::InitDefaults();
  return *internal_default_instance();
}

SC_TexasShowCards* SC_TexasShowCards::New(::google::protobuf::Arena* arena) const {
  SC_TexasShowCards* n = new SC_TexasShowCards;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SC_TexasShowCards::Clear() {
// @@protoc_insertion_point(message_clear_start:SC_TexasShowCards)
  user_cards_.Clear();
  if (_has_bits_[0 / 32] & 3u) {
    ::memset(&chair_, 0, reinterpret_cast<char*>(&cards_type_) -
      reinterpret_cast<char*>(&chair_) + sizeof(cards_type_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool SC_TexasShowCards::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:SC_TexasShowCards)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 chair = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_chair();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &chair_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated int32 user_cards = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 16u, input, this->mutable_user_cards())));
        } else if (static_cast< ::google::protobuf::uint8>(tag) ==
                   static_cast< ::google::protobuf::uint8>(18u)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_user_cards())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 cards_type = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {
          set_has_cards_type();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &cards_type_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:SC_TexasShowCards)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:SC_TexasShowCards)
  return false;
#undef DO_
}

void SC_TexasShowCards::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:SC_TexasShowCards)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 chair = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->chair(), output);
  }

  // repeated int32 user_cards = 2;
  for (int i = 0, n = this->user_cards_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      2, this->user_cards(i), output);
  }

  // optional int32 cards_type = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->cards_type(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:SC_TexasShowCards)
}

::google::protobuf::uint8* SC_TexasShowCards::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:SC_TexasShowCards)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 chair = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->chair(), target);
  }

  // repeated int32 user_cards = 2;
  target = ::google::protobuf::internal::WireFormatLite::
    WriteInt32ToArray(2, this->user_cards_, target);

  // optional int32 cards_type = 3;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->cards_type(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SC_TexasShowCards)
  return target;
}

size_t SC_TexasShowCards::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SC_TexasShowCards)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // required int32 chair = 1;
  if (has_chair()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->chair());
  }
  // repeated int32 user_cards = 2;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      Int32Size(this->user_cards_);
    total_size += 1 *
                  ::google::protobuf::internal::FromIntSize(this->user_cards_size());
    total_size += data_size;
  }

  // optional int32 cards_type = 3;
  if (has_cards_type()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->cards_type());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SC_TexasShowCards::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:SC_TexasShowCards)
  GOOGLE_DCHECK_NE(&from, this);
  const SC_TexasShowCards* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SC_TexasShowCards>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:SC_TexasShowCards)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:SC_TexasShowCards)
    MergeFrom(*source);
  }
}

void SC_TexasShowCards::MergeFrom(const SC_TexasShowCards& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:SC_TexasShowCards)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  user_cards_.MergeFrom(from.user_cards_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      chair_ = from.chair_;
    }
    if (cached_has_bits & 0x00000002u) {
      cards_type_ = from.cards_type_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void SC_TexasShowCards::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:SC_TexasShowCards)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SC_TexasShowCards::CopyFrom(const SC_TexasShowCards& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SC_TexasShowCards)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SC_TexasShowCards::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  return true;
}

void SC_TexasShowCards::Swap(SC_TexasShowCards* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SC_TexasShowCards::InternalSwap(SC_TexasShowCards* other) {
  user_cards_.InternalSwap(&other->user_cards_);
  std::swap(chair_, other->chair_);
  std::swap(cards_type_, other->cards_type_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SC_TexasShowCards::GetMetadata() const {
  protobuf_public_5ftexas_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_public_5ftexas_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SC_TexasShowCards

// required int32 chair = 1;
bool SC_TexasShowCards::has_chair() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void SC_TexasShowCards::set_has_chair() {
  _has_bits_[0] |= 0x00000001u;
}
void SC_TexasShowCards::clear_has_chair() {
  _has_bits_[0] &= ~0x00000001u;
}
void SC_TexasShowCards::clear_chair() {
  chair_ = 0;
  clear_has_chair();
}
::google::protobuf::int32 SC_TexasShowCards::chair() const {
  // @@protoc_insertion_point(field_get:SC_TexasShowCards.chair)
  return chair_;
}
void SC_TexasShowCards::set_chair(::google::protobuf::int32 value) {
  set_has_chair();
  chair_ = value;
  // @@protoc_insertion_point(field_set:SC_TexasShowCards.chair)
}

// repeated int32 user_cards = 2;
int SC_TexasShowCards::user_cards_size() const {
  return user_cards_.size();
}
void SC_TexasShowCards::clear_user_cards() {
  user_cards_.Clear();
}
::google::protobuf::int32 SC_TexasShowCards::user_cards(int index) const {
  // @@protoc_insertion_point(field_get:SC_TexasShowCards.user_cards)
  return user_cards_.Get(index);
}
void SC_TexasShowCards::set_user_cards(int index, ::google::protobuf::int32 value) {
  user_cards_.Set(index, value);
  // @@protoc_insertion_point(field_set:SC_TexasShowCards.user_cards)
}
void SC_TexasShowCards::add_user_cards(::google::protobuf::int32 value) {
  user_cards_.Add(value);
  // @@protoc_insertion_point(field_add:SC_TexasShowCards.user_cards)
}
const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
SC_TexasShowCards::user_cards() const {
  // @@protoc_insertion_point(field_list:SC_TexasShowCards.user_cards)
  return user_cards_;
}
::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
SC_TexasShowCards::mutable_user_cards() {
  // @@protoc_insertion_point(field_mutable_list:SC_TexasShowCards.user_cards)
  return &user_cards_;
}

// optional int32 cards_type = 3;
bool SC_TexasShowCards::has_cards_type() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void SC_TexasShowCards::set_has_cards_type() {
  _has_bits_[0] |= 0x00000002u;
}
void SC_TexasShowCards::clear_has_cards_type() {
  _has_bits_[0] &= ~0x00000002u;
}
void SC_TexasShowCards::clear_cards_type() {
  cards_type_ = 0;
  clear_has_cards_type();
}
::google::protobuf::int32 SC_TexasShowCards::cards_type() const {
  // @@protoc_insertion_point(field_get:SC_TexasShowCards.cards_type)
  return cards_type_;
}
void SC_TexasShowCards::set_cards_type(::google::protobuf::int32 value) {
  set_has_cards_type();
  cards_type_ = value;
  // @@protoc_insertion_point(field_set:SC_TexasShowCards.cards_type)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SC_TexasShowCardsPermission::kChairFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SC_TexasShowCardsPermission::SC_TexasShowCardsPermission()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_public_5ftexas_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:SC_TexasShowCardsPermission)
}
SC_TexasShowCardsPermission::SC_TexasShowCardsPermission(const SC_TexasShowCardsPermission& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  chair_ = from.chair_;
  // @@protoc_insertion_point(copy_constructor:SC_TexasShowCardsPermission)
}

void SC_TexasShowCardsPermission::SharedCtor() {
  _cached_size_ = 0;
  chair_ = 0;
}

SC_TexasShowCardsPermission::~SC_TexasShowCardsPermission() {
  // @@protoc_insertion_point(destructor:SC_TexasShowCardsPermission)
  SharedDtor();
}

void SC_TexasShowCardsPermission::SharedDtor() {
}

void SC_TexasShowCardsPermission::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SC_TexasShowCardsPermission::descriptor() {
  protobuf_public_5ftexas_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_public_5ftexas_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const SC_TexasShowCardsPermission& SC_TexasShowCardsPermission::default_instance() {
  protobuf_public_5ftexas_2eproto::InitDefaults();
  return *internal_default_instance();
}

SC_TexasShowCardsPermission* SC_TexasShowCardsPermission::New(::google::protobuf::Arena* arena) const {
  SC_TexasShowCardsPermission* n = new SC_TexasShowCardsPermission;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SC_TexasShowCardsPermission::Clear() {
// @@protoc_insertion_point(message_clear_start:SC_TexasShowCardsPermission)
  chair_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool SC_TexasShowCardsPermission::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:SC_TexasShowCardsPermission)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 chair = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_chair();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &chair_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:SC_TexasShowCardsPermission)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:SC_TexasShowCardsPermission)
  return false;
#undef DO_
}

void SC_TexasShowCardsPermission::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:SC_TexasShowCardsPermission)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 chair = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->chair(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:SC_TexasShowCardsPermission)
}

::google::protobuf::uint8* SC_TexasShowCardsPermission::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:SC_TexasShowCardsPermission)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 chair = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->chair(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SC_TexasShowCardsPermission)
  return target;
}

size_t SC_TexasShowCardsPermission::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SC_TexasShowCardsPermission)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // required int32 chair = 1;
  if (has_chair()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->chair());
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SC_TexasShowCardsPermission::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:SC_TexasShowCardsPermission)
  GOOGLE_DCHECK_NE(&from, this);
  const SC_TexasShowCardsPermission* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SC_TexasShowCardsPermission>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:SC_TexasShowCardsPermission)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:SC_TexasShowCardsPermission)
    MergeFrom(*source);
  }
}

void SC_TexasShowCardsPermission::MergeFrom(const SC_TexasShowCardsPermission& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:SC_TexasShowCardsPermission)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_chair()) {
    set_chair(from.chair());
  }
}

void SC_TexasShowCardsPermission::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:SC_TexasShowCardsPermission)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SC_TexasShowCardsPermission::CopyFrom(const SC_TexasShowCardsPermission& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SC_TexasShowCardsPermission)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SC_TexasShowCardsPermission::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  return true;
}

void SC_TexasShowCardsPermission::Swap(SC_TexasShowCardsPermission* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SC_TexasShowCardsPermission::InternalSwap(SC_TexasShowCardsPermission* other) {
  std::swap(chair_, other->chair_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SC_TexasShowCardsPermission::GetMetadata() const {
  protobuf_public_5ftexas_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_public_5ftexas_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SC_TexasShowCardsPermission

// required int32 chair = 1;
bool SC_TexasShowCardsPermission::has_chair() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void SC_TexasShowCardsPermission::set_has_chair() {
  _has_bits_[0] |= 0x00000001u;
}
void SC_TexasShowCardsPermission::clear_has_chair() {
  _has_bits_[0] &= ~0x00000001u;
}
void SC_TexasShowCardsPermission::clear_chair() {
  chair_ = 0;
  clear_has_chair();
}
::google::protobuf::int32 SC_TexasShowCardsPermission::chair() const {
  // @@protoc_insertion_point(field_get:SC_TexasShowCardsPermission.chair)
  return chair_;
}
void SC_TexasShowCardsPermission::set_chair(::google::protobuf::int32 value) {
  set_has_chair();
  chair_ = value;
  // @@protoc_insertion_point(field_set:SC_TexasShowCardsPermission.chair)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SC_TexasError::kErrorFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SC_TexasError::SC_TexasError()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_public_5ftexas_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:SC_TexasError)
}
SC_TexasError::SC_TexasError(const SC_TexasError& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  error_ = from.error_;
  // @@protoc_insertion_point(copy_constructor:SC_TexasError)
}

void SC_TexasError::SharedCtor() {
  _cached_size_ = 0;
  error_ = 0;
}

SC_TexasError::~SC_TexasError() {
  // @@protoc_insertion_point(destructor:SC_TexasError)
  SharedDtor();
}

void SC_TexasError::SharedDtor() {
}

void SC_TexasError::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SC_TexasError::descriptor() {
  protobuf_public_5ftexas_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_public_5ftexas_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const SC_TexasError& SC_TexasError::default_instance() {
  protobuf_public_5ftexas_2eproto::InitDefaults();
  return *internal_default_instance();
}

SC_TexasError* SC_TexasError::New(::google::protobuf::Arena* arena) const {
  SC_TexasError* n = new SC_TexasError;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SC_TexasError::Clear() {
// @@protoc_insertion_point(message_clear_start:SC_TexasError)
  error_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool SC_TexasError::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:SC_TexasError)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 error = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_error();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &error_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:SC_TexasError)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:SC_TexasError)
  return false;
#undef DO_
}

void SC_TexasError::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:SC_TexasError)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 error = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->error(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:SC_TexasError)
}

::google::protobuf::uint8* SC_TexasError::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:SC_TexasError)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 error = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->error(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SC_TexasError)
  return target;
}

size_t SC_TexasError::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SC_TexasError)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // optional int32 error = 1;
  if (has_error()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->error());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SC_TexasError::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:SC_TexasError)
  GOOGLE_DCHECK_NE(&from, this);
  const SC_TexasError* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SC_TexasError>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:SC_TexasError)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:SC_TexasError)
    MergeFrom(*source);
  }
}

void SC_TexasError::MergeFrom(const SC_TexasError& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:SC_TexasError)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_error()) {
    set_error(from.error());
  }
}

void SC_TexasError::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:SC_TexasError)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SC_TexasError::CopyFrom(const SC_TexasError& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SC_TexasError)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SC_TexasError::IsInitialized() const {
  return true;
}

void SC_TexasError::Swap(SC_TexasError* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SC_TexasError::InternalSwap(SC_TexasError* other) {
  std::swap(error_, other->error_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SC_TexasError::GetMetadata() const {
  protobuf_public_5ftexas_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_public_5ftexas_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SC_TexasError

// optional int32 error = 1;
bool SC_TexasError::has_error() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void SC_TexasError::set_has_error() {
  _has_bits_[0] |= 0x00000001u;
}
void SC_TexasError::clear_has_error() {
  _has_bits_[0] &= ~0x00000001u;
}
void SC_TexasError::clear_error() {
  error_ = 0;
  clear_has_error();
}
::google::protobuf::int32 SC_TexasError::error() const {
  // @@protoc_insertion_point(field_get:SC_TexasError.error)
  return error_;
}
void SC_TexasError::set_error(::google::protobuf::int32 value) {
  set_has_error();
  error_ = value;
  // @@protoc_insertion_point(field_set:SC_TexasError.error)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CS_TexasUserAction::kActionFieldNumber;
const int CS_TexasUserAction::kBetMoneyFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CS_TexasUserAction::CS_TexasUserAction()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_public_5ftexas_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:CS_TexasUserAction)
}
CS_TexasUserAction::CS_TexasUserAction(const CS_TexasUserAction& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&bet_money_, &from.bet_money_,
    reinterpret_cast<char*>(&action_) -
    reinterpret_cast<char*>(&bet_money_) + sizeof(action_));
  // @@protoc_insertion_point(copy_constructor:CS_TexasUserAction)
}

void CS_TexasUserAction::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&bet_money_, 0, reinterpret_cast<char*>(&action_) -
    reinterpret_cast<char*>(&bet_money_) + sizeof(action_));
}

CS_TexasUserAction::~CS_TexasUserAction() {
  // @@protoc_insertion_point(destructor:CS_TexasUserAction)
  SharedDtor();
}

void CS_TexasUserAction::SharedDtor() {
}

void CS_TexasUserAction::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CS_TexasUserAction::descriptor() {
  protobuf_public_5ftexas_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_public_5ftexas_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CS_TexasUserAction& CS_TexasUserAction::default_instance() {
  protobuf_public_5ftexas_2eproto::InitDefaults();
  return *internal_default_instance();
}

CS_TexasUserAction* CS_TexasUserAction::New(::google::protobuf::Arena* arena) const {
  CS_TexasUserAction* n = new CS_TexasUserAction;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CS_TexasUserAction::Clear() {
// @@protoc_insertion_point(message_clear_start:CS_TexasUserAction)
  if (_has_bits_[0 / 32] & 3u) {
    ::memset(&bet_money_, 0, reinterpret_cast<char*>(&action_) -
      reinterpret_cast<char*>(&bet_money_) + sizeof(action_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CS_TexasUserAction::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CS_TexasUserAction)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 action = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_action();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &action_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int64 bet_money = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_bet_money();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &bet_money_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CS_TexasUserAction)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CS_TexasUserAction)
  return false;
#undef DO_
}

void CS_TexasUserAction::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CS_TexasUserAction)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 action = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->action(), output);
  }

  // required int64 bet_money = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->bet_money(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CS_TexasUserAction)
}

::google::protobuf::uint8* CS_TexasUserAction::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CS_TexasUserAction)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 action = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->action(), target);
  }

  // required int64 bet_money = 2;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->bet_money(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CS_TexasUserAction)
  return target;
}

size_t CS_TexasUserAction::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:CS_TexasUserAction)
  size_t total_size = 0;

  if (has_bet_money()) {
    // required int64 bet_money = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->bet_money());
  }

  if (has_action()) {
    // required int32 action = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->action());
  }

  return total_size;
}
size_t CS_TexasUserAction::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CS_TexasUserAction)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required int64 bet_money = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->bet_money());

    // required int32 action = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->action());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CS_TexasUserAction::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CS_TexasUserAction)
  GOOGLE_DCHECK_NE(&from, this);
  const CS_TexasUserAction* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CS_TexasUserAction>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CS_TexasUserAction)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CS_TexasUserAction)
    MergeFrom(*source);
  }
}

void CS_TexasUserAction::MergeFrom(const CS_TexasUserAction& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CS_TexasUserAction)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      bet_money_ = from.bet_money_;
    }
    if (cached_has_bits & 0x00000002u) {
      action_ = from.action_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CS_TexasUserAction::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CS_TexasUserAction)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CS_TexasUserAction::CopyFrom(const CS_TexasUserAction& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CS_TexasUserAction)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CS_TexasUserAction::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  return true;
}

void CS_TexasUserAction::Swap(CS_TexasUserAction* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CS_TexasUserAction::InternalSwap(CS_TexasUserAction* other) {
  std::swap(bet_money_, other->bet_money_);
  std::swap(action_, other->action_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CS_TexasUserAction::GetMetadata() const {
  protobuf_public_5ftexas_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_public_5ftexas_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CS_TexasUserAction

// required int32 action = 1;
bool CS_TexasUserAction::has_action() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CS_TexasUserAction::set_has_action() {
  _has_bits_[0] |= 0x00000002u;
}
void CS_TexasUserAction::clear_has_action() {
  _has_bits_[0] &= ~0x00000002u;
}
void CS_TexasUserAction::clear_action() {
  action_ = 0;
  clear_has_action();
}
::google::protobuf::int32 CS_TexasUserAction::action() const {
  // @@protoc_insertion_point(field_get:CS_TexasUserAction.action)
  return action_;
}
void CS_TexasUserAction::set_action(::google::protobuf::int32 value) {
  set_has_action();
  action_ = value;
  // @@protoc_insertion_point(field_set:CS_TexasUserAction.action)
}

// required int64 bet_money = 2;
bool CS_TexasUserAction::has_bet_money() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CS_TexasUserAction::set_has_bet_money() {
  _has_bits_[0] |= 0x00000001u;
}
void CS_TexasUserAction::clear_has_bet_money() {
  _has_bits_[0] &= ~0x00000001u;
}
void CS_TexasUserAction::clear_bet_money() {
  bet_money_ = GOOGLE_LONGLONG(0);
  clear_has_bet_money();
}
::google::protobuf::int64 CS_TexasUserAction::bet_money() const {
  // @@protoc_insertion_point(field_get:CS_TexasUserAction.bet_money)
  return bet_money_;
}
void CS_TexasUserAction::set_bet_money(::google::protobuf::int64 value) {
  set_has_bet_money();
  bet_money_ = value;
  // @@protoc_insertion_point(field_set:CS_TexasUserAction.bet_money)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CS_TexasEnterTable::CS_TexasEnterTable()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_public_5ftexas_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:CS_TexasEnterTable)
}
CS_TexasEnterTable::CS_TexasEnterTable(const CS_TexasEnterTable& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:CS_TexasEnterTable)
}

void CS_TexasEnterTable::SharedCtor() {
  _cached_size_ = 0;
}

CS_TexasEnterTable::~CS_TexasEnterTable() {
  // @@protoc_insertion_point(destructor:CS_TexasEnterTable)
  SharedDtor();
}

void CS_TexasEnterTable::SharedDtor() {
}

void CS_TexasEnterTable::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CS_TexasEnterTable::descriptor() {
  protobuf_public_5ftexas_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_public_5ftexas_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CS_TexasEnterTable& CS_TexasEnterTable::default_instance() {
  protobuf_public_5ftexas_2eproto::InitDefaults();
  return *internal_default_instance();
}

CS_TexasEnterTable* CS_TexasEnterTable::New(::google::protobuf::Arena* arena) const {
  CS_TexasEnterTable* n = new CS_TexasEnterTable;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CS_TexasEnterTable::Clear() {
// @@protoc_insertion_point(message_clear_start:CS_TexasEnterTable)
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CS_TexasEnterTable::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CS_TexasEnterTable)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:CS_TexasEnterTable)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CS_TexasEnterTable)
  return false;
#undef DO_
}

void CS_TexasEnterTable::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CS_TexasEnterTable)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CS_TexasEnterTable)
}

::google::protobuf::uint8* CS_TexasEnterTable::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CS_TexasEnterTable)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CS_TexasEnterTable)
  return target;
}

size_t CS_TexasEnterTable::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CS_TexasEnterTable)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CS_TexasEnterTable::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CS_TexasEnterTable)
  GOOGLE_DCHECK_NE(&from, this);
  const CS_TexasEnterTable* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CS_TexasEnterTable>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CS_TexasEnterTable)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CS_TexasEnterTable)
    MergeFrom(*source);
  }
}

void CS_TexasEnterTable::MergeFrom(const CS_TexasEnterTable& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CS_TexasEnterTable)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void CS_TexasEnterTable::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CS_TexasEnterTable)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CS_TexasEnterTable::CopyFrom(const CS_TexasEnterTable& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CS_TexasEnterTable)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CS_TexasEnterTable::IsInitialized() const {
  return true;
}

void CS_TexasEnterTable::Swap(CS_TexasEnterTable* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CS_TexasEnterTable::InternalSwap(CS_TexasEnterTable* other) {
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CS_TexasEnterTable::GetMetadata() const {
  protobuf_public_5ftexas_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_public_5ftexas_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CS_TexasEnterTable

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CS_TexasLeaveTable::CS_TexasLeaveTable()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_public_5ftexas_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:CS_TexasLeaveTable)
}
CS_TexasLeaveTable::CS_TexasLeaveTable(const CS_TexasLeaveTable& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:CS_TexasLeaveTable)
}

void CS_TexasLeaveTable::SharedCtor() {
  _cached_size_ = 0;
}

CS_TexasLeaveTable::~CS_TexasLeaveTable() {
  // @@protoc_insertion_point(destructor:CS_TexasLeaveTable)
  SharedDtor();
}

void CS_TexasLeaveTable::SharedDtor() {
}

void CS_TexasLeaveTable::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CS_TexasLeaveTable::descriptor() {
  protobuf_public_5ftexas_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_public_5ftexas_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CS_TexasLeaveTable& CS_TexasLeaveTable::default_instance() {
  protobuf_public_5ftexas_2eproto::InitDefaults();
  return *internal_default_instance();
}

CS_TexasLeaveTable* CS_TexasLeaveTable::New(::google::protobuf::Arena* arena) const {
  CS_TexasLeaveTable* n = new CS_TexasLeaveTable;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CS_TexasLeaveTable::Clear() {
// @@protoc_insertion_point(message_clear_start:CS_TexasLeaveTable)
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CS_TexasLeaveTable::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CS_TexasLeaveTable)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:CS_TexasLeaveTable)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CS_TexasLeaveTable)
  return false;
#undef DO_
}

void CS_TexasLeaveTable::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CS_TexasLeaveTable)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CS_TexasLeaveTable)
}

::google::protobuf::uint8* CS_TexasLeaveTable::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CS_TexasLeaveTable)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CS_TexasLeaveTable)
  return target;
}

size_t CS_TexasLeaveTable::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CS_TexasLeaveTable)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CS_TexasLeaveTable::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CS_TexasLeaveTable)
  GOOGLE_DCHECK_NE(&from, this);
  const CS_TexasLeaveTable* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CS_TexasLeaveTable>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CS_TexasLeaveTable)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CS_TexasLeaveTable)
    MergeFrom(*source);
  }
}

void CS_TexasLeaveTable::MergeFrom(const CS_TexasLeaveTable& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CS_TexasLeaveTable)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void CS_TexasLeaveTable::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CS_TexasLeaveTable)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CS_TexasLeaveTable::CopyFrom(const CS_TexasLeaveTable& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CS_TexasLeaveTable)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CS_TexasLeaveTable::IsInitialized() const {
  return true;
}

void CS_TexasLeaveTable::Swap(CS_TexasLeaveTable* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CS_TexasLeaveTable::InternalSwap(CS_TexasLeaveTable* other) {
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CS_TexasLeaveTable::GetMetadata() const {
  protobuf_public_5ftexas_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_public_5ftexas_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CS_TexasLeaveTable

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CS_TexasGiveTips::CS_TexasGiveTips()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_public_5ftexas_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:CS_TexasGiveTips)
}
CS_TexasGiveTips::CS_TexasGiveTips(const CS_TexasGiveTips& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:CS_TexasGiveTips)
}

void CS_TexasGiveTips::SharedCtor() {
  _cached_size_ = 0;
}

CS_TexasGiveTips::~CS_TexasGiveTips() {
  // @@protoc_insertion_point(destructor:CS_TexasGiveTips)
  SharedDtor();
}

void CS_TexasGiveTips::SharedDtor() {
}

void CS_TexasGiveTips::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CS_TexasGiveTips::descriptor() {
  protobuf_public_5ftexas_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_public_5ftexas_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CS_TexasGiveTips& CS_TexasGiveTips::default_instance() {
  protobuf_public_5ftexas_2eproto::InitDefaults();
  return *internal_default_instance();
}

CS_TexasGiveTips* CS_TexasGiveTips::New(::google::protobuf::Arena* arena) const {
  CS_TexasGiveTips* n = new CS_TexasGiveTips;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CS_TexasGiveTips::Clear() {
// @@protoc_insertion_point(message_clear_start:CS_TexasGiveTips)
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CS_TexasGiveTips::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CS_TexasGiveTips)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:CS_TexasGiveTips)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CS_TexasGiveTips)
  return false;
#undef DO_
}

void CS_TexasGiveTips::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CS_TexasGiveTips)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CS_TexasGiveTips)
}

::google::protobuf::uint8* CS_TexasGiveTips::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CS_TexasGiveTips)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CS_TexasGiveTips)
  return target;
}

size_t CS_TexasGiveTips::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CS_TexasGiveTips)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CS_TexasGiveTips::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CS_TexasGiveTips)
  GOOGLE_DCHECK_NE(&from, this);
  const CS_TexasGiveTips* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CS_TexasGiveTips>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CS_TexasGiveTips)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CS_TexasGiveTips)
    MergeFrom(*source);
  }
}

void CS_TexasGiveTips::MergeFrom(const CS_TexasGiveTips& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CS_TexasGiveTips)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void CS_TexasGiveTips::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CS_TexasGiveTips)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CS_TexasGiveTips::CopyFrom(const CS_TexasGiveTips& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CS_TexasGiveTips)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CS_TexasGiveTips::IsInitialized() const {
  return true;
}

void CS_TexasGiveTips::Swap(CS_TexasGiveTips* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CS_TexasGiveTips::InternalSwap(CS_TexasGiveTips* other) {
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CS_TexasGiveTips::GetMetadata() const {
  protobuf_public_5ftexas_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_public_5ftexas_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CS_TexasGiveTips

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CS_TexasShowCards::kShowCardsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CS_TexasShowCards::CS_TexasShowCards()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_public_5ftexas_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:CS_TexasShowCards)
}
CS_TexasShowCards::CS_TexasShowCards(const CS_TexasShowCards& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  show_cards_ = from.show_cards_;
  // @@protoc_insertion_point(copy_constructor:CS_TexasShowCards)
}

void CS_TexasShowCards::SharedCtor() {
  _cached_size_ = 0;
  show_cards_ = false;
}

CS_TexasShowCards::~CS_TexasShowCards() {
  // @@protoc_insertion_point(destructor:CS_TexasShowCards)
  SharedDtor();
}

void CS_TexasShowCards::SharedDtor() {
}

void CS_TexasShowCards::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CS_TexasShowCards::descriptor() {
  protobuf_public_5ftexas_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_public_5ftexas_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CS_TexasShowCards& CS_TexasShowCards::default_instance() {
  protobuf_public_5ftexas_2eproto::InitDefaults();
  return *internal_default_instance();
}

CS_TexasShowCards* CS_TexasShowCards::New(::google::protobuf::Arena* arena) const {
  CS_TexasShowCards* n = new CS_TexasShowCards;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CS_TexasShowCards::Clear() {
// @@protoc_insertion_point(message_clear_start:CS_TexasShowCards)
  show_cards_ = false;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CS_TexasShowCards::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CS_TexasShowCards)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bool show_cards = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_show_cards();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &show_cards_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CS_TexasShowCards)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CS_TexasShowCards)
  return false;
#undef DO_
}

void CS_TexasShowCards::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CS_TexasShowCards)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required bool show_cards = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->show_cards(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CS_TexasShowCards)
}

::google::protobuf::uint8* CS_TexasShowCards::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CS_TexasShowCards)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required bool show_cards = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->show_cards(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CS_TexasShowCards)
  return target;
}

size_t CS_TexasShowCards::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CS_TexasShowCards)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // required bool show_cards = 1;
  if (has_show_cards()) {
    total_size += 1 + 1;
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CS_TexasShowCards::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CS_TexasShowCards)
  GOOGLE_DCHECK_NE(&from, this);
  const CS_TexasShowCards* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CS_TexasShowCards>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CS_TexasShowCards)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CS_TexasShowCards)
    MergeFrom(*source);
  }
}

void CS_TexasShowCards::MergeFrom(const CS_TexasShowCards& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CS_TexasShowCards)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_show_cards()) {
    set_show_cards(from.show_cards());
  }
}

void CS_TexasShowCards::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CS_TexasShowCards)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CS_TexasShowCards::CopyFrom(const CS_TexasShowCards& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CS_TexasShowCards)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CS_TexasShowCards::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  return true;
}

void CS_TexasShowCards::Swap(CS_TexasShowCards* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CS_TexasShowCards::InternalSwap(CS_TexasShowCards* other) {
  std::swap(show_cards_, other->show_cards_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CS_TexasShowCards::GetMetadata() const {
  protobuf_public_5ftexas_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_public_5ftexas_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CS_TexasShowCards

// required bool show_cards = 1;
bool CS_TexasShowCards::has_show_cards() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CS_TexasShowCards::set_has_show_cards() {
  _has_bits_[0] |= 0x00000001u;
}
void CS_TexasShowCards::clear_has_show_cards() {
  _has_bits_[0] &= ~0x00000001u;
}
void CS_TexasShowCards::clear_show_cards() {
  show_cards_ = false;
  clear_has_show_cards();
}
bool CS_TexasShowCards::show_cards() const {
  // @@protoc_insertion_point(field_get:CS_TexasShowCards.show_cards)
  return show_cards_;
}
void CS_TexasShowCards::set_show_cards(bool value) {
  set_has_show_cards();
  show_cards_ = value;
  // @@protoc_insertion_point(field_set:CS_TexasShowCards.show_cards)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)
