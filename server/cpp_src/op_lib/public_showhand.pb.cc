// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: public_showhand.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "public_showhand.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
class CS_ShowHandAddScoreDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CS_ShowHandAddScore> {
} _CS_ShowHandAddScore_default_instance_;
class CS_ShowHandGiveUpDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CS_ShowHandGiveUp> {
} _CS_ShowHandGiveUp_default_instance_;
class CS_ShowHandPassDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CS_ShowHandPass> {
} _CS_ShowHandPass_default_instance_;
class CS_ShowHandGiveUpEixtDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CS_ShowHandGiveUpEixt> {
} _CS_ShowHandGiveUpEixt_default_instance_;
class CS_ShowHandMyVoteResultDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CS_ShowHandMyVoteResult> {
} _CS_ShowHandMyVoteResult_default_instance_;
class ShowHand_Player_InfoDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<ShowHand_Player_Info> {
} _ShowHand_Player_Info_default_instance_;
class ShowHand_Reconnect_DataDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<ShowHand_Reconnect_Data> {
} _ShowHand_Reconnect_Data_default_instance_;
class SC_ShowHand_Desk_EnterDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<SC_ShowHand_Desk_Enter> {
} _SC_ShowHand_Desk_Enter_default_instance_;
class SC_ShowHand_Desk_StateDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<SC_ShowHand_Desk_State> {
} _SC_ShowHand_Desk_State_default_instance_;
class SC_ShowHand_Game_FinishDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<SC_ShowHand_Game_Finish> {
} _SC_ShowHand_Game_Finish_default_instance_;
class SC_ShowHand_Next_RoundDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<SC_ShowHand_Next_Round> {
} _SC_ShowHand_Next_Round_default_instance_;
class SC_ShowHandAddScoreDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<SC_ShowHandAddScore> {
} _SC_ShowHandAddScore_default_instance_;
class SC_ShowHandGiveUpDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<SC_ShowHandGiveUp> {
} _SC_ShowHandGiveUp_default_instance_;
class SC_ShowHandPassDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<SC_ShowHandPass> {
} _SC_ShowHandPass_default_instance_;
class SC_ShowHand_NextTurnDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<SC_ShowHand_NextTurn> {
} _SC_ShowHand_NextTurn_default_instance_;
class SC_ShowHandStartVoteDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<SC_ShowHandStartVote> {
} _SC_ShowHandStartVote_default_instance_;
class SC_ShowHandPlayerVoteResDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<SC_ShowHandPlayerVoteRes> {
} _SC_ShowHandPlayerVoteRes_default_instance_;

namespace protobuf_public_5fshowhand_2eproto {


namespace {

::google::protobuf::Metadata file_level_metadata[17];
const ::google::protobuf::EnumDescriptor* file_level_enum_descriptors[15];

}  // namespace

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTableField
    const TableStruct::entries[] = {
  {0, 0, 0, ::google::protobuf::internal::kInvalidMask, 0, 0},
};

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::AuxillaryParseTableField
    const TableStruct::aux[] = {
  ::google::protobuf::internal::AuxillaryParseTableField(),
};
PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTable const
    TableStruct::schema[] = {
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
};

const ::google::protobuf::uint32 TableStruct::offsets[] = {
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CS_ShowHandAddScore, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CS_ShowHandAddScore, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CS_ShowHandAddScore, target_),
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CS_ShowHandGiveUp, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CS_ShowHandGiveUp, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CS_ShowHandPass, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CS_ShowHandPass, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CS_ShowHandGiveUpEixt, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CS_ShowHandGiveUpEixt, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CS_ShowHandMyVoteResult, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CS_ShowHandMyVoteResult, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CS_ShowHandMyVoteResult, agreen_),
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ShowHand_Player_Info, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ShowHand_Player_Info, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ShowHand_Player_Info, tiles_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ShowHand_Player_Info, chair_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ShowHand_Player_Info, add_total_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ShowHand_Player_Info, cur_round_add_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ShowHand_Player_Info, nick_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ShowHand_Player_Info, icon_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ShowHand_Player_Info, gold_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ShowHand_Player_Info, guid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ShowHand_Player_Info, is_win_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ShowHand_Player_Info, win_money_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ShowHand_Player_Info, taxes_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ShowHand_Player_Info, is_give_up_),
  ~0u,
  1,
  2,
  3,
  0,
  4,
  5,
  6,
  8,
  7,
  10,
  9,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ShowHand_Reconnect_Data, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ShowHand_Reconnect_Data, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ShowHand_Reconnect_Data, act_left_time_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ShowHand_Reconnect_Data, vote_chair_id_),
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SC_ShowHand_Desk_Enter, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SC_ShowHand_Desk_Enter, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SC_ShowHand_Desk_Enter, pb_players_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SC_ShowHand_Desk_Enter, state_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SC_ShowHand_Desk_Enter, zhuang_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SC_ShowHand_Desk_Enter, self_chair_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SC_ShowHand_Desk_Enter, act_time_limit_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SC_ShowHand_Desk_Enter, is_reconnect_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SC_ShowHand_Desk_Enter, base_score_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SC_ShowHand_Desk_Enter, max_call_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SC_ShowHand_Desk_Enter, pb_rec_data_),
  ~0u,
  1,
  2,
  3,
  4,
  5,
  6,
  7,
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SC_ShowHand_Desk_State, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SC_ShowHand_Desk_State, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SC_ShowHand_Desk_State, state_),
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SC_ShowHand_Game_Finish, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SC_ShowHand_Game_Finish, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SC_ShowHand_Game_Finish, pb_players_),
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SC_ShowHand_Next_Round, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SC_ShowHand_Next_Round, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SC_ShowHand_Next_Round, pb_players_),
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SC_ShowHandAddScore, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SC_ShowHandAddScore, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SC_ShowHandAddScore, target_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SC_ShowHandAddScore, chair_id_),
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SC_ShowHandGiveUp, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SC_ShowHandGiveUp, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SC_ShowHandGiveUp, chair_id_),
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SC_ShowHandPass, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SC_ShowHandPass, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SC_ShowHandPass, chair_id_),
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SC_ShowHand_NextTurn, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SC_ShowHand_NextTurn, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SC_ShowHand_NextTurn, chair_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SC_ShowHand_NextTurn, type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SC_ShowHand_NextTurn, max_add_),
  0,
  1,
  2,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SC_ShowHandStartVote, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SC_ShowHandStartVote, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SC_ShowHandStartVote, chair_id_),
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SC_ShowHandPlayerVoteRes, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SC_ShowHandPlayerVoteRes, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SC_ShowHandPlayerVoteRes, chair_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SC_ShowHandPlayerVoteRes, agreen_),
  0,
  1,
};

static const ::google::protobuf::internal::MigrationSchema schemas[] = {
  { 0, 6, sizeof(CS_ShowHandAddScore)},
  { 7, 12, sizeof(CS_ShowHandGiveUp)},
  { 12, 17, sizeof(CS_ShowHandPass)},
  { 17, 22, sizeof(CS_ShowHandGiveUpEixt)},
  { 22, 28, sizeof(CS_ShowHandMyVoteResult)},
  { 29, 46, sizeof(ShowHand_Player_Info)},
  { 58, 65, sizeof(ShowHand_Reconnect_Data)},
  { 67, 81, sizeof(SC_ShowHand_Desk_Enter)},
  { 90, 96, sizeof(SC_ShowHand_Desk_State)},
  { 97, 103, sizeof(SC_ShowHand_Game_Finish)},
  { 104, 110, sizeof(SC_ShowHand_Next_Round)},
  { 111, 118, sizeof(SC_ShowHandAddScore)},
  { 120, 126, sizeof(SC_ShowHandGiveUp)},
  { 127, 133, sizeof(SC_ShowHandPass)},
  { 134, 142, sizeof(SC_ShowHand_NextTurn)},
  { 145, 151, sizeof(SC_ShowHandStartVote)},
  { 152, 159, sizeof(SC_ShowHandPlayerVoteRes)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&_CS_ShowHandAddScore_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CS_ShowHandGiveUp_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CS_ShowHandPass_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CS_ShowHandGiveUpEixt_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CS_ShowHandMyVoteResult_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_ShowHand_Player_Info_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_ShowHand_Reconnect_Data_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_SC_ShowHand_Desk_Enter_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_SC_ShowHand_Desk_State_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_SC_ShowHand_Game_Finish_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_SC_ShowHand_Next_Round_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_SC_ShowHandAddScore_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_SC_ShowHandGiveUp_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_SC_ShowHandPass_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_SC_ShowHand_NextTurn_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_SC_ShowHandStartVote_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_SC_ShowHandPlayerVoteRes_default_instance_),
};

namespace {

void protobuf_AssignDescriptors() {
  AddDescriptors();
  ::google::protobuf::MessageFactory* factory = NULL;
  AssignDescriptors(
      "public_showhand.proto", schemas, file_default_instances, TableStruct::offsets, factory,
      file_level_metadata, file_level_enum_descriptors, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 17);
}

}  // namespace

void TableStruct::Shutdown() {
  _CS_ShowHandAddScore_default_instance_.Shutdown();
  delete file_level_metadata[0].reflection;
  _CS_ShowHandGiveUp_default_instance_.Shutdown();
  delete file_level_metadata[1].reflection;
  _CS_ShowHandPass_default_instance_.Shutdown();
  delete file_level_metadata[2].reflection;
  _CS_ShowHandGiveUpEixt_default_instance_.Shutdown();
  delete file_level_metadata[3].reflection;
  _CS_ShowHandMyVoteResult_default_instance_.Shutdown();
  delete file_level_metadata[4].reflection;
  _ShowHand_Player_Info_default_instance_.Shutdown();
  delete file_level_metadata[5].reflection;
  _ShowHand_Reconnect_Data_default_instance_.Shutdown();
  delete file_level_metadata[6].reflection;
  _SC_ShowHand_Desk_Enter_default_instance_.Shutdown();
  delete file_level_metadata[7].reflection;
  _SC_ShowHand_Desk_State_default_instance_.Shutdown();
  delete file_level_metadata[8].reflection;
  _SC_ShowHand_Game_Finish_default_instance_.Shutdown();
  delete file_level_metadata[9].reflection;
  _SC_ShowHand_Next_Round_default_instance_.Shutdown();
  delete file_level_metadata[10].reflection;
  _SC_ShowHandAddScore_default_instance_.Shutdown();
  delete file_level_metadata[11].reflection;
  _SC_ShowHandGiveUp_default_instance_.Shutdown();
  delete file_level_metadata[12].reflection;
  _SC_ShowHandPass_default_instance_.Shutdown();
  delete file_level_metadata[13].reflection;
  _SC_ShowHand_NextTurn_default_instance_.Shutdown();
  delete file_level_metadata[14].reflection;
  _SC_ShowHandStartVote_default_instance_.Shutdown();
  delete file_level_metadata[15].reflection;
  _SC_ShowHandPlayerVoteRes_default_instance_.Shutdown();
  delete file_level_metadata[16].reflection;
}

void TableStruct::InitDefaultsImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::internal::InitProtobufDefaults();
  _CS_ShowHandAddScore_default_instance_.DefaultConstruct();
  _CS_ShowHandGiveUp_default_instance_.DefaultConstruct();
  _CS_ShowHandPass_default_instance_.DefaultConstruct();
  _CS_ShowHandGiveUpEixt_default_instance_.DefaultConstruct();
  _CS_ShowHandMyVoteResult_default_instance_.DefaultConstruct();
  _ShowHand_Player_Info_default_instance_.DefaultConstruct();
  _ShowHand_Reconnect_Data_default_instance_.DefaultConstruct();
  _SC_ShowHand_Desk_Enter_default_instance_.DefaultConstruct();
  _SC_ShowHand_Desk_State_default_instance_.DefaultConstruct();
  _SC_ShowHand_Game_Finish_default_instance_.DefaultConstruct();
  _SC_ShowHand_Next_Round_default_instance_.DefaultConstruct();
  _SC_ShowHandAddScore_default_instance_.DefaultConstruct();
  _SC_ShowHandGiveUp_default_instance_.DefaultConstruct();
  _SC_ShowHandPass_default_instance_.DefaultConstruct();
  _SC_ShowHand_NextTurn_default_instance_.DefaultConstruct();
  _SC_ShowHandStartVote_default_instance_.DefaultConstruct();
  _SC_ShowHandPlayerVoteRes_default_instance_.DefaultConstruct();
  _SC_ShowHand_Desk_Enter_default_instance_.get_mutable()->pb_rec_data_ = const_cast< ::ShowHand_Reconnect_Data*>(
      ::ShowHand_Reconnect_Data::internal_default_instance());
}

void InitDefaults() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &TableStruct::InitDefaultsImpl);
}
void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] = {
      "\n\025public_showhand.proto\"8\n\023CS_ShowHandAd"
      "dScore\022\016\n\006target\030\001 \001(\005\"\021\n\005MsgID\022\010\n\002ID\020\350\204"
      "\001\"&\n\021CS_ShowHandGiveUp\"\021\n\005MsgID\022\010\n\002ID\020\351\204"
      "\001\"$\n\017CS_ShowHandPass\"\021\n\005MsgID\022\010\n\002ID\020\352\204\001\""
      "*\n\025CS_ShowHandGiveUpEixt\"\021\n\005MsgID\022\010\n\002ID\020"
      "\353\204\001\"<\n\027CS_ShowHandMyVoteResult\022\016\n\006agreen"
      "\030\001 \001(\010\"\021\n\005MsgID\022\010\n\002ID\020\354\204\001\"\337\001\n\024ShowHand_P"
      "layer_Info\022\r\n\005tiles\030\001 \003(\005\022\020\n\010chair_id\030\002 "
      "\001(\005\022\021\n\tadd_total\030\003 \001(\005\022\025\n\rcur_round_add\030"
      "\004 \001(\005\022\014\n\004nick\030\005 \001(\t\022\014\n\004icon\030\006 \001(\005\022\014\n\004gol"
      "d\030\007 \001(\003\022\014\n\004guid\030\010 \001(\005\022\016\n\006is_win\030\t \001(\010\022\021\n"
      "\twin_money\030\n \001(\005\022\r\n\005taxes\030\013 \001(\005\022\022\n\nis_gi"
      "ve_up\030\014 \001(\010\"G\n\027ShowHand_Reconnect_Data\022\025"
      "\n\ract_left_time\030\001 \001(\005\022\025\n\rvote_chair_id\030\002"
      " \001(\005\"\217\002\n\026SC_ShowHand_Desk_Enter\022)\n\npb_pl"
      "ayers\030\001 \003(\0132\025.ShowHand_Player_Info\022\r\n\005st"
      "ate\030\002 \001(\005\022\016\n\006zhuang\030\003 \001(\005\022\025\n\rself_chair_"
      "id\030\004 \001(\005\022\026\n\016act_time_limit\030\005 \001(\005\022\024\n\014is_r"
      "econnect\030\006 \001(\010\022\022\n\nbase_score\030\007 \001(\005\022\020\n\010ma"
      "x_call\030\010 \001(\005\022-\n\013pb_rec_data\030\t \001(\0132\030.Show"
      "Hand_Reconnect_Data\"\021\n\005MsgID\022\010\n\002ID\020\314\205\001\":"
      "\n\026SC_ShowHand_Desk_State\022\r\n\005state\030\001 \001(\005\""
      "\021\n\005MsgID\022\010\n\002ID\020\315\205\001\"W\n\027SC_ShowHand_Game_F"
      "inish\022)\n\npb_players\030\001 \003(\0132\025.ShowHand_Pla"
      "yer_Info\"\021\n\005MsgID\022\010\n\002ID\020\316\205\001\"V\n\026SC_ShowHa"
      "nd_Next_Round\022)\n\npb_players\030\001 \003(\0132\025.Show"
      "Hand_Player_Info\"\021\n\005MsgID\022\010\n\002ID\020\317\205\001\"J\n\023S"
      "C_ShowHandAddScore\022\016\n\006target\030\001 \001(\005\022\020\n\010ch"
      "air_id\030\002 \001(\005\"\021\n\005MsgID\022\010\n\002ID\020\320\205\001\"8\n\021SC_Sh"
      "owHandGiveUp\022\020\n\010chair_id\030\001 \001(\005\"\021\n\005MsgID\022"
      "\010\n\002ID\020\321\205\001\"6\n\017SC_ShowHandPass\022\020\n\010chair_id"
      "\030\001 \001(\005\"\021\n\005MsgID\022\010\n\002ID\020\322\205\001\"Z\n\024SC_ShowHand"
      "_NextTurn\022\020\n\010chair_id\030\001 \001(\005\022\014\n\004type\030\002 \001("
      "\005\022\017\n\007max_add\030\003 \001(\005\"\021\n\005MsgID\022\010\n\002ID\020\323\205\001\";\n"
      "\024SC_ShowHandStartVote\022\020\n\010chair_id\030\001 \001(\005\""
      "\021\n\005MsgID\022\010\n\002ID\020\354\204\001\"O\n\030SC_ShowHandPlayerV"
      "oteRes\022\020\n\010chair_id\030\001 \001(\005\022\016\n\006agreen\030\002 \001(\010"
      "\"\021\n\005MsgID\022\010\n\002ID\020\354\204\001"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 1499);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "public_showhand.proto", &protobuf_RegisterTypes);
  ::google::protobuf::internal::OnShutdown(&TableStruct::Shutdown);
}

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;

}  // namespace protobuf_public_5fshowhand_2eproto

const ::google::protobuf::EnumDescriptor* CS_ShowHandAddScore_MsgID_descriptor() {
  protobuf_public_5fshowhand_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_public_5fshowhand_2eproto::file_level_enum_descriptors[0];
}
bool CS_ShowHandAddScore_MsgID_IsValid(int value) {
  switch (value) {
    case 17000:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const CS_ShowHandAddScore_MsgID CS_ShowHandAddScore::ID;
const CS_ShowHandAddScore_MsgID CS_ShowHandAddScore::MsgID_MIN;
const CS_ShowHandAddScore_MsgID CS_ShowHandAddScore::MsgID_MAX;
const int CS_ShowHandAddScore::MsgID_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* CS_ShowHandGiveUp_MsgID_descriptor() {
  protobuf_public_5fshowhand_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_public_5fshowhand_2eproto::file_level_enum_descriptors[1];
}
bool CS_ShowHandGiveUp_MsgID_IsValid(int value) {
  switch (value) {
    case 17001:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const CS_ShowHandGiveUp_MsgID CS_ShowHandGiveUp::ID;
const CS_ShowHandGiveUp_MsgID CS_ShowHandGiveUp::MsgID_MIN;
const CS_ShowHandGiveUp_MsgID CS_ShowHandGiveUp::MsgID_MAX;
const int CS_ShowHandGiveUp::MsgID_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* CS_ShowHandPass_MsgID_descriptor() {
  protobuf_public_5fshowhand_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_public_5fshowhand_2eproto::file_level_enum_descriptors[2];
}
bool CS_ShowHandPass_MsgID_IsValid(int value) {
  switch (value) {
    case 17002:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const CS_ShowHandPass_MsgID CS_ShowHandPass::ID;
const CS_ShowHandPass_MsgID CS_ShowHandPass::MsgID_MIN;
const CS_ShowHandPass_MsgID CS_ShowHandPass::MsgID_MAX;
const int CS_ShowHandPass::MsgID_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* CS_ShowHandGiveUpEixt_MsgID_descriptor() {
  protobuf_public_5fshowhand_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_public_5fshowhand_2eproto::file_level_enum_descriptors[3];
}
bool CS_ShowHandGiveUpEixt_MsgID_IsValid(int value) {
  switch (value) {
    case 17003:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const CS_ShowHandGiveUpEixt_MsgID CS_ShowHandGiveUpEixt::ID;
const CS_ShowHandGiveUpEixt_MsgID CS_ShowHandGiveUpEixt::MsgID_MIN;
const CS_ShowHandGiveUpEixt_MsgID CS_ShowHandGiveUpEixt::MsgID_MAX;
const int CS_ShowHandGiveUpEixt::MsgID_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* CS_ShowHandMyVoteResult_MsgID_descriptor() {
  protobuf_public_5fshowhand_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_public_5fshowhand_2eproto::file_level_enum_descriptors[4];
}
bool CS_ShowHandMyVoteResult_MsgID_IsValid(int value) {
  switch (value) {
    case 17004:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const CS_ShowHandMyVoteResult_MsgID CS_ShowHandMyVoteResult::ID;
const CS_ShowHandMyVoteResult_MsgID CS_ShowHandMyVoteResult::MsgID_MIN;
const CS_ShowHandMyVoteResult_MsgID CS_ShowHandMyVoteResult::MsgID_MAX;
const int CS_ShowHandMyVoteResult::MsgID_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* SC_ShowHand_Desk_Enter_MsgID_descriptor() {
  protobuf_public_5fshowhand_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_public_5fshowhand_2eproto::file_level_enum_descriptors[5];
}
bool SC_ShowHand_Desk_Enter_MsgID_IsValid(int value) {
  switch (value) {
    case 17100:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const SC_ShowHand_Desk_Enter_MsgID SC_ShowHand_Desk_Enter::ID;
const SC_ShowHand_Desk_Enter_MsgID SC_ShowHand_Desk_Enter::MsgID_MIN;
const SC_ShowHand_Desk_Enter_MsgID SC_ShowHand_Desk_Enter::MsgID_MAX;
const int SC_ShowHand_Desk_Enter::MsgID_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* SC_ShowHand_Desk_State_MsgID_descriptor() {
  protobuf_public_5fshowhand_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_public_5fshowhand_2eproto::file_level_enum_descriptors[6];
}
bool SC_ShowHand_Desk_State_MsgID_IsValid(int value) {
  switch (value) {
    case 17101:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const SC_ShowHand_Desk_State_MsgID SC_ShowHand_Desk_State::ID;
const SC_ShowHand_Desk_State_MsgID SC_ShowHand_Desk_State::MsgID_MIN;
const SC_ShowHand_Desk_State_MsgID SC_ShowHand_Desk_State::MsgID_MAX;
const int SC_ShowHand_Desk_State::MsgID_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* SC_ShowHand_Game_Finish_MsgID_descriptor() {
  protobuf_public_5fshowhand_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_public_5fshowhand_2eproto::file_level_enum_descriptors[7];
}
bool SC_ShowHand_Game_Finish_MsgID_IsValid(int value) {
  switch (value) {
    case 17102:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const SC_ShowHand_Game_Finish_MsgID SC_ShowHand_Game_Finish::ID;
const SC_ShowHand_Game_Finish_MsgID SC_ShowHand_Game_Finish::MsgID_MIN;
const SC_ShowHand_Game_Finish_MsgID SC_ShowHand_Game_Finish::MsgID_MAX;
const int SC_ShowHand_Game_Finish::MsgID_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* SC_ShowHand_Next_Round_MsgID_descriptor() {
  protobuf_public_5fshowhand_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_public_5fshowhand_2eproto::file_level_enum_descriptors[8];
}
bool SC_ShowHand_Next_Round_MsgID_IsValid(int value) {
  switch (value) {
    case 17103:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const SC_ShowHand_Next_Round_MsgID SC_ShowHand_Next_Round::ID;
const SC_ShowHand_Next_Round_MsgID SC_ShowHand_Next_Round::MsgID_MIN;
const SC_ShowHand_Next_Round_MsgID SC_ShowHand_Next_Round::MsgID_MAX;
const int SC_ShowHand_Next_Round::MsgID_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* SC_ShowHandAddScore_MsgID_descriptor() {
  protobuf_public_5fshowhand_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_public_5fshowhand_2eproto::file_level_enum_descriptors[9];
}
bool SC_ShowHandAddScore_MsgID_IsValid(int value) {
  switch (value) {
    case 17104:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const SC_ShowHandAddScore_MsgID SC_ShowHandAddScore::ID;
const SC_ShowHandAddScore_MsgID SC_ShowHandAddScore::MsgID_MIN;
const SC_ShowHandAddScore_MsgID SC_ShowHandAddScore::MsgID_MAX;
const int SC_ShowHandAddScore::MsgID_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* SC_ShowHandGiveUp_MsgID_descriptor() {
  protobuf_public_5fshowhand_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_public_5fshowhand_2eproto::file_level_enum_descriptors[10];
}
bool SC_ShowHandGiveUp_MsgID_IsValid(int value) {
  switch (value) {
    case 17105:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const SC_ShowHandGiveUp_MsgID SC_ShowHandGiveUp::ID;
const SC_ShowHandGiveUp_MsgID SC_ShowHandGiveUp::MsgID_MIN;
const SC_ShowHandGiveUp_MsgID SC_ShowHandGiveUp::MsgID_MAX;
const int SC_ShowHandGiveUp::MsgID_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* SC_ShowHandPass_MsgID_descriptor() {
  protobuf_public_5fshowhand_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_public_5fshowhand_2eproto::file_level_enum_descriptors[11];
}
bool SC_ShowHandPass_MsgID_IsValid(int value) {
  switch (value) {
    case 17106:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const SC_ShowHandPass_MsgID SC_ShowHandPass::ID;
const SC_ShowHandPass_MsgID SC_ShowHandPass::MsgID_MIN;
const SC_ShowHandPass_MsgID SC_ShowHandPass::MsgID_MAX;
const int SC_ShowHandPass::MsgID_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* SC_ShowHand_NextTurn_MsgID_descriptor() {
  protobuf_public_5fshowhand_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_public_5fshowhand_2eproto::file_level_enum_descriptors[12];
}
bool SC_ShowHand_NextTurn_MsgID_IsValid(int value) {
  switch (value) {
    case 17107:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const SC_ShowHand_NextTurn_MsgID SC_ShowHand_NextTurn::ID;
const SC_ShowHand_NextTurn_MsgID SC_ShowHand_NextTurn::MsgID_MIN;
const SC_ShowHand_NextTurn_MsgID SC_ShowHand_NextTurn::MsgID_MAX;
const int SC_ShowHand_NextTurn::MsgID_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* SC_ShowHandStartVote_MsgID_descriptor() {
  protobuf_public_5fshowhand_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_public_5fshowhand_2eproto::file_level_enum_descriptors[13];
}
bool SC_ShowHandStartVote_MsgID_IsValid(int value) {
  switch (value) {
    case 17004:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const SC_ShowHandStartVote_MsgID SC_ShowHandStartVote::ID;
const SC_ShowHandStartVote_MsgID SC_ShowHandStartVote::MsgID_MIN;
const SC_ShowHandStartVote_MsgID SC_ShowHandStartVote::MsgID_MAX;
const int SC_ShowHandStartVote::MsgID_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* SC_ShowHandPlayerVoteRes_MsgID_descriptor() {
  protobuf_public_5fshowhand_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_public_5fshowhand_2eproto::file_level_enum_descriptors[14];
}
bool SC_ShowHandPlayerVoteRes_MsgID_IsValid(int value) {
  switch (value) {
    case 17004:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const SC_ShowHandPlayerVoteRes_MsgID SC_ShowHandPlayerVoteRes::ID;
const SC_ShowHandPlayerVoteRes_MsgID SC_ShowHandPlayerVoteRes::MsgID_MIN;
const SC_ShowHandPlayerVoteRes_MsgID SC_ShowHandPlayerVoteRes::MsgID_MAX;
const int SC_ShowHandPlayerVoteRes::MsgID_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CS_ShowHandAddScore::kTargetFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CS_ShowHandAddScore::CS_ShowHandAddScore()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_public_5fshowhand_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:CS_ShowHandAddScore)
}
CS_ShowHandAddScore::CS_ShowHandAddScore(const CS_ShowHandAddScore& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  target_ = from.target_;
  // @@protoc_insertion_point(copy_constructor:CS_ShowHandAddScore)
}

void CS_ShowHandAddScore::SharedCtor() {
  _cached_size_ = 0;
  target_ = 0;
}

CS_ShowHandAddScore::~CS_ShowHandAddScore() {
  // @@protoc_insertion_point(destructor:CS_ShowHandAddScore)
  SharedDtor();
}

void CS_ShowHandAddScore::SharedDtor() {
}

void CS_ShowHandAddScore::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CS_ShowHandAddScore::descriptor() {
  protobuf_public_5fshowhand_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_public_5fshowhand_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CS_ShowHandAddScore& CS_ShowHandAddScore::default_instance() {
  protobuf_public_5fshowhand_2eproto::InitDefaults();
  return *internal_default_instance();
}

CS_ShowHandAddScore* CS_ShowHandAddScore::New(::google::protobuf::Arena* arena) const {
  CS_ShowHandAddScore* n = new CS_ShowHandAddScore;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CS_ShowHandAddScore::Clear() {
// @@protoc_insertion_point(message_clear_start:CS_ShowHandAddScore)
  target_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CS_ShowHandAddScore::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CS_ShowHandAddScore)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 target = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_target();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &target_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CS_ShowHandAddScore)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CS_ShowHandAddScore)
  return false;
#undef DO_
}

void CS_ShowHandAddScore::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CS_ShowHandAddScore)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 target = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->target(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CS_ShowHandAddScore)
}

::google::protobuf::uint8* CS_ShowHandAddScore::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CS_ShowHandAddScore)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 target = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->target(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CS_ShowHandAddScore)
  return target;
}

size_t CS_ShowHandAddScore::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CS_ShowHandAddScore)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // optional int32 target = 1;
  if (has_target()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->target());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CS_ShowHandAddScore::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CS_ShowHandAddScore)
  GOOGLE_DCHECK_NE(&from, this);
  const CS_ShowHandAddScore* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CS_ShowHandAddScore>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CS_ShowHandAddScore)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CS_ShowHandAddScore)
    MergeFrom(*source);
  }
}

void CS_ShowHandAddScore::MergeFrom(const CS_ShowHandAddScore& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CS_ShowHandAddScore)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_target()) {
    set_target(from.target());
  }
}

void CS_ShowHandAddScore::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CS_ShowHandAddScore)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CS_ShowHandAddScore::CopyFrom(const CS_ShowHandAddScore& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CS_ShowHandAddScore)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CS_ShowHandAddScore::IsInitialized() const {
  return true;
}

void CS_ShowHandAddScore::Swap(CS_ShowHandAddScore* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CS_ShowHandAddScore::InternalSwap(CS_ShowHandAddScore* other) {
  std::swap(target_, other->target_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CS_ShowHandAddScore::GetMetadata() const {
  protobuf_public_5fshowhand_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_public_5fshowhand_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CS_ShowHandAddScore

// optional int32 target = 1;
bool CS_ShowHandAddScore::has_target() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CS_ShowHandAddScore::set_has_target() {
  _has_bits_[0] |= 0x00000001u;
}
void CS_ShowHandAddScore::clear_has_target() {
  _has_bits_[0] &= ~0x00000001u;
}
void CS_ShowHandAddScore::clear_target() {
  target_ = 0;
  clear_has_target();
}
::google::protobuf::int32 CS_ShowHandAddScore::target() const {
  // @@protoc_insertion_point(field_get:CS_ShowHandAddScore.target)
  return target_;
}
void CS_ShowHandAddScore::set_target(::google::protobuf::int32 value) {
  set_has_target();
  target_ = value;
  // @@protoc_insertion_point(field_set:CS_ShowHandAddScore.target)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CS_ShowHandGiveUp::CS_ShowHandGiveUp()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_public_5fshowhand_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:CS_ShowHandGiveUp)
}
CS_ShowHandGiveUp::CS_ShowHandGiveUp(const CS_ShowHandGiveUp& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:CS_ShowHandGiveUp)
}

void CS_ShowHandGiveUp::SharedCtor() {
  _cached_size_ = 0;
}

CS_ShowHandGiveUp::~CS_ShowHandGiveUp() {
  // @@protoc_insertion_point(destructor:CS_ShowHandGiveUp)
  SharedDtor();
}

void CS_ShowHandGiveUp::SharedDtor() {
}

void CS_ShowHandGiveUp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CS_ShowHandGiveUp::descriptor() {
  protobuf_public_5fshowhand_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_public_5fshowhand_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CS_ShowHandGiveUp& CS_ShowHandGiveUp::default_instance() {
  protobuf_public_5fshowhand_2eproto::InitDefaults();
  return *internal_default_instance();
}

CS_ShowHandGiveUp* CS_ShowHandGiveUp::New(::google::protobuf::Arena* arena) const {
  CS_ShowHandGiveUp* n = new CS_ShowHandGiveUp;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CS_ShowHandGiveUp::Clear() {
// @@protoc_insertion_point(message_clear_start:CS_ShowHandGiveUp)
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CS_ShowHandGiveUp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CS_ShowHandGiveUp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:CS_ShowHandGiveUp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CS_ShowHandGiveUp)
  return false;
#undef DO_
}

void CS_ShowHandGiveUp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CS_ShowHandGiveUp)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CS_ShowHandGiveUp)
}

::google::protobuf::uint8* CS_ShowHandGiveUp::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CS_ShowHandGiveUp)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CS_ShowHandGiveUp)
  return target;
}

size_t CS_ShowHandGiveUp::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CS_ShowHandGiveUp)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CS_ShowHandGiveUp::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CS_ShowHandGiveUp)
  GOOGLE_DCHECK_NE(&from, this);
  const CS_ShowHandGiveUp* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CS_ShowHandGiveUp>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CS_ShowHandGiveUp)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CS_ShowHandGiveUp)
    MergeFrom(*source);
  }
}

void CS_ShowHandGiveUp::MergeFrom(const CS_ShowHandGiveUp& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CS_ShowHandGiveUp)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void CS_ShowHandGiveUp::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CS_ShowHandGiveUp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CS_ShowHandGiveUp::CopyFrom(const CS_ShowHandGiveUp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CS_ShowHandGiveUp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CS_ShowHandGiveUp::IsInitialized() const {
  return true;
}

void CS_ShowHandGiveUp::Swap(CS_ShowHandGiveUp* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CS_ShowHandGiveUp::InternalSwap(CS_ShowHandGiveUp* other) {
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CS_ShowHandGiveUp::GetMetadata() const {
  protobuf_public_5fshowhand_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_public_5fshowhand_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CS_ShowHandGiveUp

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CS_ShowHandPass::CS_ShowHandPass()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_public_5fshowhand_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:CS_ShowHandPass)
}
CS_ShowHandPass::CS_ShowHandPass(const CS_ShowHandPass& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:CS_ShowHandPass)
}

void CS_ShowHandPass::SharedCtor() {
  _cached_size_ = 0;
}

CS_ShowHandPass::~CS_ShowHandPass() {
  // @@protoc_insertion_point(destructor:CS_ShowHandPass)
  SharedDtor();
}

void CS_ShowHandPass::SharedDtor() {
}

void CS_ShowHandPass::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CS_ShowHandPass::descriptor() {
  protobuf_public_5fshowhand_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_public_5fshowhand_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CS_ShowHandPass& CS_ShowHandPass::default_instance() {
  protobuf_public_5fshowhand_2eproto::InitDefaults();
  return *internal_default_instance();
}

CS_ShowHandPass* CS_ShowHandPass::New(::google::protobuf::Arena* arena) const {
  CS_ShowHandPass* n = new CS_ShowHandPass;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CS_ShowHandPass::Clear() {
// @@protoc_insertion_point(message_clear_start:CS_ShowHandPass)
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CS_ShowHandPass::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CS_ShowHandPass)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:CS_ShowHandPass)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CS_ShowHandPass)
  return false;
#undef DO_
}

void CS_ShowHandPass::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CS_ShowHandPass)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CS_ShowHandPass)
}

::google::protobuf::uint8* CS_ShowHandPass::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CS_ShowHandPass)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CS_ShowHandPass)
  return target;
}

size_t CS_ShowHandPass::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CS_ShowHandPass)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CS_ShowHandPass::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CS_ShowHandPass)
  GOOGLE_DCHECK_NE(&from, this);
  const CS_ShowHandPass* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CS_ShowHandPass>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CS_ShowHandPass)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CS_ShowHandPass)
    MergeFrom(*source);
  }
}

void CS_ShowHandPass::MergeFrom(const CS_ShowHandPass& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CS_ShowHandPass)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void CS_ShowHandPass::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CS_ShowHandPass)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CS_ShowHandPass::CopyFrom(const CS_ShowHandPass& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CS_ShowHandPass)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CS_ShowHandPass::IsInitialized() const {
  return true;
}

void CS_ShowHandPass::Swap(CS_ShowHandPass* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CS_ShowHandPass::InternalSwap(CS_ShowHandPass* other) {
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CS_ShowHandPass::GetMetadata() const {
  protobuf_public_5fshowhand_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_public_5fshowhand_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CS_ShowHandPass

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CS_ShowHandGiveUpEixt::CS_ShowHandGiveUpEixt()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_public_5fshowhand_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:CS_ShowHandGiveUpEixt)
}
CS_ShowHandGiveUpEixt::CS_ShowHandGiveUpEixt(const CS_ShowHandGiveUpEixt& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:CS_ShowHandGiveUpEixt)
}

void CS_ShowHandGiveUpEixt::SharedCtor() {
  _cached_size_ = 0;
}

CS_ShowHandGiveUpEixt::~CS_ShowHandGiveUpEixt() {
  // @@protoc_insertion_point(destructor:CS_ShowHandGiveUpEixt)
  SharedDtor();
}

void CS_ShowHandGiveUpEixt::SharedDtor() {
}

void CS_ShowHandGiveUpEixt::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CS_ShowHandGiveUpEixt::descriptor() {
  protobuf_public_5fshowhand_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_public_5fshowhand_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CS_ShowHandGiveUpEixt& CS_ShowHandGiveUpEixt::default_instance() {
  protobuf_public_5fshowhand_2eproto::InitDefaults();
  return *internal_default_instance();
}

CS_ShowHandGiveUpEixt* CS_ShowHandGiveUpEixt::New(::google::protobuf::Arena* arena) const {
  CS_ShowHandGiveUpEixt* n = new CS_ShowHandGiveUpEixt;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CS_ShowHandGiveUpEixt::Clear() {
// @@protoc_insertion_point(message_clear_start:CS_ShowHandGiveUpEixt)
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CS_ShowHandGiveUpEixt::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CS_ShowHandGiveUpEixt)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:CS_ShowHandGiveUpEixt)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CS_ShowHandGiveUpEixt)
  return false;
#undef DO_
}

void CS_ShowHandGiveUpEixt::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CS_ShowHandGiveUpEixt)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CS_ShowHandGiveUpEixt)
}

::google::protobuf::uint8* CS_ShowHandGiveUpEixt::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CS_ShowHandGiveUpEixt)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CS_ShowHandGiveUpEixt)
  return target;
}

size_t CS_ShowHandGiveUpEixt::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CS_ShowHandGiveUpEixt)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CS_ShowHandGiveUpEixt::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CS_ShowHandGiveUpEixt)
  GOOGLE_DCHECK_NE(&from, this);
  const CS_ShowHandGiveUpEixt* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CS_ShowHandGiveUpEixt>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CS_ShowHandGiveUpEixt)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CS_ShowHandGiveUpEixt)
    MergeFrom(*source);
  }
}

void CS_ShowHandGiveUpEixt::MergeFrom(const CS_ShowHandGiveUpEixt& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CS_ShowHandGiveUpEixt)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void CS_ShowHandGiveUpEixt::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CS_ShowHandGiveUpEixt)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CS_ShowHandGiveUpEixt::CopyFrom(const CS_ShowHandGiveUpEixt& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CS_ShowHandGiveUpEixt)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CS_ShowHandGiveUpEixt::IsInitialized() const {
  return true;
}

void CS_ShowHandGiveUpEixt::Swap(CS_ShowHandGiveUpEixt* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CS_ShowHandGiveUpEixt::InternalSwap(CS_ShowHandGiveUpEixt* other) {
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CS_ShowHandGiveUpEixt::GetMetadata() const {
  protobuf_public_5fshowhand_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_public_5fshowhand_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CS_ShowHandGiveUpEixt

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CS_ShowHandMyVoteResult::kAgreenFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CS_ShowHandMyVoteResult::CS_ShowHandMyVoteResult()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_public_5fshowhand_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:CS_ShowHandMyVoteResult)
}
CS_ShowHandMyVoteResult::CS_ShowHandMyVoteResult(const CS_ShowHandMyVoteResult& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  agreen_ = from.agreen_;
  // @@protoc_insertion_point(copy_constructor:CS_ShowHandMyVoteResult)
}

void CS_ShowHandMyVoteResult::SharedCtor() {
  _cached_size_ = 0;
  agreen_ = false;
}

CS_ShowHandMyVoteResult::~CS_ShowHandMyVoteResult() {
  // @@protoc_insertion_point(destructor:CS_ShowHandMyVoteResult)
  SharedDtor();
}

void CS_ShowHandMyVoteResult::SharedDtor() {
}

void CS_ShowHandMyVoteResult::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CS_ShowHandMyVoteResult::descriptor() {
  protobuf_public_5fshowhand_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_public_5fshowhand_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CS_ShowHandMyVoteResult& CS_ShowHandMyVoteResult::default_instance() {
  protobuf_public_5fshowhand_2eproto::InitDefaults();
  return *internal_default_instance();
}

CS_ShowHandMyVoteResult* CS_ShowHandMyVoteResult::New(::google::protobuf::Arena* arena) const {
  CS_ShowHandMyVoteResult* n = new CS_ShowHandMyVoteResult;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CS_ShowHandMyVoteResult::Clear() {
// @@protoc_insertion_point(message_clear_start:CS_ShowHandMyVoteResult)
  agreen_ = false;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CS_ShowHandMyVoteResult::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CS_ShowHandMyVoteResult)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bool agreen = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_agreen();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &agreen_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CS_ShowHandMyVoteResult)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CS_ShowHandMyVoteResult)
  return false;
#undef DO_
}

void CS_ShowHandMyVoteResult::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CS_ShowHandMyVoteResult)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool agreen = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->agreen(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CS_ShowHandMyVoteResult)
}

::google::protobuf::uint8* CS_ShowHandMyVoteResult::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CS_ShowHandMyVoteResult)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool agreen = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->agreen(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CS_ShowHandMyVoteResult)
  return target;
}

size_t CS_ShowHandMyVoteResult::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CS_ShowHandMyVoteResult)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // optional bool agreen = 1;
  if (has_agreen()) {
    total_size += 1 + 1;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CS_ShowHandMyVoteResult::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CS_ShowHandMyVoteResult)
  GOOGLE_DCHECK_NE(&from, this);
  const CS_ShowHandMyVoteResult* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CS_ShowHandMyVoteResult>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CS_ShowHandMyVoteResult)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CS_ShowHandMyVoteResult)
    MergeFrom(*source);
  }
}

void CS_ShowHandMyVoteResult::MergeFrom(const CS_ShowHandMyVoteResult& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CS_ShowHandMyVoteResult)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_agreen()) {
    set_agreen(from.agreen());
  }
}

void CS_ShowHandMyVoteResult::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CS_ShowHandMyVoteResult)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CS_ShowHandMyVoteResult::CopyFrom(const CS_ShowHandMyVoteResult& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CS_ShowHandMyVoteResult)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CS_ShowHandMyVoteResult::IsInitialized() const {
  return true;
}

void CS_ShowHandMyVoteResult::Swap(CS_ShowHandMyVoteResult* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CS_ShowHandMyVoteResult::InternalSwap(CS_ShowHandMyVoteResult* other) {
  std::swap(agreen_, other->agreen_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CS_ShowHandMyVoteResult::GetMetadata() const {
  protobuf_public_5fshowhand_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_public_5fshowhand_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CS_ShowHandMyVoteResult

// optional bool agreen = 1;
bool CS_ShowHandMyVoteResult::has_agreen() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CS_ShowHandMyVoteResult::set_has_agreen() {
  _has_bits_[0] |= 0x00000001u;
}
void CS_ShowHandMyVoteResult::clear_has_agreen() {
  _has_bits_[0] &= ~0x00000001u;
}
void CS_ShowHandMyVoteResult::clear_agreen() {
  agreen_ = false;
  clear_has_agreen();
}
bool CS_ShowHandMyVoteResult::agreen() const {
  // @@protoc_insertion_point(field_get:CS_ShowHandMyVoteResult.agreen)
  return agreen_;
}
void CS_ShowHandMyVoteResult::set_agreen(bool value) {
  set_has_agreen();
  agreen_ = value;
  // @@protoc_insertion_point(field_set:CS_ShowHandMyVoteResult.agreen)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ShowHand_Player_Info::kTilesFieldNumber;
const int ShowHand_Player_Info::kChairIdFieldNumber;
const int ShowHand_Player_Info::kAddTotalFieldNumber;
const int ShowHand_Player_Info::kCurRoundAddFieldNumber;
const int ShowHand_Player_Info::kNickFieldNumber;
const int ShowHand_Player_Info::kIconFieldNumber;
const int ShowHand_Player_Info::kGoldFieldNumber;
const int ShowHand_Player_Info::kGuidFieldNumber;
const int ShowHand_Player_Info::kIsWinFieldNumber;
const int ShowHand_Player_Info::kWinMoneyFieldNumber;
const int ShowHand_Player_Info::kTaxesFieldNumber;
const int ShowHand_Player_Info::kIsGiveUpFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ShowHand_Player_Info::ShowHand_Player_Info()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_public_5fshowhand_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:ShowHand_Player_Info)
}
ShowHand_Player_Info::ShowHand_Player_Info(const ShowHand_Player_Info& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      tiles_(from.tiles_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  nick_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_nick()) {
    nick_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.nick_);
  }
  ::memcpy(&chair_id_, &from.chair_id_,
    reinterpret_cast<char*>(&taxes_) -
    reinterpret_cast<char*>(&chair_id_) + sizeof(taxes_));
  // @@protoc_insertion_point(copy_constructor:ShowHand_Player_Info)
}

void ShowHand_Player_Info::SharedCtor() {
  _cached_size_ = 0;
  nick_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&chair_id_, 0, reinterpret_cast<char*>(&taxes_) -
    reinterpret_cast<char*>(&chair_id_) + sizeof(taxes_));
}

ShowHand_Player_Info::~ShowHand_Player_Info() {
  // @@protoc_insertion_point(destructor:ShowHand_Player_Info)
  SharedDtor();
}

void ShowHand_Player_Info::SharedDtor() {
  nick_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void ShowHand_Player_Info::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ShowHand_Player_Info::descriptor() {
  protobuf_public_5fshowhand_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_public_5fshowhand_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ShowHand_Player_Info& ShowHand_Player_Info::default_instance() {
  protobuf_public_5fshowhand_2eproto::InitDefaults();
  return *internal_default_instance();
}

ShowHand_Player_Info* ShowHand_Player_Info::New(::google::protobuf::Arena* arena) const {
  ShowHand_Player_Info* n = new ShowHand_Player_Info;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ShowHand_Player_Info::Clear() {
// @@protoc_insertion_point(message_clear_start:ShowHand_Player_Info)
  tiles_.Clear();
  if (has_nick()) {
    GOOGLE_DCHECK(!nick_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
    (*nick_.UnsafeRawStringPointer())->clear();
  }
  if (_has_bits_[0 / 32] & 254u) {
    ::memset(&chair_id_, 0, reinterpret_cast<char*>(&win_money_) -
      reinterpret_cast<char*>(&chair_id_) + sizeof(win_money_));
  }
  if (_has_bits_[8 / 32] & 1792u) {
    ::memset(&is_win_, 0, reinterpret_cast<char*>(&taxes_) -
      reinterpret_cast<char*>(&is_win_) + sizeof(taxes_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool ShowHand_Player_Info::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ShowHand_Player_Info)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated int32 tiles = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 8u, input, this->mutable_tiles())));
        } else if (static_cast< ::google::protobuf::uint8>(tag) ==
                   static_cast< ::google::protobuf::uint8>(10u)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_tiles())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 chair_id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_chair_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &chair_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 add_total = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {
          set_has_add_total();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &add_total_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 cur_round_add = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u)) {
          set_has_cur_round_add();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &cur_round_add_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string nick = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_nick()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->nick().data(), this->nick().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "ShowHand_Player_Info.nick");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 icon = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u)) {
          set_has_icon();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &icon_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 gold = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u)) {
          set_has_gold();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &gold_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 guid = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(64u)) {
          set_has_guid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &guid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool is_win = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(72u)) {
          set_has_is_win();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_win_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 win_money = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(80u)) {
          set_has_win_money();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &win_money_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 taxes = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(88u)) {
          set_has_taxes();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &taxes_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool is_give_up = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(96u)) {
          set_has_is_give_up();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_give_up_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ShowHand_Player_Info)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ShowHand_Player_Info)
  return false;
#undef DO_
}

void ShowHand_Player_Info::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ShowHand_Player_Info)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated int32 tiles = 1;
  for (int i = 0, n = this->tiles_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      1, this->tiles(i), output);
  }

  cached_has_bits = _has_bits_[0];
  // optional int32 chair_id = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->chair_id(), output);
  }

  // optional int32 add_total = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->add_total(), output);
  }

  // optional int32 cur_round_add = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->cur_round_add(), output);
  }

  // optional string nick = 5;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->nick().data(), this->nick().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ShowHand_Player_Info.nick");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->nick(), output);
  }

  // optional int32 icon = 6;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->icon(), output);
  }

  // optional int64 gold = 7;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(7, this->gold(), output);
  }

  // optional int32 guid = 8;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->guid(), output);
  }

  // optional bool is_win = 9;
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(9, this->is_win(), output);
  }

  // optional int32 win_money = 10;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->win_money(), output);
  }

  // optional int32 taxes = 11;
  if (cached_has_bits & 0x00000400u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(11, this->taxes(), output);
  }

  // optional bool is_give_up = 12;
  if (cached_has_bits & 0x00000200u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(12, this->is_give_up(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ShowHand_Player_Info)
}

::google::protobuf::uint8* ShowHand_Player_Info::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ShowHand_Player_Info)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated int32 tiles = 1;
  target = ::google::protobuf::internal::WireFormatLite::
    WriteInt32ToArray(1, this->tiles_, target);

  cached_has_bits = _has_bits_[0];
  // optional int32 chair_id = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->chair_id(), target);
  }

  // optional int32 add_total = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->add_total(), target);
  }

  // optional int32 cur_round_add = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->cur_round_add(), target);
  }

  // optional string nick = 5;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->nick().data(), this->nick().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ShowHand_Player_Info.nick");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->nick(), target);
  }

  // optional int32 icon = 6;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->icon(), target);
  }

  // optional int64 gold = 7;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(7, this->gold(), target);
  }

  // optional int32 guid = 8;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->guid(), target);
  }

  // optional bool is_win = 9;
  if (cached_has_bits & 0x00000100u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(9, this->is_win(), target);
  }

  // optional int32 win_money = 10;
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(10, this->win_money(), target);
  }

  // optional int32 taxes = 11;
  if (cached_has_bits & 0x00000400u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(11, this->taxes(), target);
  }

  // optional bool is_give_up = 12;
  if (cached_has_bits & 0x00000200u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(12, this->is_give_up(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ShowHand_Player_Info)
  return target;
}

size_t ShowHand_Player_Info::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ShowHand_Player_Info)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // repeated int32 tiles = 1;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      Int32Size(this->tiles_);
    total_size += 1 *
                  ::google::protobuf::internal::FromIntSize(this->tiles_size());
    total_size += data_size;
  }

  if (_has_bits_[0 / 32] & 255u) {
    // optional string nick = 5;
    if (has_nick()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->nick());
    }

    // optional int32 chair_id = 2;
    if (has_chair_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->chair_id());
    }

    // optional int32 add_total = 3;
    if (has_add_total()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->add_total());
    }

    // optional int32 cur_round_add = 4;
    if (has_cur_round_add()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->cur_round_add());
    }

    // optional int32 icon = 6;
    if (has_icon()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->icon());
    }

    // optional int64 gold = 7;
    if (has_gold()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->gold());
    }

    // optional int32 guid = 8;
    if (has_guid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->guid());
    }

    // optional int32 win_money = 10;
    if (has_win_money()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->win_money());
    }

  }
  if (_has_bits_[8 / 32] & 1792u) {
    // optional bool is_win = 9;
    if (has_is_win()) {
      total_size += 1 + 1;
    }

    // optional bool is_give_up = 12;
    if (has_is_give_up()) {
      total_size += 1 + 1;
    }

    // optional int32 taxes = 11;
    if (has_taxes()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->taxes());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ShowHand_Player_Info::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ShowHand_Player_Info)
  GOOGLE_DCHECK_NE(&from, this);
  const ShowHand_Player_Info* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ShowHand_Player_Info>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ShowHand_Player_Info)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ShowHand_Player_Info)
    MergeFrom(*source);
  }
}

void ShowHand_Player_Info::MergeFrom(const ShowHand_Player_Info& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ShowHand_Player_Info)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  tiles_.MergeFrom(from.tiles_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_nick();
      nick_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.nick_);
    }
    if (cached_has_bits & 0x00000002u) {
      chair_id_ = from.chair_id_;
    }
    if (cached_has_bits & 0x00000004u) {
      add_total_ = from.add_total_;
    }
    if (cached_has_bits & 0x00000008u) {
      cur_round_add_ = from.cur_round_add_;
    }
    if (cached_has_bits & 0x00000010u) {
      icon_ = from.icon_;
    }
    if (cached_has_bits & 0x00000020u) {
      gold_ = from.gold_;
    }
    if (cached_has_bits & 0x00000040u) {
      guid_ = from.guid_;
    }
    if (cached_has_bits & 0x00000080u) {
      win_money_ = from.win_money_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 1792u) {
    if (cached_has_bits & 0x00000100u) {
      is_win_ = from.is_win_;
    }
    if (cached_has_bits & 0x00000200u) {
      is_give_up_ = from.is_give_up_;
    }
    if (cached_has_bits & 0x00000400u) {
      taxes_ = from.taxes_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void ShowHand_Player_Info::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ShowHand_Player_Info)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ShowHand_Player_Info::CopyFrom(const ShowHand_Player_Info& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ShowHand_Player_Info)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ShowHand_Player_Info::IsInitialized() const {
  return true;
}

void ShowHand_Player_Info::Swap(ShowHand_Player_Info* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ShowHand_Player_Info::InternalSwap(ShowHand_Player_Info* other) {
  tiles_.InternalSwap(&other->tiles_);
  nick_.Swap(&other->nick_);
  std::swap(chair_id_, other->chair_id_);
  std::swap(add_total_, other->add_total_);
  std::swap(cur_round_add_, other->cur_round_add_);
  std::swap(icon_, other->icon_);
  std::swap(gold_, other->gold_);
  std::swap(guid_, other->guid_);
  std::swap(win_money_, other->win_money_);
  std::swap(is_win_, other->is_win_);
  std::swap(is_give_up_, other->is_give_up_);
  std::swap(taxes_, other->taxes_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ShowHand_Player_Info::GetMetadata() const {
  protobuf_public_5fshowhand_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_public_5fshowhand_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ShowHand_Player_Info

// repeated int32 tiles = 1;
int ShowHand_Player_Info::tiles_size() const {
  return tiles_.size();
}
void ShowHand_Player_Info::clear_tiles() {
  tiles_.Clear();
}
::google::protobuf::int32 ShowHand_Player_Info::tiles(int index) const {
  // @@protoc_insertion_point(field_get:ShowHand_Player_Info.tiles)
  return tiles_.Get(index);
}
void ShowHand_Player_Info::set_tiles(int index, ::google::protobuf::int32 value) {
  tiles_.Set(index, value);
  // @@protoc_insertion_point(field_set:ShowHand_Player_Info.tiles)
}
void ShowHand_Player_Info::add_tiles(::google::protobuf::int32 value) {
  tiles_.Add(value);
  // @@protoc_insertion_point(field_add:ShowHand_Player_Info.tiles)
}
const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
ShowHand_Player_Info::tiles() const {
  // @@protoc_insertion_point(field_list:ShowHand_Player_Info.tiles)
  return tiles_;
}
::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
ShowHand_Player_Info::mutable_tiles() {
  // @@protoc_insertion_point(field_mutable_list:ShowHand_Player_Info.tiles)
  return &tiles_;
}

// optional int32 chair_id = 2;
bool ShowHand_Player_Info::has_chair_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void ShowHand_Player_Info::set_has_chair_id() {
  _has_bits_[0] |= 0x00000002u;
}
void ShowHand_Player_Info::clear_has_chair_id() {
  _has_bits_[0] &= ~0x00000002u;
}
void ShowHand_Player_Info::clear_chair_id() {
  chair_id_ = 0;
  clear_has_chair_id();
}
::google::protobuf::int32 ShowHand_Player_Info::chair_id() const {
  // @@protoc_insertion_point(field_get:ShowHand_Player_Info.chair_id)
  return chair_id_;
}
void ShowHand_Player_Info::set_chair_id(::google::protobuf::int32 value) {
  set_has_chair_id();
  chair_id_ = value;
  // @@protoc_insertion_point(field_set:ShowHand_Player_Info.chair_id)
}

// optional int32 add_total = 3;
bool ShowHand_Player_Info::has_add_total() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void ShowHand_Player_Info::set_has_add_total() {
  _has_bits_[0] |= 0x00000004u;
}
void ShowHand_Player_Info::clear_has_add_total() {
  _has_bits_[0] &= ~0x00000004u;
}
void ShowHand_Player_Info::clear_add_total() {
  add_total_ = 0;
  clear_has_add_total();
}
::google::protobuf::int32 ShowHand_Player_Info::add_total() const {
  // @@protoc_insertion_point(field_get:ShowHand_Player_Info.add_total)
  return add_total_;
}
void ShowHand_Player_Info::set_add_total(::google::protobuf::int32 value) {
  set_has_add_total();
  add_total_ = value;
  // @@protoc_insertion_point(field_set:ShowHand_Player_Info.add_total)
}

// optional int32 cur_round_add = 4;
bool ShowHand_Player_Info::has_cur_round_add() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void ShowHand_Player_Info::set_has_cur_round_add() {
  _has_bits_[0] |= 0x00000008u;
}
void ShowHand_Player_Info::clear_has_cur_round_add() {
  _has_bits_[0] &= ~0x00000008u;
}
void ShowHand_Player_Info::clear_cur_round_add() {
  cur_round_add_ = 0;
  clear_has_cur_round_add();
}
::google::protobuf::int32 ShowHand_Player_Info::cur_round_add() const {
  // @@protoc_insertion_point(field_get:ShowHand_Player_Info.cur_round_add)
  return cur_round_add_;
}
void ShowHand_Player_Info::set_cur_round_add(::google::protobuf::int32 value) {
  set_has_cur_round_add();
  cur_round_add_ = value;
  // @@protoc_insertion_point(field_set:ShowHand_Player_Info.cur_round_add)
}

// optional string nick = 5;
bool ShowHand_Player_Info::has_nick() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void ShowHand_Player_Info::set_has_nick() {
  _has_bits_[0] |= 0x00000001u;
}
void ShowHand_Player_Info::clear_has_nick() {
  _has_bits_[0] &= ~0x00000001u;
}
void ShowHand_Player_Info::clear_nick() {
  nick_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_nick();
}
const ::std::string& ShowHand_Player_Info::nick() const {
  // @@protoc_insertion_point(field_get:ShowHand_Player_Info.nick)
  return nick_.GetNoArena();
}
void ShowHand_Player_Info::set_nick(const ::std::string& value) {
  set_has_nick();
  nick_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ShowHand_Player_Info.nick)
}
#if LANG_CXX11
void ShowHand_Player_Info::set_nick(::std::string&& value) {
  set_has_nick();
  nick_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ShowHand_Player_Info.nick)
}
#endif
void ShowHand_Player_Info::set_nick(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_nick();
  nick_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ShowHand_Player_Info.nick)
}
void ShowHand_Player_Info::set_nick(const char* value, size_t size) {
  set_has_nick();
  nick_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ShowHand_Player_Info.nick)
}
::std::string* ShowHand_Player_Info::mutable_nick() {
  set_has_nick();
  // @@protoc_insertion_point(field_mutable:ShowHand_Player_Info.nick)
  return nick_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* ShowHand_Player_Info::release_nick() {
  // @@protoc_insertion_point(field_release:ShowHand_Player_Info.nick)
  clear_has_nick();
  return nick_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void ShowHand_Player_Info::set_allocated_nick(::std::string* nick) {
  if (nick != NULL) {
    set_has_nick();
  } else {
    clear_has_nick();
  }
  nick_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), nick);
  // @@protoc_insertion_point(field_set_allocated:ShowHand_Player_Info.nick)
}

// optional int32 icon = 6;
bool ShowHand_Player_Info::has_icon() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void ShowHand_Player_Info::set_has_icon() {
  _has_bits_[0] |= 0x00000010u;
}
void ShowHand_Player_Info::clear_has_icon() {
  _has_bits_[0] &= ~0x00000010u;
}
void ShowHand_Player_Info::clear_icon() {
  icon_ = 0;
  clear_has_icon();
}
::google::protobuf::int32 ShowHand_Player_Info::icon() const {
  // @@protoc_insertion_point(field_get:ShowHand_Player_Info.icon)
  return icon_;
}
void ShowHand_Player_Info::set_icon(::google::protobuf::int32 value) {
  set_has_icon();
  icon_ = value;
  // @@protoc_insertion_point(field_set:ShowHand_Player_Info.icon)
}

// optional int64 gold = 7;
bool ShowHand_Player_Info::has_gold() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void ShowHand_Player_Info::set_has_gold() {
  _has_bits_[0] |= 0x00000020u;
}
void ShowHand_Player_Info::clear_has_gold() {
  _has_bits_[0] &= ~0x00000020u;
}
void ShowHand_Player_Info::clear_gold() {
  gold_ = GOOGLE_LONGLONG(0);
  clear_has_gold();
}
::google::protobuf::int64 ShowHand_Player_Info::gold() const {
  // @@protoc_insertion_point(field_get:ShowHand_Player_Info.gold)
  return gold_;
}
void ShowHand_Player_Info::set_gold(::google::protobuf::int64 value) {
  set_has_gold();
  gold_ = value;
  // @@protoc_insertion_point(field_set:ShowHand_Player_Info.gold)
}

// optional int32 guid = 8;
bool ShowHand_Player_Info::has_guid() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void ShowHand_Player_Info::set_has_guid() {
  _has_bits_[0] |= 0x00000040u;
}
void ShowHand_Player_Info::clear_has_guid() {
  _has_bits_[0] &= ~0x00000040u;
}
void ShowHand_Player_Info::clear_guid() {
  guid_ = 0;
  clear_has_guid();
}
::google::protobuf::int32 ShowHand_Player_Info::guid() const {
  // @@protoc_insertion_point(field_get:ShowHand_Player_Info.guid)
  return guid_;
}
void ShowHand_Player_Info::set_guid(::google::protobuf::int32 value) {
  set_has_guid();
  guid_ = value;
  // @@protoc_insertion_point(field_set:ShowHand_Player_Info.guid)
}

// optional bool is_win = 9;
bool ShowHand_Player_Info::has_is_win() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
void ShowHand_Player_Info::set_has_is_win() {
  _has_bits_[0] |= 0x00000100u;
}
void ShowHand_Player_Info::clear_has_is_win() {
  _has_bits_[0] &= ~0x00000100u;
}
void ShowHand_Player_Info::clear_is_win() {
  is_win_ = false;
  clear_has_is_win();
}
bool ShowHand_Player_Info::is_win() const {
  // @@protoc_insertion_point(field_get:ShowHand_Player_Info.is_win)
  return is_win_;
}
void ShowHand_Player_Info::set_is_win(bool value) {
  set_has_is_win();
  is_win_ = value;
  // @@protoc_insertion_point(field_set:ShowHand_Player_Info.is_win)
}

// optional int32 win_money = 10;
bool ShowHand_Player_Info::has_win_money() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void ShowHand_Player_Info::set_has_win_money() {
  _has_bits_[0] |= 0x00000080u;
}
void ShowHand_Player_Info::clear_has_win_money() {
  _has_bits_[0] &= ~0x00000080u;
}
void ShowHand_Player_Info::clear_win_money() {
  win_money_ = 0;
  clear_has_win_money();
}
::google::protobuf::int32 ShowHand_Player_Info::win_money() const {
  // @@protoc_insertion_point(field_get:ShowHand_Player_Info.win_money)
  return win_money_;
}
void ShowHand_Player_Info::set_win_money(::google::protobuf::int32 value) {
  set_has_win_money();
  win_money_ = value;
  // @@protoc_insertion_point(field_set:ShowHand_Player_Info.win_money)
}

// optional int32 taxes = 11;
bool ShowHand_Player_Info::has_taxes() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
void ShowHand_Player_Info::set_has_taxes() {
  _has_bits_[0] |= 0x00000400u;
}
void ShowHand_Player_Info::clear_has_taxes() {
  _has_bits_[0] &= ~0x00000400u;
}
void ShowHand_Player_Info::clear_taxes() {
  taxes_ = 0;
  clear_has_taxes();
}
::google::protobuf::int32 ShowHand_Player_Info::taxes() const {
  // @@protoc_insertion_point(field_get:ShowHand_Player_Info.taxes)
  return taxes_;
}
void ShowHand_Player_Info::set_taxes(::google::protobuf::int32 value) {
  set_has_taxes();
  taxes_ = value;
  // @@protoc_insertion_point(field_set:ShowHand_Player_Info.taxes)
}

// optional bool is_give_up = 12;
bool ShowHand_Player_Info::has_is_give_up() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
void ShowHand_Player_Info::set_has_is_give_up() {
  _has_bits_[0] |= 0x00000200u;
}
void ShowHand_Player_Info::clear_has_is_give_up() {
  _has_bits_[0] &= ~0x00000200u;
}
void ShowHand_Player_Info::clear_is_give_up() {
  is_give_up_ = false;
  clear_has_is_give_up();
}
bool ShowHand_Player_Info::is_give_up() const {
  // @@protoc_insertion_point(field_get:ShowHand_Player_Info.is_give_up)
  return is_give_up_;
}
void ShowHand_Player_Info::set_is_give_up(bool value) {
  set_has_is_give_up();
  is_give_up_ = value;
  // @@protoc_insertion_point(field_set:ShowHand_Player_Info.is_give_up)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ShowHand_Reconnect_Data::kActLeftTimeFieldNumber;
const int ShowHand_Reconnect_Data::kVoteChairIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ShowHand_Reconnect_Data::ShowHand_Reconnect_Data()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_public_5fshowhand_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:ShowHand_Reconnect_Data)
}
ShowHand_Reconnect_Data::ShowHand_Reconnect_Data(const ShowHand_Reconnect_Data& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&act_left_time_, &from.act_left_time_,
    reinterpret_cast<char*>(&vote_chair_id_) -
    reinterpret_cast<char*>(&act_left_time_) + sizeof(vote_chair_id_));
  // @@protoc_insertion_point(copy_constructor:ShowHand_Reconnect_Data)
}

void ShowHand_Reconnect_Data::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&act_left_time_, 0, reinterpret_cast<char*>(&vote_chair_id_) -
    reinterpret_cast<char*>(&act_left_time_) + sizeof(vote_chair_id_));
}

ShowHand_Reconnect_Data::~ShowHand_Reconnect_Data() {
  // @@protoc_insertion_point(destructor:ShowHand_Reconnect_Data)
  SharedDtor();
}

void ShowHand_Reconnect_Data::SharedDtor() {
}

void ShowHand_Reconnect_Data::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ShowHand_Reconnect_Data::descriptor() {
  protobuf_public_5fshowhand_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_public_5fshowhand_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ShowHand_Reconnect_Data& ShowHand_Reconnect_Data::default_instance() {
  protobuf_public_5fshowhand_2eproto::InitDefaults();
  return *internal_default_instance();
}

ShowHand_Reconnect_Data* ShowHand_Reconnect_Data::New(::google::protobuf::Arena* arena) const {
  ShowHand_Reconnect_Data* n = new ShowHand_Reconnect_Data;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ShowHand_Reconnect_Data::Clear() {
// @@protoc_insertion_point(message_clear_start:ShowHand_Reconnect_Data)
  if (_has_bits_[0 / 32] & 3u) {
    ::memset(&act_left_time_, 0, reinterpret_cast<char*>(&vote_chair_id_) -
      reinterpret_cast<char*>(&act_left_time_) + sizeof(vote_chair_id_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool ShowHand_Reconnect_Data::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ShowHand_Reconnect_Data)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 act_left_time = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_act_left_time();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &act_left_time_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 vote_chair_id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_vote_chair_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &vote_chair_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ShowHand_Reconnect_Data)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ShowHand_Reconnect_Data)
  return false;
#undef DO_
}

void ShowHand_Reconnect_Data::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ShowHand_Reconnect_Data)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 act_left_time = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->act_left_time(), output);
  }

  // optional int32 vote_chair_id = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->vote_chair_id(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ShowHand_Reconnect_Data)
}

::google::protobuf::uint8* ShowHand_Reconnect_Data::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ShowHand_Reconnect_Data)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 act_left_time = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->act_left_time(), target);
  }

  // optional int32 vote_chair_id = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->vote_chair_id(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ShowHand_Reconnect_Data)
  return target;
}

size_t ShowHand_Reconnect_Data::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ShowHand_Reconnect_Data)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 3u) {
    // optional int32 act_left_time = 1;
    if (has_act_left_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->act_left_time());
    }

    // optional int32 vote_chair_id = 2;
    if (has_vote_chair_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->vote_chair_id());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ShowHand_Reconnect_Data::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ShowHand_Reconnect_Data)
  GOOGLE_DCHECK_NE(&from, this);
  const ShowHand_Reconnect_Data* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ShowHand_Reconnect_Data>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ShowHand_Reconnect_Data)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ShowHand_Reconnect_Data)
    MergeFrom(*source);
  }
}

void ShowHand_Reconnect_Data::MergeFrom(const ShowHand_Reconnect_Data& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ShowHand_Reconnect_Data)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      act_left_time_ = from.act_left_time_;
    }
    if (cached_has_bits & 0x00000002u) {
      vote_chair_id_ = from.vote_chair_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void ShowHand_Reconnect_Data::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ShowHand_Reconnect_Data)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ShowHand_Reconnect_Data::CopyFrom(const ShowHand_Reconnect_Data& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ShowHand_Reconnect_Data)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ShowHand_Reconnect_Data::IsInitialized() const {
  return true;
}

void ShowHand_Reconnect_Data::Swap(ShowHand_Reconnect_Data* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ShowHand_Reconnect_Data::InternalSwap(ShowHand_Reconnect_Data* other) {
  std::swap(act_left_time_, other->act_left_time_);
  std::swap(vote_chair_id_, other->vote_chair_id_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ShowHand_Reconnect_Data::GetMetadata() const {
  protobuf_public_5fshowhand_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_public_5fshowhand_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ShowHand_Reconnect_Data

// optional int32 act_left_time = 1;
bool ShowHand_Reconnect_Data::has_act_left_time() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void ShowHand_Reconnect_Data::set_has_act_left_time() {
  _has_bits_[0] |= 0x00000001u;
}
void ShowHand_Reconnect_Data::clear_has_act_left_time() {
  _has_bits_[0] &= ~0x00000001u;
}
void ShowHand_Reconnect_Data::clear_act_left_time() {
  act_left_time_ = 0;
  clear_has_act_left_time();
}
::google::protobuf::int32 ShowHand_Reconnect_Data::act_left_time() const {
  // @@protoc_insertion_point(field_get:ShowHand_Reconnect_Data.act_left_time)
  return act_left_time_;
}
void ShowHand_Reconnect_Data::set_act_left_time(::google::protobuf::int32 value) {
  set_has_act_left_time();
  act_left_time_ = value;
  // @@protoc_insertion_point(field_set:ShowHand_Reconnect_Data.act_left_time)
}

// optional int32 vote_chair_id = 2;
bool ShowHand_Reconnect_Data::has_vote_chair_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void ShowHand_Reconnect_Data::set_has_vote_chair_id() {
  _has_bits_[0] |= 0x00000002u;
}
void ShowHand_Reconnect_Data::clear_has_vote_chair_id() {
  _has_bits_[0] &= ~0x00000002u;
}
void ShowHand_Reconnect_Data::clear_vote_chair_id() {
  vote_chair_id_ = 0;
  clear_has_vote_chair_id();
}
::google::protobuf::int32 ShowHand_Reconnect_Data::vote_chair_id() const {
  // @@protoc_insertion_point(field_get:ShowHand_Reconnect_Data.vote_chair_id)
  return vote_chair_id_;
}
void ShowHand_Reconnect_Data::set_vote_chair_id(::google::protobuf::int32 value) {
  set_has_vote_chair_id();
  vote_chair_id_ = value;
  // @@protoc_insertion_point(field_set:ShowHand_Reconnect_Data.vote_chair_id)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SC_ShowHand_Desk_Enter::kPbPlayersFieldNumber;
const int SC_ShowHand_Desk_Enter::kStateFieldNumber;
const int SC_ShowHand_Desk_Enter::kZhuangFieldNumber;
const int SC_ShowHand_Desk_Enter::kSelfChairIdFieldNumber;
const int SC_ShowHand_Desk_Enter::kActTimeLimitFieldNumber;
const int SC_ShowHand_Desk_Enter::kIsReconnectFieldNumber;
const int SC_ShowHand_Desk_Enter::kBaseScoreFieldNumber;
const int SC_ShowHand_Desk_Enter::kMaxCallFieldNumber;
const int SC_ShowHand_Desk_Enter::kPbRecDataFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SC_ShowHand_Desk_Enter::SC_ShowHand_Desk_Enter()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_public_5fshowhand_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:SC_ShowHand_Desk_Enter)
}
SC_ShowHand_Desk_Enter::SC_ShowHand_Desk_Enter(const SC_ShowHand_Desk_Enter& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      pb_players_(from.pb_players_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_pb_rec_data()) {
    pb_rec_data_ = new ::ShowHand_Reconnect_Data(*from.pb_rec_data_);
  } else {
    pb_rec_data_ = NULL;
  }
  ::memcpy(&state_, &from.state_,
    reinterpret_cast<char*>(&max_call_) -
    reinterpret_cast<char*>(&state_) + sizeof(max_call_));
  // @@protoc_insertion_point(copy_constructor:SC_ShowHand_Desk_Enter)
}

void SC_ShowHand_Desk_Enter::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&pb_rec_data_, 0, reinterpret_cast<char*>(&max_call_) -
    reinterpret_cast<char*>(&pb_rec_data_) + sizeof(max_call_));
}

SC_ShowHand_Desk_Enter::~SC_ShowHand_Desk_Enter() {
  // @@protoc_insertion_point(destructor:SC_ShowHand_Desk_Enter)
  SharedDtor();
}

void SC_ShowHand_Desk_Enter::SharedDtor() {
  if (this != internal_default_instance()) {
    delete pb_rec_data_;
  }
}

void SC_ShowHand_Desk_Enter::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SC_ShowHand_Desk_Enter::descriptor() {
  protobuf_public_5fshowhand_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_public_5fshowhand_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const SC_ShowHand_Desk_Enter& SC_ShowHand_Desk_Enter::default_instance() {
  protobuf_public_5fshowhand_2eproto::InitDefaults();
  return *internal_default_instance();
}

SC_ShowHand_Desk_Enter* SC_ShowHand_Desk_Enter::New(::google::protobuf::Arena* arena) const {
  SC_ShowHand_Desk_Enter* n = new SC_ShowHand_Desk_Enter;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SC_ShowHand_Desk_Enter::Clear() {
// @@protoc_insertion_point(message_clear_start:SC_ShowHand_Desk_Enter)
  pb_players_.Clear();
  if (has_pb_rec_data()) {
    GOOGLE_DCHECK(pb_rec_data_ != NULL);
    pb_rec_data_->::ShowHand_Reconnect_Data::Clear();
  }
  if (_has_bits_[0 / 32] & 254u) {
    ::memset(&state_, 0, reinterpret_cast<char*>(&max_call_) -
      reinterpret_cast<char*>(&state_) + sizeof(max_call_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool SC_ShowHand_Desk_Enter::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:SC_ShowHand_Desk_Enter)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .ShowHand_Player_Info pb_players = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_pb_players()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 state = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_state();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &state_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 zhuang = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {
          set_has_zhuang();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &zhuang_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 self_chair_id = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u)) {
          set_has_self_chair_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &self_chair_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 act_time_limit = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u)) {
          set_has_act_time_limit();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &act_time_limit_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool is_reconnect = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u)) {
          set_has_is_reconnect();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_reconnect_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 base_score = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u)) {
          set_has_base_score();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &base_score_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 max_call = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(64u)) {
          set_has_max_call();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &max_call_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .ShowHand_Reconnect_Data pb_rec_data = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(74u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_pb_rec_data()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:SC_ShowHand_Desk_Enter)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:SC_ShowHand_Desk_Enter)
  return false;
#undef DO_
}

void SC_ShowHand_Desk_Enter::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:SC_ShowHand_Desk_Enter)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .ShowHand_Player_Info pb_players = 1;
  for (unsigned int i = 0, n = this->pb_players_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->pb_players(i), output);
  }

  cached_has_bits = _has_bits_[0];
  // optional int32 state = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->state(), output);
  }

  // optional int32 zhuang = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->zhuang(), output);
  }

  // optional int32 self_chair_id = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->self_chair_id(), output);
  }

  // optional int32 act_time_limit = 5;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->act_time_limit(), output);
  }

  // optional bool is_reconnect = 6;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(6, this->is_reconnect(), output);
  }

  // optional int32 base_score = 7;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->base_score(), output);
  }

  // optional int32 max_call = 8;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->max_call(), output);
  }

  // optional .ShowHand_Reconnect_Data pb_rec_data = 9;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      9, *this->pb_rec_data_, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:SC_ShowHand_Desk_Enter)
}

::google::protobuf::uint8* SC_ShowHand_Desk_Enter::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:SC_ShowHand_Desk_Enter)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .ShowHand_Player_Info pb_players = 1;
  for (unsigned int i = 0, n = this->pb_players_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, this->pb_players(i), deterministic, target);
  }

  cached_has_bits = _has_bits_[0];
  // optional int32 state = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->state(), target);
  }

  // optional int32 zhuang = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->zhuang(), target);
  }

  // optional int32 self_chair_id = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->self_chair_id(), target);
  }

  // optional int32 act_time_limit = 5;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->act_time_limit(), target);
  }

  // optional bool is_reconnect = 6;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(6, this->is_reconnect(), target);
  }

  // optional int32 base_score = 7;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->base_score(), target);
  }

  // optional int32 max_call = 8;
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->max_call(), target);
  }

  // optional .ShowHand_Reconnect_Data pb_rec_data = 9;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        9, *this->pb_rec_data_, deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SC_ShowHand_Desk_Enter)
  return target;
}

size_t SC_ShowHand_Desk_Enter::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SC_ShowHand_Desk_Enter)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // repeated .ShowHand_Player_Info pb_players = 1;
  {
    unsigned int count = this->pb_players_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->pb_players(i));
    }
  }

  if (_has_bits_[0 / 32] & 255u) {
    // optional .ShowHand_Reconnect_Data pb_rec_data = 9;
    if (has_pb_rec_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->pb_rec_data_);
    }

    // optional int32 state = 2;
    if (has_state()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->state());
    }

    // optional int32 zhuang = 3;
    if (has_zhuang()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->zhuang());
    }

    // optional int32 self_chair_id = 4;
    if (has_self_chair_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->self_chair_id());
    }

    // optional int32 act_time_limit = 5;
    if (has_act_time_limit()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->act_time_limit());
    }

    // optional bool is_reconnect = 6;
    if (has_is_reconnect()) {
      total_size += 1 + 1;
    }

    // optional int32 base_score = 7;
    if (has_base_score()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->base_score());
    }

    // optional int32 max_call = 8;
    if (has_max_call()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->max_call());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SC_ShowHand_Desk_Enter::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:SC_ShowHand_Desk_Enter)
  GOOGLE_DCHECK_NE(&from, this);
  const SC_ShowHand_Desk_Enter* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SC_ShowHand_Desk_Enter>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:SC_ShowHand_Desk_Enter)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:SC_ShowHand_Desk_Enter)
    MergeFrom(*source);
  }
}

void SC_ShowHand_Desk_Enter::MergeFrom(const SC_ShowHand_Desk_Enter& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:SC_ShowHand_Desk_Enter)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  pb_players_.MergeFrom(from.pb_players_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_pb_rec_data()->::ShowHand_Reconnect_Data::MergeFrom(from.pb_rec_data());
    }
    if (cached_has_bits & 0x00000002u) {
      state_ = from.state_;
    }
    if (cached_has_bits & 0x00000004u) {
      zhuang_ = from.zhuang_;
    }
    if (cached_has_bits & 0x00000008u) {
      self_chair_id_ = from.self_chair_id_;
    }
    if (cached_has_bits & 0x00000010u) {
      act_time_limit_ = from.act_time_limit_;
    }
    if (cached_has_bits & 0x00000020u) {
      is_reconnect_ = from.is_reconnect_;
    }
    if (cached_has_bits & 0x00000040u) {
      base_score_ = from.base_score_;
    }
    if (cached_has_bits & 0x00000080u) {
      max_call_ = from.max_call_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void SC_ShowHand_Desk_Enter::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:SC_ShowHand_Desk_Enter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SC_ShowHand_Desk_Enter::CopyFrom(const SC_ShowHand_Desk_Enter& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SC_ShowHand_Desk_Enter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SC_ShowHand_Desk_Enter::IsInitialized() const {
  return true;
}

void SC_ShowHand_Desk_Enter::Swap(SC_ShowHand_Desk_Enter* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SC_ShowHand_Desk_Enter::InternalSwap(SC_ShowHand_Desk_Enter* other) {
  pb_players_.InternalSwap(&other->pb_players_);
  std::swap(pb_rec_data_, other->pb_rec_data_);
  std::swap(state_, other->state_);
  std::swap(zhuang_, other->zhuang_);
  std::swap(self_chair_id_, other->self_chair_id_);
  std::swap(act_time_limit_, other->act_time_limit_);
  std::swap(is_reconnect_, other->is_reconnect_);
  std::swap(base_score_, other->base_score_);
  std::swap(max_call_, other->max_call_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SC_ShowHand_Desk_Enter::GetMetadata() const {
  protobuf_public_5fshowhand_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_public_5fshowhand_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SC_ShowHand_Desk_Enter

// repeated .ShowHand_Player_Info pb_players = 1;
int SC_ShowHand_Desk_Enter::pb_players_size() const {
  return pb_players_.size();
}
void SC_ShowHand_Desk_Enter::clear_pb_players() {
  pb_players_.Clear();
}
const ::ShowHand_Player_Info& SC_ShowHand_Desk_Enter::pb_players(int index) const {
  // @@protoc_insertion_point(field_get:SC_ShowHand_Desk_Enter.pb_players)
  return pb_players_.Get(index);
}
::ShowHand_Player_Info* SC_ShowHand_Desk_Enter::mutable_pb_players(int index) {
  // @@protoc_insertion_point(field_mutable:SC_ShowHand_Desk_Enter.pb_players)
  return pb_players_.Mutable(index);
}
::ShowHand_Player_Info* SC_ShowHand_Desk_Enter::add_pb_players() {
  // @@protoc_insertion_point(field_add:SC_ShowHand_Desk_Enter.pb_players)
  return pb_players_.Add();
}
::google::protobuf::RepeatedPtrField< ::ShowHand_Player_Info >*
SC_ShowHand_Desk_Enter::mutable_pb_players() {
  // @@protoc_insertion_point(field_mutable_list:SC_ShowHand_Desk_Enter.pb_players)
  return &pb_players_;
}
const ::google::protobuf::RepeatedPtrField< ::ShowHand_Player_Info >&
SC_ShowHand_Desk_Enter::pb_players() const {
  // @@protoc_insertion_point(field_list:SC_ShowHand_Desk_Enter.pb_players)
  return pb_players_;
}

// optional int32 state = 2;
bool SC_ShowHand_Desk_Enter::has_state() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void SC_ShowHand_Desk_Enter::set_has_state() {
  _has_bits_[0] |= 0x00000002u;
}
void SC_ShowHand_Desk_Enter::clear_has_state() {
  _has_bits_[0] &= ~0x00000002u;
}
void SC_ShowHand_Desk_Enter::clear_state() {
  state_ = 0;
  clear_has_state();
}
::google::protobuf::int32 SC_ShowHand_Desk_Enter::state() const {
  // @@protoc_insertion_point(field_get:SC_ShowHand_Desk_Enter.state)
  return state_;
}
void SC_ShowHand_Desk_Enter::set_state(::google::protobuf::int32 value) {
  set_has_state();
  state_ = value;
  // @@protoc_insertion_point(field_set:SC_ShowHand_Desk_Enter.state)
}

// optional int32 zhuang = 3;
bool SC_ShowHand_Desk_Enter::has_zhuang() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void SC_ShowHand_Desk_Enter::set_has_zhuang() {
  _has_bits_[0] |= 0x00000004u;
}
void SC_ShowHand_Desk_Enter::clear_has_zhuang() {
  _has_bits_[0] &= ~0x00000004u;
}
void SC_ShowHand_Desk_Enter::clear_zhuang() {
  zhuang_ = 0;
  clear_has_zhuang();
}
::google::protobuf::int32 SC_ShowHand_Desk_Enter::zhuang() const {
  // @@protoc_insertion_point(field_get:SC_ShowHand_Desk_Enter.zhuang)
  return zhuang_;
}
void SC_ShowHand_Desk_Enter::set_zhuang(::google::protobuf::int32 value) {
  set_has_zhuang();
  zhuang_ = value;
  // @@protoc_insertion_point(field_set:SC_ShowHand_Desk_Enter.zhuang)
}

// optional int32 self_chair_id = 4;
bool SC_ShowHand_Desk_Enter::has_self_chair_id() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void SC_ShowHand_Desk_Enter::set_has_self_chair_id() {
  _has_bits_[0] |= 0x00000008u;
}
void SC_ShowHand_Desk_Enter::clear_has_self_chair_id() {
  _has_bits_[0] &= ~0x00000008u;
}
void SC_ShowHand_Desk_Enter::clear_self_chair_id() {
  self_chair_id_ = 0;
  clear_has_self_chair_id();
}
::google::protobuf::int32 SC_ShowHand_Desk_Enter::self_chair_id() const {
  // @@protoc_insertion_point(field_get:SC_ShowHand_Desk_Enter.self_chair_id)
  return self_chair_id_;
}
void SC_ShowHand_Desk_Enter::set_self_chair_id(::google::protobuf::int32 value) {
  set_has_self_chair_id();
  self_chair_id_ = value;
  // @@protoc_insertion_point(field_set:SC_ShowHand_Desk_Enter.self_chair_id)
}

// optional int32 act_time_limit = 5;
bool SC_ShowHand_Desk_Enter::has_act_time_limit() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void SC_ShowHand_Desk_Enter::set_has_act_time_limit() {
  _has_bits_[0] |= 0x00000010u;
}
void SC_ShowHand_Desk_Enter::clear_has_act_time_limit() {
  _has_bits_[0] &= ~0x00000010u;
}
void SC_ShowHand_Desk_Enter::clear_act_time_limit() {
  act_time_limit_ = 0;
  clear_has_act_time_limit();
}
::google::protobuf::int32 SC_ShowHand_Desk_Enter::act_time_limit() const {
  // @@protoc_insertion_point(field_get:SC_ShowHand_Desk_Enter.act_time_limit)
  return act_time_limit_;
}
void SC_ShowHand_Desk_Enter::set_act_time_limit(::google::protobuf::int32 value) {
  set_has_act_time_limit();
  act_time_limit_ = value;
  // @@protoc_insertion_point(field_set:SC_ShowHand_Desk_Enter.act_time_limit)
}

// optional bool is_reconnect = 6;
bool SC_ShowHand_Desk_Enter::has_is_reconnect() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void SC_ShowHand_Desk_Enter::set_has_is_reconnect() {
  _has_bits_[0] |= 0x00000020u;
}
void SC_ShowHand_Desk_Enter::clear_has_is_reconnect() {
  _has_bits_[0] &= ~0x00000020u;
}
void SC_ShowHand_Desk_Enter::clear_is_reconnect() {
  is_reconnect_ = false;
  clear_has_is_reconnect();
}
bool SC_ShowHand_Desk_Enter::is_reconnect() const {
  // @@protoc_insertion_point(field_get:SC_ShowHand_Desk_Enter.is_reconnect)
  return is_reconnect_;
}
void SC_ShowHand_Desk_Enter::set_is_reconnect(bool value) {
  set_has_is_reconnect();
  is_reconnect_ = value;
  // @@protoc_insertion_point(field_set:SC_ShowHand_Desk_Enter.is_reconnect)
}

// optional int32 base_score = 7;
bool SC_ShowHand_Desk_Enter::has_base_score() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void SC_ShowHand_Desk_Enter::set_has_base_score() {
  _has_bits_[0] |= 0x00000040u;
}
void SC_ShowHand_Desk_Enter::clear_has_base_score() {
  _has_bits_[0] &= ~0x00000040u;
}
void SC_ShowHand_Desk_Enter::clear_base_score() {
  base_score_ = 0;
  clear_has_base_score();
}
::google::protobuf::int32 SC_ShowHand_Desk_Enter::base_score() const {
  // @@protoc_insertion_point(field_get:SC_ShowHand_Desk_Enter.base_score)
  return base_score_;
}
void SC_ShowHand_Desk_Enter::set_base_score(::google::protobuf::int32 value) {
  set_has_base_score();
  base_score_ = value;
  // @@protoc_insertion_point(field_set:SC_ShowHand_Desk_Enter.base_score)
}

// optional int32 max_call = 8;
bool SC_ShowHand_Desk_Enter::has_max_call() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void SC_ShowHand_Desk_Enter::set_has_max_call() {
  _has_bits_[0] |= 0x00000080u;
}
void SC_ShowHand_Desk_Enter::clear_has_max_call() {
  _has_bits_[0] &= ~0x00000080u;
}
void SC_ShowHand_Desk_Enter::clear_max_call() {
  max_call_ = 0;
  clear_has_max_call();
}
::google::protobuf::int32 SC_ShowHand_Desk_Enter::max_call() const {
  // @@protoc_insertion_point(field_get:SC_ShowHand_Desk_Enter.max_call)
  return max_call_;
}
void SC_ShowHand_Desk_Enter::set_max_call(::google::protobuf::int32 value) {
  set_has_max_call();
  max_call_ = value;
  // @@protoc_insertion_point(field_set:SC_ShowHand_Desk_Enter.max_call)
}

// optional .ShowHand_Reconnect_Data pb_rec_data = 9;
bool SC_ShowHand_Desk_Enter::has_pb_rec_data() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void SC_ShowHand_Desk_Enter::set_has_pb_rec_data() {
  _has_bits_[0] |= 0x00000001u;
}
void SC_ShowHand_Desk_Enter::clear_has_pb_rec_data() {
  _has_bits_[0] &= ~0x00000001u;
}
void SC_ShowHand_Desk_Enter::clear_pb_rec_data() {
  if (pb_rec_data_ != NULL) pb_rec_data_->::ShowHand_Reconnect_Data::Clear();
  clear_has_pb_rec_data();
}
const ::ShowHand_Reconnect_Data& SC_ShowHand_Desk_Enter::pb_rec_data() const {
  // @@protoc_insertion_point(field_get:SC_ShowHand_Desk_Enter.pb_rec_data)
  return pb_rec_data_ != NULL ? *pb_rec_data_
                         : *::ShowHand_Reconnect_Data::internal_default_instance();
}
::ShowHand_Reconnect_Data* SC_ShowHand_Desk_Enter::mutable_pb_rec_data() {
  set_has_pb_rec_data();
  if (pb_rec_data_ == NULL) {
    pb_rec_data_ = new ::ShowHand_Reconnect_Data;
  }
  // @@protoc_insertion_point(field_mutable:SC_ShowHand_Desk_Enter.pb_rec_data)
  return pb_rec_data_;
}
::ShowHand_Reconnect_Data* SC_ShowHand_Desk_Enter::release_pb_rec_data() {
  // @@protoc_insertion_point(field_release:SC_ShowHand_Desk_Enter.pb_rec_data)
  clear_has_pb_rec_data();
  ::ShowHand_Reconnect_Data* temp = pb_rec_data_;
  pb_rec_data_ = NULL;
  return temp;
}
void SC_ShowHand_Desk_Enter::set_allocated_pb_rec_data(::ShowHand_Reconnect_Data* pb_rec_data) {
  delete pb_rec_data_;
  pb_rec_data_ = pb_rec_data;
  if (pb_rec_data) {
    set_has_pb_rec_data();
  } else {
    clear_has_pb_rec_data();
  }
  // @@protoc_insertion_point(field_set_allocated:SC_ShowHand_Desk_Enter.pb_rec_data)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SC_ShowHand_Desk_State::kStateFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SC_ShowHand_Desk_State::SC_ShowHand_Desk_State()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_public_5fshowhand_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:SC_ShowHand_Desk_State)
}
SC_ShowHand_Desk_State::SC_ShowHand_Desk_State(const SC_ShowHand_Desk_State& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  state_ = from.state_;
  // @@protoc_insertion_point(copy_constructor:SC_ShowHand_Desk_State)
}

void SC_ShowHand_Desk_State::SharedCtor() {
  _cached_size_ = 0;
  state_ = 0;
}

SC_ShowHand_Desk_State::~SC_ShowHand_Desk_State() {
  // @@protoc_insertion_point(destructor:SC_ShowHand_Desk_State)
  SharedDtor();
}

void SC_ShowHand_Desk_State::SharedDtor() {
}

void SC_ShowHand_Desk_State::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SC_ShowHand_Desk_State::descriptor() {
  protobuf_public_5fshowhand_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_public_5fshowhand_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const SC_ShowHand_Desk_State& SC_ShowHand_Desk_State::default_instance() {
  protobuf_public_5fshowhand_2eproto::InitDefaults();
  return *internal_default_instance();
}

SC_ShowHand_Desk_State* SC_ShowHand_Desk_State::New(::google::protobuf::Arena* arena) const {
  SC_ShowHand_Desk_State* n = new SC_ShowHand_Desk_State;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SC_ShowHand_Desk_State::Clear() {
// @@protoc_insertion_point(message_clear_start:SC_ShowHand_Desk_State)
  state_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool SC_ShowHand_Desk_State::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:SC_ShowHand_Desk_State)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 state = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_state();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &state_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:SC_ShowHand_Desk_State)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:SC_ShowHand_Desk_State)
  return false;
#undef DO_
}

void SC_ShowHand_Desk_State::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:SC_ShowHand_Desk_State)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 state = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->state(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:SC_ShowHand_Desk_State)
}

::google::protobuf::uint8* SC_ShowHand_Desk_State::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:SC_ShowHand_Desk_State)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 state = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->state(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SC_ShowHand_Desk_State)
  return target;
}

size_t SC_ShowHand_Desk_State::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SC_ShowHand_Desk_State)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // optional int32 state = 1;
  if (has_state()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->state());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SC_ShowHand_Desk_State::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:SC_ShowHand_Desk_State)
  GOOGLE_DCHECK_NE(&from, this);
  const SC_ShowHand_Desk_State* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SC_ShowHand_Desk_State>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:SC_ShowHand_Desk_State)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:SC_ShowHand_Desk_State)
    MergeFrom(*source);
  }
}

void SC_ShowHand_Desk_State::MergeFrom(const SC_ShowHand_Desk_State& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:SC_ShowHand_Desk_State)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_state()) {
    set_state(from.state());
  }
}

void SC_ShowHand_Desk_State::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:SC_ShowHand_Desk_State)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SC_ShowHand_Desk_State::CopyFrom(const SC_ShowHand_Desk_State& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SC_ShowHand_Desk_State)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SC_ShowHand_Desk_State::IsInitialized() const {
  return true;
}

void SC_ShowHand_Desk_State::Swap(SC_ShowHand_Desk_State* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SC_ShowHand_Desk_State::InternalSwap(SC_ShowHand_Desk_State* other) {
  std::swap(state_, other->state_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SC_ShowHand_Desk_State::GetMetadata() const {
  protobuf_public_5fshowhand_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_public_5fshowhand_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SC_ShowHand_Desk_State

// optional int32 state = 1;
bool SC_ShowHand_Desk_State::has_state() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void SC_ShowHand_Desk_State::set_has_state() {
  _has_bits_[0] |= 0x00000001u;
}
void SC_ShowHand_Desk_State::clear_has_state() {
  _has_bits_[0] &= ~0x00000001u;
}
void SC_ShowHand_Desk_State::clear_state() {
  state_ = 0;
  clear_has_state();
}
::google::protobuf::int32 SC_ShowHand_Desk_State::state() const {
  // @@protoc_insertion_point(field_get:SC_ShowHand_Desk_State.state)
  return state_;
}
void SC_ShowHand_Desk_State::set_state(::google::protobuf::int32 value) {
  set_has_state();
  state_ = value;
  // @@protoc_insertion_point(field_set:SC_ShowHand_Desk_State.state)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SC_ShowHand_Game_Finish::kPbPlayersFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SC_ShowHand_Game_Finish::SC_ShowHand_Game_Finish()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_public_5fshowhand_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:SC_ShowHand_Game_Finish)
}
SC_ShowHand_Game_Finish::SC_ShowHand_Game_Finish(const SC_ShowHand_Game_Finish& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      pb_players_(from.pb_players_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:SC_ShowHand_Game_Finish)
}

void SC_ShowHand_Game_Finish::SharedCtor() {
  _cached_size_ = 0;
}

SC_ShowHand_Game_Finish::~SC_ShowHand_Game_Finish() {
  // @@protoc_insertion_point(destructor:SC_ShowHand_Game_Finish)
  SharedDtor();
}

void SC_ShowHand_Game_Finish::SharedDtor() {
}

void SC_ShowHand_Game_Finish::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SC_ShowHand_Game_Finish::descriptor() {
  protobuf_public_5fshowhand_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_public_5fshowhand_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const SC_ShowHand_Game_Finish& SC_ShowHand_Game_Finish::default_instance() {
  protobuf_public_5fshowhand_2eproto::InitDefaults();
  return *internal_default_instance();
}

SC_ShowHand_Game_Finish* SC_ShowHand_Game_Finish::New(::google::protobuf::Arena* arena) const {
  SC_ShowHand_Game_Finish* n = new SC_ShowHand_Game_Finish;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SC_ShowHand_Game_Finish::Clear() {
// @@protoc_insertion_point(message_clear_start:SC_ShowHand_Game_Finish)
  pb_players_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool SC_ShowHand_Game_Finish::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:SC_ShowHand_Game_Finish)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .ShowHand_Player_Info pb_players = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_pb_players()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:SC_ShowHand_Game_Finish)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:SC_ShowHand_Game_Finish)
  return false;
#undef DO_
}

void SC_ShowHand_Game_Finish::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:SC_ShowHand_Game_Finish)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .ShowHand_Player_Info pb_players = 1;
  for (unsigned int i = 0, n = this->pb_players_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->pb_players(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:SC_ShowHand_Game_Finish)
}

::google::protobuf::uint8* SC_ShowHand_Game_Finish::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:SC_ShowHand_Game_Finish)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .ShowHand_Player_Info pb_players = 1;
  for (unsigned int i = 0, n = this->pb_players_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, this->pb_players(i), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SC_ShowHand_Game_Finish)
  return target;
}

size_t SC_ShowHand_Game_Finish::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SC_ShowHand_Game_Finish)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // repeated .ShowHand_Player_Info pb_players = 1;
  {
    unsigned int count = this->pb_players_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->pb_players(i));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SC_ShowHand_Game_Finish::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:SC_ShowHand_Game_Finish)
  GOOGLE_DCHECK_NE(&from, this);
  const SC_ShowHand_Game_Finish* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SC_ShowHand_Game_Finish>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:SC_ShowHand_Game_Finish)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:SC_ShowHand_Game_Finish)
    MergeFrom(*source);
  }
}

void SC_ShowHand_Game_Finish::MergeFrom(const SC_ShowHand_Game_Finish& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:SC_ShowHand_Game_Finish)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  pb_players_.MergeFrom(from.pb_players_);
}

void SC_ShowHand_Game_Finish::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:SC_ShowHand_Game_Finish)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SC_ShowHand_Game_Finish::CopyFrom(const SC_ShowHand_Game_Finish& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SC_ShowHand_Game_Finish)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SC_ShowHand_Game_Finish::IsInitialized() const {
  return true;
}

void SC_ShowHand_Game_Finish::Swap(SC_ShowHand_Game_Finish* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SC_ShowHand_Game_Finish::InternalSwap(SC_ShowHand_Game_Finish* other) {
  pb_players_.InternalSwap(&other->pb_players_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SC_ShowHand_Game_Finish::GetMetadata() const {
  protobuf_public_5fshowhand_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_public_5fshowhand_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SC_ShowHand_Game_Finish

// repeated .ShowHand_Player_Info pb_players = 1;
int SC_ShowHand_Game_Finish::pb_players_size() const {
  return pb_players_.size();
}
void SC_ShowHand_Game_Finish::clear_pb_players() {
  pb_players_.Clear();
}
const ::ShowHand_Player_Info& SC_ShowHand_Game_Finish::pb_players(int index) const {
  // @@protoc_insertion_point(field_get:SC_ShowHand_Game_Finish.pb_players)
  return pb_players_.Get(index);
}
::ShowHand_Player_Info* SC_ShowHand_Game_Finish::mutable_pb_players(int index) {
  // @@protoc_insertion_point(field_mutable:SC_ShowHand_Game_Finish.pb_players)
  return pb_players_.Mutable(index);
}
::ShowHand_Player_Info* SC_ShowHand_Game_Finish::add_pb_players() {
  // @@protoc_insertion_point(field_add:SC_ShowHand_Game_Finish.pb_players)
  return pb_players_.Add();
}
::google::protobuf::RepeatedPtrField< ::ShowHand_Player_Info >*
SC_ShowHand_Game_Finish::mutable_pb_players() {
  // @@protoc_insertion_point(field_mutable_list:SC_ShowHand_Game_Finish.pb_players)
  return &pb_players_;
}
const ::google::protobuf::RepeatedPtrField< ::ShowHand_Player_Info >&
SC_ShowHand_Game_Finish::pb_players() const {
  // @@protoc_insertion_point(field_list:SC_ShowHand_Game_Finish.pb_players)
  return pb_players_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SC_ShowHand_Next_Round::kPbPlayersFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SC_ShowHand_Next_Round::SC_ShowHand_Next_Round()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_public_5fshowhand_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:SC_ShowHand_Next_Round)
}
SC_ShowHand_Next_Round::SC_ShowHand_Next_Round(const SC_ShowHand_Next_Round& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      pb_players_(from.pb_players_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:SC_ShowHand_Next_Round)
}

void SC_ShowHand_Next_Round::SharedCtor() {
  _cached_size_ = 0;
}

SC_ShowHand_Next_Round::~SC_ShowHand_Next_Round() {
  // @@protoc_insertion_point(destructor:SC_ShowHand_Next_Round)
  SharedDtor();
}

void SC_ShowHand_Next_Round::SharedDtor() {
}

void SC_ShowHand_Next_Round::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SC_ShowHand_Next_Round::descriptor() {
  protobuf_public_5fshowhand_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_public_5fshowhand_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const SC_ShowHand_Next_Round& SC_ShowHand_Next_Round::default_instance() {
  protobuf_public_5fshowhand_2eproto::InitDefaults();
  return *internal_default_instance();
}

SC_ShowHand_Next_Round* SC_ShowHand_Next_Round::New(::google::protobuf::Arena* arena) const {
  SC_ShowHand_Next_Round* n = new SC_ShowHand_Next_Round;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SC_ShowHand_Next_Round::Clear() {
// @@protoc_insertion_point(message_clear_start:SC_ShowHand_Next_Round)
  pb_players_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool SC_ShowHand_Next_Round::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:SC_ShowHand_Next_Round)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .ShowHand_Player_Info pb_players = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_pb_players()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:SC_ShowHand_Next_Round)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:SC_ShowHand_Next_Round)
  return false;
#undef DO_
}

void SC_ShowHand_Next_Round::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:SC_ShowHand_Next_Round)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .ShowHand_Player_Info pb_players = 1;
  for (unsigned int i = 0, n = this->pb_players_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->pb_players(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:SC_ShowHand_Next_Round)
}

::google::protobuf::uint8* SC_ShowHand_Next_Round::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:SC_ShowHand_Next_Round)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .ShowHand_Player_Info pb_players = 1;
  for (unsigned int i = 0, n = this->pb_players_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, this->pb_players(i), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SC_ShowHand_Next_Round)
  return target;
}

size_t SC_ShowHand_Next_Round::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SC_ShowHand_Next_Round)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // repeated .ShowHand_Player_Info pb_players = 1;
  {
    unsigned int count = this->pb_players_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->pb_players(i));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SC_ShowHand_Next_Round::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:SC_ShowHand_Next_Round)
  GOOGLE_DCHECK_NE(&from, this);
  const SC_ShowHand_Next_Round* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SC_ShowHand_Next_Round>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:SC_ShowHand_Next_Round)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:SC_ShowHand_Next_Round)
    MergeFrom(*source);
  }
}

void SC_ShowHand_Next_Round::MergeFrom(const SC_ShowHand_Next_Round& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:SC_ShowHand_Next_Round)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  pb_players_.MergeFrom(from.pb_players_);
}

void SC_ShowHand_Next_Round::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:SC_ShowHand_Next_Round)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SC_ShowHand_Next_Round::CopyFrom(const SC_ShowHand_Next_Round& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SC_ShowHand_Next_Round)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SC_ShowHand_Next_Round::IsInitialized() const {
  return true;
}

void SC_ShowHand_Next_Round::Swap(SC_ShowHand_Next_Round* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SC_ShowHand_Next_Round::InternalSwap(SC_ShowHand_Next_Round* other) {
  pb_players_.InternalSwap(&other->pb_players_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SC_ShowHand_Next_Round::GetMetadata() const {
  protobuf_public_5fshowhand_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_public_5fshowhand_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SC_ShowHand_Next_Round

// repeated .ShowHand_Player_Info pb_players = 1;
int SC_ShowHand_Next_Round::pb_players_size() const {
  return pb_players_.size();
}
void SC_ShowHand_Next_Round::clear_pb_players() {
  pb_players_.Clear();
}
const ::ShowHand_Player_Info& SC_ShowHand_Next_Round::pb_players(int index) const {
  // @@protoc_insertion_point(field_get:SC_ShowHand_Next_Round.pb_players)
  return pb_players_.Get(index);
}
::ShowHand_Player_Info* SC_ShowHand_Next_Round::mutable_pb_players(int index) {
  // @@protoc_insertion_point(field_mutable:SC_ShowHand_Next_Round.pb_players)
  return pb_players_.Mutable(index);
}
::ShowHand_Player_Info* SC_ShowHand_Next_Round::add_pb_players() {
  // @@protoc_insertion_point(field_add:SC_ShowHand_Next_Round.pb_players)
  return pb_players_.Add();
}
::google::protobuf::RepeatedPtrField< ::ShowHand_Player_Info >*
SC_ShowHand_Next_Round::mutable_pb_players() {
  // @@protoc_insertion_point(field_mutable_list:SC_ShowHand_Next_Round.pb_players)
  return &pb_players_;
}
const ::google::protobuf::RepeatedPtrField< ::ShowHand_Player_Info >&
SC_ShowHand_Next_Round::pb_players() const {
  // @@protoc_insertion_point(field_list:SC_ShowHand_Next_Round.pb_players)
  return pb_players_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SC_ShowHandAddScore::kTargetFieldNumber;
const int SC_ShowHandAddScore::kChairIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SC_ShowHandAddScore::SC_ShowHandAddScore()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_public_5fshowhand_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:SC_ShowHandAddScore)
}
SC_ShowHandAddScore::SC_ShowHandAddScore(const SC_ShowHandAddScore& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&target_, &from.target_,
    reinterpret_cast<char*>(&chair_id_) -
    reinterpret_cast<char*>(&target_) + sizeof(chair_id_));
  // @@protoc_insertion_point(copy_constructor:SC_ShowHandAddScore)
}

void SC_ShowHandAddScore::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&target_, 0, reinterpret_cast<char*>(&chair_id_) -
    reinterpret_cast<char*>(&target_) + sizeof(chair_id_));
}

SC_ShowHandAddScore::~SC_ShowHandAddScore() {
  // @@protoc_insertion_point(destructor:SC_ShowHandAddScore)
  SharedDtor();
}

void SC_ShowHandAddScore::SharedDtor() {
}

void SC_ShowHandAddScore::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SC_ShowHandAddScore::descriptor() {
  protobuf_public_5fshowhand_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_public_5fshowhand_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const SC_ShowHandAddScore& SC_ShowHandAddScore::default_instance() {
  protobuf_public_5fshowhand_2eproto::InitDefaults();
  return *internal_default_instance();
}

SC_ShowHandAddScore* SC_ShowHandAddScore::New(::google::protobuf::Arena* arena) const {
  SC_ShowHandAddScore* n = new SC_ShowHandAddScore;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SC_ShowHandAddScore::Clear() {
// @@protoc_insertion_point(message_clear_start:SC_ShowHandAddScore)
  if (_has_bits_[0 / 32] & 3u) {
    ::memset(&target_, 0, reinterpret_cast<char*>(&chair_id_) -
      reinterpret_cast<char*>(&target_) + sizeof(chair_id_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool SC_ShowHandAddScore::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:SC_ShowHandAddScore)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 target = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_target();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &target_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 chair_id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_chair_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &chair_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:SC_ShowHandAddScore)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:SC_ShowHandAddScore)
  return false;
#undef DO_
}

void SC_ShowHandAddScore::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:SC_ShowHandAddScore)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 target = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->target(), output);
  }

  // optional int32 chair_id = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->chair_id(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:SC_ShowHandAddScore)
}

::google::protobuf::uint8* SC_ShowHandAddScore::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:SC_ShowHandAddScore)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 target = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->target(), target);
  }

  // optional int32 chair_id = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->chair_id(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SC_ShowHandAddScore)
  return target;
}

size_t SC_ShowHandAddScore::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SC_ShowHandAddScore)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 3u) {
    // optional int32 target = 1;
    if (has_target()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->target());
    }

    // optional int32 chair_id = 2;
    if (has_chair_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->chair_id());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SC_ShowHandAddScore::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:SC_ShowHandAddScore)
  GOOGLE_DCHECK_NE(&from, this);
  const SC_ShowHandAddScore* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SC_ShowHandAddScore>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:SC_ShowHandAddScore)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:SC_ShowHandAddScore)
    MergeFrom(*source);
  }
}

void SC_ShowHandAddScore::MergeFrom(const SC_ShowHandAddScore& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:SC_ShowHandAddScore)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      target_ = from.target_;
    }
    if (cached_has_bits & 0x00000002u) {
      chair_id_ = from.chair_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void SC_ShowHandAddScore::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:SC_ShowHandAddScore)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SC_ShowHandAddScore::CopyFrom(const SC_ShowHandAddScore& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SC_ShowHandAddScore)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SC_ShowHandAddScore::IsInitialized() const {
  return true;
}

void SC_ShowHandAddScore::Swap(SC_ShowHandAddScore* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SC_ShowHandAddScore::InternalSwap(SC_ShowHandAddScore* other) {
  std::swap(target_, other->target_);
  std::swap(chair_id_, other->chair_id_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SC_ShowHandAddScore::GetMetadata() const {
  protobuf_public_5fshowhand_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_public_5fshowhand_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SC_ShowHandAddScore

// optional int32 target = 1;
bool SC_ShowHandAddScore::has_target() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void SC_ShowHandAddScore::set_has_target() {
  _has_bits_[0] |= 0x00000001u;
}
void SC_ShowHandAddScore::clear_has_target() {
  _has_bits_[0] &= ~0x00000001u;
}
void SC_ShowHandAddScore::clear_target() {
  target_ = 0;
  clear_has_target();
}
::google::protobuf::int32 SC_ShowHandAddScore::target() const {
  // @@protoc_insertion_point(field_get:SC_ShowHandAddScore.target)
  return target_;
}
void SC_ShowHandAddScore::set_target(::google::protobuf::int32 value) {
  set_has_target();
  target_ = value;
  // @@protoc_insertion_point(field_set:SC_ShowHandAddScore.target)
}

// optional int32 chair_id = 2;
bool SC_ShowHandAddScore::has_chair_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void SC_ShowHandAddScore::set_has_chair_id() {
  _has_bits_[0] |= 0x00000002u;
}
void SC_ShowHandAddScore::clear_has_chair_id() {
  _has_bits_[0] &= ~0x00000002u;
}
void SC_ShowHandAddScore::clear_chair_id() {
  chair_id_ = 0;
  clear_has_chair_id();
}
::google::protobuf::int32 SC_ShowHandAddScore::chair_id() const {
  // @@protoc_insertion_point(field_get:SC_ShowHandAddScore.chair_id)
  return chair_id_;
}
void SC_ShowHandAddScore::set_chair_id(::google::protobuf::int32 value) {
  set_has_chair_id();
  chair_id_ = value;
  // @@protoc_insertion_point(field_set:SC_ShowHandAddScore.chair_id)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SC_ShowHandGiveUp::kChairIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SC_ShowHandGiveUp::SC_ShowHandGiveUp()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_public_5fshowhand_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:SC_ShowHandGiveUp)
}
SC_ShowHandGiveUp::SC_ShowHandGiveUp(const SC_ShowHandGiveUp& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  chair_id_ = from.chair_id_;
  // @@protoc_insertion_point(copy_constructor:SC_ShowHandGiveUp)
}

void SC_ShowHandGiveUp::SharedCtor() {
  _cached_size_ = 0;
  chair_id_ = 0;
}

SC_ShowHandGiveUp::~SC_ShowHandGiveUp() {
  // @@protoc_insertion_point(destructor:SC_ShowHandGiveUp)
  SharedDtor();
}

void SC_ShowHandGiveUp::SharedDtor() {
}

void SC_ShowHandGiveUp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SC_ShowHandGiveUp::descriptor() {
  protobuf_public_5fshowhand_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_public_5fshowhand_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const SC_ShowHandGiveUp& SC_ShowHandGiveUp::default_instance() {
  protobuf_public_5fshowhand_2eproto::InitDefaults();
  return *internal_default_instance();
}

SC_ShowHandGiveUp* SC_ShowHandGiveUp::New(::google::protobuf::Arena* arena) const {
  SC_ShowHandGiveUp* n = new SC_ShowHandGiveUp;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SC_ShowHandGiveUp::Clear() {
// @@protoc_insertion_point(message_clear_start:SC_ShowHandGiveUp)
  chair_id_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool SC_ShowHandGiveUp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:SC_ShowHandGiveUp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 chair_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_chair_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &chair_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:SC_ShowHandGiveUp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:SC_ShowHandGiveUp)
  return false;
#undef DO_
}

void SC_ShowHandGiveUp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:SC_ShowHandGiveUp)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 chair_id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->chair_id(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:SC_ShowHandGiveUp)
}

::google::protobuf::uint8* SC_ShowHandGiveUp::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:SC_ShowHandGiveUp)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 chair_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->chair_id(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SC_ShowHandGiveUp)
  return target;
}

size_t SC_ShowHandGiveUp::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SC_ShowHandGiveUp)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // optional int32 chair_id = 1;
  if (has_chair_id()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->chair_id());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SC_ShowHandGiveUp::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:SC_ShowHandGiveUp)
  GOOGLE_DCHECK_NE(&from, this);
  const SC_ShowHandGiveUp* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SC_ShowHandGiveUp>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:SC_ShowHandGiveUp)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:SC_ShowHandGiveUp)
    MergeFrom(*source);
  }
}

void SC_ShowHandGiveUp::MergeFrom(const SC_ShowHandGiveUp& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:SC_ShowHandGiveUp)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_chair_id()) {
    set_chair_id(from.chair_id());
  }
}

void SC_ShowHandGiveUp::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:SC_ShowHandGiveUp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SC_ShowHandGiveUp::CopyFrom(const SC_ShowHandGiveUp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SC_ShowHandGiveUp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SC_ShowHandGiveUp::IsInitialized() const {
  return true;
}

void SC_ShowHandGiveUp::Swap(SC_ShowHandGiveUp* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SC_ShowHandGiveUp::InternalSwap(SC_ShowHandGiveUp* other) {
  std::swap(chair_id_, other->chair_id_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SC_ShowHandGiveUp::GetMetadata() const {
  protobuf_public_5fshowhand_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_public_5fshowhand_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SC_ShowHandGiveUp

// optional int32 chair_id = 1;
bool SC_ShowHandGiveUp::has_chair_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void SC_ShowHandGiveUp::set_has_chair_id() {
  _has_bits_[0] |= 0x00000001u;
}
void SC_ShowHandGiveUp::clear_has_chair_id() {
  _has_bits_[0] &= ~0x00000001u;
}
void SC_ShowHandGiveUp::clear_chair_id() {
  chair_id_ = 0;
  clear_has_chair_id();
}
::google::protobuf::int32 SC_ShowHandGiveUp::chair_id() const {
  // @@protoc_insertion_point(field_get:SC_ShowHandGiveUp.chair_id)
  return chair_id_;
}
void SC_ShowHandGiveUp::set_chair_id(::google::protobuf::int32 value) {
  set_has_chair_id();
  chair_id_ = value;
  // @@protoc_insertion_point(field_set:SC_ShowHandGiveUp.chair_id)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SC_ShowHandPass::kChairIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SC_ShowHandPass::SC_ShowHandPass()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_public_5fshowhand_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:SC_ShowHandPass)
}
SC_ShowHandPass::SC_ShowHandPass(const SC_ShowHandPass& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  chair_id_ = from.chair_id_;
  // @@protoc_insertion_point(copy_constructor:SC_ShowHandPass)
}

void SC_ShowHandPass::SharedCtor() {
  _cached_size_ = 0;
  chair_id_ = 0;
}

SC_ShowHandPass::~SC_ShowHandPass() {
  // @@protoc_insertion_point(destructor:SC_ShowHandPass)
  SharedDtor();
}

void SC_ShowHandPass::SharedDtor() {
}

void SC_ShowHandPass::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SC_ShowHandPass::descriptor() {
  protobuf_public_5fshowhand_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_public_5fshowhand_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const SC_ShowHandPass& SC_ShowHandPass::default_instance() {
  protobuf_public_5fshowhand_2eproto::InitDefaults();
  return *internal_default_instance();
}

SC_ShowHandPass* SC_ShowHandPass::New(::google::protobuf::Arena* arena) const {
  SC_ShowHandPass* n = new SC_ShowHandPass;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SC_ShowHandPass::Clear() {
// @@protoc_insertion_point(message_clear_start:SC_ShowHandPass)
  chair_id_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool SC_ShowHandPass::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:SC_ShowHandPass)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 chair_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_chair_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &chair_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:SC_ShowHandPass)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:SC_ShowHandPass)
  return false;
#undef DO_
}

void SC_ShowHandPass::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:SC_ShowHandPass)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 chair_id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->chair_id(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:SC_ShowHandPass)
}

::google::protobuf::uint8* SC_ShowHandPass::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:SC_ShowHandPass)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 chair_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->chair_id(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SC_ShowHandPass)
  return target;
}

size_t SC_ShowHandPass::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SC_ShowHandPass)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // optional int32 chair_id = 1;
  if (has_chair_id()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->chair_id());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SC_ShowHandPass::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:SC_ShowHandPass)
  GOOGLE_DCHECK_NE(&from, this);
  const SC_ShowHandPass* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SC_ShowHandPass>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:SC_ShowHandPass)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:SC_ShowHandPass)
    MergeFrom(*source);
  }
}

void SC_ShowHandPass::MergeFrom(const SC_ShowHandPass& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:SC_ShowHandPass)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_chair_id()) {
    set_chair_id(from.chair_id());
  }
}

void SC_ShowHandPass::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:SC_ShowHandPass)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SC_ShowHandPass::CopyFrom(const SC_ShowHandPass& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SC_ShowHandPass)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SC_ShowHandPass::IsInitialized() const {
  return true;
}

void SC_ShowHandPass::Swap(SC_ShowHandPass* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SC_ShowHandPass::InternalSwap(SC_ShowHandPass* other) {
  std::swap(chair_id_, other->chair_id_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SC_ShowHandPass::GetMetadata() const {
  protobuf_public_5fshowhand_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_public_5fshowhand_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SC_ShowHandPass

// optional int32 chair_id = 1;
bool SC_ShowHandPass::has_chair_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void SC_ShowHandPass::set_has_chair_id() {
  _has_bits_[0] |= 0x00000001u;
}
void SC_ShowHandPass::clear_has_chair_id() {
  _has_bits_[0] &= ~0x00000001u;
}
void SC_ShowHandPass::clear_chair_id() {
  chair_id_ = 0;
  clear_has_chair_id();
}
::google::protobuf::int32 SC_ShowHandPass::chair_id() const {
  // @@protoc_insertion_point(field_get:SC_ShowHandPass.chair_id)
  return chair_id_;
}
void SC_ShowHandPass::set_chair_id(::google::protobuf::int32 value) {
  set_has_chair_id();
  chair_id_ = value;
  // @@protoc_insertion_point(field_set:SC_ShowHandPass.chair_id)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SC_ShowHand_NextTurn::kChairIdFieldNumber;
const int SC_ShowHand_NextTurn::kTypeFieldNumber;
const int SC_ShowHand_NextTurn::kMaxAddFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SC_ShowHand_NextTurn::SC_ShowHand_NextTurn()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_public_5fshowhand_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:SC_ShowHand_NextTurn)
}
SC_ShowHand_NextTurn::SC_ShowHand_NextTurn(const SC_ShowHand_NextTurn& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&chair_id_, &from.chair_id_,
    reinterpret_cast<char*>(&max_add_) -
    reinterpret_cast<char*>(&chair_id_) + sizeof(max_add_));
  // @@protoc_insertion_point(copy_constructor:SC_ShowHand_NextTurn)
}

void SC_ShowHand_NextTurn::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&chair_id_, 0, reinterpret_cast<char*>(&max_add_) -
    reinterpret_cast<char*>(&chair_id_) + sizeof(max_add_));
}

SC_ShowHand_NextTurn::~SC_ShowHand_NextTurn() {
  // @@protoc_insertion_point(destructor:SC_ShowHand_NextTurn)
  SharedDtor();
}

void SC_ShowHand_NextTurn::SharedDtor() {
}

void SC_ShowHand_NextTurn::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SC_ShowHand_NextTurn::descriptor() {
  protobuf_public_5fshowhand_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_public_5fshowhand_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const SC_ShowHand_NextTurn& SC_ShowHand_NextTurn::default_instance() {
  protobuf_public_5fshowhand_2eproto::InitDefaults();
  return *internal_default_instance();
}

SC_ShowHand_NextTurn* SC_ShowHand_NextTurn::New(::google::protobuf::Arena* arena) const {
  SC_ShowHand_NextTurn* n = new SC_ShowHand_NextTurn;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SC_ShowHand_NextTurn::Clear() {
// @@protoc_insertion_point(message_clear_start:SC_ShowHand_NextTurn)
  if (_has_bits_[0 / 32] & 7u) {
    ::memset(&chair_id_, 0, reinterpret_cast<char*>(&max_add_) -
      reinterpret_cast<char*>(&chair_id_) + sizeof(max_add_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool SC_ShowHand_NextTurn::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:SC_ShowHand_NextTurn)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 chair_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_chair_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &chair_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 type = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_type();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 max_add = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {
          set_has_max_add();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &max_add_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:SC_ShowHand_NextTurn)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:SC_ShowHand_NextTurn)
  return false;
#undef DO_
}

void SC_ShowHand_NextTurn::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:SC_ShowHand_NextTurn)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 chair_id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->chair_id(), output);
  }

  // optional int32 type = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->type(), output);
  }

  // optional int32 max_add = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->max_add(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:SC_ShowHand_NextTurn)
}

::google::protobuf::uint8* SC_ShowHand_NextTurn::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:SC_ShowHand_NextTurn)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 chair_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->chair_id(), target);
  }

  // optional int32 type = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->type(), target);
  }

  // optional int32 max_add = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->max_add(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SC_ShowHand_NextTurn)
  return target;
}

size_t SC_ShowHand_NextTurn::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SC_ShowHand_NextTurn)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 7u) {
    // optional int32 chair_id = 1;
    if (has_chair_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->chair_id());
    }

    // optional int32 type = 2;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->type());
    }

    // optional int32 max_add = 3;
    if (has_max_add()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->max_add());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SC_ShowHand_NextTurn::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:SC_ShowHand_NextTurn)
  GOOGLE_DCHECK_NE(&from, this);
  const SC_ShowHand_NextTurn* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SC_ShowHand_NextTurn>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:SC_ShowHand_NextTurn)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:SC_ShowHand_NextTurn)
    MergeFrom(*source);
  }
}

void SC_ShowHand_NextTurn::MergeFrom(const SC_ShowHand_NextTurn& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:SC_ShowHand_NextTurn)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      chair_id_ = from.chair_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      type_ = from.type_;
    }
    if (cached_has_bits & 0x00000004u) {
      max_add_ = from.max_add_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void SC_ShowHand_NextTurn::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:SC_ShowHand_NextTurn)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SC_ShowHand_NextTurn::CopyFrom(const SC_ShowHand_NextTurn& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SC_ShowHand_NextTurn)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SC_ShowHand_NextTurn::IsInitialized() const {
  return true;
}

void SC_ShowHand_NextTurn::Swap(SC_ShowHand_NextTurn* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SC_ShowHand_NextTurn::InternalSwap(SC_ShowHand_NextTurn* other) {
  std::swap(chair_id_, other->chair_id_);
  std::swap(type_, other->type_);
  std::swap(max_add_, other->max_add_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SC_ShowHand_NextTurn::GetMetadata() const {
  protobuf_public_5fshowhand_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_public_5fshowhand_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SC_ShowHand_NextTurn

// optional int32 chair_id = 1;
bool SC_ShowHand_NextTurn::has_chair_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void SC_ShowHand_NextTurn::set_has_chair_id() {
  _has_bits_[0] |= 0x00000001u;
}
void SC_ShowHand_NextTurn::clear_has_chair_id() {
  _has_bits_[0] &= ~0x00000001u;
}
void SC_ShowHand_NextTurn::clear_chair_id() {
  chair_id_ = 0;
  clear_has_chair_id();
}
::google::protobuf::int32 SC_ShowHand_NextTurn::chair_id() const {
  // @@protoc_insertion_point(field_get:SC_ShowHand_NextTurn.chair_id)
  return chair_id_;
}
void SC_ShowHand_NextTurn::set_chair_id(::google::protobuf::int32 value) {
  set_has_chair_id();
  chair_id_ = value;
  // @@protoc_insertion_point(field_set:SC_ShowHand_NextTurn.chair_id)
}

// optional int32 type = 2;
bool SC_ShowHand_NextTurn::has_type() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void SC_ShowHand_NextTurn::set_has_type() {
  _has_bits_[0] |= 0x00000002u;
}
void SC_ShowHand_NextTurn::clear_has_type() {
  _has_bits_[0] &= ~0x00000002u;
}
void SC_ShowHand_NextTurn::clear_type() {
  type_ = 0;
  clear_has_type();
}
::google::protobuf::int32 SC_ShowHand_NextTurn::type() const {
  // @@protoc_insertion_point(field_get:SC_ShowHand_NextTurn.type)
  return type_;
}
void SC_ShowHand_NextTurn::set_type(::google::protobuf::int32 value) {
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:SC_ShowHand_NextTurn.type)
}

// optional int32 max_add = 3;
bool SC_ShowHand_NextTurn::has_max_add() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void SC_ShowHand_NextTurn::set_has_max_add() {
  _has_bits_[0] |= 0x00000004u;
}
void SC_ShowHand_NextTurn::clear_has_max_add() {
  _has_bits_[0] &= ~0x00000004u;
}
void SC_ShowHand_NextTurn::clear_max_add() {
  max_add_ = 0;
  clear_has_max_add();
}
::google::protobuf::int32 SC_ShowHand_NextTurn::max_add() const {
  // @@protoc_insertion_point(field_get:SC_ShowHand_NextTurn.max_add)
  return max_add_;
}
void SC_ShowHand_NextTurn::set_max_add(::google::protobuf::int32 value) {
  set_has_max_add();
  max_add_ = value;
  // @@protoc_insertion_point(field_set:SC_ShowHand_NextTurn.max_add)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SC_ShowHandStartVote::kChairIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SC_ShowHandStartVote::SC_ShowHandStartVote()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_public_5fshowhand_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:SC_ShowHandStartVote)
}
SC_ShowHandStartVote::SC_ShowHandStartVote(const SC_ShowHandStartVote& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  chair_id_ = from.chair_id_;
  // @@protoc_insertion_point(copy_constructor:SC_ShowHandStartVote)
}

void SC_ShowHandStartVote::SharedCtor() {
  _cached_size_ = 0;
  chair_id_ = 0;
}

SC_ShowHandStartVote::~SC_ShowHandStartVote() {
  // @@protoc_insertion_point(destructor:SC_ShowHandStartVote)
  SharedDtor();
}

void SC_ShowHandStartVote::SharedDtor() {
}

void SC_ShowHandStartVote::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SC_ShowHandStartVote::descriptor() {
  protobuf_public_5fshowhand_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_public_5fshowhand_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const SC_ShowHandStartVote& SC_ShowHandStartVote::default_instance() {
  protobuf_public_5fshowhand_2eproto::InitDefaults();
  return *internal_default_instance();
}

SC_ShowHandStartVote* SC_ShowHandStartVote::New(::google::protobuf::Arena* arena) const {
  SC_ShowHandStartVote* n = new SC_ShowHandStartVote;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SC_ShowHandStartVote::Clear() {
// @@protoc_insertion_point(message_clear_start:SC_ShowHandStartVote)
  chair_id_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool SC_ShowHandStartVote::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:SC_ShowHandStartVote)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 chair_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_chair_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &chair_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:SC_ShowHandStartVote)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:SC_ShowHandStartVote)
  return false;
#undef DO_
}

void SC_ShowHandStartVote::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:SC_ShowHandStartVote)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 chair_id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->chair_id(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:SC_ShowHandStartVote)
}

::google::protobuf::uint8* SC_ShowHandStartVote::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:SC_ShowHandStartVote)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 chair_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->chair_id(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SC_ShowHandStartVote)
  return target;
}

size_t SC_ShowHandStartVote::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SC_ShowHandStartVote)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // optional int32 chair_id = 1;
  if (has_chair_id()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->chair_id());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SC_ShowHandStartVote::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:SC_ShowHandStartVote)
  GOOGLE_DCHECK_NE(&from, this);
  const SC_ShowHandStartVote* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SC_ShowHandStartVote>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:SC_ShowHandStartVote)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:SC_ShowHandStartVote)
    MergeFrom(*source);
  }
}

void SC_ShowHandStartVote::MergeFrom(const SC_ShowHandStartVote& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:SC_ShowHandStartVote)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_chair_id()) {
    set_chair_id(from.chair_id());
  }
}

void SC_ShowHandStartVote::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:SC_ShowHandStartVote)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SC_ShowHandStartVote::CopyFrom(const SC_ShowHandStartVote& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SC_ShowHandStartVote)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SC_ShowHandStartVote::IsInitialized() const {
  return true;
}

void SC_ShowHandStartVote::Swap(SC_ShowHandStartVote* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SC_ShowHandStartVote::InternalSwap(SC_ShowHandStartVote* other) {
  std::swap(chair_id_, other->chair_id_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SC_ShowHandStartVote::GetMetadata() const {
  protobuf_public_5fshowhand_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_public_5fshowhand_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SC_ShowHandStartVote

// optional int32 chair_id = 1;
bool SC_ShowHandStartVote::has_chair_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void SC_ShowHandStartVote::set_has_chair_id() {
  _has_bits_[0] |= 0x00000001u;
}
void SC_ShowHandStartVote::clear_has_chair_id() {
  _has_bits_[0] &= ~0x00000001u;
}
void SC_ShowHandStartVote::clear_chair_id() {
  chair_id_ = 0;
  clear_has_chair_id();
}
::google::protobuf::int32 SC_ShowHandStartVote::chair_id() const {
  // @@protoc_insertion_point(field_get:SC_ShowHandStartVote.chair_id)
  return chair_id_;
}
void SC_ShowHandStartVote::set_chair_id(::google::protobuf::int32 value) {
  set_has_chair_id();
  chair_id_ = value;
  // @@protoc_insertion_point(field_set:SC_ShowHandStartVote.chair_id)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SC_ShowHandPlayerVoteRes::kChairIdFieldNumber;
const int SC_ShowHandPlayerVoteRes::kAgreenFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SC_ShowHandPlayerVoteRes::SC_ShowHandPlayerVoteRes()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_public_5fshowhand_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:SC_ShowHandPlayerVoteRes)
}
SC_ShowHandPlayerVoteRes::SC_ShowHandPlayerVoteRes(const SC_ShowHandPlayerVoteRes& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&chair_id_, &from.chair_id_,
    reinterpret_cast<char*>(&agreen_) -
    reinterpret_cast<char*>(&chair_id_) + sizeof(agreen_));
  // @@protoc_insertion_point(copy_constructor:SC_ShowHandPlayerVoteRes)
}

void SC_ShowHandPlayerVoteRes::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&chair_id_, 0, reinterpret_cast<char*>(&agreen_) -
    reinterpret_cast<char*>(&chair_id_) + sizeof(agreen_));
}

SC_ShowHandPlayerVoteRes::~SC_ShowHandPlayerVoteRes() {
  // @@protoc_insertion_point(destructor:SC_ShowHandPlayerVoteRes)
  SharedDtor();
}

void SC_ShowHandPlayerVoteRes::SharedDtor() {
}

void SC_ShowHandPlayerVoteRes::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SC_ShowHandPlayerVoteRes::descriptor() {
  protobuf_public_5fshowhand_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_public_5fshowhand_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const SC_ShowHandPlayerVoteRes& SC_ShowHandPlayerVoteRes::default_instance() {
  protobuf_public_5fshowhand_2eproto::InitDefaults();
  return *internal_default_instance();
}

SC_ShowHandPlayerVoteRes* SC_ShowHandPlayerVoteRes::New(::google::protobuf::Arena* arena) const {
  SC_ShowHandPlayerVoteRes* n = new SC_ShowHandPlayerVoteRes;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SC_ShowHandPlayerVoteRes::Clear() {
// @@protoc_insertion_point(message_clear_start:SC_ShowHandPlayerVoteRes)
  if (_has_bits_[0 / 32] & 3u) {
    ::memset(&chair_id_, 0, reinterpret_cast<char*>(&agreen_) -
      reinterpret_cast<char*>(&chair_id_) + sizeof(agreen_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool SC_ShowHandPlayerVoteRes::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:SC_ShowHandPlayerVoteRes)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 chair_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_chair_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &chair_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool agreen = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_agreen();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &agreen_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:SC_ShowHandPlayerVoteRes)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:SC_ShowHandPlayerVoteRes)
  return false;
#undef DO_
}

void SC_ShowHandPlayerVoteRes::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:SC_ShowHandPlayerVoteRes)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 chair_id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->chair_id(), output);
  }

  // optional bool agreen = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->agreen(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:SC_ShowHandPlayerVoteRes)
}

::google::protobuf::uint8* SC_ShowHandPlayerVoteRes::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:SC_ShowHandPlayerVoteRes)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 chair_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->chair_id(), target);
  }

  // optional bool agreen = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->agreen(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SC_ShowHandPlayerVoteRes)
  return target;
}

size_t SC_ShowHandPlayerVoteRes::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SC_ShowHandPlayerVoteRes)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 3u) {
    // optional int32 chair_id = 1;
    if (has_chair_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->chair_id());
    }

    // optional bool agreen = 2;
    if (has_agreen()) {
      total_size += 1 + 1;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SC_ShowHandPlayerVoteRes::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:SC_ShowHandPlayerVoteRes)
  GOOGLE_DCHECK_NE(&from, this);
  const SC_ShowHandPlayerVoteRes* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SC_ShowHandPlayerVoteRes>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:SC_ShowHandPlayerVoteRes)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:SC_ShowHandPlayerVoteRes)
    MergeFrom(*source);
  }
}

void SC_ShowHandPlayerVoteRes::MergeFrom(const SC_ShowHandPlayerVoteRes& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:SC_ShowHandPlayerVoteRes)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      chair_id_ = from.chair_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      agreen_ = from.agreen_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void SC_ShowHandPlayerVoteRes::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:SC_ShowHandPlayerVoteRes)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SC_ShowHandPlayerVoteRes::CopyFrom(const SC_ShowHandPlayerVoteRes& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SC_ShowHandPlayerVoteRes)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SC_ShowHandPlayerVoteRes::IsInitialized() const {
  return true;
}

void SC_ShowHandPlayerVoteRes::Swap(SC_ShowHandPlayerVoteRes* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SC_ShowHandPlayerVoteRes::InternalSwap(SC_ShowHandPlayerVoteRes* other) {
  std::swap(chair_id_, other->chair_id_);
  std::swap(agreen_, other->agreen_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SC_ShowHandPlayerVoteRes::GetMetadata() const {
  protobuf_public_5fshowhand_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_public_5fshowhand_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SC_ShowHandPlayerVoteRes

// optional int32 chair_id = 1;
bool SC_ShowHandPlayerVoteRes::has_chair_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void SC_ShowHandPlayerVoteRes::set_has_chair_id() {
  _has_bits_[0] |= 0x00000001u;
}
void SC_ShowHandPlayerVoteRes::clear_has_chair_id() {
  _has_bits_[0] &= ~0x00000001u;
}
void SC_ShowHandPlayerVoteRes::clear_chair_id() {
  chair_id_ = 0;
  clear_has_chair_id();
}
::google::protobuf::int32 SC_ShowHandPlayerVoteRes::chair_id() const {
  // @@protoc_insertion_point(field_get:SC_ShowHandPlayerVoteRes.chair_id)
  return chair_id_;
}
void SC_ShowHandPlayerVoteRes::set_chair_id(::google::protobuf::int32 value) {
  set_has_chair_id();
  chair_id_ = value;
  // @@protoc_insertion_point(field_set:SC_ShowHandPlayerVoteRes.chair_id)
}

// optional bool agreen = 2;
bool SC_ShowHandPlayerVoteRes::has_agreen() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void SC_ShowHandPlayerVoteRes::set_has_agreen() {
  _has_bits_[0] |= 0x00000002u;
}
void SC_ShowHandPlayerVoteRes::clear_has_agreen() {
  _has_bits_[0] &= ~0x00000002u;
}
void SC_ShowHandPlayerVoteRes::clear_agreen() {
  agreen_ = false;
  clear_has_agreen();
}
bool SC_ShowHandPlayerVoteRes::agreen() const {
  // @@protoc_insertion_point(field_get:SC_ShowHandPlayerVoteRes.agreen)
  return agreen_;
}
void SC_ShowHandPlayerVoteRes::set_agreen(bool value) {
  set_has_agreen();
  agreen_ = value;
  // @@protoc_insertion_point(field_set:SC_ShowHandPlayerVoteRes.agreen)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)
