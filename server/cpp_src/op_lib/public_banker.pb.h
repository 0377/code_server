// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: public_banker.proto

#ifndef PROTOBUF_public_5fbanker_2eproto__INCLUDED
#define PROTOBUF_public_5fbanker_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3003000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3003000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
class BankerGameEndPlayerInfo;
class BankerGameEndPlayerInfoDefaultTypeInternal;
extern BankerGameEndPlayerInfoDefaultTypeInternal _BankerGameEndPlayerInfo_default_instance_;
class BankerPlayerInfo;
class BankerPlayerInfoDefaultTypeInternal;
extern BankerPlayerInfoDefaultTypeInternal _BankerPlayerInfo_default_instance_;
class BankerReconnectPlayerInfo;
class BankerReconnectPlayerInfoDefaultTypeInternal;
extern BankerReconnectPlayerInfoDefaultTypeInternal _BankerReconnectPlayerInfo_default_instance_;
class BankerTable;
class BankerTableDefaultTypeInternal;
extern BankerTableDefaultTypeInternal _BankerTable_default_instance_;
class CS_BankerContend;
class CS_BankerContendDefaultTypeInternal;
extern CS_BankerContendDefaultTypeInternal _CS_BankerContend_default_instance_;
class CS_BankerEnter;
class CS_BankerEnterDefaultTypeInternal;
extern CS_BankerEnterDefaultTypeInternal _CS_BankerEnter_default_instance_;
class CS_BankerLeave;
class CS_BankerLeaveDefaultTypeInternal;
extern CS_BankerLeaveDefaultTypeInternal _CS_BankerLeave_default_instance_;
class CS_BankerNextGame;
class CS_BankerNextGameDefaultTypeInternal;
extern CS_BankerNextGameDefaultTypeInternal _CS_BankerNextGame_default_instance_;
class CS_BankerPlayerBet;
class CS_BankerPlayerBetDefaultTypeInternal;
extern CS_BankerPlayerBetDefaultTypeInternal _CS_BankerPlayerBet_default_instance_;
class CS_BankerPlayerGuessCards;
class CS_BankerPlayerGuessCardsDefaultTypeInternal;
extern CS_BankerPlayerGuessCardsDefaultTypeInternal _CS_BankerPlayerGuessCards_default_instance_;
class CS_BankerVote;
class CS_BankerVoteDefaultTypeInternal;
extern CS_BankerVoteDefaultTypeInternal _CS_BankerVote_default_instance_;
class SC_BankerBeginToContend;
class SC_BankerBeginToContendDefaultTypeInternal;
extern SC_BankerBeginToContendDefaultTypeInternal _SC_BankerBeginToContend_default_instance_;
class SC_BankerChoosingBanker;
class SC_BankerChoosingBankerDefaultTypeInternal;
extern SC_BankerChoosingBankerDefaultTypeInternal _SC_BankerChoosingBanker_default_instance_;
class SC_BankerForceToLeave;
class SC_BankerForceToLeaveDefaultTypeInternal;
extern SC_BankerForceToLeaveDefaultTypeInternal _SC_BankerForceToLeave_default_instance_;
class SC_BankerGameEnd;
class SC_BankerGameEndDefaultTypeInternal;
extern SC_BankerGameEndDefaultTypeInternal _SC_BankerGameEnd_default_instance_;
class SC_BankerPlayerBeginToBet;
class SC_BankerPlayerBeginToBetDefaultTypeInternal;
extern SC_BankerPlayerBeginToBetDefaultTypeInternal _SC_BankerPlayerBeginToBet_default_instance_;
class SC_BankerPlayerBet;
class SC_BankerPlayerBetDefaultTypeInternal;
extern SC_BankerPlayerBetDefaultTypeInternal _SC_BankerPlayerBet_default_instance_;
class SC_BankerPlayerContend;
class SC_BankerPlayerContendDefaultTypeInternal;
extern SC_BankerPlayerContendDefaultTypeInternal _SC_BankerPlayerContend_default_instance_;
class SC_BankerPlayerSitDown;
class SC_BankerPlayerSitDownDefaultTypeInternal;
extern SC_BankerPlayerSitDownDefaultTypeInternal _SC_BankerPlayerSitDown_default_instance_;
class SC_BankerReconnectInfo;
class SC_BankerReconnectInfoDefaultTypeInternal;
extern SC_BankerReconnectInfoDefaultTypeInternal _SC_BankerReconnectInfo_default_instance_;
class SC_BankerSendCards;
class SC_BankerSendCardsDefaultTypeInternal;
extern SC_BankerSendCardsDefaultTypeInternal _SC_BankerSendCards_default_instance_;
class SC_BankerShowCards;
class SC_BankerShowCardsDefaultTypeInternal;
extern SC_BankerShowCardsDefaultTypeInternal _SC_BankerShowCards_default_instance_;
class SC_BankerShowOwnCards;
class SC_BankerShowOwnCardsDefaultTypeInternal;
extern SC_BankerShowOwnCardsDefaultTypeInternal _SC_BankerShowOwnCards_default_instance_;
class SC_BankerStartVote;
class SC_BankerStartVoteDefaultTypeInternal;
extern SC_BankerStartVoteDefaultTypeInternal _SC_BankerStartVote_default_instance_;
class SC_BankerTableMatching;
class SC_BankerTableMatchingDefaultTypeInternal;
extern SC_BankerTableMatchingDefaultTypeInternal _SC_BankerTableMatching_default_instance_;
class SC_BankerVoteResult;
class SC_BankerVoteResultDefaultTypeInternal;
extern SC_BankerVoteResultDefaultTypeInternal _SC_BankerVoteResult_default_instance_;
class SC_Next_Game_Time;
class SC_Next_Game_TimeDefaultTypeInternal;
extern SC_Next_Game_TimeDefaultTypeInternal _SC_Next_Game_Time_default_instance_;
class SC_ReEanter_Next_Game;
class SC_ReEanter_Next_GameDefaultTypeInternal;
extern SC_ReEanter_Next_GameDefaultTypeInternal _SC_ReEanter_Next_Game_default_instance_;

namespace protobuf_public_5fbanker_2eproto {
// Internal implementation detail -- do not call these.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[];
  static const ::google::protobuf::uint32 offsets[];
  static void InitDefaultsImpl();
  static void Shutdown();
};
void AddDescriptors();
void InitDefaults();
}  // namespace protobuf_public_5fbanker_2eproto

enum BankerTable_MsgID {
  BankerTable_MsgID_ID = 26003
};
bool BankerTable_MsgID_IsValid(int value);
const BankerTable_MsgID BankerTable_MsgID_MsgID_MIN = BankerTable_MsgID_ID;
const BankerTable_MsgID BankerTable_MsgID_MsgID_MAX = BankerTable_MsgID_ID;
const int BankerTable_MsgID_MsgID_ARRAYSIZE = BankerTable_MsgID_MsgID_MAX + 1;

const ::google::protobuf::EnumDescriptor* BankerTable_MsgID_descriptor();
inline const ::std::string& BankerTable_MsgID_Name(BankerTable_MsgID value) {
  return ::google::protobuf::internal::NameOfEnum(
    BankerTable_MsgID_descriptor(), value);
}
inline bool BankerTable_MsgID_Parse(
    const ::std::string& name, BankerTable_MsgID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<BankerTable_MsgID>(
    BankerTable_MsgID_descriptor(), name, value);
}
enum SC_BankerTableMatching_MsgID {
  SC_BankerTableMatching_MsgID_ID = 26000
};
bool SC_BankerTableMatching_MsgID_IsValid(int value);
const SC_BankerTableMatching_MsgID SC_BankerTableMatching_MsgID_MsgID_MIN = SC_BankerTableMatching_MsgID_ID;
const SC_BankerTableMatching_MsgID SC_BankerTableMatching_MsgID_MsgID_MAX = SC_BankerTableMatching_MsgID_ID;
const int SC_BankerTableMatching_MsgID_MsgID_ARRAYSIZE = SC_BankerTableMatching_MsgID_MsgID_MAX + 1;

const ::google::protobuf::EnumDescriptor* SC_BankerTableMatching_MsgID_descriptor();
inline const ::std::string& SC_BankerTableMatching_MsgID_Name(SC_BankerTableMatching_MsgID value) {
  return ::google::protobuf::internal::NameOfEnum(
    SC_BankerTableMatching_MsgID_descriptor(), value);
}
inline bool SC_BankerTableMatching_MsgID_Parse(
    const ::std::string& name, SC_BankerTableMatching_MsgID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<SC_BankerTableMatching_MsgID>(
    SC_BankerTableMatching_MsgID_descriptor(), name, value);
}
enum SC_BankerSendCards_MsgID {
  SC_BankerSendCards_MsgID_ID = 26001
};
bool SC_BankerSendCards_MsgID_IsValid(int value);
const SC_BankerSendCards_MsgID SC_BankerSendCards_MsgID_MsgID_MIN = SC_BankerSendCards_MsgID_ID;
const SC_BankerSendCards_MsgID SC_BankerSendCards_MsgID_MsgID_MAX = SC_BankerSendCards_MsgID_ID;
const int SC_BankerSendCards_MsgID_MsgID_ARRAYSIZE = SC_BankerSendCards_MsgID_MsgID_MAX + 1;

const ::google::protobuf::EnumDescriptor* SC_BankerSendCards_MsgID_descriptor();
inline const ::std::string& SC_BankerSendCards_MsgID_Name(SC_BankerSendCards_MsgID value) {
  return ::google::protobuf::internal::NameOfEnum(
    SC_BankerSendCards_MsgID_descriptor(), value);
}
inline bool SC_BankerSendCards_MsgID_Parse(
    const ::std::string& name, SC_BankerSendCards_MsgID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<SC_BankerSendCards_MsgID>(
    SC_BankerSendCards_MsgID_descriptor(), name, value);
}
enum SC_BankerBeginToContend_MsgID {
  SC_BankerBeginToContend_MsgID_ID = 26002
};
bool SC_BankerBeginToContend_MsgID_IsValid(int value);
const SC_BankerBeginToContend_MsgID SC_BankerBeginToContend_MsgID_MsgID_MIN = SC_BankerBeginToContend_MsgID_ID;
const SC_BankerBeginToContend_MsgID SC_BankerBeginToContend_MsgID_MsgID_MAX = SC_BankerBeginToContend_MsgID_ID;
const int SC_BankerBeginToContend_MsgID_MsgID_ARRAYSIZE = SC_BankerBeginToContend_MsgID_MsgID_MAX + 1;

const ::google::protobuf::EnumDescriptor* SC_BankerBeginToContend_MsgID_descriptor();
inline const ::std::string& SC_BankerBeginToContend_MsgID_Name(SC_BankerBeginToContend_MsgID value) {
  return ::google::protobuf::internal::NameOfEnum(
    SC_BankerBeginToContend_MsgID_descriptor(), value);
}
inline bool SC_BankerBeginToContend_MsgID_Parse(
    const ::std::string& name, SC_BankerBeginToContend_MsgID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<SC_BankerBeginToContend_MsgID>(
    SC_BankerBeginToContend_MsgID_descriptor(), name, value);
}
enum SC_BankerPlayerContend_MsgID {
  SC_BankerPlayerContend_MsgID_ID = 26003
};
bool SC_BankerPlayerContend_MsgID_IsValid(int value);
const SC_BankerPlayerContend_MsgID SC_BankerPlayerContend_MsgID_MsgID_MIN = SC_BankerPlayerContend_MsgID_ID;
const SC_BankerPlayerContend_MsgID SC_BankerPlayerContend_MsgID_MsgID_MAX = SC_BankerPlayerContend_MsgID_ID;
const int SC_BankerPlayerContend_MsgID_MsgID_ARRAYSIZE = SC_BankerPlayerContend_MsgID_MsgID_MAX + 1;

const ::google::protobuf::EnumDescriptor* SC_BankerPlayerContend_MsgID_descriptor();
inline const ::std::string& SC_BankerPlayerContend_MsgID_Name(SC_BankerPlayerContend_MsgID value) {
  return ::google::protobuf::internal::NameOfEnum(
    SC_BankerPlayerContend_MsgID_descriptor(), value);
}
inline bool SC_BankerPlayerContend_MsgID_Parse(
    const ::std::string& name, SC_BankerPlayerContend_MsgID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<SC_BankerPlayerContend_MsgID>(
    SC_BankerPlayerContend_MsgID_descriptor(), name, value);
}
enum SC_BankerChoosingBanker_MsgID {
  SC_BankerChoosingBanker_MsgID_ID = 26004
};
bool SC_BankerChoosingBanker_MsgID_IsValid(int value);
const SC_BankerChoosingBanker_MsgID SC_BankerChoosingBanker_MsgID_MsgID_MIN = SC_BankerChoosingBanker_MsgID_ID;
const SC_BankerChoosingBanker_MsgID SC_BankerChoosingBanker_MsgID_MsgID_MAX = SC_BankerChoosingBanker_MsgID_ID;
const int SC_BankerChoosingBanker_MsgID_MsgID_ARRAYSIZE = SC_BankerChoosingBanker_MsgID_MsgID_MAX + 1;

const ::google::protobuf::EnumDescriptor* SC_BankerChoosingBanker_MsgID_descriptor();
inline const ::std::string& SC_BankerChoosingBanker_MsgID_Name(SC_BankerChoosingBanker_MsgID value) {
  return ::google::protobuf::internal::NameOfEnum(
    SC_BankerChoosingBanker_MsgID_descriptor(), value);
}
inline bool SC_BankerChoosingBanker_MsgID_Parse(
    const ::std::string& name, SC_BankerChoosingBanker_MsgID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<SC_BankerChoosingBanker_MsgID>(
    SC_BankerChoosingBanker_MsgID_descriptor(), name, value);
}
enum SC_BankerPlayerBeginToBet_MsgID {
  SC_BankerPlayerBeginToBet_MsgID_ID = 26005
};
bool SC_BankerPlayerBeginToBet_MsgID_IsValid(int value);
const SC_BankerPlayerBeginToBet_MsgID SC_BankerPlayerBeginToBet_MsgID_MsgID_MIN = SC_BankerPlayerBeginToBet_MsgID_ID;
const SC_BankerPlayerBeginToBet_MsgID SC_BankerPlayerBeginToBet_MsgID_MsgID_MAX = SC_BankerPlayerBeginToBet_MsgID_ID;
const int SC_BankerPlayerBeginToBet_MsgID_MsgID_ARRAYSIZE = SC_BankerPlayerBeginToBet_MsgID_MsgID_MAX + 1;

const ::google::protobuf::EnumDescriptor* SC_BankerPlayerBeginToBet_MsgID_descriptor();
inline const ::std::string& SC_BankerPlayerBeginToBet_MsgID_Name(SC_BankerPlayerBeginToBet_MsgID value) {
  return ::google::protobuf::internal::NameOfEnum(
    SC_BankerPlayerBeginToBet_MsgID_descriptor(), value);
}
inline bool SC_BankerPlayerBeginToBet_MsgID_Parse(
    const ::std::string& name, SC_BankerPlayerBeginToBet_MsgID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<SC_BankerPlayerBeginToBet_MsgID>(
    SC_BankerPlayerBeginToBet_MsgID_descriptor(), name, value);
}
enum SC_BankerPlayerBet_MsgID {
  SC_BankerPlayerBet_MsgID_ID = 26006
};
bool SC_BankerPlayerBet_MsgID_IsValid(int value);
const SC_BankerPlayerBet_MsgID SC_BankerPlayerBet_MsgID_MsgID_MIN = SC_BankerPlayerBet_MsgID_ID;
const SC_BankerPlayerBet_MsgID SC_BankerPlayerBet_MsgID_MsgID_MAX = SC_BankerPlayerBet_MsgID_ID;
const int SC_BankerPlayerBet_MsgID_MsgID_ARRAYSIZE = SC_BankerPlayerBet_MsgID_MsgID_MAX + 1;

const ::google::protobuf::EnumDescriptor* SC_BankerPlayerBet_MsgID_descriptor();
inline const ::std::string& SC_BankerPlayerBet_MsgID_Name(SC_BankerPlayerBet_MsgID value) {
  return ::google::protobuf::internal::NameOfEnum(
    SC_BankerPlayerBet_MsgID_descriptor(), value);
}
inline bool SC_BankerPlayerBet_MsgID_Parse(
    const ::std::string& name, SC_BankerPlayerBet_MsgID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<SC_BankerPlayerBet_MsgID>(
    SC_BankerPlayerBet_MsgID_descriptor(), name, value);
}
enum SC_BankerShowOwnCards_MsgID {
  SC_BankerShowOwnCards_MsgID_ID = 26007
};
bool SC_BankerShowOwnCards_MsgID_IsValid(int value);
const SC_BankerShowOwnCards_MsgID SC_BankerShowOwnCards_MsgID_MsgID_MIN = SC_BankerShowOwnCards_MsgID_ID;
const SC_BankerShowOwnCards_MsgID SC_BankerShowOwnCards_MsgID_MsgID_MAX = SC_BankerShowOwnCards_MsgID_ID;
const int SC_BankerShowOwnCards_MsgID_MsgID_ARRAYSIZE = SC_BankerShowOwnCards_MsgID_MsgID_MAX + 1;

const ::google::protobuf::EnumDescriptor* SC_BankerShowOwnCards_MsgID_descriptor();
inline const ::std::string& SC_BankerShowOwnCards_MsgID_Name(SC_BankerShowOwnCards_MsgID value) {
  return ::google::protobuf::internal::NameOfEnum(
    SC_BankerShowOwnCards_MsgID_descriptor(), value);
}
inline bool SC_BankerShowOwnCards_MsgID_Parse(
    const ::std::string& name, SC_BankerShowOwnCards_MsgID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<SC_BankerShowOwnCards_MsgID>(
    SC_BankerShowOwnCards_MsgID_descriptor(), name, value);
}
enum SC_BankerShowCards_MsgID {
  SC_BankerShowCards_MsgID_ID = 26008
};
bool SC_BankerShowCards_MsgID_IsValid(int value);
const SC_BankerShowCards_MsgID SC_BankerShowCards_MsgID_MsgID_MIN = SC_BankerShowCards_MsgID_ID;
const SC_BankerShowCards_MsgID SC_BankerShowCards_MsgID_MsgID_MAX = SC_BankerShowCards_MsgID_ID;
const int SC_BankerShowCards_MsgID_MsgID_ARRAYSIZE = SC_BankerShowCards_MsgID_MsgID_MAX + 1;

const ::google::protobuf::EnumDescriptor* SC_BankerShowCards_MsgID_descriptor();
inline const ::std::string& SC_BankerShowCards_MsgID_Name(SC_BankerShowCards_MsgID value) {
  return ::google::protobuf::internal::NameOfEnum(
    SC_BankerShowCards_MsgID_descriptor(), value);
}
inline bool SC_BankerShowCards_MsgID_Parse(
    const ::std::string& name, SC_BankerShowCards_MsgID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<SC_BankerShowCards_MsgID>(
    SC_BankerShowCards_MsgID_descriptor(), name, value);
}
enum SC_BankerGameEnd_MsgID {
  SC_BankerGameEnd_MsgID_ID = 26009
};
bool SC_BankerGameEnd_MsgID_IsValid(int value);
const SC_BankerGameEnd_MsgID SC_BankerGameEnd_MsgID_MsgID_MIN = SC_BankerGameEnd_MsgID_ID;
const SC_BankerGameEnd_MsgID SC_BankerGameEnd_MsgID_MsgID_MAX = SC_BankerGameEnd_MsgID_ID;
const int SC_BankerGameEnd_MsgID_MsgID_ARRAYSIZE = SC_BankerGameEnd_MsgID_MsgID_MAX + 1;

const ::google::protobuf::EnumDescriptor* SC_BankerGameEnd_MsgID_descriptor();
inline const ::std::string& SC_BankerGameEnd_MsgID_Name(SC_BankerGameEnd_MsgID value) {
  return ::google::protobuf::internal::NameOfEnum(
    SC_BankerGameEnd_MsgID_descriptor(), value);
}
inline bool SC_BankerGameEnd_MsgID_Parse(
    const ::std::string& name, SC_BankerGameEnd_MsgID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<SC_BankerGameEnd_MsgID>(
    SC_BankerGameEnd_MsgID_descriptor(), name, value);
}
enum SC_BankerForceToLeave_MsgID {
  SC_BankerForceToLeave_MsgID_ID = 26010
};
bool SC_BankerForceToLeave_MsgID_IsValid(int value);
const SC_BankerForceToLeave_MsgID SC_BankerForceToLeave_MsgID_MsgID_MIN = SC_BankerForceToLeave_MsgID_ID;
const SC_BankerForceToLeave_MsgID SC_BankerForceToLeave_MsgID_MsgID_MAX = SC_BankerForceToLeave_MsgID_ID;
const int SC_BankerForceToLeave_MsgID_MsgID_ARRAYSIZE = SC_BankerForceToLeave_MsgID_MsgID_MAX + 1;

const ::google::protobuf::EnumDescriptor* SC_BankerForceToLeave_MsgID_descriptor();
inline const ::std::string& SC_BankerForceToLeave_MsgID_Name(SC_BankerForceToLeave_MsgID value) {
  return ::google::protobuf::internal::NameOfEnum(
    SC_BankerForceToLeave_MsgID_descriptor(), value);
}
inline bool SC_BankerForceToLeave_MsgID_Parse(
    const ::std::string& name, SC_BankerForceToLeave_MsgID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<SC_BankerForceToLeave_MsgID>(
    SC_BankerForceToLeave_MsgID_descriptor(), name, value);
}
enum SC_BankerReconnectInfo_MsgID {
  SC_BankerReconnectInfo_MsgID_ID = 26011
};
bool SC_BankerReconnectInfo_MsgID_IsValid(int value);
const SC_BankerReconnectInfo_MsgID SC_BankerReconnectInfo_MsgID_MsgID_MIN = SC_BankerReconnectInfo_MsgID_ID;
const SC_BankerReconnectInfo_MsgID SC_BankerReconnectInfo_MsgID_MsgID_MAX = SC_BankerReconnectInfo_MsgID_ID;
const int SC_BankerReconnectInfo_MsgID_MsgID_ARRAYSIZE = SC_BankerReconnectInfo_MsgID_MsgID_MAX + 1;

const ::google::protobuf::EnumDescriptor* SC_BankerReconnectInfo_MsgID_descriptor();
inline const ::std::string& SC_BankerReconnectInfo_MsgID_Name(SC_BankerReconnectInfo_MsgID value) {
  return ::google::protobuf::internal::NameOfEnum(
    SC_BankerReconnectInfo_MsgID_descriptor(), value);
}
inline bool SC_BankerReconnectInfo_MsgID_Parse(
    const ::std::string& name, SC_BankerReconnectInfo_MsgID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<SC_BankerReconnectInfo_MsgID>(
    SC_BankerReconnectInfo_MsgID_descriptor(), name, value);
}
enum SC_BankerPlayerSitDown_MsgID {
  SC_BankerPlayerSitDown_MsgID_ID = 26012
};
bool SC_BankerPlayerSitDown_MsgID_IsValid(int value);
const SC_BankerPlayerSitDown_MsgID SC_BankerPlayerSitDown_MsgID_MsgID_MIN = SC_BankerPlayerSitDown_MsgID_ID;
const SC_BankerPlayerSitDown_MsgID SC_BankerPlayerSitDown_MsgID_MsgID_MAX = SC_BankerPlayerSitDown_MsgID_ID;
const int SC_BankerPlayerSitDown_MsgID_MsgID_ARRAYSIZE = SC_BankerPlayerSitDown_MsgID_MsgID_MAX + 1;

const ::google::protobuf::EnumDescriptor* SC_BankerPlayerSitDown_MsgID_descriptor();
inline const ::std::string& SC_BankerPlayerSitDown_MsgID_Name(SC_BankerPlayerSitDown_MsgID value) {
  return ::google::protobuf::internal::NameOfEnum(
    SC_BankerPlayerSitDown_MsgID_descriptor(), value);
}
inline bool SC_BankerPlayerSitDown_MsgID_Parse(
    const ::std::string& name, SC_BankerPlayerSitDown_MsgID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<SC_BankerPlayerSitDown_MsgID>(
    SC_BankerPlayerSitDown_MsgID_descriptor(), name, value);
}
enum SC_BankerStartVote_MsgID {
  SC_BankerStartVote_MsgID_ID = 26020
};
bool SC_BankerStartVote_MsgID_IsValid(int value);
const SC_BankerStartVote_MsgID SC_BankerStartVote_MsgID_MsgID_MIN = SC_BankerStartVote_MsgID_ID;
const SC_BankerStartVote_MsgID SC_BankerStartVote_MsgID_MsgID_MAX = SC_BankerStartVote_MsgID_ID;
const int SC_BankerStartVote_MsgID_MsgID_ARRAYSIZE = SC_BankerStartVote_MsgID_MsgID_MAX + 1;

const ::google::protobuf::EnumDescriptor* SC_BankerStartVote_MsgID_descriptor();
inline const ::std::string& SC_BankerStartVote_MsgID_Name(SC_BankerStartVote_MsgID value) {
  return ::google::protobuf::internal::NameOfEnum(
    SC_BankerStartVote_MsgID_descriptor(), value);
}
inline bool SC_BankerStartVote_MsgID_Parse(
    const ::std::string& name, SC_BankerStartVote_MsgID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<SC_BankerStartVote_MsgID>(
    SC_BankerStartVote_MsgID_descriptor(), name, value);
}
enum SC_BankerVoteResult_MsgID {
  SC_BankerVoteResult_MsgID_ID = 26021
};
bool SC_BankerVoteResult_MsgID_IsValid(int value);
const SC_BankerVoteResult_MsgID SC_BankerVoteResult_MsgID_MsgID_MIN = SC_BankerVoteResult_MsgID_ID;
const SC_BankerVoteResult_MsgID SC_BankerVoteResult_MsgID_MsgID_MAX = SC_BankerVoteResult_MsgID_ID;
const int SC_BankerVoteResult_MsgID_MsgID_ARRAYSIZE = SC_BankerVoteResult_MsgID_MsgID_MAX + 1;

const ::google::protobuf::EnumDescriptor* SC_BankerVoteResult_MsgID_descriptor();
inline const ::std::string& SC_BankerVoteResult_MsgID_Name(SC_BankerVoteResult_MsgID value) {
  return ::google::protobuf::internal::NameOfEnum(
    SC_BankerVoteResult_MsgID_descriptor(), value);
}
inline bool SC_BankerVoteResult_MsgID_Parse(
    const ::std::string& name, SC_BankerVoteResult_MsgID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<SC_BankerVoteResult_MsgID>(
    SC_BankerVoteResult_MsgID_descriptor(), name, value);
}
enum SC_ReEanter_Next_Game_MsgID {
  SC_ReEanter_Next_Game_MsgID_ID = 26022
};
bool SC_ReEanter_Next_Game_MsgID_IsValid(int value);
const SC_ReEanter_Next_Game_MsgID SC_ReEanter_Next_Game_MsgID_MsgID_MIN = SC_ReEanter_Next_Game_MsgID_ID;
const SC_ReEanter_Next_Game_MsgID SC_ReEanter_Next_Game_MsgID_MsgID_MAX = SC_ReEanter_Next_Game_MsgID_ID;
const int SC_ReEanter_Next_Game_MsgID_MsgID_ARRAYSIZE = SC_ReEanter_Next_Game_MsgID_MsgID_MAX + 1;

const ::google::protobuf::EnumDescriptor* SC_ReEanter_Next_Game_MsgID_descriptor();
inline const ::std::string& SC_ReEanter_Next_Game_MsgID_Name(SC_ReEanter_Next_Game_MsgID value) {
  return ::google::protobuf::internal::NameOfEnum(
    SC_ReEanter_Next_Game_MsgID_descriptor(), value);
}
inline bool SC_ReEanter_Next_Game_MsgID_Parse(
    const ::std::string& name, SC_ReEanter_Next_Game_MsgID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<SC_ReEanter_Next_Game_MsgID>(
    SC_ReEanter_Next_Game_MsgID_descriptor(), name, value);
}
enum SC_Next_Game_Time_MsgID {
  SC_Next_Game_Time_MsgID_ID = 26023
};
bool SC_Next_Game_Time_MsgID_IsValid(int value);
const SC_Next_Game_Time_MsgID SC_Next_Game_Time_MsgID_MsgID_MIN = SC_Next_Game_Time_MsgID_ID;
const SC_Next_Game_Time_MsgID SC_Next_Game_Time_MsgID_MsgID_MAX = SC_Next_Game_Time_MsgID_ID;
const int SC_Next_Game_Time_MsgID_MsgID_ARRAYSIZE = SC_Next_Game_Time_MsgID_MsgID_MAX + 1;

const ::google::protobuf::EnumDescriptor* SC_Next_Game_Time_MsgID_descriptor();
inline const ::std::string& SC_Next_Game_Time_MsgID_Name(SC_Next_Game_Time_MsgID value) {
  return ::google::protobuf::internal::NameOfEnum(
    SC_Next_Game_Time_MsgID_descriptor(), value);
}
inline bool SC_Next_Game_Time_MsgID_Parse(
    const ::std::string& name, SC_Next_Game_Time_MsgID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<SC_Next_Game_Time_MsgID>(
    SC_Next_Game_Time_MsgID_descriptor(), name, value);
}
enum CS_BankerEnter_MsgID {
  CS_BankerEnter_MsgID_ID = 26001
};
bool CS_BankerEnter_MsgID_IsValid(int value);
const CS_BankerEnter_MsgID CS_BankerEnter_MsgID_MsgID_MIN = CS_BankerEnter_MsgID_ID;
const CS_BankerEnter_MsgID CS_BankerEnter_MsgID_MsgID_MAX = CS_BankerEnter_MsgID_ID;
const int CS_BankerEnter_MsgID_MsgID_ARRAYSIZE = CS_BankerEnter_MsgID_MsgID_MAX + 1;

const ::google::protobuf::EnumDescriptor* CS_BankerEnter_MsgID_descriptor();
inline const ::std::string& CS_BankerEnter_MsgID_Name(CS_BankerEnter_MsgID value) {
  return ::google::protobuf::internal::NameOfEnum(
    CS_BankerEnter_MsgID_descriptor(), value);
}
inline bool CS_BankerEnter_MsgID_Parse(
    const ::std::string& name, CS_BankerEnter_MsgID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<CS_BankerEnter_MsgID>(
    CS_BankerEnter_MsgID_descriptor(), name, value);
}
enum CS_BankerLeave_MsgID {
  CS_BankerLeave_MsgID_ID = 26102
};
bool CS_BankerLeave_MsgID_IsValid(int value);
const CS_BankerLeave_MsgID CS_BankerLeave_MsgID_MsgID_MIN = CS_BankerLeave_MsgID_ID;
const CS_BankerLeave_MsgID CS_BankerLeave_MsgID_MsgID_MAX = CS_BankerLeave_MsgID_ID;
const int CS_BankerLeave_MsgID_MsgID_ARRAYSIZE = CS_BankerLeave_MsgID_MsgID_MAX + 1;

const ::google::protobuf::EnumDescriptor* CS_BankerLeave_MsgID_descriptor();
inline const ::std::string& CS_BankerLeave_MsgID_Name(CS_BankerLeave_MsgID value) {
  return ::google::protobuf::internal::NameOfEnum(
    CS_BankerLeave_MsgID_descriptor(), value);
}
inline bool CS_BankerLeave_MsgID_Parse(
    const ::std::string& name, CS_BankerLeave_MsgID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<CS_BankerLeave_MsgID>(
    CS_BankerLeave_MsgID_descriptor(), name, value);
}
enum CS_BankerContend_MsgID {
  CS_BankerContend_MsgID_ID = 26103
};
bool CS_BankerContend_MsgID_IsValid(int value);
const CS_BankerContend_MsgID CS_BankerContend_MsgID_MsgID_MIN = CS_BankerContend_MsgID_ID;
const CS_BankerContend_MsgID CS_BankerContend_MsgID_MsgID_MAX = CS_BankerContend_MsgID_ID;
const int CS_BankerContend_MsgID_MsgID_ARRAYSIZE = CS_BankerContend_MsgID_MsgID_MAX + 1;

const ::google::protobuf::EnumDescriptor* CS_BankerContend_MsgID_descriptor();
inline const ::std::string& CS_BankerContend_MsgID_Name(CS_BankerContend_MsgID value) {
  return ::google::protobuf::internal::NameOfEnum(
    CS_BankerContend_MsgID_descriptor(), value);
}
inline bool CS_BankerContend_MsgID_Parse(
    const ::std::string& name, CS_BankerContend_MsgID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<CS_BankerContend_MsgID>(
    CS_BankerContend_MsgID_descriptor(), name, value);
}
enum CS_BankerPlayerBet_MsgID {
  CS_BankerPlayerBet_MsgID_ID = 26104
};
bool CS_BankerPlayerBet_MsgID_IsValid(int value);
const CS_BankerPlayerBet_MsgID CS_BankerPlayerBet_MsgID_MsgID_MIN = CS_BankerPlayerBet_MsgID_ID;
const CS_BankerPlayerBet_MsgID CS_BankerPlayerBet_MsgID_MsgID_MAX = CS_BankerPlayerBet_MsgID_ID;
const int CS_BankerPlayerBet_MsgID_MsgID_ARRAYSIZE = CS_BankerPlayerBet_MsgID_MsgID_MAX + 1;

const ::google::protobuf::EnumDescriptor* CS_BankerPlayerBet_MsgID_descriptor();
inline const ::std::string& CS_BankerPlayerBet_MsgID_Name(CS_BankerPlayerBet_MsgID value) {
  return ::google::protobuf::internal::NameOfEnum(
    CS_BankerPlayerBet_MsgID_descriptor(), value);
}
inline bool CS_BankerPlayerBet_MsgID_Parse(
    const ::std::string& name, CS_BankerPlayerBet_MsgID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<CS_BankerPlayerBet_MsgID>(
    CS_BankerPlayerBet_MsgID_descriptor(), name, value);
}
enum CS_BankerPlayerGuessCards_MsgID {
  CS_BankerPlayerGuessCards_MsgID_ID = 26105
};
bool CS_BankerPlayerGuessCards_MsgID_IsValid(int value);
const CS_BankerPlayerGuessCards_MsgID CS_BankerPlayerGuessCards_MsgID_MsgID_MIN = CS_BankerPlayerGuessCards_MsgID_ID;
const CS_BankerPlayerGuessCards_MsgID CS_BankerPlayerGuessCards_MsgID_MsgID_MAX = CS_BankerPlayerGuessCards_MsgID_ID;
const int CS_BankerPlayerGuessCards_MsgID_MsgID_ARRAYSIZE = CS_BankerPlayerGuessCards_MsgID_MsgID_MAX + 1;

const ::google::protobuf::EnumDescriptor* CS_BankerPlayerGuessCards_MsgID_descriptor();
inline const ::std::string& CS_BankerPlayerGuessCards_MsgID_Name(CS_BankerPlayerGuessCards_MsgID value) {
  return ::google::protobuf::internal::NameOfEnum(
    CS_BankerPlayerGuessCards_MsgID_descriptor(), value);
}
inline bool CS_BankerPlayerGuessCards_MsgID_Parse(
    const ::std::string& name, CS_BankerPlayerGuessCards_MsgID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<CS_BankerPlayerGuessCards_MsgID>(
    CS_BankerPlayerGuessCards_MsgID_descriptor(), name, value);
}
enum CS_BankerNextGame_MsgID {
  CS_BankerNextGame_MsgID_ID = 26106
};
bool CS_BankerNextGame_MsgID_IsValid(int value);
const CS_BankerNextGame_MsgID CS_BankerNextGame_MsgID_MsgID_MIN = CS_BankerNextGame_MsgID_ID;
const CS_BankerNextGame_MsgID CS_BankerNextGame_MsgID_MsgID_MAX = CS_BankerNextGame_MsgID_ID;
const int CS_BankerNextGame_MsgID_MsgID_ARRAYSIZE = CS_BankerNextGame_MsgID_MsgID_MAX + 1;

const ::google::protobuf::EnumDescriptor* CS_BankerNextGame_MsgID_descriptor();
inline const ::std::string& CS_BankerNextGame_MsgID_Name(CS_BankerNextGame_MsgID value) {
  return ::google::protobuf::internal::NameOfEnum(
    CS_BankerNextGame_MsgID_descriptor(), value);
}
inline bool CS_BankerNextGame_MsgID_Parse(
    const ::std::string& name, CS_BankerNextGame_MsgID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<CS_BankerNextGame_MsgID>(
    CS_BankerNextGame_MsgID_descriptor(), name, value);
}
enum CS_BankerVote_MsgID {
  CS_BankerVote_MsgID_ID = 26110
};
bool CS_BankerVote_MsgID_IsValid(int value);
const CS_BankerVote_MsgID CS_BankerVote_MsgID_MsgID_MIN = CS_BankerVote_MsgID_ID;
const CS_BankerVote_MsgID CS_BankerVote_MsgID_MsgID_MAX = CS_BankerVote_MsgID_ID;
const int CS_BankerVote_MsgID_MsgID_ARRAYSIZE = CS_BankerVote_MsgID_MsgID_MAX + 1;

const ::google::protobuf::EnumDescriptor* CS_BankerVote_MsgID_descriptor();
inline const ::std::string& CS_BankerVote_MsgID_Name(CS_BankerVote_MsgID value) {
  return ::google::protobuf::internal::NameOfEnum(
    CS_BankerVote_MsgID_descriptor(), value);
}
inline bool CS_BankerVote_MsgID_Parse(
    const ::std::string& name, CS_BankerVote_MsgID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<CS_BankerVote_MsgID>(
    CS_BankerVote_MsgID_descriptor(), name, value);
}
enum BANKER_CARD_TYPE {
  BANKER_CARD_TYPE_NONE = 100,
  BANKER_CARD_TYPE_ONE = 101,
  BANKER_CARD_TYPE_TWO = 102,
  BANKER_CARD_TYPE_THREE = 103,
  BANKER_CARD_TYPE_FOUR = 104,
  BANKER_CARD_TYPE_FIVE = 105,
  BANKER_CARD_TYPE_SIX = 106,
  BANKER_CARD_TYPE_SEVEN = 107,
  BANKER_CARD_TYPE_EIGHT = 108,
  BANKER_CARD_TYPE_NIGHT = 109,
  BANKER_CARD_TYPE_TEN = 110,
  BANKER_CARD_TYPE_FOUR_KING = 201,
  BANKER_CARD_TYPE_FIVE_KING = 202,
  BANKER_CARD_TYPE_FOUR_SAMES = 203,
  BANKER_CARD_TYPE_FIVE_SAMLL = 204,
  BANKER_CARD_TYPE_ERROR = 1
};
bool BANKER_CARD_TYPE_IsValid(int value);
const BANKER_CARD_TYPE BANKER_CARD_TYPE_MIN = BANKER_CARD_TYPE_ERROR;
const BANKER_CARD_TYPE BANKER_CARD_TYPE_MAX = BANKER_CARD_TYPE_FIVE_SAMLL;
const int BANKER_CARD_TYPE_ARRAYSIZE = BANKER_CARD_TYPE_MAX + 1;

const ::google::protobuf::EnumDescriptor* BANKER_CARD_TYPE_descriptor();
inline const ::std::string& BANKER_CARD_TYPE_Name(BANKER_CARD_TYPE value) {
  return ::google::protobuf::internal::NameOfEnum(
    BANKER_CARD_TYPE_descriptor(), value);
}
inline bool BANKER_CARD_TYPE_Parse(
    const ::std::string& name, BANKER_CARD_TYPE* value) {
  return ::google::protobuf::internal::ParseNamedEnum<BANKER_CARD_TYPE>(
    BANKER_CARD_TYPE_descriptor(), name, value);
}
enum Status {
  STATUS_WAITING = 0,
  STATUS_SEND_CARDS = 1,
  STATUS_CONTEND_BANKER = 2,
  STATUS_DICISION_BANKER = 3,
  STATUS_BET = 4,
  STATUS_SHOW_CARD = 5,
  STATUS_SHOW_DOWN = 6
};
bool Status_IsValid(int value);
const Status Status_MIN = STATUS_WAITING;
const Status Status_MAX = STATUS_SHOW_DOWN;
const int Status_ARRAYSIZE = Status_MAX + 1;

const ::google::protobuf::EnumDescriptor* Status_descriptor();
inline const ::std::string& Status_Name(Status value) {
  return ::google::protobuf::internal::NameOfEnum(
    Status_descriptor(), value);
}
inline bool Status_Parse(
    const ::std::string& name, Status* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Status>(
    Status_descriptor(), name, value);
}
// ===================================================================

class BankerTable : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:BankerTable) */ {
 public:
  BankerTable();
  virtual ~BankerTable();

  BankerTable(const BankerTable& from);

  inline BankerTable& operator=(const BankerTable& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const BankerTable& default_instance();

  static inline const BankerTable* internal_default_instance() {
    return reinterpret_cast<const BankerTable*>(
               &_BankerTable_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    0;

  void Swap(BankerTable* other);

  // implements Message ----------------------------------------------

  inline BankerTable* New() const PROTOBUF_FINAL { return New(NULL); }

  BankerTable* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const BankerTable& from);
  void MergeFrom(const BankerTable& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(BankerTable* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  typedef BankerTable_MsgID MsgID;
  static const MsgID ID =
    BankerTable_MsgID_ID;
  static inline bool MsgID_IsValid(int value) {
    return BankerTable_MsgID_IsValid(value);
  }
  static const MsgID MsgID_MIN =
    BankerTable_MsgID_MsgID_MIN;
  static const MsgID MsgID_MAX =
    BankerTable_MsgID_MsgID_MAX;
  static const int MsgID_ARRAYSIZE =
    BankerTable_MsgID_MsgID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  MsgID_descriptor() {
    return BankerTable_MsgID_descriptor();
  }
  static inline const ::std::string& MsgID_Name(MsgID value) {
    return BankerTable_MsgID_Name(value);
  }
  static inline bool MsgID_Parse(const ::std::string& name,
      MsgID* value) {
    return BankerTable_MsgID_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional int64 bottom_bet = 2;
  bool has_bottom_bet() const;
  void clear_bottom_bet();
  static const int kBottomBetFieldNumber = 2;
  ::google::protobuf::int64 bottom_bet() const;
  void set_bottom_bet(::google::protobuf::int64 value);

  // optional int32 chair = 3;
  bool has_chair() const;
  void clear_chair();
  static const int kChairFieldNumber = 3;
  ::google::protobuf::int32 chair() const;
  void set_chair(::google::protobuf::int32 value);

  // optional int32 state = 1 [default = -1];
  bool has_state() const;
  void clear_state();
  static const int kStateFieldNumber = 1;
  ::google::protobuf::int32 state() const;
  void set_state(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:BankerTable)
 private:
  void set_has_state();
  void clear_has_state();
  void set_has_bottom_bet();
  void clear_has_bottom_bet();
  void set_has_chair();
  void clear_has_chair();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::int64 bottom_bet_;
  ::google::protobuf::int32 chair_;
  ::google::protobuf::int32 state_;
  friend struct protobuf_public_5fbanker_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class BankerPlayerInfo : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:BankerPlayerInfo) */ {
 public:
  BankerPlayerInfo();
  virtual ~BankerPlayerInfo();

  BankerPlayerInfo(const BankerPlayerInfo& from);

  inline BankerPlayerInfo& operator=(const BankerPlayerInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const BankerPlayerInfo& default_instance();

  static inline const BankerPlayerInfo* internal_default_instance() {
    return reinterpret_cast<const BankerPlayerInfo*>(
               &_BankerPlayerInfo_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    1;

  void Swap(BankerPlayerInfo* other);

  // implements Message ----------------------------------------------

  inline BankerPlayerInfo* New() const PROTOBUF_FINAL { return New(NULL); }

  BankerPlayerInfo* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const BankerPlayerInfo& from);
  void MergeFrom(const BankerPlayerInfo& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(BankerPlayerInfo* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string name = 3;
  bool has_name() const;
  void clear_name();
  static const int kNameFieldNumber = 3;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // optional string icon = 4;
  bool has_icon() const;
  void clear_icon();
  static const int kIconFieldNumber = 4;
  const ::std::string& icon() const;
  void set_icon(const ::std::string& value);
  #if LANG_CXX11
  void set_icon(::std::string&& value);
  #endif
  void set_icon(const char* value);
  void set_icon(const char* value, size_t size);
  ::std::string* mutable_icon();
  ::std::string* release_icon();
  void set_allocated_icon(::std::string* icon);

  // required int32 guid = 1;
  bool has_guid() const;
  void clear_guid();
  static const int kGuidFieldNumber = 1;
  ::google::protobuf::int32 guid() const;
  void set_guid(::google::protobuf::int32 value);

  // required int32 chair = 2;
  bool has_chair() const;
  void clear_chair();
  static const int kChairFieldNumber = 2;
  ::google::protobuf::int32 chair() const;
  void set_chair(::google::protobuf::int32 value);

  // optional int64 money = 5;
  bool has_money() const;
  void clear_money();
  static const int kMoneyFieldNumber = 5;
  ::google::protobuf::int64 money() const;
  void set_money(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:BankerPlayerInfo)
 private:
  void set_has_guid();
  void clear_has_guid();
  void set_has_chair();
  void clear_has_chair();
  void set_has_name();
  void clear_has_name();
  void set_has_icon();
  void clear_has_icon();
  void set_has_money();
  void clear_has_money();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::google::protobuf::internal::ArenaStringPtr icon_;
  ::google::protobuf::int32 guid_;
  ::google::protobuf::int32 chair_;
  ::google::protobuf::int64 money_;
  friend struct protobuf_public_5fbanker_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class BankerGameEndPlayerInfo : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:BankerGameEndPlayerInfo) */ {
 public:
  BankerGameEndPlayerInfo();
  virtual ~BankerGameEndPlayerInfo();

  BankerGameEndPlayerInfo(const BankerGameEndPlayerInfo& from);

  inline BankerGameEndPlayerInfo& operator=(const BankerGameEndPlayerInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const BankerGameEndPlayerInfo& default_instance();

  static inline const BankerGameEndPlayerInfo* internal_default_instance() {
    return reinterpret_cast<const BankerGameEndPlayerInfo*>(
               &_BankerGameEndPlayerInfo_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    2;

  void Swap(BankerGameEndPlayerInfo* other);

  // implements Message ----------------------------------------------

  inline BankerGameEndPlayerInfo* New() const PROTOBUF_FINAL { return New(NULL); }

  BankerGameEndPlayerInfo* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const BankerGameEndPlayerInfo& from);
  void MergeFrom(const BankerGameEndPlayerInfo& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(BankerGameEndPlayerInfo* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int64 money = 2;
  bool has_money() const;
  void clear_money();
  static const int kMoneyFieldNumber = 2;
  ::google::protobuf::int64 money() const;
  void set_money(::google::protobuf::int64 value);

  // required int32 chair = 1;
  bool has_chair() const;
  void clear_chair();
  static const int kChairFieldNumber = 1;
  ::google::protobuf::int32 chair() const;
  void set_chair(::google::protobuf::int32 value);

  // optional int32 victory = 4;
  bool has_victory() const;
  void clear_victory();
  static const int kVictoryFieldNumber = 4;
  ::google::protobuf::int32 victory() const;
  void set_victory(::google::protobuf::int32 value);

  // optional int64 tax = 3;
  bool has_tax() const;
  void clear_tax();
  static const int kTaxFieldNumber = 3;
  ::google::protobuf::int64 tax() const;
  void set_tax(::google::protobuf::int64 value);

  // required int64 increment_money = 5;
  bool has_increment_money() const;
  void clear_increment_money();
  static const int kIncrementMoneyFieldNumber = 5;
  ::google::protobuf::int64 increment_money() const;
  void set_increment_money(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:BankerGameEndPlayerInfo)
 private:
  void set_has_chair();
  void clear_has_chair();
  void set_has_money();
  void clear_has_money();
  void set_has_tax();
  void clear_has_tax();
  void set_has_victory();
  void clear_has_victory();
  void set_has_increment_money();
  void clear_has_increment_money();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::int64 money_;
  ::google::protobuf::int32 chair_;
  ::google::protobuf::int32 victory_;
  ::google::protobuf::int64 tax_;
  ::google::protobuf::int64 increment_money_;
  friend struct protobuf_public_5fbanker_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class BankerReconnectPlayerInfo : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:BankerReconnectPlayerInfo) */ {
 public:
  BankerReconnectPlayerInfo();
  virtual ~BankerReconnectPlayerInfo();

  BankerReconnectPlayerInfo(const BankerReconnectPlayerInfo& from);

  inline BankerReconnectPlayerInfo& operator=(const BankerReconnectPlayerInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const BankerReconnectPlayerInfo& default_instance();

  static inline const BankerReconnectPlayerInfo* internal_default_instance() {
    return reinterpret_cast<const BankerReconnectPlayerInfo*>(
               &_BankerReconnectPlayerInfo_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    3;

  void Swap(BankerReconnectPlayerInfo* other);

  // implements Message ----------------------------------------------

  inline BankerReconnectPlayerInfo* New() const PROTOBUF_FINAL { return New(NULL); }

  BankerReconnectPlayerInfo* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const BankerReconnectPlayerInfo& from);
  void MergeFrom(const BankerReconnectPlayerInfo& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(BankerReconnectPlayerInfo* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated int32 cards = 9;
  int cards_size() const;
  void clear_cards();
  static const int kCardsFieldNumber = 9;
  ::google::protobuf::int32 cards(int index) const;
  void set_cards(int index, ::google::protobuf::int32 value);
  void add_cards(::google::protobuf::int32 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      cards() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_cards();

  // optional string name = 3;
  bool has_name() const;
  void clear_name();
  static const int kNameFieldNumber = 3;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // optional string icon = 4;
  bool has_icon() const;
  void clear_icon();
  static const int kIconFieldNumber = 4;
  const ::std::string& icon() const;
  void set_icon(const ::std::string& value);
  #if LANG_CXX11
  void set_icon(::std::string&& value);
  #endif
  void set_icon(const char* value);
  void set_icon(const char* value, size_t size);
  ::std::string* mutable_icon();
  ::std::string* release_icon();
  void set_allocated_icon(::std::string* icon);

  // required int32 guid = 1;
  bool has_guid() const;
  void clear_guid();
  static const int kGuidFieldNumber = 1;
  ::google::protobuf::int32 guid() const;
  void set_guid(::google::protobuf::int32 value);

  // required int32 chair = 2;
  bool has_chair() const;
  void clear_chair();
  static const int kChairFieldNumber = 2;
  ::google::protobuf::int32 chair() const;
  void set_chair(::google::protobuf::int32 value);

  // optional int64 money = 5;
  bool has_money() const;
  void clear_money();
  static const int kMoneyFieldNumber = 5;
  ::google::protobuf::int64 money() const;
  void set_money(::google::protobuf::int64 value);

  // optional int32 ratio = 6;
  bool has_ratio() const;
  void clear_ratio();
  static const int kRatioFieldNumber = 6;
  ::google::protobuf::int32 ratio() const;
  void set_ratio(::google::protobuf::int32 value);

  // optional int32 position = 7;
  bool has_position() const;
  void clear_position();
  static const int kPositionFieldNumber = 7;
  ::google::protobuf::int32 position() const;
  void set_position(::google::protobuf::int32 value);

  // optional int64 bet_money = 8;
  bool has_bet_money() const;
  void clear_bet_money();
  static const int kBetMoneyFieldNumber = 8;
  ::google::protobuf::int64 bet_money() const;
  void set_bet_money(::google::protobuf::int64 value);

  // optional int32 cards_type = 10;
  bool has_cards_type() const;
  void clear_cards_type();
  static const int kCardsTypeFieldNumber = 10;
  ::google::protobuf::int32 cards_type() const;
  void set_cards_type(::google::protobuf::int32 value);

  // optional int32 flag = 11;
  bool has_flag() const;
  void clear_flag();
  static const int kFlagFieldNumber = 11;
  ::google::protobuf::int32 flag() const;
  void set_flag(::google::protobuf::int32 value);

  // optional int64 tax = 12;
  bool has_tax() const;
  void clear_tax();
  static const int kTaxFieldNumber = 12;
  ::google::protobuf::int64 tax() const;
  void set_tax(::google::protobuf::int64 value);

  // required int64 increment_money = 14;
  bool has_increment_money() const;
  void clear_increment_money();
  static const int kIncrementMoneyFieldNumber = 14;
  ::google::protobuf::int64 increment_money() const;
  void set_increment_money(::google::protobuf::int64 value);

  // optional int32 victory = 13;
  bool has_victory() const;
  void clear_victory();
  static const int kVictoryFieldNumber = 13;
  ::google::protobuf::int32 victory() const;
  void set_victory(::google::protobuf::int32 value);

  // optional int32 status = 15;
  bool has_status() const;
  void clear_status();
  static const int kStatusFieldNumber = 15;
  ::google::protobuf::int32 status() const;
  void set_status(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:BankerReconnectPlayerInfo)
 private:
  void set_has_guid();
  void clear_has_guid();
  void set_has_chair();
  void clear_has_chair();
  void set_has_name();
  void clear_has_name();
  void set_has_icon();
  void clear_has_icon();
  void set_has_money();
  void clear_has_money();
  void set_has_ratio();
  void clear_has_ratio();
  void set_has_position();
  void clear_has_position();
  void set_has_bet_money();
  void clear_has_bet_money();
  void set_has_cards_type();
  void clear_has_cards_type();
  void set_has_flag();
  void clear_has_flag();
  void set_has_tax();
  void clear_has_tax();
  void set_has_victory();
  void clear_has_victory();
  void set_has_increment_money();
  void clear_has_increment_money();
  void set_has_status();
  void clear_has_status();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > cards_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::google::protobuf::internal::ArenaStringPtr icon_;
  ::google::protobuf::int32 guid_;
  ::google::protobuf::int32 chair_;
  ::google::protobuf::int64 money_;
  ::google::protobuf::int32 ratio_;
  ::google::protobuf::int32 position_;
  ::google::protobuf::int64 bet_money_;
  ::google::protobuf::int32 cards_type_;
  ::google::protobuf::int32 flag_;
  ::google::protobuf::int64 tax_;
  ::google::protobuf::int64 increment_money_;
  ::google::protobuf::int32 victory_;
  ::google::protobuf::int32 status_;
  friend struct protobuf_public_5fbanker_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class SC_BankerTableMatching : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:SC_BankerTableMatching) */ {
 public:
  SC_BankerTableMatching();
  virtual ~SC_BankerTableMatching();

  SC_BankerTableMatching(const SC_BankerTableMatching& from);

  inline SC_BankerTableMatching& operator=(const SC_BankerTableMatching& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SC_BankerTableMatching& default_instance();

  static inline const SC_BankerTableMatching* internal_default_instance() {
    return reinterpret_cast<const SC_BankerTableMatching*>(
               &_SC_BankerTableMatching_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    4;

  void Swap(SC_BankerTableMatching* other);

  // implements Message ----------------------------------------------

  inline SC_BankerTableMatching* New() const PROTOBUF_FINAL { return New(NULL); }

  SC_BankerTableMatching* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const SC_BankerTableMatching& from);
  void MergeFrom(const SC_BankerTableMatching& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(SC_BankerTableMatching* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  typedef SC_BankerTableMatching_MsgID MsgID;
  static const MsgID ID =
    SC_BankerTableMatching_MsgID_ID;
  static inline bool MsgID_IsValid(int value) {
    return SC_BankerTableMatching_MsgID_IsValid(value);
  }
  static const MsgID MsgID_MIN =
    SC_BankerTableMatching_MsgID_MsgID_MIN;
  static const MsgID MsgID_MAX =
    SC_BankerTableMatching_MsgID_MsgID_MAX;
  static const int MsgID_ARRAYSIZE =
    SC_BankerTableMatching_MsgID_MsgID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  MsgID_descriptor() {
    return SC_BankerTableMatching_MsgID_descriptor();
  }
  static inline const ::std::string& MsgID_Name(MsgID value) {
    return SC_BankerTableMatching_MsgID_Name(value);
  }
  static inline bool MsgID_Parse(const ::std::string& name,
      MsgID* value) {
    return SC_BankerTableMatching_MsgID_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional int32 chair = 1;
  bool has_chair() const;
  void clear_chair();
  static const int kChairFieldNumber = 1;
  ::google::protobuf::int32 chair() const;
  void set_chair(::google::protobuf::int32 value);

  // optional int32 chair1 = 2;
  bool has_chair1() const;
  void clear_chair1();
  static const int kChair1FieldNumber = 2;
  ::google::protobuf::int32 chair1() const;
  void set_chair1(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:SC_BankerTableMatching)
 private:
  void set_has_chair();
  void clear_has_chair();
  void set_has_chair1();
  void clear_has_chair1();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::int32 chair_;
  ::google::protobuf::int32 chair1_;
  friend struct protobuf_public_5fbanker_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class SC_BankerSendCards : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:SC_BankerSendCards) */ {
 public:
  SC_BankerSendCards();
  virtual ~SC_BankerSendCards();

  SC_BankerSendCards(const SC_BankerSendCards& from);

  inline SC_BankerSendCards& operator=(const SC_BankerSendCards& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SC_BankerSendCards& default_instance();

  static inline const SC_BankerSendCards* internal_default_instance() {
    return reinterpret_cast<const SC_BankerSendCards*>(
               &_SC_BankerSendCards_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    5;

  void Swap(SC_BankerSendCards* other);

  // implements Message ----------------------------------------------

  inline SC_BankerSendCards* New() const PROTOBUF_FINAL { return New(NULL); }

  SC_BankerSendCards* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const SC_BankerSendCards& from);
  void MergeFrom(const SC_BankerSendCards& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(SC_BankerSendCards* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  typedef SC_BankerSendCards_MsgID MsgID;
  static const MsgID ID =
    SC_BankerSendCards_MsgID_ID;
  static inline bool MsgID_IsValid(int value) {
    return SC_BankerSendCards_MsgID_IsValid(value);
  }
  static const MsgID MsgID_MIN =
    SC_BankerSendCards_MsgID_MsgID_MIN;
  static const MsgID MsgID_MAX =
    SC_BankerSendCards_MsgID_MsgID_MAX;
  static const int MsgID_ARRAYSIZE =
    SC_BankerSendCards_MsgID_MsgID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  MsgID_descriptor() {
    return SC_BankerSendCards_MsgID_descriptor();
  }
  static inline const ::std::string& MsgID_Name(MsgID value) {
    return SC_BankerSendCards_MsgID_Name(value);
  }
  static inline bool MsgID_Parse(const ::std::string& name,
      MsgID* value) {
    return SC_BankerSendCards_MsgID_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // repeated .BankerPlayerInfo pb_player = 2;
  int pb_player_size() const;
  void clear_pb_player();
  static const int kPbPlayerFieldNumber = 2;
  const ::BankerPlayerInfo& pb_player(int index) const;
  ::BankerPlayerInfo* mutable_pb_player(int index);
  ::BankerPlayerInfo* add_pb_player();
  ::google::protobuf::RepeatedPtrField< ::BankerPlayerInfo >*
      mutable_pb_player();
  const ::google::protobuf::RepeatedPtrField< ::BankerPlayerInfo >&
      pb_player() const;

  // repeated int32 cards = 3;
  int cards_size() const;
  void clear_cards();
  static const int kCardsFieldNumber = 3;
  ::google::protobuf::int32 cards(int index) const;
  void set_cards(int index, ::google::protobuf::int32 value);
  void add_cards(::google::protobuf::int32 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      cards() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_cards();

  // optional .BankerTable pb_table = 1;
  bool has_pb_table() const;
  void clear_pb_table();
  static const int kPbTableFieldNumber = 1;
  const ::BankerTable& pb_table() const;
  ::BankerTable* mutable_pb_table();
  ::BankerTable* release_pb_table();
  void set_allocated_pb_table(::BankerTable* pb_table);

  // @@protoc_insertion_point(class_scope:SC_BankerSendCards)
 private:
  void set_has_pb_table();
  void clear_has_pb_table();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::BankerPlayerInfo > pb_player_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > cards_;
  ::BankerTable* pb_table_;
  friend struct protobuf_public_5fbanker_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class SC_BankerBeginToContend : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:SC_BankerBeginToContend) */ {
 public:
  SC_BankerBeginToContend();
  virtual ~SC_BankerBeginToContend();

  SC_BankerBeginToContend(const SC_BankerBeginToContend& from);

  inline SC_BankerBeginToContend& operator=(const SC_BankerBeginToContend& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SC_BankerBeginToContend& default_instance();

  static inline const SC_BankerBeginToContend* internal_default_instance() {
    return reinterpret_cast<const SC_BankerBeginToContend*>(
               &_SC_BankerBeginToContend_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    6;

  void Swap(SC_BankerBeginToContend* other);

  // implements Message ----------------------------------------------

  inline SC_BankerBeginToContend* New() const PROTOBUF_FINAL { return New(NULL); }

  SC_BankerBeginToContend* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const SC_BankerBeginToContend& from);
  void MergeFrom(const SC_BankerBeginToContend& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(SC_BankerBeginToContend* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  typedef SC_BankerBeginToContend_MsgID MsgID;
  static const MsgID ID =
    SC_BankerBeginToContend_MsgID_ID;
  static inline bool MsgID_IsValid(int value) {
    return SC_BankerBeginToContend_MsgID_IsValid(value);
  }
  static const MsgID MsgID_MIN =
    SC_BankerBeginToContend_MsgID_MsgID_MIN;
  static const MsgID MsgID_MAX =
    SC_BankerBeginToContend_MsgID_MsgID_MAX;
  static const int MsgID_ARRAYSIZE =
    SC_BankerBeginToContend_MsgID_MsgID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  MsgID_descriptor() {
    return SC_BankerBeginToContend_MsgID_descriptor();
  }
  static inline const ::std::string& MsgID_Name(MsgID value) {
    return SC_BankerBeginToContend_MsgID_Name(value);
  }
  static inline bool MsgID_Parse(const ::std::string& name,
      MsgID* value) {
    return SC_BankerBeginToContend_MsgID_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // required int32 countdown = 1;
  bool has_countdown() const;
  void clear_countdown();
  static const int kCountdownFieldNumber = 1;
  ::google::protobuf::int32 countdown() const;
  void set_countdown(::google::protobuf::int32 value);

  // required int32 total_time = 2;
  bool has_total_time() const;
  void clear_total_time();
  static const int kTotalTimeFieldNumber = 2;
  ::google::protobuf::int32 total_time() const;
  void set_total_time(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:SC_BankerBeginToContend)
 private:
  void set_has_countdown();
  void clear_has_countdown();
  void set_has_total_time();
  void clear_has_total_time();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::int32 countdown_;
  ::google::protobuf::int32 total_time_;
  friend struct protobuf_public_5fbanker_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class SC_BankerPlayerContend : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:SC_BankerPlayerContend) */ {
 public:
  SC_BankerPlayerContend();
  virtual ~SC_BankerPlayerContend();

  SC_BankerPlayerContend(const SC_BankerPlayerContend& from);

  inline SC_BankerPlayerContend& operator=(const SC_BankerPlayerContend& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SC_BankerPlayerContend& default_instance();

  static inline const SC_BankerPlayerContend* internal_default_instance() {
    return reinterpret_cast<const SC_BankerPlayerContend*>(
               &_SC_BankerPlayerContend_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    7;

  void Swap(SC_BankerPlayerContend* other);

  // implements Message ----------------------------------------------

  inline SC_BankerPlayerContend* New() const PROTOBUF_FINAL { return New(NULL); }

  SC_BankerPlayerContend* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const SC_BankerPlayerContend& from);
  void MergeFrom(const SC_BankerPlayerContend& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(SC_BankerPlayerContend* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  typedef SC_BankerPlayerContend_MsgID MsgID;
  static const MsgID ID =
    SC_BankerPlayerContend_MsgID_ID;
  static inline bool MsgID_IsValid(int value) {
    return SC_BankerPlayerContend_MsgID_IsValid(value);
  }
  static const MsgID MsgID_MIN =
    SC_BankerPlayerContend_MsgID_MsgID_MIN;
  static const MsgID MsgID_MAX =
    SC_BankerPlayerContend_MsgID_MsgID_MAX;
  static const int MsgID_ARRAYSIZE =
    SC_BankerPlayerContend_MsgID_MsgID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  MsgID_descriptor() {
    return SC_BankerPlayerContend_MsgID_descriptor();
  }
  static inline const ::std::string& MsgID_Name(MsgID value) {
    return SC_BankerPlayerContend_MsgID_Name(value);
  }
  static inline bool MsgID_Parse(const ::std::string& name,
      MsgID* value) {
    return SC_BankerPlayerContend_MsgID_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional int32 chair = 1;
  bool has_chair() const;
  void clear_chair();
  static const int kChairFieldNumber = 1;
  ::google::protobuf::int32 chair() const;
  void set_chair(::google::protobuf::int32 value);

  // optional int32 ratio = 2;
  bool has_ratio() const;
  void clear_ratio();
  static const int kRatioFieldNumber = 2;
  ::google::protobuf::int32 ratio() const;
  void set_ratio(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:SC_BankerPlayerContend)
 private:
  void set_has_chair();
  void clear_has_chair();
  void set_has_ratio();
  void clear_has_ratio();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::int32 chair_;
  ::google::protobuf::int32 ratio_;
  friend struct protobuf_public_5fbanker_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class SC_BankerChoosingBanker : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:SC_BankerChoosingBanker) */ {
 public:
  SC_BankerChoosingBanker();
  virtual ~SC_BankerChoosingBanker();

  SC_BankerChoosingBanker(const SC_BankerChoosingBanker& from);

  inline SC_BankerChoosingBanker& operator=(const SC_BankerChoosingBanker& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SC_BankerChoosingBanker& default_instance();

  static inline const SC_BankerChoosingBanker* internal_default_instance() {
    return reinterpret_cast<const SC_BankerChoosingBanker*>(
               &_SC_BankerChoosingBanker_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    8;

  void Swap(SC_BankerChoosingBanker* other);

  // implements Message ----------------------------------------------

  inline SC_BankerChoosingBanker* New() const PROTOBUF_FINAL { return New(NULL); }

  SC_BankerChoosingBanker* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const SC_BankerChoosingBanker& from);
  void MergeFrom(const SC_BankerChoosingBanker& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(SC_BankerChoosingBanker* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  typedef SC_BankerChoosingBanker_MsgID MsgID;
  static const MsgID ID =
    SC_BankerChoosingBanker_MsgID_ID;
  static inline bool MsgID_IsValid(int value) {
    return SC_BankerChoosingBanker_MsgID_IsValid(value);
  }
  static const MsgID MsgID_MIN =
    SC_BankerChoosingBanker_MsgID_MsgID_MIN;
  static const MsgID MsgID_MAX =
    SC_BankerChoosingBanker_MsgID_MsgID_MAX;
  static const int MsgID_ARRAYSIZE =
    SC_BankerChoosingBanker_MsgID_MsgID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  MsgID_descriptor() {
    return SC_BankerChoosingBanker_MsgID_descriptor();
  }
  static inline const ::std::string& MsgID_Name(MsgID value) {
    return SC_BankerChoosingBanker_MsgID_Name(value);
  }
  static inline bool MsgID_Parse(const ::std::string& name,
      MsgID* value) {
    return SC_BankerChoosingBanker_MsgID_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // repeated int32 chairs = 1;
  int chairs_size() const;
  void clear_chairs();
  static const int kChairsFieldNumber = 1;
  ::google::protobuf::int32 chairs(int index) const;
  void set_chairs(int index, ::google::protobuf::int32 value);
  void add_chairs(::google::protobuf::int32 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      chairs() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_chairs();

  // optional int32 banker_chair = 2;
  bool has_banker_chair() const;
  void clear_banker_chair();
  static const int kBankerChairFieldNumber = 2;
  ::google::protobuf::int32 banker_chair() const;
  void set_banker_chair(::google::protobuf::int32 value);

  // optional int32 banker_ratio = 3;
  bool has_banker_ratio() const;
  void clear_banker_ratio();
  static const int kBankerRatioFieldNumber = 3;
  ::google::protobuf::int32 banker_ratio() const;
  void set_banker_ratio(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:SC_BankerChoosingBanker)
 private:
  void set_has_banker_chair();
  void clear_has_banker_chair();
  void set_has_banker_ratio();
  void clear_has_banker_ratio();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > chairs_;
  ::google::protobuf::int32 banker_chair_;
  ::google::protobuf::int32 banker_ratio_;
  friend struct protobuf_public_5fbanker_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class SC_BankerPlayerBeginToBet : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:SC_BankerPlayerBeginToBet) */ {
 public:
  SC_BankerPlayerBeginToBet();
  virtual ~SC_BankerPlayerBeginToBet();

  SC_BankerPlayerBeginToBet(const SC_BankerPlayerBeginToBet& from);

  inline SC_BankerPlayerBeginToBet& operator=(const SC_BankerPlayerBeginToBet& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SC_BankerPlayerBeginToBet& default_instance();

  static inline const SC_BankerPlayerBeginToBet* internal_default_instance() {
    return reinterpret_cast<const SC_BankerPlayerBeginToBet*>(
               &_SC_BankerPlayerBeginToBet_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    9;

  void Swap(SC_BankerPlayerBeginToBet* other);

  // implements Message ----------------------------------------------

  inline SC_BankerPlayerBeginToBet* New() const PROTOBUF_FINAL { return New(NULL); }

  SC_BankerPlayerBeginToBet* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const SC_BankerPlayerBeginToBet& from);
  void MergeFrom(const SC_BankerPlayerBeginToBet& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(SC_BankerPlayerBeginToBet* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  typedef SC_BankerPlayerBeginToBet_MsgID MsgID;
  static const MsgID ID =
    SC_BankerPlayerBeginToBet_MsgID_ID;
  static inline bool MsgID_IsValid(int value) {
    return SC_BankerPlayerBeginToBet_MsgID_IsValid(value);
  }
  static const MsgID MsgID_MIN =
    SC_BankerPlayerBeginToBet_MsgID_MsgID_MIN;
  static const MsgID MsgID_MAX =
    SC_BankerPlayerBeginToBet_MsgID_MsgID_MAX;
  static const int MsgID_ARRAYSIZE =
    SC_BankerPlayerBeginToBet_MsgID_MsgID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  MsgID_descriptor() {
    return SC_BankerPlayerBeginToBet_MsgID_descriptor();
  }
  static inline const ::std::string& MsgID_Name(MsgID value) {
    return SC_BankerPlayerBeginToBet_MsgID_Name(value);
  }
  static inline bool MsgID_Parse(const ::std::string& name,
      MsgID* value) {
    return SC_BankerPlayerBeginToBet_MsgID_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // required int32 countdown = 1;
  bool has_countdown() const;
  void clear_countdown();
  static const int kCountdownFieldNumber = 1;
  ::google::protobuf::int32 countdown() const;
  void set_countdown(::google::protobuf::int32 value);

  // required int32 total_time = 2;
  bool has_total_time() const;
  void clear_total_time();
  static const int kTotalTimeFieldNumber = 2;
  ::google::protobuf::int32 total_time() const;
  void set_total_time(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:SC_BankerPlayerBeginToBet)
 private:
  void set_has_countdown();
  void clear_has_countdown();
  void set_has_total_time();
  void clear_has_total_time();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::int32 countdown_;
  ::google::protobuf::int32 total_time_;
  friend struct protobuf_public_5fbanker_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class SC_BankerPlayerBet : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:SC_BankerPlayerBet) */ {
 public:
  SC_BankerPlayerBet();
  virtual ~SC_BankerPlayerBet();

  SC_BankerPlayerBet(const SC_BankerPlayerBet& from);

  inline SC_BankerPlayerBet& operator=(const SC_BankerPlayerBet& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SC_BankerPlayerBet& default_instance();

  static inline const SC_BankerPlayerBet* internal_default_instance() {
    return reinterpret_cast<const SC_BankerPlayerBet*>(
               &_SC_BankerPlayerBet_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    10;

  void Swap(SC_BankerPlayerBet* other);

  // implements Message ----------------------------------------------

  inline SC_BankerPlayerBet* New() const PROTOBUF_FINAL { return New(NULL); }

  SC_BankerPlayerBet* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const SC_BankerPlayerBet& from);
  void MergeFrom(const SC_BankerPlayerBet& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(SC_BankerPlayerBet* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  typedef SC_BankerPlayerBet_MsgID MsgID;
  static const MsgID ID =
    SC_BankerPlayerBet_MsgID_ID;
  static inline bool MsgID_IsValid(int value) {
    return SC_BankerPlayerBet_MsgID_IsValid(value);
  }
  static const MsgID MsgID_MIN =
    SC_BankerPlayerBet_MsgID_MsgID_MIN;
  static const MsgID MsgID_MAX =
    SC_BankerPlayerBet_MsgID_MsgID_MAX;
  static const int MsgID_ARRAYSIZE =
    SC_BankerPlayerBet_MsgID_MsgID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  MsgID_descriptor() {
    return SC_BankerPlayerBet_MsgID_descriptor();
  }
  static inline const ::std::string& MsgID_Name(MsgID value) {
    return SC_BankerPlayerBet_MsgID_Name(value);
  }
  static inline bool MsgID_Parse(const ::std::string& name,
      MsgID* value) {
    return SC_BankerPlayerBet_MsgID_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // required int64 bet_money = 2;
  bool has_bet_money() const;
  void clear_bet_money();
  static const int kBetMoneyFieldNumber = 2;
  ::google::protobuf::int64 bet_money() const;
  void set_bet_money(::google::protobuf::int64 value);

  // optional int32 chair = 1;
  bool has_chair() const;
  void clear_chair();
  static const int kChairFieldNumber = 1;
  ::google::protobuf::int32 chair() const;
  void set_chair(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:SC_BankerPlayerBet)
 private:
  void set_has_chair();
  void clear_has_chair();
  void set_has_bet_money();
  void clear_has_bet_money();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::int64 bet_money_;
  ::google::protobuf::int32 chair_;
  friend struct protobuf_public_5fbanker_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class SC_BankerShowOwnCards : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:SC_BankerShowOwnCards) */ {
 public:
  SC_BankerShowOwnCards();
  virtual ~SC_BankerShowOwnCards();

  SC_BankerShowOwnCards(const SC_BankerShowOwnCards& from);

  inline SC_BankerShowOwnCards& operator=(const SC_BankerShowOwnCards& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SC_BankerShowOwnCards& default_instance();

  static inline const SC_BankerShowOwnCards* internal_default_instance() {
    return reinterpret_cast<const SC_BankerShowOwnCards*>(
               &_SC_BankerShowOwnCards_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    11;

  void Swap(SC_BankerShowOwnCards* other);

  // implements Message ----------------------------------------------

  inline SC_BankerShowOwnCards* New() const PROTOBUF_FINAL { return New(NULL); }

  SC_BankerShowOwnCards* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const SC_BankerShowOwnCards& from);
  void MergeFrom(const SC_BankerShowOwnCards& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(SC_BankerShowOwnCards* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  typedef SC_BankerShowOwnCards_MsgID MsgID;
  static const MsgID ID =
    SC_BankerShowOwnCards_MsgID_ID;
  static inline bool MsgID_IsValid(int value) {
    return SC_BankerShowOwnCards_MsgID_IsValid(value);
  }
  static const MsgID MsgID_MIN =
    SC_BankerShowOwnCards_MsgID_MsgID_MIN;
  static const MsgID MsgID_MAX =
    SC_BankerShowOwnCards_MsgID_MsgID_MAX;
  static const int MsgID_ARRAYSIZE =
    SC_BankerShowOwnCards_MsgID_MsgID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  MsgID_descriptor() {
    return SC_BankerShowOwnCards_MsgID_descriptor();
  }
  static inline const ::std::string& MsgID_Name(MsgID value) {
    return SC_BankerShowOwnCards_MsgID_Name(value);
  }
  static inline bool MsgID_Parse(const ::std::string& name,
      MsgID* value) {
    return SC_BankerShowOwnCards_MsgID_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // repeated int32 cards = 1;
  int cards_size() const;
  void clear_cards();
  static const int kCardsFieldNumber = 1;
  ::google::protobuf::int32 cards(int index) const;
  void set_cards(int index, ::google::protobuf::int32 value);
  void add_cards(::google::protobuf::int32 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      cards() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_cards();

  // optional int32 cards_type = 2;
  bool has_cards_type() const;
  void clear_cards_type();
  static const int kCardsTypeFieldNumber = 2;
  ::google::protobuf::int32 cards_type() const;
  void set_cards_type(::google::protobuf::int32 value);

  // required int32 countdown = 3;
  bool has_countdown() const;
  void clear_countdown();
  static const int kCountdownFieldNumber = 3;
  ::google::protobuf::int32 countdown() const;
  void set_countdown(::google::protobuf::int32 value);

  // required int32 total_time = 4;
  bool has_total_time() const;
  void clear_total_time();
  static const int kTotalTimeFieldNumber = 4;
  ::google::protobuf::int32 total_time() const;
  void set_total_time(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:SC_BankerShowOwnCards)
 private:
  void set_has_cards_type();
  void clear_has_cards_type();
  void set_has_countdown();
  void clear_has_countdown();
  void set_has_total_time();
  void clear_has_total_time();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > cards_;
  ::google::protobuf::int32 cards_type_;
  ::google::protobuf::int32 countdown_;
  ::google::protobuf::int32 total_time_;
  friend struct protobuf_public_5fbanker_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class SC_BankerShowCards : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:SC_BankerShowCards) */ {
 public:
  SC_BankerShowCards();
  virtual ~SC_BankerShowCards();

  SC_BankerShowCards(const SC_BankerShowCards& from);

  inline SC_BankerShowCards& operator=(const SC_BankerShowCards& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SC_BankerShowCards& default_instance();

  static inline const SC_BankerShowCards* internal_default_instance() {
    return reinterpret_cast<const SC_BankerShowCards*>(
               &_SC_BankerShowCards_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    12;

  void Swap(SC_BankerShowCards* other);

  // implements Message ----------------------------------------------

  inline SC_BankerShowCards* New() const PROTOBUF_FINAL { return New(NULL); }

  SC_BankerShowCards* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const SC_BankerShowCards& from);
  void MergeFrom(const SC_BankerShowCards& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(SC_BankerShowCards* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  typedef SC_BankerShowCards_MsgID MsgID;
  static const MsgID ID =
    SC_BankerShowCards_MsgID_ID;
  static inline bool MsgID_IsValid(int value) {
    return SC_BankerShowCards_MsgID_IsValid(value);
  }
  static const MsgID MsgID_MIN =
    SC_BankerShowCards_MsgID_MsgID_MIN;
  static const MsgID MsgID_MAX =
    SC_BankerShowCards_MsgID_MsgID_MAX;
  static const int MsgID_ARRAYSIZE =
    SC_BankerShowCards_MsgID_MsgID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  MsgID_descriptor() {
    return SC_BankerShowCards_MsgID_descriptor();
  }
  static inline const ::std::string& MsgID_Name(MsgID value) {
    return SC_BankerShowCards_MsgID_Name(value);
  }
  static inline bool MsgID_Parse(const ::std::string& name,
      MsgID* value) {
    return SC_BankerShowCards_MsgID_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // repeated int32 cards = 2;
  int cards_size() const;
  void clear_cards();
  static const int kCardsFieldNumber = 2;
  ::google::protobuf::int32 cards(int index) const;
  void set_cards(int index, ::google::protobuf::int32 value);
  void add_cards(::google::protobuf::int32 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      cards() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_cards();

  // optional int32 chair = 1;
  bool has_chair() const;
  void clear_chair();
  static const int kChairFieldNumber = 1;
  ::google::protobuf::int32 chair() const;
  void set_chair(::google::protobuf::int32 value);

  // optional int32 cards_type = 3;
  bool has_cards_type() const;
  void clear_cards_type();
  static const int kCardsTypeFieldNumber = 3;
  ::google::protobuf::int32 cards_type() const;
  void set_cards_type(::google::protobuf::int32 value);

  // optional int32 flag = 4;
  bool has_flag() const;
  void clear_flag();
  static const int kFlagFieldNumber = 4;
  ::google::protobuf::int32 flag() const;
  void set_flag(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:SC_BankerShowCards)
 private:
  void set_has_chair();
  void clear_has_chair();
  void set_has_cards_type();
  void clear_has_cards_type();
  void set_has_flag();
  void clear_has_flag();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > cards_;
  ::google::protobuf::int32 chair_;
  ::google::protobuf::int32 cards_type_;
  ::google::protobuf::int32 flag_;
  friend struct protobuf_public_5fbanker_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class SC_BankerGameEnd : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:SC_BankerGameEnd) */ {
 public:
  SC_BankerGameEnd();
  virtual ~SC_BankerGameEnd();

  SC_BankerGameEnd(const SC_BankerGameEnd& from);

  inline SC_BankerGameEnd& operator=(const SC_BankerGameEnd& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SC_BankerGameEnd& default_instance();

  static inline const SC_BankerGameEnd* internal_default_instance() {
    return reinterpret_cast<const SC_BankerGameEnd*>(
               &_SC_BankerGameEnd_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    13;

  void Swap(SC_BankerGameEnd* other);

  // implements Message ----------------------------------------------

  inline SC_BankerGameEnd* New() const PROTOBUF_FINAL { return New(NULL); }

  SC_BankerGameEnd* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const SC_BankerGameEnd& from);
  void MergeFrom(const SC_BankerGameEnd& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(SC_BankerGameEnd* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  typedef SC_BankerGameEnd_MsgID MsgID;
  static const MsgID ID =
    SC_BankerGameEnd_MsgID_ID;
  static inline bool MsgID_IsValid(int value) {
    return SC_BankerGameEnd_MsgID_IsValid(value);
  }
  static const MsgID MsgID_MIN =
    SC_BankerGameEnd_MsgID_MsgID_MIN;
  static const MsgID MsgID_MAX =
    SC_BankerGameEnd_MsgID_MsgID_MAX;
  static const int MsgID_ARRAYSIZE =
    SC_BankerGameEnd_MsgID_MsgID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  MsgID_descriptor() {
    return SC_BankerGameEnd_MsgID_descriptor();
  }
  static inline const ::std::string& MsgID_Name(MsgID value) {
    return SC_BankerGameEnd_MsgID_Name(value);
  }
  static inline bool MsgID_Parse(const ::std::string& name,
      MsgID* value) {
    return SC_BankerGameEnd_MsgID_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // repeated .BankerGameEndPlayerInfo pb_player = 1;
  int pb_player_size() const;
  void clear_pb_player();
  static const int kPbPlayerFieldNumber = 1;
  const ::BankerGameEndPlayerInfo& pb_player(int index) const;
  ::BankerGameEndPlayerInfo* mutable_pb_player(int index);
  ::BankerGameEndPlayerInfo* add_pb_player();
  ::google::protobuf::RepeatedPtrField< ::BankerGameEndPlayerInfo >*
      mutable_pb_player();
  const ::google::protobuf::RepeatedPtrField< ::BankerGameEndPlayerInfo >&
      pb_player() const;

  // optional .BankerTable pb_table = 2;
  bool has_pb_table() const;
  void clear_pb_table();
  static const int kPbTableFieldNumber = 2;
  const ::BankerTable& pb_table() const;
  ::BankerTable* mutable_pb_table();
  ::BankerTable* release_pb_table();
  void set_allocated_pb_table(::BankerTable* pb_table);

  // @@protoc_insertion_point(class_scope:SC_BankerGameEnd)
 private:
  void set_has_pb_table();
  void clear_has_pb_table();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::BankerGameEndPlayerInfo > pb_player_;
  ::BankerTable* pb_table_;
  friend struct protobuf_public_5fbanker_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class SC_BankerForceToLeave : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:SC_BankerForceToLeave) */ {
 public:
  SC_BankerForceToLeave();
  virtual ~SC_BankerForceToLeave();

  SC_BankerForceToLeave(const SC_BankerForceToLeave& from);

  inline SC_BankerForceToLeave& operator=(const SC_BankerForceToLeave& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SC_BankerForceToLeave& default_instance();

  static inline const SC_BankerForceToLeave* internal_default_instance() {
    return reinterpret_cast<const SC_BankerForceToLeave*>(
               &_SC_BankerForceToLeave_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    14;

  void Swap(SC_BankerForceToLeave* other);

  // implements Message ----------------------------------------------

  inline SC_BankerForceToLeave* New() const PROTOBUF_FINAL { return New(NULL); }

  SC_BankerForceToLeave* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const SC_BankerForceToLeave& from);
  void MergeFrom(const SC_BankerForceToLeave& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(SC_BankerForceToLeave* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  typedef SC_BankerForceToLeave_MsgID MsgID;
  static const MsgID ID =
    SC_BankerForceToLeave_MsgID_ID;
  static inline bool MsgID_IsValid(int value) {
    return SC_BankerForceToLeave_MsgID_IsValid(value);
  }
  static const MsgID MsgID_MIN =
    SC_BankerForceToLeave_MsgID_MsgID_MIN;
  static const MsgID MsgID_MAX =
    SC_BankerForceToLeave_MsgID_MsgID_MAX;
  static const int MsgID_ARRAYSIZE =
    SC_BankerForceToLeave_MsgID_MsgID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  MsgID_descriptor() {
    return SC_BankerForceToLeave_MsgID_descriptor();
  }
  static inline const ::std::string& MsgID_Name(MsgID value) {
    return SC_BankerForceToLeave_MsgID_Name(value);
  }
  static inline bool MsgID_Parse(const ::std::string& name,
      MsgID* value) {
    return SC_BankerForceToLeave_MsgID_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional string reason = 1;
  bool has_reason() const;
  void clear_reason();
  static const int kReasonFieldNumber = 1;
  const ::std::string& reason() const;
  void set_reason(const ::std::string& value);
  #if LANG_CXX11
  void set_reason(::std::string&& value);
  #endif
  void set_reason(const char* value);
  void set_reason(const char* value, size_t size);
  ::std::string* mutable_reason();
  ::std::string* release_reason();
  void set_allocated_reason(::std::string* reason);

  // optional int32 num = 2;
  bool has_num() const;
  void clear_num();
  static const int kNumFieldNumber = 2;
  ::google::protobuf::int32 num() const;
  void set_num(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:SC_BankerForceToLeave)
 private:
  void set_has_reason();
  void clear_has_reason();
  void set_has_num();
  void clear_has_num();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr reason_;
  ::google::protobuf::int32 num_;
  friend struct protobuf_public_5fbanker_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class SC_BankerReconnectInfo : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:SC_BankerReconnectInfo) */ {
 public:
  SC_BankerReconnectInfo();
  virtual ~SC_BankerReconnectInfo();

  SC_BankerReconnectInfo(const SC_BankerReconnectInfo& from);

  inline SC_BankerReconnectInfo& operator=(const SC_BankerReconnectInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SC_BankerReconnectInfo& default_instance();

  static inline const SC_BankerReconnectInfo* internal_default_instance() {
    return reinterpret_cast<const SC_BankerReconnectInfo*>(
               &_SC_BankerReconnectInfo_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    15;

  void Swap(SC_BankerReconnectInfo* other);

  // implements Message ----------------------------------------------

  inline SC_BankerReconnectInfo* New() const PROTOBUF_FINAL { return New(NULL); }

  SC_BankerReconnectInfo* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const SC_BankerReconnectInfo& from);
  void MergeFrom(const SC_BankerReconnectInfo& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(SC_BankerReconnectInfo* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  typedef SC_BankerReconnectInfo_MsgID MsgID;
  static const MsgID ID =
    SC_BankerReconnectInfo_MsgID_ID;
  static inline bool MsgID_IsValid(int value) {
    return SC_BankerReconnectInfo_MsgID_IsValid(value);
  }
  static const MsgID MsgID_MIN =
    SC_BankerReconnectInfo_MsgID_MsgID_MIN;
  static const MsgID MsgID_MAX =
    SC_BankerReconnectInfo_MsgID_MsgID_MAX;
  static const int MsgID_ARRAYSIZE =
    SC_BankerReconnectInfo_MsgID_MsgID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  MsgID_descriptor() {
    return SC_BankerReconnectInfo_MsgID_descriptor();
  }
  static inline const ::std::string& MsgID_Name(MsgID value) {
    return SC_BankerReconnectInfo_MsgID_Name(value);
  }
  static inline bool MsgID_Parse(const ::std::string& name,
      MsgID* value) {
    return SC_BankerReconnectInfo_MsgID_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // repeated .BankerReconnectPlayerInfo pb_player = 2;
  int pb_player_size() const;
  void clear_pb_player();
  static const int kPbPlayerFieldNumber = 2;
  const ::BankerReconnectPlayerInfo& pb_player(int index) const;
  ::BankerReconnectPlayerInfo* mutable_pb_player(int index);
  ::BankerReconnectPlayerInfo* add_pb_player();
  ::google::protobuf::RepeatedPtrField< ::BankerReconnectPlayerInfo >*
      mutable_pb_player();
  const ::google::protobuf::RepeatedPtrField< ::BankerReconnectPlayerInfo >&
      pb_player() const;

  // optional .BankerTable pb_table = 1;
  bool has_pb_table() const;
  void clear_pb_table();
  static const int kPbTableFieldNumber = 1;
  const ::BankerTable& pb_table() const;
  ::BankerTable* mutable_pb_table();
  ::BankerTable* release_pb_table();
  void set_allocated_pb_table(::BankerTable* pb_table);

  // optional int32 countdown = 3;
  bool has_countdown() const;
  void clear_countdown();
  static const int kCountdownFieldNumber = 3;
  ::google::protobuf::int32 countdown() const;
  void set_countdown(::google::protobuf::int32 value);

  // optional int32 total_time = 4;
  bool has_total_time() const;
  void clear_total_time();
  static const int kTotalTimeFieldNumber = 4;
  ::google::protobuf::int32 total_time() const;
  void set_total_time(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:SC_BankerReconnectInfo)
 private:
  void set_has_pb_table();
  void clear_has_pb_table();
  void set_has_countdown();
  void clear_has_countdown();
  void set_has_total_time();
  void clear_has_total_time();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::BankerReconnectPlayerInfo > pb_player_;
  ::BankerTable* pb_table_;
  ::google::protobuf::int32 countdown_;
  ::google::protobuf::int32 total_time_;
  friend struct protobuf_public_5fbanker_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class SC_BankerPlayerSitDown : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:SC_BankerPlayerSitDown) */ {
 public:
  SC_BankerPlayerSitDown();
  virtual ~SC_BankerPlayerSitDown();

  SC_BankerPlayerSitDown(const SC_BankerPlayerSitDown& from);

  inline SC_BankerPlayerSitDown& operator=(const SC_BankerPlayerSitDown& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SC_BankerPlayerSitDown& default_instance();

  static inline const SC_BankerPlayerSitDown* internal_default_instance() {
    return reinterpret_cast<const SC_BankerPlayerSitDown*>(
               &_SC_BankerPlayerSitDown_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    16;

  void Swap(SC_BankerPlayerSitDown* other);

  // implements Message ----------------------------------------------

  inline SC_BankerPlayerSitDown* New() const PROTOBUF_FINAL { return New(NULL); }

  SC_BankerPlayerSitDown* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const SC_BankerPlayerSitDown& from);
  void MergeFrom(const SC_BankerPlayerSitDown& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(SC_BankerPlayerSitDown* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  typedef SC_BankerPlayerSitDown_MsgID MsgID;
  static const MsgID ID =
    SC_BankerPlayerSitDown_MsgID_ID;
  static inline bool MsgID_IsValid(int value) {
    return SC_BankerPlayerSitDown_MsgID_IsValid(value);
  }
  static const MsgID MsgID_MIN =
    SC_BankerPlayerSitDown_MsgID_MsgID_MIN;
  static const MsgID MsgID_MAX =
    SC_BankerPlayerSitDown_MsgID_MsgID_MAX;
  static const int MsgID_ARRAYSIZE =
    SC_BankerPlayerSitDown_MsgID_MsgID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  MsgID_descriptor() {
    return SC_BankerPlayerSitDown_MsgID_descriptor();
  }
  static inline const ::std::string& MsgID_Name(MsgID value) {
    return SC_BankerPlayerSitDown_MsgID_Name(value);
  }
  static inline bool MsgID_Parse(const ::std::string& name,
      MsgID* value) {
    return SC_BankerPlayerSitDown_MsgID_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional .BankerPlayerInfo pb_info = 1;
  bool has_pb_info() const;
  void clear_pb_info();
  static const int kPbInfoFieldNumber = 1;
  const ::BankerPlayerInfo& pb_info() const;
  ::BankerPlayerInfo* mutable_pb_info();
  ::BankerPlayerInfo* release_pb_info();
  void set_allocated_pb_info(::BankerPlayerInfo* pb_info);

  // optional int32 state = 2 [default = -1];
  bool has_state() const;
  void clear_state();
  static const int kStateFieldNumber = 2;
  ::google::protobuf::int32 state() const;
  void set_state(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:SC_BankerPlayerSitDown)
 private:
  void set_has_pb_info();
  void clear_has_pb_info();
  void set_has_state();
  void clear_has_state();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::BankerPlayerInfo* pb_info_;
  ::google::protobuf::int32 state_;
  friend struct protobuf_public_5fbanker_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class SC_BankerStartVote : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:SC_BankerStartVote) */ {
 public:
  SC_BankerStartVote();
  virtual ~SC_BankerStartVote();

  SC_BankerStartVote(const SC_BankerStartVote& from);

  inline SC_BankerStartVote& operator=(const SC_BankerStartVote& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SC_BankerStartVote& default_instance();

  static inline const SC_BankerStartVote* internal_default_instance() {
    return reinterpret_cast<const SC_BankerStartVote*>(
               &_SC_BankerStartVote_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    17;

  void Swap(SC_BankerStartVote* other);

  // implements Message ----------------------------------------------

  inline SC_BankerStartVote* New() const PROTOBUF_FINAL { return New(NULL); }

  SC_BankerStartVote* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const SC_BankerStartVote& from);
  void MergeFrom(const SC_BankerStartVote& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(SC_BankerStartVote* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  typedef SC_BankerStartVote_MsgID MsgID;
  static const MsgID ID =
    SC_BankerStartVote_MsgID_ID;
  static inline bool MsgID_IsValid(int value) {
    return SC_BankerStartVote_MsgID_IsValid(value);
  }
  static const MsgID MsgID_MIN =
    SC_BankerStartVote_MsgID_MsgID_MIN;
  static const MsgID MsgID_MAX =
    SC_BankerStartVote_MsgID_MsgID_MAX;
  static const int MsgID_ARRAYSIZE =
    SC_BankerStartVote_MsgID_MsgID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  MsgID_descriptor() {
    return SC_BankerStartVote_MsgID_descriptor();
  }
  static inline const ::std::string& MsgID_Name(MsgID value) {
    return SC_BankerStartVote_MsgID_Name(value);
  }
  static inline bool MsgID_Parse(const ::std::string& name,
      MsgID* value) {
    return SC_BankerStartVote_MsgID_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional int32 chair_id = 1;
  bool has_chair_id() const;
  void clear_chair_id();
  static const int kChairIdFieldNumber = 1;
  ::google::protobuf::int32 chair_id() const;
  void set_chair_id(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:SC_BankerStartVote)
 private:
  void set_has_chair_id();
  void clear_has_chair_id();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::int32 chair_id_;
  friend struct protobuf_public_5fbanker_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class SC_BankerVoteResult : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:SC_BankerVoteResult) */ {
 public:
  SC_BankerVoteResult();
  virtual ~SC_BankerVoteResult();

  SC_BankerVoteResult(const SC_BankerVoteResult& from);

  inline SC_BankerVoteResult& operator=(const SC_BankerVoteResult& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SC_BankerVoteResult& default_instance();

  static inline const SC_BankerVoteResult* internal_default_instance() {
    return reinterpret_cast<const SC_BankerVoteResult*>(
               &_SC_BankerVoteResult_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    18;

  void Swap(SC_BankerVoteResult* other);

  // implements Message ----------------------------------------------

  inline SC_BankerVoteResult* New() const PROTOBUF_FINAL { return New(NULL); }

  SC_BankerVoteResult* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const SC_BankerVoteResult& from);
  void MergeFrom(const SC_BankerVoteResult& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(SC_BankerVoteResult* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  typedef SC_BankerVoteResult_MsgID MsgID;
  static const MsgID ID =
    SC_BankerVoteResult_MsgID_ID;
  static inline bool MsgID_IsValid(int value) {
    return SC_BankerVoteResult_MsgID_IsValid(value);
  }
  static const MsgID MsgID_MIN =
    SC_BankerVoteResult_MsgID_MsgID_MIN;
  static const MsgID MsgID_MAX =
    SC_BankerVoteResult_MsgID_MsgID_MAX;
  static const int MsgID_ARRAYSIZE =
    SC_BankerVoteResult_MsgID_MsgID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  MsgID_descriptor() {
    return SC_BankerVoteResult_MsgID_descriptor();
  }
  static inline const ::std::string& MsgID_Name(MsgID value) {
    return SC_BankerVoteResult_MsgID_Name(value);
  }
  static inline bool MsgID_Parse(const ::std::string& name,
      MsgID* value) {
    return SC_BankerVoteResult_MsgID_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional int32 chair_id = 1;
  bool has_chair_id() const;
  void clear_chair_id();
  static const int kChairIdFieldNumber = 1;
  ::google::protobuf::int32 chair_id() const;
  void set_chair_id(::google::protobuf::int32 value);

  // optional bool agree = 2;
  bool has_agree() const;
  void clear_agree();
  static const int kAgreeFieldNumber = 2;
  bool agree() const;
  void set_agree(bool value);

  // @@protoc_insertion_point(class_scope:SC_BankerVoteResult)
 private:
  void set_has_chair_id();
  void clear_has_chair_id();
  void set_has_agree();
  void clear_has_agree();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::int32 chair_id_;
  bool agree_;
  friend struct protobuf_public_5fbanker_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class SC_ReEanter_Next_Game : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:SC_ReEanter_Next_Game) */ {
 public:
  SC_ReEanter_Next_Game();
  virtual ~SC_ReEanter_Next_Game();

  SC_ReEanter_Next_Game(const SC_ReEanter_Next_Game& from);

  inline SC_ReEanter_Next_Game& operator=(const SC_ReEanter_Next_Game& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SC_ReEanter_Next_Game& default_instance();

  static inline const SC_ReEanter_Next_Game* internal_default_instance() {
    return reinterpret_cast<const SC_ReEanter_Next_Game*>(
               &_SC_ReEanter_Next_Game_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    19;

  void Swap(SC_ReEanter_Next_Game* other);

  // implements Message ----------------------------------------------

  inline SC_ReEanter_Next_Game* New() const PROTOBUF_FINAL { return New(NULL); }

  SC_ReEanter_Next_Game* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const SC_ReEanter_Next_Game& from);
  void MergeFrom(const SC_ReEanter_Next_Game& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(SC_ReEanter_Next_Game* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  typedef SC_ReEanter_Next_Game_MsgID MsgID;
  static const MsgID ID =
    SC_ReEanter_Next_Game_MsgID_ID;
  static inline bool MsgID_IsValid(int value) {
    return SC_ReEanter_Next_Game_MsgID_IsValid(value);
  }
  static const MsgID MsgID_MIN =
    SC_ReEanter_Next_Game_MsgID_MsgID_MIN;
  static const MsgID MsgID_MAX =
    SC_ReEanter_Next_Game_MsgID_MsgID_MAX;
  static const int MsgID_ARRAYSIZE =
    SC_ReEanter_Next_Game_MsgID_MsgID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  MsgID_descriptor() {
    return SC_ReEanter_Next_Game_MsgID_descriptor();
  }
  static inline const ::std::string& MsgID_Name(MsgID value) {
    return SC_ReEanter_Next_Game_MsgID_Name(value);
  }
  static inline bool MsgID_Parse(const ::std::string& name,
      MsgID* value) {
    return SC_ReEanter_Next_Game_MsgID_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional int32 chair_id = 1 [default = -1];
  bool has_chair_id() const;
  void clear_chair_id();
  static const int kChairIdFieldNumber = 1;
  ::google::protobuf::int32 chair_id() const;
  void set_chair_id(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:SC_ReEanter_Next_Game)
 private:
  void set_has_chair_id();
  void clear_has_chair_id();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::int32 chair_id_;
  friend struct protobuf_public_5fbanker_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class SC_Next_Game_Time : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:SC_Next_Game_Time) */ {
 public:
  SC_Next_Game_Time();
  virtual ~SC_Next_Game_Time();

  SC_Next_Game_Time(const SC_Next_Game_Time& from);

  inline SC_Next_Game_Time& operator=(const SC_Next_Game_Time& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SC_Next_Game_Time& default_instance();

  static inline const SC_Next_Game_Time* internal_default_instance() {
    return reinterpret_cast<const SC_Next_Game_Time*>(
               &_SC_Next_Game_Time_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    20;

  void Swap(SC_Next_Game_Time* other);

  // implements Message ----------------------------------------------

  inline SC_Next_Game_Time* New() const PROTOBUF_FINAL { return New(NULL); }

  SC_Next_Game_Time* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const SC_Next_Game_Time& from);
  void MergeFrom(const SC_Next_Game_Time& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(SC_Next_Game_Time* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  typedef SC_Next_Game_Time_MsgID MsgID;
  static const MsgID ID =
    SC_Next_Game_Time_MsgID_ID;
  static inline bool MsgID_IsValid(int value) {
    return SC_Next_Game_Time_MsgID_IsValid(value);
  }
  static const MsgID MsgID_MIN =
    SC_Next_Game_Time_MsgID_MsgID_MIN;
  static const MsgID MsgID_MAX =
    SC_Next_Game_Time_MsgID_MsgID_MAX;
  static const int MsgID_ARRAYSIZE =
    SC_Next_Game_Time_MsgID_MsgID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  MsgID_descriptor() {
    return SC_Next_Game_Time_MsgID_descriptor();
  }
  static inline const ::std::string& MsgID_Name(MsgID value) {
    return SC_Next_Game_Time_MsgID_Name(value);
  }
  static inline bool MsgID_Parse(const ::std::string& name,
      MsgID* value) {
    return SC_Next_Game_Time_MsgID_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional int32 time_num = 1 [default = -1];
  bool has_time_num() const;
  void clear_time_num();
  static const int kTimeNumFieldNumber = 1;
  ::google::protobuf::int32 time_num() const;
  void set_time_num(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:SC_Next_Game_Time)
 private:
  void set_has_time_num();
  void clear_has_time_num();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::int32 time_num_;
  friend struct protobuf_public_5fbanker_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class CS_BankerEnter : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:CS_BankerEnter) */ {
 public:
  CS_BankerEnter();
  virtual ~CS_BankerEnter();

  CS_BankerEnter(const CS_BankerEnter& from);

  inline CS_BankerEnter& operator=(const CS_BankerEnter& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CS_BankerEnter& default_instance();

  static inline const CS_BankerEnter* internal_default_instance() {
    return reinterpret_cast<const CS_BankerEnter*>(
               &_CS_BankerEnter_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    21;

  void Swap(CS_BankerEnter* other);

  // implements Message ----------------------------------------------

  inline CS_BankerEnter* New() const PROTOBUF_FINAL { return New(NULL); }

  CS_BankerEnter* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const CS_BankerEnter& from);
  void MergeFrom(const CS_BankerEnter& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(CS_BankerEnter* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  typedef CS_BankerEnter_MsgID MsgID;
  static const MsgID ID =
    CS_BankerEnter_MsgID_ID;
  static inline bool MsgID_IsValid(int value) {
    return CS_BankerEnter_MsgID_IsValid(value);
  }
  static const MsgID MsgID_MIN =
    CS_BankerEnter_MsgID_MsgID_MIN;
  static const MsgID MsgID_MAX =
    CS_BankerEnter_MsgID_MsgID_MAX;
  static const int MsgID_ARRAYSIZE =
    CS_BankerEnter_MsgID_MsgID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  MsgID_descriptor() {
    return CS_BankerEnter_MsgID_descriptor();
  }
  static inline const ::std::string& MsgID_Name(MsgID value) {
    return CS_BankerEnter_MsgID_Name(value);
  }
  static inline bool MsgID_Parse(const ::std::string& name,
      MsgID* value) {
    return CS_BankerEnter_MsgID_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional int32 chair = 1;
  bool has_chair() const;
  void clear_chair();
  static const int kChairFieldNumber = 1;
  ::google::protobuf::int32 chair() const;
  void set_chair(::google::protobuf::int32 value);

  // optional int32 chair1 = 2;
  bool has_chair1() const;
  void clear_chair1();
  static const int kChair1FieldNumber = 2;
  ::google::protobuf::int32 chair1() const;
  void set_chair1(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:CS_BankerEnter)
 private:
  void set_has_chair();
  void clear_has_chair();
  void set_has_chair1();
  void clear_has_chair1();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::int32 chair_;
  ::google::protobuf::int32 chair1_;
  friend struct protobuf_public_5fbanker_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class CS_BankerLeave : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:CS_BankerLeave) */ {
 public:
  CS_BankerLeave();
  virtual ~CS_BankerLeave();

  CS_BankerLeave(const CS_BankerLeave& from);

  inline CS_BankerLeave& operator=(const CS_BankerLeave& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CS_BankerLeave& default_instance();

  static inline const CS_BankerLeave* internal_default_instance() {
    return reinterpret_cast<const CS_BankerLeave*>(
               &_CS_BankerLeave_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    22;

  void Swap(CS_BankerLeave* other);

  // implements Message ----------------------------------------------

  inline CS_BankerLeave* New() const PROTOBUF_FINAL { return New(NULL); }

  CS_BankerLeave* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const CS_BankerLeave& from);
  void MergeFrom(const CS_BankerLeave& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(CS_BankerLeave* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  typedef CS_BankerLeave_MsgID MsgID;
  static const MsgID ID =
    CS_BankerLeave_MsgID_ID;
  static inline bool MsgID_IsValid(int value) {
    return CS_BankerLeave_MsgID_IsValid(value);
  }
  static const MsgID MsgID_MIN =
    CS_BankerLeave_MsgID_MsgID_MIN;
  static const MsgID MsgID_MAX =
    CS_BankerLeave_MsgID_MsgID_MAX;
  static const int MsgID_ARRAYSIZE =
    CS_BankerLeave_MsgID_MsgID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  MsgID_descriptor() {
    return CS_BankerLeave_MsgID_descriptor();
  }
  static inline const ::std::string& MsgID_Name(MsgID value) {
    return CS_BankerLeave_MsgID_Name(value);
  }
  static inline bool MsgID_Parse(const ::std::string& name,
      MsgID* value) {
    return CS_BankerLeave_MsgID_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:CS_BankerLeave)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  friend struct protobuf_public_5fbanker_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class CS_BankerContend : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:CS_BankerContend) */ {
 public:
  CS_BankerContend();
  virtual ~CS_BankerContend();

  CS_BankerContend(const CS_BankerContend& from);

  inline CS_BankerContend& operator=(const CS_BankerContend& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CS_BankerContend& default_instance();

  static inline const CS_BankerContend* internal_default_instance() {
    return reinterpret_cast<const CS_BankerContend*>(
               &_CS_BankerContend_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    23;

  void Swap(CS_BankerContend* other);

  // implements Message ----------------------------------------------

  inline CS_BankerContend* New() const PROTOBUF_FINAL { return New(NULL); }

  CS_BankerContend* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const CS_BankerContend& from);
  void MergeFrom(const CS_BankerContend& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(CS_BankerContend* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  typedef CS_BankerContend_MsgID MsgID;
  static const MsgID ID =
    CS_BankerContend_MsgID_ID;
  static inline bool MsgID_IsValid(int value) {
    return CS_BankerContend_MsgID_IsValid(value);
  }
  static const MsgID MsgID_MIN =
    CS_BankerContend_MsgID_MsgID_MIN;
  static const MsgID MsgID_MAX =
    CS_BankerContend_MsgID_MsgID_MAX;
  static const int MsgID_ARRAYSIZE =
    CS_BankerContend_MsgID_MsgID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  MsgID_descriptor() {
    return CS_BankerContend_MsgID_descriptor();
  }
  static inline const ::std::string& MsgID_Name(MsgID value) {
    return CS_BankerContend_MsgID_Name(value);
  }
  static inline bool MsgID_Parse(const ::std::string& name,
      MsgID* value) {
    return CS_BankerContend_MsgID_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional int32 ratio = 1;
  bool has_ratio() const;
  void clear_ratio();
  static const int kRatioFieldNumber = 1;
  ::google::protobuf::int32 ratio() const;
  void set_ratio(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:CS_BankerContend)
 private:
  void set_has_ratio();
  void clear_has_ratio();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::int32 ratio_;
  friend struct protobuf_public_5fbanker_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class CS_BankerPlayerBet : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:CS_BankerPlayerBet) */ {
 public:
  CS_BankerPlayerBet();
  virtual ~CS_BankerPlayerBet();

  CS_BankerPlayerBet(const CS_BankerPlayerBet& from);

  inline CS_BankerPlayerBet& operator=(const CS_BankerPlayerBet& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CS_BankerPlayerBet& default_instance();

  static inline const CS_BankerPlayerBet* internal_default_instance() {
    return reinterpret_cast<const CS_BankerPlayerBet*>(
               &_CS_BankerPlayerBet_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    24;

  void Swap(CS_BankerPlayerBet* other);

  // implements Message ----------------------------------------------

  inline CS_BankerPlayerBet* New() const PROTOBUF_FINAL { return New(NULL); }

  CS_BankerPlayerBet* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const CS_BankerPlayerBet& from);
  void MergeFrom(const CS_BankerPlayerBet& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(CS_BankerPlayerBet* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  typedef CS_BankerPlayerBet_MsgID MsgID;
  static const MsgID ID =
    CS_BankerPlayerBet_MsgID_ID;
  static inline bool MsgID_IsValid(int value) {
    return CS_BankerPlayerBet_MsgID_IsValid(value);
  }
  static const MsgID MsgID_MIN =
    CS_BankerPlayerBet_MsgID_MsgID_MIN;
  static const MsgID MsgID_MAX =
    CS_BankerPlayerBet_MsgID_MsgID_MAX;
  static const int MsgID_ARRAYSIZE =
    CS_BankerPlayerBet_MsgID_MsgID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  MsgID_descriptor() {
    return CS_BankerPlayerBet_MsgID_descriptor();
  }
  static inline const ::std::string& MsgID_Name(MsgID value) {
    return CS_BankerPlayerBet_MsgID_Name(value);
  }
  static inline bool MsgID_Parse(const ::std::string& name,
      MsgID* value) {
    return CS_BankerPlayerBet_MsgID_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // required int64 bet_money = 1;
  bool has_bet_money() const;
  void clear_bet_money();
  static const int kBetMoneyFieldNumber = 1;
  ::google::protobuf::int64 bet_money() const;
  void set_bet_money(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:CS_BankerPlayerBet)
 private:
  void set_has_bet_money();
  void clear_has_bet_money();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::int64 bet_money_;
  friend struct protobuf_public_5fbanker_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class CS_BankerPlayerGuessCards : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:CS_BankerPlayerGuessCards) */ {
 public:
  CS_BankerPlayerGuessCards();
  virtual ~CS_BankerPlayerGuessCards();

  CS_BankerPlayerGuessCards(const CS_BankerPlayerGuessCards& from);

  inline CS_BankerPlayerGuessCards& operator=(const CS_BankerPlayerGuessCards& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CS_BankerPlayerGuessCards& default_instance();

  static inline const CS_BankerPlayerGuessCards* internal_default_instance() {
    return reinterpret_cast<const CS_BankerPlayerGuessCards*>(
               &_CS_BankerPlayerGuessCards_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    25;

  void Swap(CS_BankerPlayerGuessCards* other);

  // implements Message ----------------------------------------------

  inline CS_BankerPlayerGuessCards* New() const PROTOBUF_FINAL { return New(NULL); }

  CS_BankerPlayerGuessCards* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const CS_BankerPlayerGuessCards& from);
  void MergeFrom(const CS_BankerPlayerGuessCards& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(CS_BankerPlayerGuessCards* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  typedef CS_BankerPlayerGuessCards_MsgID MsgID;
  static const MsgID ID =
    CS_BankerPlayerGuessCards_MsgID_ID;
  static inline bool MsgID_IsValid(int value) {
    return CS_BankerPlayerGuessCards_MsgID_IsValid(value);
  }
  static const MsgID MsgID_MIN =
    CS_BankerPlayerGuessCards_MsgID_MsgID_MIN;
  static const MsgID MsgID_MAX =
    CS_BankerPlayerGuessCards_MsgID_MsgID_MAX;
  static const int MsgID_ARRAYSIZE =
    CS_BankerPlayerGuessCards_MsgID_MsgID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  MsgID_descriptor() {
    return CS_BankerPlayerGuessCards_MsgID_descriptor();
  }
  static inline const ::std::string& MsgID_Name(MsgID value) {
    return CS_BankerPlayerGuessCards_MsgID_Name(value);
  }
  static inline bool MsgID_Parse(const ::std::string& name,
      MsgID* value) {
    return CS_BankerPlayerGuessCards_MsgID_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:CS_BankerPlayerGuessCards)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  friend struct protobuf_public_5fbanker_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class CS_BankerNextGame : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:CS_BankerNextGame) */ {
 public:
  CS_BankerNextGame();
  virtual ~CS_BankerNextGame();

  CS_BankerNextGame(const CS_BankerNextGame& from);

  inline CS_BankerNextGame& operator=(const CS_BankerNextGame& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CS_BankerNextGame& default_instance();

  static inline const CS_BankerNextGame* internal_default_instance() {
    return reinterpret_cast<const CS_BankerNextGame*>(
               &_CS_BankerNextGame_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    26;

  void Swap(CS_BankerNextGame* other);

  // implements Message ----------------------------------------------

  inline CS_BankerNextGame* New() const PROTOBUF_FINAL { return New(NULL); }

  CS_BankerNextGame* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const CS_BankerNextGame& from);
  void MergeFrom(const CS_BankerNextGame& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(CS_BankerNextGame* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  typedef CS_BankerNextGame_MsgID MsgID;
  static const MsgID ID =
    CS_BankerNextGame_MsgID_ID;
  static inline bool MsgID_IsValid(int value) {
    return CS_BankerNextGame_MsgID_IsValid(value);
  }
  static const MsgID MsgID_MIN =
    CS_BankerNextGame_MsgID_MsgID_MIN;
  static const MsgID MsgID_MAX =
    CS_BankerNextGame_MsgID_MsgID_MAX;
  static const int MsgID_ARRAYSIZE =
    CS_BankerNextGame_MsgID_MsgID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  MsgID_descriptor() {
    return CS_BankerNextGame_MsgID_descriptor();
  }
  static inline const ::std::string& MsgID_Name(MsgID value) {
    return CS_BankerNextGame_MsgID_Name(value);
  }
  static inline bool MsgID_Parse(const ::std::string& name,
      MsgID* value) {
    return CS_BankerNextGame_MsgID_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:CS_BankerNextGame)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  friend struct protobuf_public_5fbanker_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class CS_BankerVote : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:CS_BankerVote) */ {
 public:
  CS_BankerVote();
  virtual ~CS_BankerVote();

  CS_BankerVote(const CS_BankerVote& from);

  inline CS_BankerVote& operator=(const CS_BankerVote& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CS_BankerVote& default_instance();

  static inline const CS_BankerVote* internal_default_instance() {
    return reinterpret_cast<const CS_BankerVote*>(
               &_CS_BankerVote_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    27;

  void Swap(CS_BankerVote* other);

  // implements Message ----------------------------------------------

  inline CS_BankerVote* New() const PROTOBUF_FINAL { return New(NULL); }

  CS_BankerVote* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const CS_BankerVote& from);
  void MergeFrom(const CS_BankerVote& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(CS_BankerVote* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  typedef CS_BankerVote_MsgID MsgID;
  static const MsgID ID =
    CS_BankerVote_MsgID_ID;
  static inline bool MsgID_IsValid(int value) {
    return CS_BankerVote_MsgID_IsValid(value);
  }
  static const MsgID MsgID_MIN =
    CS_BankerVote_MsgID_MsgID_MIN;
  static const MsgID MsgID_MAX =
    CS_BankerVote_MsgID_MsgID_MAX;
  static const int MsgID_ARRAYSIZE =
    CS_BankerVote_MsgID_MsgID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  MsgID_descriptor() {
    return CS_BankerVote_MsgID_descriptor();
  }
  static inline const ::std::string& MsgID_Name(MsgID value) {
    return CS_BankerVote_MsgID_Name(value);
  }
  static inline bool MsgID_Parse(const ::std::string& name,
      MsgID* value) {
    return CS_BankerVote_MsgID_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional bool agree = 1;
  bool has_agree() const;
  void clear_agree();
  static const int kAgreeFieldNumber = 1;
  bool agree() const;
  void set_agree(bool value);

  // @@protoc_insertion_point(class_scope:CS_BankerVote)
 private:
  void set_has_agree();
  void clear_has_agree();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  bool agree_;
  friend struct protobuf_public_5fbanker_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
// BankerTable

// optional int32 state = 1 [default = -1];
inline bool BankerTable::has_state() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void BankerTable::set_has_state() {
  _has_bits_[0] |= 0x00000004u;
}
inline void BankerTable::clear_has_state() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void BankerTable::clear_state() {
  state_ = -1;
  clear_has_state();
}
inline ::google::protobuf::int32 BankerTable::state() const {
  // @@protoc_insertion_point(field_get:BankerTable.state)
  return state_;
}
inline void BankerTable::set_state(::google::protobuf::int32 value) {
  set_has_state();
  state_ = value;
  // @@protoc_insertion_point(field_set:BankerTable.state)
}

// optional int64 bottom_bet = 2;
inline bool BankerTable::has_bottom_bet() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void BankerTable::set_has_bottom_bet() {
  _has_bits_[0] |= 0x00000001u;
}
inline void BankerTable::clear_has_bottom_bet() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void BankerTable::clear_bottom_bet() {
  bottom_bet_ = GOOGLE_LONGLONG(0);
  clear_has_bottom_bet();
}
inline ::google::protobuf::int64 BankerTable::bottom_bet() const {
  // @@protoc_insertion_point(field_get:BankerTable.bottom_bet)
  return bottom_bet_;
}
inline void BankerTable::set_bottom_bet(::google::protobuf::int64 value) {
  set_has_bottom_bet();
  bottom_bet_ = value;
  // @@protoc_insertion_point(field_set:BankerTable.bottom_bet)
}

// optional int32 chair = 3;
inline bool BankerTable::has_chair() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void BankerTable::set_has_chair() {
  _has_bits_[0] |= 0x00000002u;
}
inline void BankerTable::clear_has_chair() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void BankerTable::clear_chair() {
  chair_ = 0;
  clear_has_chair();
}
inline ::google::protobuf::int32 BankerTable::chair() const {
  // @@protoc_insertion_point(field_get:BankerTable.chair)
  return chair_;
}
inline void BankerTable::set_chair(::google::protobuf::int32 value) {
  set_has_chair();
  chair_ = value;
  // @@protoc_insertion_point(field_set:BankerTable.chair)
}

// -------------------------------------------------------------------

// BankerPlayerInfo

// required int32 guid = 1;
inline bool BankerPlayerInfo::has_guid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void BankerPlayerInfo::set_has_guid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void BankerPlayerInfo::clear_has_guid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void BankerPlayerInfo::clear_guid() {
  guid_ = 0;
  clear_has_guid();
}
inline ::google::protobuf::int32 BankerPlayerInfo::guid() const {
  // @@protoc_insertion_point(field_get:BankerPlayerInfo.guid)
  return guid_;
}
inline void BankerPlayerInfo::set_guid(::google::protobuf::int32 value) {
  set_has_guid();
  guid_ = value;
  // @@protoc_insertion_point(field_set:BankerPlayerInfo.guid)
}

// required int32 chair = 2;
inline bool BankerPlayerInfo::has_chair() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void BankerPlayerInfo::set_has_chair() {
  _has_bits_[0] |= 0x00000008u;
}
inline void BankerPlayerInfo::clear_has_chair() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void BankerPlayerInfo::clear_chair() {
  chair_ = 0;
  clear_has_chair();
}
inline ::google::protobuf::int32 BankerPlayerInfo::chair() const {
  // @@protoc_insertion_point(field_get:BankerPlayerInfo.chair)
  return chair_;
}
inline void BankerPlayerInfo::set_chair(::google::protobuf::int32 value) {
  set_has_chair();
  chair_ = value;
  // @@protoc_insertion_point(field_set:BankerPlayerInfo.chair)
}

// optional string name = 3;
inline bool BankerPlayerInfo::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void BankerPlayerInfo::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void BankerPlayerInfo::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void BankerPlayerInfo::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_name();
}
inline const ::std::string& BankerPlayerInfo::name() const {
  // @@protoc_insertion_point(field_get:BankerPlayerInfo.name)
  return name_.GetNoArena();
}
inline void BankerPlayerInfo::set_name(const ::std::string& value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:BankerPlayerInfo.name)
}
#if LANG_CXX11
inline void BankerPlayerInfo::set_name(::std::string&& value) {
  set_has_name();
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:BankerPlayerInfo.name)
}
#endif
inline void BankerPlayerInfo::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:BankerPlayerInfo.name)
}
inline void BankerPlayerInfo::set_name(const char* value, size_t size) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:BankerPlayerInfo.name)
}
inline ::std::string* BankerPlayerInfo::mutable_name() {
  set_has_name();
  // @@protoc_insertion_point(field_mutable:BankerPlayerInfo.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* BankerPlayerInfo::release_name() {
  // @@protoc_insertion_point(field_release:BankerPlayerInfo.name)
  clear_has_name();
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void BankerPlayerInfo::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    set_has_name();
  } else {
    clear_has_name();
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:BankerPlayerInfo.name)
}

// optional string icon = 4;
inline bool BankerPlayerInfo::has_icon() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void BankerPlayerInfo::set_has_icon() {
  _has_bits_[0] |= 0x00000002u;
}
inline void BankerPlayerInfo::clear_has_icon() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void BankerPlayerInfo::clear_icon() {
  icon_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_icon();
}
inline const ::std::string& BankerPlayerInfo::icon() const {
  // @@protoc_insertion_point(field_get:BankerPlayerInfo.icon)
  return icon_.GetNoArena();
}
inline void BankerPlayerInfo::set_icon(const ::std::string& value) {
  set_has_icon();
  icon_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:BankerPlayerInfo.icon)
}
#if LANG_CXX11
inline void BankerPlayerInfo::set_icon(::std::string&& value) {
  set_has_icon();
  icon_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:BankerPlayerInfo.icon)
}
#endif
inline void BankerPlayerInfo::set_icon(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_icon();
  icon_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:BankerPlayerInfo.icon)
}
inline void BankerPlayerInfo::set_icon(const char* value, size_t size) {
  set_has_icon();
  icon_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:BankerPlayerInfo.icon)
}
inline ::std::string* BankerPlayerInfo::mutable_icon() {
  set_has_icon();
  // @@protoc_insertion_point(field_mutable:BankerPlayerInfo.icon)
  return icon_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* BankerPlayerInfo::release_icon() {
  // @@protoc_insertion_point(field_release:BankerPlayerInfo.icon)
  clear_has_icon();
  return icon_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void BankerPlayerInfo::set_allocated_icon(::std::string* icon) {
  if (icon != NULL) {
    set_has_icon();
  } else {
    clear_has_icon();
  }
  icon_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), icon);
  // @@protoc_insertion_point(field_set_allocated:BankerPlayerInfo.icon)
}

// optional int64 money = 5;
inline bool BankerPlayerInfo::has_money() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void BankerPlayerInfo::set_has_money() {
  _has_bits_[0] |= 0x00000010u;
}
inline void BankerPlayerInfo::clear_has_money() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void BankerPlayerInfo::clear_money() {
  money_ = GOOGLE_LONGLONG(0);
  clear_has_money();
}
inline ::google::protobuf::int64 BankerPlayerInfo::money() const {
  // @@protoc_insertion_point(field_get:BankerPlayerInfo.money)
  return money_;
}
inline void BankerPlayerInfo::set_money(::google::protobuf::int64 value) {
  set_has_money();
  money_ = value;
  // @@protoc_insertion_point(field_set:BankerPlayerInfo.money)
}

// -------------------------------------------------------------------

// BankerGameEndPlayerInfo

// required int32 chair = 1;
inline bool BankerGameEndPlayerInfo::has_chair() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void BankerGameEndPlayerInfo::set_has_chair() {
  _has_bits_[0] |= 0x00000002u;
}
inline void BankerGameEndPlayerInfo::clear_has_chair() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void BankerGameEndPlayerInfo::clear_chair() {
  chair_ = 0;
  clear_has_chair();
}
inline ::google::protobuf::int32 BankerGameEndPlayerInfo::chair() const {
  // @@protoc_insertion_point(field_get:BankerGameEndPlayerInfo.chair)
  return chair_;
}
inline void BankerGameEndPlayerInfo::set_chair(::google::protobuf::int32 value) {
  set_has_chair();
  chair_ = value;
  // @@protoc_insertion_point(field_set:BankerGameEndPlayerInfo.chair)
}

// optional int64 money = 2;
inline bool BankerGameEndPlayerInfo::has_money() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void BankerGameEndPlayerInfo::set_has_money() {
  _has_bits_[0] |= 0x00000001u;
}
inline void BankerGameEndPlayerInfo::clear_has_money() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void BankerGameEndPlayerInfo::clear_money() {
  money_ = GOOGLE_LONGLONG(0);
  clear_has_money();
}
inline ::google::protobuf::int64 BankerGameEndPlayerInfo::money() const {
  // @@protoc_insertion_point(field_get:BankerGameEndPlayerInfo.money)
  return money_;
}
inline void BankerGameEndPlayerInfo::set_money(::google::protobuf::int64 value) {
  set_has_money();
  money_ = value;
  // @@protoc_insertion_point(field_set:BankerGameEndPlayerInfo.money)
}

// optional int64 tax = 3;
inline bool BankerGameEndPlayerInfo::has_tax() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void BankerGameEndPlayerInfo::set_has_tax() {
  _has_bits_[0] |= 0x00000008u;
}
inline void BankerGameEndPlayerInfo::clear_has_tax() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void BankerGameEndPlayerInfo::clear_tax() {
  tax_ = GOOGLE_LONGLONG(0);
  clear_has_tax();
}
inline ::google::protobuf::int64 BankerGameEndPlayerInfo::tax() const {
  // @@protoc_insertion_point(field_get:BankerGameEndPlayerInfo.tax)
  return tax_;
}
inline void BankerGameEndPlayerInfo::set_tax(::google::protobuf::int64 value) {
  set_has_tax();
  tax_ = value;
  // @@protoc_insertion_point(field_set:BankerGameEndPlayerInfo.tax)
}

// optional int32 victory = 4;
inline bool BankerGameEndPlayerInfo::has_victory() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void BankerGameEndPlayerInfo::set_has_victory() {
  _has_bits_[0] |= 0x00000004u;
}
inline void BankerGameEndPlayerInfo::clear_has_victory() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void BankerGameEndPlayerInfo::clear_victory() {
  victory_ = 0;
  clear_has_victory();
}
inline ::google::protobuf::int32 BankerGameEndPlayerInfo::victory() const {
  // @@protoc_insertion_point(field_get:BankerGameEndPlayerInfo.victory)
  return victory_;
}
inline void BankerGameEndPlayerInfo::set_victory(::google::protobuf::int32 value) {
  set_has_victory();
  victory_ = value;
  // @@protoc_insertion_point(field_set:BankerGameEndPlayerInfo.victory)
}

// required int64 increment_money = 5;
inline bool BankerGameEndPlayerInfo::has_increment_money() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void BankerGameEndPlayerInfo::set_has_increment_money() {
  _has_bits_[0] |= 0x00000010u;
}
inline void BankerGameEndPlayerInfo::clear_has_increment_money() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void BankerGameEndPlayerInfo::clear_increment_money() {
  increment_money_ = GOOGLE_LONGLONG(0);
  clear_has_increment_money();
}
inline ::google::protobuf::int64 BankerGameEndPlayerInfo::increment_money() const {
  // @@protoc_insertion_point(field_get:BankerGameEndPlayerInfo.increment_money)
  return increment_money_;
}
inline void BankerGameEndPlayerInfo::set_increment_money(::google::protobuf::int64 value) {
  set_has_increment_money();
  increment_money_ = value;
  // @@protoc_insertion_point(field_set:BankerGameEndPlayerInfo.increment_money)
}

// -------------------------------------------------------------------

// BankerReconnectPlayerInfo

// required int32 guid = 1;
inline bool BankerReconnectPlayerInfo::has_guid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void BankerReconnectPlayerInfo::set_has_guid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void BankerReconnectPlayerInfo::clear_has_guid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void BankerReconnectPlayerInfo::clear_guid() {
  guid_ = 0;
  clear_has_guid();
}
inline ::google::protobuf::int32 BankerReconnectPlayerInfo::guid() const {
  // @@protoc_insertion_point(field_get:BankerReconnectPlayerInfo.guid)
  return guid_;
}
inline void BankerReconnectPlayerInfo::set_guid(::google::protobuf::int32 value) {
  set_has_guid();
  guid_ = value;
  // @@protoc_insertion_point(field_set:BankerReconnectPlayerInfo.guid)
}

// required int32 chair = 2;
inline bool BankerReconnectPlayerInfo::has_chair() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void BankerReconnectPlayerInfo::set_has_chair() {
  _has_bits_[0] |= 0x00000008u;
}
inline void BankerReconnectPlayerInfo::clear_has_chair() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void BankerReconnectPlayerInfo::clear_chair() {
  chair_ = 0;
  clear_has_chair();
}
inline ::google::protobuf::int32 BankerReconnectPlayerInfo::chair() const {
  // @@protoc_insertion_point(field_get:BankerReconnectPlayerInfo.chair)
  return chair_;
}
inline void BankerReconnectPlayerInfo::set_chair(::google::protobuf::int32 value) {
  set_has_chair();
  chair_ = value;
  // @@protoc_insertion_point(field_set:BankerReconnectPlayerInfo.chair)
}

// optional string name = 3;
inline bool BankerReconnectPlayerInfo::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void BankerReconnectPlayerInfo::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void BankerReconnectPlayerInfo::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void BankerReconnectPlayerInfo::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_name();
}
inline const ::std::string& BankerReconnectPlayerInfo::name() const {
  // @@protoc_insertion_point(field_get:BankerReconnectPlayerInfo.name)
  return name_.GetNoArena();
}
inline void BankerReconnectPlayerInfo::set_name(const ::std::string& value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:BankerReconnectPlayerInfo.name)
}
#if LANG_CXX11
inline void BankerReconnectPlayerInfo::set_name(::std::string&& value) {
  set_has_name();
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:BankerReconnectPlayerInfo.name)
}
#endif
inline void BankerReconnectPlayerInfo::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:BankerReconnectPlayerInfo.name)
}
inline void BankerReconnectPlayerInfo::set_name(const char* value, size_t size) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:BankerReconnectPlayerInfo.name)
}
inline ::std::string* BankerReconnectPlayerInfo::mutable_name() {
  set_has_name();
  // @@protoc_insertion_point(field_mutable:BankerReconnectPlayerInfo.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* BankerReconnectPlayerInfo::release_name() {
  // @@protoc_insertion_point(field_release:BankerReconnectPlayerInfo.name)
  clear_has_name();
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void BankerReconnectPlayerInfo::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    set_has_name();
  } else {
    clear_has_name();
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:BankerReconnectPlayerInfo.name)
}

// optional string icon = 4;
inline bool BankerReconnectPlayerInfo::has_icon() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void BankerReconnectPlayerInfo::set_has_icon() {
  _has_bits_[0] |= 0x00000002u;
}
inline void BankerReconnectPlayerInfo::clear_has_icon() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void BankerReconnectPlayerInfo::clear_icon() {
  icon_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_icon();
}
inline const ::std::string& BankerReconnectPlayerInfo::icon() const {
  // @@protoc_insertion_point(field_get:BankerReconnectPlayerInfo.icon)
  return icon_.GetNoArena();
}
inline void BankerReconnectPlayerInfo::set_icon(const ::std::string& value) {
  set_has_icon();
  icon_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:BankerReconnectPlayerInfo.icon)
}
#if LANG_CXX11
inline void BankerReconnectPlayerInfo::set_icon(::std::string&& value) {
  set_has_icon();
  icon_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:BankerReconnectPlayerInfo.icon)
}
#endif
inline void BankerReconnectPlayerInfo::set_icon(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_icon();
  icon_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:BankerReconnectPlayerInfo.icon)
}
inline void BankerReconnectPlayerInfo::set_icon(const char* value, size_t size) {
  set_has_icon();
  icon_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:BankerReconnectPlayerInfo.icon)
}
inline ::std::string* BankerReconnectPlayerInfo::mutable_icon() {
  set_has_icon();
  // @@protoc_insertion_point(field_mutable:BankerReconnectPlayerInfo.icon)
  return icon_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* BankerReconnectPlayerInfo::release_icon() {
  // @@protoc_insertion_point(field_release:BankerReconnectPlayerInfo.icon)
  clear_has_icon();
  return icon_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void BankerReconnectPlayerInfo::set_allocated_icon(::std::string* icon) {
  if (icon != NULL) {
    set_has_icon();
  } else {
    clear_has_icon();
  }
  icon_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), icon);
  // @@protoc_insertion_point(field_set_allocated:BankerReconnectPlayerInfo.icon)
}

// optional int64 money = 5;
inline bool BankerReconnectPlayerInfo::has_money() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void BankerReconnectPlayerInfo::set_has_money() {
  _has_bits_[0] |= 0x00000010u;
}
inline void BankerReconnectPlayerInfo::clear_has_money() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void BankerReconnectPlayerInfo::clear_money() {
  money_ = GOOGLE_LONGLONG(0);
  clear_has_money();
}
inline ::google::protobuf::int64 BankerReconnectPlayerInfo::money() const {
  // @@protoc_insertion_point(field_get:BankerReconnectPlayerInfo.money)
  return money_;
}
inline void BankerReconnectPlayerInfo::set_money(::google::protobuf::int64 value) {
  set_has_money();
  money_ = value;
  // @@protoc_insertion_point(field_set:BankerReconnectPlayerInfo.money)
}

// optional int32 ratio = 6;
inline bool BankerReconnectPlayerInfo::has_ratio() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void BankerReconnectPlayerInfo::set_has_ratio() {
  _has_bits_[0] |= 0x00000020u;
}
inline void BankerReconnectPlayerInfo::clear_has_ratio() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void BankerReconnectPlayerInfo::clear_ratio() {
  ratio_ = 0;
  clear_has_ratio();
}
inline ::google::protobuf::int32 BankerReconnectPlayerInfo::ratio() const {
  // @@protoc_insertion_point(field_get:BankerReconnectPlayerInfo.ratio)
  return ratio_;
}
inline void BankerReconnectPlayerInfo::set_ratio(::google::protobuf::int32 value) {
  set_has_ratio();
  ratio_ = value;
  // @@protoc_insertion_point(field_set:BankerReconnectPlayerInfo.ratio)
}

// optional int32 position = 7;
inline bool BankerReconnectPlayerInfo::has_position() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void BankerReconnectPlayerInfo::set_has_position() {
  _has_bits_[0] |= 0x00000040u;
}
inline void BankerReconnectPlayerInfo::clear_has_position() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void BankerReconnectPlayerInfo::clear_position() {
  position_ = 0;
  clear_has_position();
}
inline ::google::protobuf::int32 BankerReconnectPlayerInfo::position() const {
  // @@protoc_insertion_point(field_get:BankerReconnectPlayerInfo.position)
  return position_;
}
inline void BankerReconnectPlayerInfo::set_position(::google::protobuf::int32 value) {
  set_has_position();
  position_ = value;
  // @@protoc_insertion_point(field_set:BankerReconnectPlayerInfo.position)
}

// optional int64 bet_money = 8;
inline bool BankerReconnectPlayerInfo::has_bet_money() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void BankerReconnectPlayerInfo::set_has_bet_money() {
  _has_bits_[0] |= 0x00000080u;
}
inline void BankerReconnectPlayerInfo::clear_has_bet_money() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void BankerReconnectPlayerInfo::clear_bet_money() {
  bet_money_ = GOOGLE_LONGLONG(0);
  clear_has_bet_money();
}
inline ::google::protobuf::int64 BankerReconnectPlayerInfo::bet_money() const {
  // @@protoc_insertion_point(field_get:BankerReconnectPlayerInfo.bet_money)
  return bet_money_;
}
inline void BankerReconnectPlayerInfo::set_bet_money(::google::protobuf::int64 value) {
  set_has_bet_money();
  bet_money_ = value;
  // @@protoc_insertion_point(field_set:BankerReconnectPlayerInfo.bet_money)
}

// repeated int32 cards = 9;
inline int BankerReconnectPlayerInfo::cards_size() const {
  return cards_.size();
}
inline void BankerReconnectPlayerInfo::clear_cards() {
  cards_.Clear();
}
inline ::google::protobuf::int32 BankerReconnectPlayerInfo::cards(int index) const {
  // @@protoc_insertion_point(field_get:BankerReconnectPlayerInfo.cards)
  return cards_.Get(index);
}
inline void BankerReconnectPlayerInfo::set_cards(int index, ::google::protobuf::int32 value) {
  cards_.Set(index, value);
  // @@protoc_insertion_point(field_set:BankerReconnectPlayerInfo.cards)
}
inline void BankerReconnectPlayerInfo::add_cards(::google::protobuf::int32 value) {
  cards_.Add(value);
  // @@protoc_insertion_point(field_add:BankerReconnectPlayerInfo.cards)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
BankerReconnectPlayerInfo::cards() const {
  // @@protoc_insertion_point(field_list:BankerReconnectPlayerInfo.cards)
  return cards_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
BankerReconnectPlayerInfo::mutable_cards() {
  // @@protoc_insertion_point(field_mutable_list:BankerReconnectPlayerInfo.cards)
  return &cards_;
}

// optional int32 cards_type = 10;
inline bool BankerReconnectPlayerInfo::has_cards_type() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void BankerReconnectPlayerInfo::set_has_cards_type() {
  _has_bits_[0] |= 0x00000100u;
}
inline void BankerReconnectPlayerInfo::clear_has_cards_type() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void BankerReconnectPlayerInfo::clear_cards_type() {
  cards_type_ = 0;
  clear_has_cards_type();
}
inline ::google::protobuf::int32 BankerReconnectPlayerInfo::cards_type() const {
  // @@protoc_insertion_point(field_get:BankerReconnectPlayerInfo.cards_type)
  return cards_type_;
}
inline void BankerReconnectPlayerInfo::set_cards_type(::google::protobuf::int32 value) {
  set_has_cards_type();
  cards_type_ = value;
  // @@protoc_insertion_point(field_set:BankerReconnectPlayerInfo.cards_type)
}

// optional int32 flag = 11;
inline bool BankerReconnectPlayerInfo::has_flag() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void BankerReconnectPlayerInfo::set_has_flag() {
  _has_bits_[0] |= 0x00000200u;
}
inline void BankerReconnectPlayerInfo::clear_has_flag() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void BankerReconnectPlayerInfo::clear_flag() {
  flag_ = 0;
  clear_has_flag();
}
inline ::google::protobuf::int32 BankerReconnectPlayerInfo::flag() const {
  // @@protoc_insertion_point(field_get:BankerReconnectPlayerInfo.flag)
  return flag_;
}
inline void BankerReconnectPlayerInfo::set_flag(::google::protobuf::int32 value) {
  set_has_flag();
  flag_ = value;
  // @@protoc_insertion_point(field_set:BankerReconnectPlayerInfo.flag)
}

// optional int64 tax = 12;
inline bool BankerReconnectPlayerInfo::has_tax() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void BankerReconnectPlayerInfo::set_has_tax() {
  _has_bits_[0] |= 0x00000400u;
}
inline void BankerReconnectPlayerInfo::clear_has_tax() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void BankerReconnectPlayerInfo::clear_tax() {
  tax_ = GOOGLE_LONGLONG(0);
  clear_has_tax();
}
inline ::google::protobuf::int64 BankerReconnectPlayerInfo::tax() const {
  // @@protoc_insertion_point(field_get:BankerReconnectPlayerInfo.tax)
  return tax_;
}
inline void BankerReconnectPlayerInfo::set_tax(::google::protobuf::int64 value) {
  set_has_tax();
  tax_ = value;
  // @@protoc_insertion_point(field_set:BankerReconnectPlayerInfo.tax)
}

// optional int32 victory = 13;
inline bool BankerReconnectPlayerInfo::has_victory() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void BankerReconnectPlayerInfo::set_has_victory() {
  _has_bits_[0] |= 0x00001000u;
}
inline void BankerReconnectPlayerInfo::clear_has_victory() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void BankerReconnectPlayerInfo::clear_victory() {
  victory_ = 0;
  clear_has_victory();
}
inline ::google::protobuf::int32 BankerReconnectPlayerInfo::victory() const {
  // @@protoc_insertion_point(field_get:BankerReconnectPlayerInfo.victory)
  return victory_;
}
inline void BankerReconnectPlayerInfo::set_victory(::google::protobuf::int32 value) {
  set_has_victory();
  victory_ = value;
  // @@protoc_insertion_point(field_set:BankerReconnectPlayerInfo.victory)
}

// required int64 increment_money = 14;
inline bool BankerReconnectPlayerInfo::has_increment_money() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void BankerReconnectPlayerInfo::set_has_increment_money() {
  _has_bits_[0] |= 0x00000800u;
}
inline void BankerReconnectPlayerInfo::clear_has_increment_money() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void BankerReconnectPlayerInfo::clear_increment_money() {
  increment_money_ = GOOGLE_LONGLONG(0);
  clear_has_increment_money();
}
inline ::google::protobuf::int64 BankerReconnectPlayerInfo::increment_money() const {
  // @@protoc_insertion_point(field_get:BankerReconnectPlayerInfo.increment_money)
  return increment_money_;
}
inline void BankerReconnectPlayerInfo::set_increment_money(::google::protobuf::int64 value) {
  set_has_increment_money();
  increment_money_ = value;
  // @@protoc_insertion_point(field_set:BankerReconnectPlayerInfo.increment_money)
}

// optional int32 status = 15;
inline bool BankerReconnectPlayerInfo::has_status() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void BankerReconnectPlayerInfo::set_has_status() {
  _has_bits_[0] |= 0x00002000u;
}
inline void BankerReconnectPlayerInfo::clear_has_status() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void BankerReconnectPlayerInfo::clear_status() {
  status_ = 0;
  clear_has_status();
}
inline ::google::protobuf::int32 BankerReconnectPlayerInfo::status() const {
  // @@protoc_insertion_point(field_get:BankerReconnectPlayerInfo.status)
  return status_;
}
inline void BankerReconnectPlayerInfo::set_status(::google::protobuf::int32 value) {
  set_has_status();
  status_ = value;
  // @@protoc_insertion_point(field_set:BankerReconnectPlayerInfo.status)
}

// -------------------------------------------------------------------

// SC_BankerTableMatching

// optional int32 chair = 1;
inline bool SC_BankerTableMatching::has_chair() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SC_BankerTableMatching::set_has_chair() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SC_BankerTableMatching::clear_has_chair() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SC_BankerTableMatching::clear_chair() {
  chair_ = 0;
  clear_has_chair();
}
inline ::google::protobuf::int32 SC_BankerTableMatching::chair() const {
  // @@protoc_insertion_point(field_get:SC_BankerTableMatching.chair)
  return chair_;
}
inline void SC_BankerTableMatching::set_chair(::google::protobuf::int32 value) {
  set_has_chair();
  chair_ = value;
  // @@protoc_insertion_point(field_set:SC_BankerTableMatching.chair)
}

// optional int32 chair1 = 2;
inline bool SC_BankerTableMatching::has_chair1() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SC_BankerTableMatching::set_has_chair1() {
  _has_bits_[0] |= 0x00000002u;
}
inline void SC_BankerTableMatching::clear_has_chair1() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void SC_BankerTableMatching::clear_chair1() {
  chair1_ = 0;
  clear_has_chair1();
}
inline ::google::protobuf::int32 SC_BankerTableMatching::chair1() const {
  // @@protoc_insertion_point(field_get:SC_BankerTableMatching.chair1)
  return chair1_;
}
inline void SC_BankerTableMatching::set_chair1(::google::protobuf::int32 value) {
  set_has_chair1();
  chair1_ = value;
  // @@protoc_insertion_point(field_set:SC_BankerTableMatching.chair1)
}

// -------------------------------------------------------------------

// SC_BankerSendCards

// optional .BankerTable pb_table = 1;
inline bool SC_BankerSendCards::has_pb_table() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SC_BankerSendCards::set_has_pb_table() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SC_BankerSendCards::clear_has_pb_table() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SC_BankerSendCards::clear_pb_table() {
  if (pb_table_ != NULL) pb_table_->::BankerTable::Clear();
  clear_has_pb_table();
}
inline const ::BankerTable& SC_BankerSendCards::pb_table() const {
  // @@protoc_insertion_point(field_get:SC_BankerSendCards.pb_table)
  return pb_table_ != NULL ? *pb_table_
                         : *::BankerTable::internal_default_instance();
}
inline ::BankerTable* SC_BankerSendCards::mutable_pb_table() {
  set_has_pb_table();
  if (pb_table_ == NULL) {
    pb_table_ = new ::BankerTable;
  }
  // @@protoc_insertion_point(field_mutable:SC_BankerSendCards.pb_table)
  return pb_table_;
}
inline ::BankerTable* SC_BankerSendCards::release_pb_table() {
  // @@protoc_insertion_point(field_release:SC_BankerSendCards.pb_table)
  clear_has_pb_table();
  ::BankerTable* temp = pb_table_;
  pb_table_ = NULL;
  return temp;
}
inline void SC_BankerSendCards::set_allocated_pb_table(::BankerTable* pb_table) {
  delete pb_table_;
  pb_table_ = pb_table;
  if (pb_table) {
    set_has_pb_table();
  } else {
    clear_has_pb_table();
  }
  // @@protoc_insertion_point(field_set_allocated:SC_BankerSendCards.pb_table)
}

// repeated .BankerPlayerInfo pb_player = 2;
inline int SC_BankerSendCards::pb_player_size() const {
  return pb_player_.size();
}
inline void SC_BankerSendCards::clear_pb_player() {
  pb_player_.Clear();
}
inline const ::BankerPlayerInfo& SC_BankerSendCards::pb_player(int index) const {
  // @@protoc_insertion_point(field_get:SC_BankerSendCards.pb_player)
  return pb_player_.Get(index);
}
inline ::BankerPlayerInfo* SC_BankerSendCards::mutable_pb_player(int index) {
  // @@protoc_insertion_point(field_mutable:SC_BankerSendCards.pb_player)
  return pb_player_.Mutable(index);
}
inline ::BankerPlayerInfo* SC_BankerSendCards::add_pb_player() {
  // @@protoc_insertion_point(field_add:SC_BankerSendCards.pb_player)
  return pb_player_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::BankerPlayerInfo >*
SC_BankerSendCards::mutable_pb_player() {
  // @@protoc_insertion_point(field_mutable_list:SC_BankerSendCards.pb_player)
  return &pb_player_;
}
inline const ::google::protobuf::RepeatedPtrField< ::BankerPlayerInfo >&
SC_BankerSendCards::pb_player() const {
  // @@protoc_insertion_point(field_list:SC_BankerSendCards.pb_player)
  return pb_player_;
}

// repeated int32 cards = 3;
inline int SC_BankerSendCards::cards_size() const {
  return cards_.size();
}
inline void SC_BankerSendCards::clear_cards() {
  cards_.Clear();
}
inline ::google::protobuf::int32 SC_BankerSendCards::cards(int index) const {
  // @@protoc_insertion_point(field_get:SC_BankerSendCards.cards)
  return cards_.Get(index);
}
inline void SC_BankerSendCards::set_cards(int index, ::google::protobuf::int32 value) {
  cards_.Set(index, value);
  // @@protoc_insertion_point(field_set:SC_BankerSendCards.cards)
}
inline void SC_BankerSendCards::add_cards(::google::protobuf::int32 value) {
  cards_.Add(value);
  // @@protoc_insertion_point(field_add:SC_BankerSendCards.cards)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
SC_BankerSendCards::cards() const {
  // @@protoc_insertion_point(field_list:SC_BankerSendCards.cards)
  return cards_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
SC_BankerSendCards::mutable_cards() {
  // @@protoc_insertion_point(field_mutable_list:SC_BankerSendCards.cards)
  return &cards_;
}

// -------------------------------------------------------------------

// SC_BankerBeginToContend

// required int32 countdown = 1;
inline bool SC_BankerBeginToContend::has_countdown() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SC_BankerBeginToContend::set_has_countdown() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SC_BankerBeginToContend::clear_has_countdown() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SC_BankerBeginToContend::clear_countdown() {
  countdown_ = 0;
  clear_has_countdown();
}
inline ::google::protobuf::int32 SC_BankerBeginToContend::countdown() const {
  // @@protoc_insertion_point(field_get:SC_BankerBeginToContend.countdown)
  return countdown_;
}
inline void SC_BankerBeginToContend::set_countdown(::google::protobuf::int32 value) {
  set_has_countdown();
  countdown_ = value;
  // @@protoc_insertion_point(field_set:SC_BankerBeginToContend.countdown)
}

// required int32 total_time = 2;
inline bool SC_BankerBeginToContend::has_total_time() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SC_BankerBeginToContend::set_has_total_time() {
  _has_bits_[0] |= 0x00000002u;
}
inline void SC_BankerBeginToContend::clear_has_total_time() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void SC_BankerBeginToContend::clear_total_time() {
  total_time_ = 0;
  clear_has_total_time();
}
inline ::google::protobuf::int32 SC_BankerBeginToContend::total_time() const {
  // @@protoc_insertion_point(field_get:SC_BankerBeginToContend.total_time)
  return total_time_;
}
inline void SC_BankerBeginToContend::set_total_time(::google::protobuf::int32 value) {
  set_has_total_time();
  total_time_ = value;
  // @@protoc_insertion_point(field_set:SC_BankerBeginToContend.total_time)
}

// -------------------------------------------------------------------

// SC_BankerPlayerContend

// optional int32 chair = 1;
inline bool SC_BankerPlayerContend::has_chair() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SC_BankerPlayerContend::set_has_chair() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SC_BankerPlayerContend::clear_has_chair() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SC_BankerPlayerContend::clear_chair() {
  chair_ = 0;
  clear_has_chair();
}
inline ::google::protobuf::int32 SC_BankerPlayerContend::chair() const {
  // @@protoc_insertion_point(field_get:SC_BankerPlayerContend.chair)
  return chair_;
}
inline void SC_BankerPlayerContend::set_chair(::google::protobuf::int32 value) {
  set_has_chair();
  chair_ = value;
  // @@protoc_insertion_point(field_set:SC_BankerPlayerContend.chair)
}

// optional int32 ratio = 2;
inline bool SC_BankerPlayerContend::has_ratio() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SC_BankerPlayerContend::set_has_ratio() {
  _has_bits_[0] |= 0x00000002u;
}
inline void SC_BankerPlayerContend::clear_has_ratio() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void SC_BankerPlayerContend::clear_ratio() {
  ratio_ = 0;
  clear_has_ratio();
}
inline ::google::protobuf::int32 SC_BankerPlayerContend::ratio() const {
  // @@protoc_insertion_point(field_get:SC_BankerPlayerContend.ratio)
  return ratio_;
}
inline void SC_BankerPlayerContend::set_ratio(::google::protobuf::int32 value) {
  set_has_ratio();
  ratio_ = value;
  // @@protoc_insertion_point(field_set:SC_BankerPlayerContend.ratio)
}

// -------------------------------------------------------------------

// SC_BankerChoosingBanker

// repeated int32 chairs = 1;
inline int SC_BankerChoosingBanker::chairs_size() const {
  return chairs_.size();
}
inline void SC_BankerChoosingBanker::clear_chairs() {
  chairs_.Clear();
}
inline ::google::protobuf::int32 SC_BankerChoosingBanker::chairs(int index) const {
  // @@protoc_insertion_point(field_get:SC_BankerChoosingBanker.chairs)
  return chairs_.Get(index);
}
inline void SC_BankerChoosingBanker::set_chairs(int index, ::google::protobuf::int32 value) {
  chairs_.Set(index, value);
  // @@protoc_insertion_point(field_set:SC_BankerChoosingBanker.chairs)
}
inline void SC_BankerChoosingBanker::add_chairs(::google::protobuf::int32 value) {
  chairs_.Add(value);
  // @@protoc_insertion_point(field_add:SC_BankerChoosingBanker.chairs)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
SC_BankerChoosingBanker::chairs() const {
  // @@protoc_insertion_point(field_list:SC_BankerChoosingBanker.chairs)
  return chairs_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
SC_BankerChoosingBanker::mutable_chairs() {
  // @@protoc_insertion_point(field_mutable_list:SC_BankerChoosingBanker.chairs)
  return &chairs_;
}

// optional int32 banker_chair = 2;
inline bool SC_BankerChoosingBanker::has_banker_chair() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SC_BankerChoosingBanker::set_has_banker_chair() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SC_BankerChoosingBanker::clear_has_banker_chair() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SC_BankerChoosingBanker::clear_banker_chair() {
  banker_chair_ = 0;
  clear_has_banker_chair();
}
inline ::google::protobuf::int32 SC_BankerChoosingBanker::banker_chair() const {
  // @@protoc_insertion_point(field_get:SC_BankerChoosingBanker.banker_chair)
  return banker_chair_;
}
inline void SC_BankerChoosingBanker::set_banker_chair(::google::protobuf::int32 value) {
  set_has_banker_chair();
  banker_chair_ = value;
  // @@protoc_insertion_point(field_set:SC_BankerChoosingBanker.banker_chair)
}

// optional int32 banker_ratio = 3;
inline bool SC_BankerChoosingBanker::has_banker_ratio() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SC_BankerChoosingBanker::set_has_banker_ratio() {
  _has_bits_[0] |= 0x00000002u;
}
inline void SC_BankerChoosingBanker::clear_has_banker_ratio() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void SC_BankerChoosingBanker::clear_banker_ratio() {
  banker_ratio_ = 0;
  clear_has_banker_ratio();
}
inline ::google::protobuf::int32 SC_BankerChoosingBanker::banker_ratio() const {
  // @@protoc_insertion_point(field_get:SC_BankerChoosingBanker.banker_ratio)
  return banker_ratio_;
}
inline void SC_BankerChoosingBanker::set_banker_ratio(::google::protobuf::int32 value) {
  set_has_banker_ratio();
  banker_ratio_ = value;
  // @@protoc_insertion_point(field_set:SC_BankerChoosingBanker.banker_ratio)
}

// -------------------------------------------------------------------

// SC_BankerPlayerBeginToBet

// required int32 countdown = 1;
inline bool SC_BankerPlayerBeginToBet::has_countdown() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SC_BankerPlayerBeginToBet::set_has_countdown() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SC_BankerPlayerBeginToBet::clear_has_countdown() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SC_BankerPlayerBeginToBet::clear_countdown() {
  countdown_ = 0;
  clear_has_countdown();
}
inline ::google::protobuf::int32 SC_BankerPlayerBeginToBet::countdown() const {
  // @@protoc_insertion_point(field_get:SC_BankerPlayerBeginToBet.countdown)
  return countdown_;
}
inline void SC_BankerPlayerBeginToBet::set_countdown(::google::protobuf::int32 value) {
  set_has_countdown();
  countdown_ = value;
  // @@protoc_insertion_point(field_set:SC_BankerPlayerBeginToBet.countdown)
}

// required int32 total_time = 2;
inline bool SC_BankerPlayerBeginToBet::has_total_time() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SC_BankerPlayerBeginToBet::set_has_total_time() {
  _has_bits_[0] |= 0x00000002u;
}
inline void SC_BankerPlayerBeginToBet::clear_has_total_time() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void SC_BankerPlayerBeginToBet::clear_total_time() {
  total_time_ = 0;
  clear_has_total_time();
}
inline ::google::protobuf::int32 SC_BankerPlayerBeginToBet::total_time() const {
  // @@protoc_insertion_point(field_get:SC_BankerPlayerBeginToBet.total_time)
  return total_time_;
}
inline void SC_BankerPlayerBeginToBet::set_total_time(::google::protobuf::int32 value) {
  set_has_total_time();
  total_time_ = value;
  // @@protoc_insertion_point(field_set:SC_BankerPlayerBeginToBet.total_time)
}

// -------------------------------------------------------------------

// SC_BankerPlayerBet

// optional int32 chair = 1;
inline bool SC_BankerPlayerBet::has_chair() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SC_BankerPlayerBet::set_has_chair() {
  _has_bits_[0] |= 0x00000002u;
}
inline void SC_BankerPlayerBet::clear_has_chair() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void SC_BankerPlayerBet::clear_chair() {
  chair_ = 0;
  clear_has_chair();
}
inline ::google::protobuf::int32 SC_BankerPlayerBet::chair() const {
  // @@protoc_insertion_point(field_get:SC_BankerPlayerBet.chair)
  return chair_;
}
inline void SC_BankerPlayerBet::set_chair(::google::protobuf::int32 value) {
  set_has_chair();
  chair_ = value;
  // @@protoc_insertion_point(field_set:SC_BankerPlayerBet.chair)
}

// required int64 bet_money = 2;
inline bool SC_BankerPlayerBet::has_bet_money() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SC_BankerPlayerBet::set_has_bet_money() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SC_BankerPlayerBet::clear_has_bet_money() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SC_BankerPlayerBet::clear_bet_money() {
  bet_money_ = GOOGLE_LONGLONG(0);
  clear_has_bet_money();
}
inline ::google::protobuf::int64 SC_BankerPlayerBet::bet_money() const {
  // @@protoc_insertion_point(field_get:SC_BankerPlayerBet.bet_money)
  return bet_money_;
}
inline void SC_BankerPlayerBet::set_bet_money(::google::protobuf::int64 value) {
  set_has_bet_money();
  bet_money_ = value;
  // @@protoc_insertion_point(field_set:SC_BankerPlayerBet.bet_money)
}

// -------------------------------------------------------------------

// SC_BankerShowOwnCards

// repeated int32 cards = 1;
inline int SC_BankerShowOwnCards::cards_size() const {
  return cards_.size();
}
inline void SC_BankerShowOwnCards::clear_cards() {
  cards_.Clear();
}
inline ::google::protobuf::int32 SC_BankerShowOwnCards::cards(int index) const {
  // @@protoc_insertion_point(field_get:SC_BankerShowOwnCards.cards)
  return cards_.Get(index);
}
inline void SC_BankerShowOwnCards::set_cards(int index, ::google::protobuf::int32 value) {
  cards_.Set(index, value);
  // @@protoc_insertion_point(field_set:SC_BankerShowOwnCards.cards)
}
inline void SC_BankerShowOwnCards::add_cards(::google::protobuf::int32 value) {
  cards_.Add(value);
  // @@protoc_insertion_point(field_add:SC_BankerShowOwnCards.cards)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
SC_BankerShowOwnCards::cards() const {
  // @@protoc_insertion_point(field_list:SC_BankerShowOwnCards.cards)
  return cards_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
SC_BankerShowOwnCards::mutable_cards() {
  // @@protoc_insertion_point(field_mutable_list:SC_BankerShowOwnCards.cards)
  return &cards_;
}

// optional int32 cards_type = 2;
inline bool SC_BankerShowOwnCards::has_cards_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SC_BankerShowOwnCards::set_has_cards_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SC_BankerShowOwnCards::clear_has_cards_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SC_BankerShowOwnCards::clear_cards_type() {
  cards_type_ = 0;
  clear_has_cards_type();
}
inline ::google::protobuf::int32 SC_BankerShowOwnCards::cards_type() const {
  // @@protoc_insertion_point(field_get:SC_BankerShowOwnCards.cards_type)
  return cards_type_;
}
inline void SC_BankerShowOwnCards::set_cards_type(::google::protobuf::int32 value) {
  set_has_cards_type();
  cards_type_ = value;
  // @@protoc_insertion_point(field_set:SC_BankerShowOwnCards.cards_type)
}

// required int32 countdown = 3;
inline bool SC_BankerShowOwnCards::has_countdown() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SC_BankerShowOwnCards::set_has_countdown() {
  _has_bits_[0] |= 0x00000002u;
}
inline void SC_BankerShowOwnCards::clear_has_countdown() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void SC_BankerShowOwnCards::clear_countdown() {
  countdown_ = 0;
  clear_has_countdown();
}
inline ::google::protobuf::int32 SC_BankerShowOwnCards::countdown() const {
  // @@protoc_insertion_point(field_get:SC_BankerShowOwnCards.countdown)
  return countdown_;
}
inline void SC_BankerShowOwnCards::set_countdown(::google::protobuf::int32 value) {
  set_has_countdown();
  countdown_ = value;
  // @@protoc_insertion_point(field_set:SC_BankerShowOwnCards.countdown)
}

// required int32 total_time = 4;
inline bool SC_BankerShowOwnCards::has_total_time() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void SC_BankerShowOwnCards::set_has_total_time() {
  _has_bits_[0] |= 0x00000004u;
}
inline void SC_BankerShowOwnCards::clear_has_total_time() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void SC_BankerShowOwnCards::clear_total_time() {
  total_time_ = 0;
  clear_has_total_time();
}
inline ::google::protobuf::int32 SC_BankerShowOwnCards::total_time() const {
  // @@protoc_insertion_point(field_get:SC_BankerShowOwnCards.total_time)
  return total_time_;
}
inline void SC_BankerShowOwnCards::set_total_time(::google::protobuf::int32 value) {
  set_has_total_time();
  total_time_ = value;
  // @@protoc_insertion_point(field_set:SC_BankerShowOwnCards.total_time)
}

// -------------------------------------------------------------------

// SC_BankerShowCards

// optional int32 chair = 1;
inline bool SC_BankerShowCards::has_chair() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SC_BankerShowCards::set_has_chair() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SC_BankerShowCards::clear_has_chair() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SC_BankerShowCards::clear_chair() {
  chair_ = 0;
  clear_has_chair();
}
inline ::google::protobuf::int32 SC_BankerShowCards::chair() const {
  // @@protoc_insertion_point(field_get:SC_BankerShowCards.chair)
  return chair_;
}
inline void SC_BankerShowCards::set_chair(::google::protobuf::int32 value) {
  set_has_chair();
  chair_ = value;
  // @@protoc_insertion_point(field_set:SC_BankerShowCards.chair)
}

// repeated int32 cards = 2;
inline int SC_BankerShowCards::cards_size() const {
  return cards_.size();
}
inline void SC_BankerShowCards::clear_cards() {
  cards_.Clear();
}
inline ::google::protobuf::int32 SC_BankerShowCards::cards(int index) const {
  // @@protoc_insertion_point(field_get:SC_BankerShowCards.cards)
  return cards_.Get(index);
}
inline void SC_BankerShowCards::set_cards(int index, ::google::protobuf::int32 value) {
  cards_.Set(index, value);
  // @@protoc_insertion_point(field_set:SC_BankerShowCards.cards)
}
inline void SC_BankerShowCards::add_cards(::google::protobuf::int32 value) {
  cards_.Add(value);
  // @@protoc_insertion_point(field_add:SC_BankerShowCards.cards)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
SC_BankerShowCards::cards() const {
  // @@protoc_insertion_point(field_list:SC_BankerShowCards.cards)
  return cards_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
SC_BankerShowCards::mutable_cards() {
  // @@protoc_insertion_point(field_mutable_list:SC_BankerShowCards.cards)
  return &cards_;
}

// optional int32 cards_type = 3;
inline bool SC_BankerShowCards::has_cards_type() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SC_BankerShowCards::set_has_cards_type() {
  _has_bits_[0] |= 0x00000002u;
}
inline void SC_BankerShowCards::clear_has_cards_type() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void SC_BankerShowCards::clear_cards_type() {
  cards_type_ = 0;
  clear_has_cards_type();
}
inline ::google::protobuf::int32 SC_BankerShowCards::cards_type() const {
  // @@protoc_insertion_point(field_get:SC_BankerShowCards.cards_type)
  return cards_type_;
}
inline void SC_BankerShowCards::set_cards_type(::google::protobuf::int32 value) {
  set_has_cards_type();
  cards_type_ = value;
  // @@protoc_insertion_point(field_set:SC_BankerShowCards.cards_type)
}

// optional int32 flag = 4;
inline bool SC_BankerShowCards::has_flag() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void SC_BankerShowCards::set_has_flag() {
  _has_bits_[0] |= 0x00000004u;
}
inline void SC_BankerShowCards::clear_has_flag() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void SC_BankerShowCards::clear_flag() {
  flag_ = 0;
  clear_has_flag();
}
inline ::google::protobuf::int32 SC_BankerShowCards::flag() const {
  // @@protoc_insertion_point(field_get:SC_BankerShowCards.flag)
  return flag_;
}
inline void SC_BankerShowCards::set_flag(::google::protobuf::int32 value) {
  set_has_flag();
  flag_ = value;
  // @@protoc_insertion_point(field_set:SC_BankerShowCards.flag)
}

// -------------------------------------------------------------------

// SC_BankerGameEnd

// repeated .BankerGameEndPlayerInfo pb_player = 1;
inline int SC_BankerGameEnd::pb_player_size() const {
  return pb_player_.size();
}
inline void SC_BankerGameEnd::clear_pb_player() {
  pb_player_.Clear();
}
inline const ::BankerGameEndPlayerInfo& SC_BankerGameEnd::pb_player(int index) const {
  // @@protoc_insertion_point(field_get:SC_BankerGameEnd.pb_player)
  return pb_player_.Get(index);
}
inline ::BankerGameEndPlayerInfo* SC_BankerGameEnd::mutable_pb_player(int index) {
  // @@protoc_insertion_point(field_mutable:SC_BankerGameEnd.pb_player)
  return pb_player_.Mutable(index);
}
inline ::BankerGameEndPlayerInfo* SC_BankerGameEnd::add_pb_player() {
  // @@protoc_insertion_point(field_add:SC_BankerGameEnd.pb_player)
  return pb_player_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::BankerGameEndPlayerInfo >*
SC_BankerGameEnd::mutable_pb_player() {
  // @@protoc_insertion_point(field_mutable_list:SC_BankerGameEnd.pb_player)
  return &pb_player_;
}
inline const ::google::protobuf::RepeatedPtrField< ::BankerGameEndPlayerInfo >&
SC_BankerGameEnd::pb_player() const {
  // @@protoc_insertion_point(field_list:SC_BankerGameEnd.pb_player)
  return pb_player_;
}

// optional .BankerTable pb_table = 2;
inline bool SC_BankerGameEnd::has_pb_table() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SC_BankerGameEnd::set_has_pb_table() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SC_BankerGameEnd::clear_has_pb_table() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SC_BankerGameEnd::clear_pb_table() {
  if (pb_table_ != NULL) pb_table_->::BankerTable::Clear();
  clear_has_pb_table();
}
inline const ::BankerTable& SC_BankerGameEnd::pb_table() const {
  // @@protoc_insertion_point(field_get:SC_BankerGameEnd.pb_table)
  return pb_table_ != NULL ? *pb_table_
                         : *::BankerTable::internal_default_instance();
}
inline ::BankerTable* SC_BankerGameEnd::mutable_pb_table() {
  set_has_pb_table();
  if (pb_table_ == NULL) {
    pb_table_ = new ::BankerTable;
  }
  // @@protoc_insertion_point(field_mutable:SC_BankerGameEnd.pb_table)
  return pb_table_;
}
inline ::BankerTable* SC_BankerGameEnd::release_pb_table() {
  // @@protoc_insertion_point(field_release:SC_BankerGameEnd.pb_table)
  clear_has_pb_table();
  ::BankerTable* temp = pb_table_;
  pb_table_ = NULL;
  return temp;
}
inline void SC_BankerGameEnd::set_allocated_pb_table(::BankerTable* pb_table) {
  delete pb_table_;
  pb_table_ = pb_table;
  if (pb_table) {
    set_has_pb_table();
  } else {
    clear_has_pb_table();
  }
  // @@protoc_insertion_point(field_set_allocated:SC_BankerGameEnd.pb_table)
}

// -------------------------------------------------------------------

// SC_BankerForceToLeave

// optional string reason = 1;
inline bool SC_BankerForceToLeave::has_reason() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SC_BankerForceToLeave::set_has_reason() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SC_BankerForceToLeave::clear_has_reason() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SC_BankerForceToLeave::clear_reason() {
  reason_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_reason();
}
inline const ::std::string& SC_BankerForceToLeave::reason() const {
  // @@protoc_insertion_point(field_get:SC_BankerForceToLeave.reason)
  return reason_.GetNoArena();
}
inline void SC_BankerForceToLeave::set_reason(const ::std::string& value) {
  set_has_reason();
  reason_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:SC_BankerForceToLeave.reason)
}
#if LANG_CXX11
inline void SC_BankerForceToLeave::set_reason(::std::string&& value) {
  set_has_reason();
  reason_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:SC_BankerForceToLeave.reason)
}
#endif
inline void SC_BankerForceToLeave::set_reason(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_reason();
  reason_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:SC_BankerForceToLeave.reason)
}
inline void SC_BankerForceToLeave::set_reason(const char* value, size_t size) {
  set_has_reason();
  reason_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:SC_BankerForceToLeave.reason)
}
inline ::std::string* SC_BankerForceToLeave::mutable_reason() {
  set_has_reason();
  // @@protoc_insertion_point(field_mutable:SC_BankerForceToLeave.reason)
  return reason_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SC_BankerForceToLeave::release_reason() {
  // @@protoc_insertion_point(field_release:SC_BankerForceToLeave.reason)
  clear_has_reason();
  return reason_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SC_BankerForceToLeave::set_allocated_reason(::std::string* reason) {
  if (reason != NULL) {
    set_has_reason();
  } else {
    clear_has_reason();
  }
  reason_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), reason);
  // @@protoc_insertion_point(field_set_allocated:SC_BankerForceToLeave.reason)
}

// optional int32 num = 2;
inline bool SC_BankerForceToLeave::has_num() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SC_BankerForceToLeave::set_has_num() {
  _has_bits_[0] |= 0x00000002u;
}
inline void SC_BankerForceToLeave::clear_has_num() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void SC_BankerForceToLeave::clear_num() {
  num_ = 0;
  clear_has_num();
}
inline ::google::protobuf::int32 SC_BankerForceToLeave::num() const {
  // @@protoc_insertion_point(field_get:SC_BankerForceToLeave.num)
  return num_;
}
inline void SC_BankerForceToLeave::set_num(::google::protobuf::int32 value) {
  set_has_num();
  num_ = value;
  // @@protoc_insertion_point(field_set:SC_BankerForceToLeave.num)
}

// -------------------------------------------------------------------

// SC_BankerReconnectInfo

// optional .BankerTable pb_table = 1;
inline bool SC_BankerReconnectInfo::has_pb_table() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SC_BankerReconnectInfo::set_has_pb_table() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SC_BankerReconnectInfo::clear_has_pb_table() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SC_BankerReconnectInfo::clear_pb_table() {
  if (pb_table_ != NULL) pb_table_->::BankerTable::Clear();
  clear_has_pb_table();
}
inline const ::BankerTable& SC_BankerReconnectInfo::pb_table() const {
  // @@protoc_insertion_point(field_get:SC_BankerReconnectInfo.pb_table)
  return pb_table_ != NULL ? *pb_table_
                         : *::BankerTable::internal_default_instance();
}
inline ::BankerTable* SC_BankerReconnectInfo::mutable_pb_table() {
  set_has_pb_table();
  if (pb_table_ == NULL) {
    pb_table_ = new ::BankerTable;
  }
  // @@protoc_insertion_point(field_mutable:SC_BankerReconnectInfo.pb_table)
  return pb_table_;
}
inline ::BankerTable* SC_BankerReconnectInfo::release_pb_table() {
  // @@protoc_insertion_point(field_release:SC_BankerReconnectInfo.pb_table)
  clear_has_pb_table();
  ::BankerTable* temp = pb_table_;
  pb_table_ = NULL;
  return temp;
}
inline void SC_BankerReconnectInfo::set_allocated_pb_table(::BankerTable* pb_table) {
  delete pb_table_;
  pb_table_ = pb_table;
  if (pb_table) {
    set_has_pb_table();
  } else {
    clear_has_pb_table();
  }
  // @@protoc_insertion_point(field_set_allocated:SC_BankerReconnectInfo.pb_table)
}

// repeated .BankerReconnectPlayerInfo pb_player = 2;
inline int SC_BankerReconnectInfo::pb_player_size() const {
  return pb_player_.size();
}
inline void SC_BankerReconnectInfo::clear_pb_player() {
  pb_player_.Clear();
}
inline const ::BankerReconnectPlayerInfo& SC_BankerReconnectInfo::pb_player(int index) const {
  // @@protoc_insertion_point(field_get:SC_BankerReconnectInfo.pb_player)
  return pb_player_.Get(index);
}
inline ::BankerReconnectPlayerInfo* SC_BankerReconnectInfo::mutable_pb_player(int index) {
  // @@protoc_insertion_point(field_mutable:SC_BankerReconnectInfo.pb_player)
  return pb_player_.Mutable(index);
}
inline ::BankerReconnectPlayerInfo* SC_BankerReconnectInfo::add_pb_player() {
  // @@protoc_insertion_point(field_add:SC_BankerReconnectInfo.pb_player)
  return pb_player_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::BankerReconnectPlayerInfo >*
SC_BankerReconnectInfo::mutable_pb_player() {
  // @@protoc_insertion_point(field_mutable_list:SC_BankerReconnectInfo.pb_player)
  return &pb_player_;
}
inline const ::google::protobuf::RepeatedPtrField< ::BankerReconnectPlayerInfo >&
SC_BankerReconnectInfo::pb_player() const {
  // @@protoc_insertion_point(field_list:SC_BankerReconnectInfo.pb_player)
  return pb_player_;
}

// optional int32 countdown = 3;
inline bool SC_BankerReconnectInfo::has_countdown() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SC_BankerReconnectInfo::set_has_countdown() {
  _has_bits_[0] |= 0x00000002u;
}
inline void SC_BankerReconnectInfo::clear_has_countdown() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void SC_BankerReconnectInfo::clear_countdown() {
  countdown_ = 0;
  clear_has_countdown();
}
inline ::google::protobuf::int32 SC_BankerReconnectInfo::countdown() const {
  // @@protoc_insertion_point(field_get:SC_BankerReconnectInfo.countdown)
  return countdown_;
}
inline void SC_BankerReconnectInfo::set_countdown(::google::protobuf::int32 value) {
  set_has_countdown();
  countdown_ = value;
  // @@protoc_insertion_point(field_set:SC_BankerReconnectInfo.countdown)
}

// optional int32 total_time = 4;
inline bool SC_BankerReconnectInfo::has_total_time() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void SC_BankerReconnectInfo::set_has_total_time() {
  _has_bits_[0] |= 0x00000004u;
}
inline void SC_BankerReconnectInfo::clear_has_total_time() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void SC_BankerReconnectInfo::clear_total_time() {
  total_time_ = 0;
  clear_has_total_time();
}
inline ::google::protobuf::int32 SC_BankerReconnectInfo::total_time() const {
  // @@protoc_insertion_point(field_get:SC_BankerReconnectInfo.total_time)
  return total_time_;
}
inline void SC_BankerReconnectInfo::set_total_time(::google::protobuf::int32 value) {
  set_has_total_time();
  total_time_ = value;
  // @@protoc_insertion_point(field_set:SC_BankerReconnectInfo.total_time)
}

// -------------------------------------------------------------------

// SC_BankerPlayerSitDown

// optional .BankerPlayerInfo pb_info = 1;
inline bool SC_BankerPlayerSitDown::has_pb_info() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SC_BankerPlayerSitDown::set_has_pb_info() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SC_BankerPlayerSitDown::clear_has_pb_info() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SC_BankerPlayerSitDown::clear_pb_info() {
  if (pb_info_ != NULL) pb_info_->::BankerPlayerInfo::Clear();
  clear_has_pb_info();
}
inline const ::BankerPlayerInfo& SC_BankerPlayerSitDown::pb_info() const {
  // @@protoc_insertion_point(field_get:SC_BankerPlayerSitDown.pb_info)
  return pb_info_ != NULL ? *pb_info_
                         : *::BankerPlayerInfo::internal_default_instance();
}
inline ::BankerPlayerInfo* SC_BankerPlayerSitDown::mutable_pb_info() {
  set_has_pb_info();
  if (pb_info_ == NULL) {
    pb_info_ = new ::BankerPlayerInfo;
  }
  // @@protoc_insertion_point(field_mutable:SC_BankerPlayerSitDown.pb_info)
  return pb_info_;
}
inline ::BankerPlayerInfo* SC_BankerPlayerSitDown::release_pb_info() {
  // @@protoc_insertion_point(field_release:SC_BankerPlayerSitDown.pb_info)
  clear_has_pb_info();
  ::BankerPlayerInfo* temp = pb_info_;
  pb_info_ = NULL;
  return temp;
}
inline void SC_BankerPlayerSitDown::set_allocated_pb_info(::BankerPlayerInfo* pb_info) {
  delete pb_info_;
  pb_info_ = pb_info;
  if (pb_info) {
    set_has_pb_info();
  } else {
    clear_has_pb_info();
  }
  // @@protoc_insertion_point(field_set_allocated:SC_BankerPlayerSitDown.pb_info)
}

// optional int32 state = 2 [default = -1];
inline bool SC_BankerPlayerSitDown::has_state() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SC_BankerPlayerSitDown::set_has_state() {
  _has_bits_[0] |= 0x00000002u;
}
inline void SC_BankerPlayerSitDown::clear_has_state() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void SC_BankerPlayerSitDown::clear_state() {
  state_ = -1;
  clear_has_state();
}
inline ::google::protobuf::int32 SC_BankerPlayerSitDown::state() const {
  // @@protoc_insertion_point(field_get:SC_BankerPlayerSitDown.state)
  return state_;
}
inline void SC_BankerPlayerSitDown::set_state(::google::protobuf::int32 value) {
  set_has_state();
  state_ = value;
  // @@protoc_insertion_point(field_set:SC_BankerPlayerSitDown.state)
}

// -------------------------------------------------------------------

// SC_BankerStartVote

// optional int32 chair_id = 1;
inline bool SC_BankerStartVote::has_chair_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SC_BankerStartVote::set_has_chair_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SC_BankerStartVote::clear_has_chair_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SC_BankerStartVote::clear_chair_id() {
  chair_id_ = 0;
  clear_has_chair_id();
}
inline ::google::protobuf::int32 SC_BankerStartVote::chair_id() const {
  // @@protoc_insertion_point(field_get:SC_BankerStartVote.chair_id)
  return chair_id_;
}
inline void SC_BankerStartVote::set_chair_id(::google::protobuf::int32 value) {
  set_has_chair_id();
  chair_id_ = value;
  // @@protoc_insertion_point(field_set:SC_BankerStartVote.chair_id)
}

// -------------------------------------------------------------------

// SC_BankerVoteResult

// optional int32 chair_id = 1;
inline bool SC_BankerVoteResult::has_chair_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SC_BankerVoteResult::set_has_chair_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SC_BankerVoteResult::clear_has_chair_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SC_BankerVoteResult::clear_chair_id() {
  chair_id_ = 0;
  clear_has_chair_id();
}
inline ::google::protobuf::int32 SC_BankerVoteResult::chair_id() const {
  // @@protoc_insertion_point(field_get:SC_BankerVoteResult.chair_id)
  return chair_id_;
}
inline void SC_BankerVoteResult::set_chair_id(::google::protobuf::int32 value) {
  set_has_chair_id();
  chair_id_ = value;
  // @@protoc_insertion_point(field_set:SC_BankerVoteResult.chair_id)
}

// optional bool agree = 2;
inline bool SC_BankerVoteResult::has_agree() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SC_BankerVoteResult::set_has_agree() {
  _has_bits_[0] |= 0x00000002u;
}
inline void SC_BankerVoteResult::clear_has_agree() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void SC_BankerVoteResult::clear_agree() {
  agree_ = false;
  clear_has_agree();
}
inline bool SC_BankerVoteResult::agree() const {
  // @@protoc_insertion_point(field_get:SC_BankerVoteResult.agree)
  return agree_;
}
inline void SC_BankerVoteResult::set_agree(bool value) {
  set_has_agree();
  agree_ = value;
  // @@protoc_insertion_point(field_set:SC_BankerVoteResult.agree)
}

// -------------------------------------------------------------------

// SC_ReEanter_Next_Game

// optional int32 chair_id = 1 [default = -1];
inline bool SC_ReEanter_Next_Game::has_chair_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SC_ReEanter_Next_Game::set_has_chair_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SC_ReEanter_Next_Game::clear_has_chair_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SC_ReEanter_Next_Game::clear_chair_id() {
  chair_id_ = -1;
  clear_has_chair_id();
}
inline ::google::protobuf::int32 SC_ReEanter_Next_Game::chair_id() const {
  // @@protoc_insertion_point(field_get:SC_ReEanter_Next_Game.chair_id)
  return chair_id_;
}
inline void SC_ReEanter_Next_Game::set_chair_id(::google::protobuf::int32 value) {
  set_has_chair_id();
  chair_id_ = value;
  // @@protoc_insertion_point(field_set:SC_ReEanter_Next_Game.chair_id)
}

// -------------------------------------------------------------------

// SC_Next_Game_Time

// optional int32 time_num = 1 [default = -1];
inline bool SC_Next_Game_Time::has_time_num() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SC_Next_Game_Time::set_has_time_num() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SC_Next_Game_Time::clear_has_time_num() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SC_Next_Game_Time::clear_time_num() {
  time_num_ = -1;
  clear_has_time_num();
}
inline ::google::protobuf::int32 SC_Next_Game_Time::time_num() const {
  // @@protoc_insertion_point(field_get:SC_Next_Game_Time.time_num)
  return time_num_;
}
inline void SC_Next_Game_Time::set_time_num(::google::protobuf::int32 value) {
  set_has_time_num();
  time_num_ = value;
  // @@protoc_insertion_point(field_set:SC_Next_Game_Time.time_num)
}

// -------------------------------------------------------------------

// CS_BankerEnter

// optional int32 chair = 1;
inline bool CS_BankerEnter::has_chair() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CS_BankerEnter::set_has_chair() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CS_BankerEnter::clear_has_chair() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CS_BankerEnter::clear_chair() {
  chair_ = 0;
  clear_has_chair();
}
inline ::google::protobuf::int32 CS_BankerEnter::chair() const {
  // @@protoc_insertion_point(field_get:CS_BankerEnter.chair)
  return chair_;
}
inline void CS_BankerEnter::set_chair(::google::protobuf::int32 value) {
  set_has_chair();
  chair_ = value;
  // @@protoc_insertion_point(field_set:CS_BankerEnter.chair)
}

// optional int32 chair1 = 2;
inline bool CS_BankerEnter::has_chair1() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CS_BankerEnter::set_has_chair1() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CS_BankerEnter::clear_has_chair1() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CS_BankerEnter::clear_chair1() {
  chair1_ = 0;
  clear_has_chair1();
}
inline ::google::protobuf::int32 CS_BankerEnter::chair1() const {
  // @@protoc_insertion_point(field_get:CS_BankerEnter.chair1)
  return chair1_;
}
inline void CS_BankerEnter::set_chair1(::google::protobuf::int32 value) {
  set_has_chair1();
  chair1_ = value;
  // @@protoc_insertion_point(field_set:CS_BankerEnter.chair1)
}

// -------------------------------------------------------------------

// CS_BankerLeave

// -------------------------------------------------------------------

// CS_BankerContend

// optional int32 ratio = 1;
inline bool CS_BankerContend::has_ratio() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CS_BankerContend::set_has_ratio() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CS_BankerContend::clear_has_ratio() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CS_BankerContend::clear_ratio() {
  ratio_ = 0;
  clear_has_ratio();
}
inline ::google::protobuf::int32 CS_BankerContend::ratio() const {
  // @@protoc_insertion_point(field_get:CS_BankerContend.ratio)
  return ratio_;
}
inline void CS_BankerContend::set_ratio(::google::protobuf::int32 value) {
  set_has_ratio();
  ratio_ = value;
  // @@protoc_insertion_point(field_set:CS_BankerContend.ratio)
}

// -------------------------------------------------------------------

// CS_BankerPlayerBet

// required int64 bet_money = 1;
inline bool CS_BankerPlayerBet::has_bet_money() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CS_BankerPlayerBet::set_has_bet_money() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CS_BankerPlayerBet::clear_has_bet_money() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CS_BankerPlayerBet::clear_bet_money() {
  bet_money_ = GOOGLE_LONGLONG(0);
  clear_has_bet_money();
}
inline ::google::protobuf::int64 CS_BankerPlayerBet::bet_money() const {
  // @@protoc_insertion_point(field_get:CS_BankerPlayerBet.bet_money)
  return bet_money_;
}
inline void CS_BankerPlayerBet::set_bet_money(::google::protobuf::int64 value) {
  set_has_bet_money();
  bet_money_ = value;
  // @@protoc_insertion_point(field_set:CS_BankerPlayerBet.bet_money)
}

// -------------------------------------------------------------------

// CS_BankerPlayerGuessCards

// -------------------------------------------------------------------

// CS_BankerNextGame

// -------------------------------------------------------------------

// CS_BankerVote

// optional bool agree = 1;
inline bool CS_BankerVote::has_agree() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CS_BankerVote::set_has_agree() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CS_BankerVote::clear_has_agree() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CS_BankerVote::clear_agree() {
  agree_ = false;
  clear_has_agree();
}
inline bool CS_BankerVote::agree() const {
  // @@protoc_insertion_point(field_get:CS_BankerVote.agree)
  return agree_;
}
inline void CS_BankerVote::set_agree(bool value) {
  set_has_agree();
  agree_ = value;
  // @@protoc_insertion_point(field_set:CS_BankerVote.agree)
}

#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)


#ifndef SWIG
namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::BankerTable_MsgID> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::BankerTable_MsgID>() {
  return ::BankerTable_MsgID_descriptor();
}
template <> struct is_proto_enum< ::SC_BankerTableMatching_MsgID> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::SC_BankerTableMatching_MsgID>() {
  return ::SC_BankerTableMatching_MsgID_descriptor();
}
template <> struct is_proto_enum< ::SC_BankerSendCards_MsgID> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::SC_BankerSendCards_MsgID>() {
  return ::SC_BankerSendCards_MsgID_descriptor();
}
template <> struct is_proto_enum< ::SC_BankerBeginToContend_MsgID> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::SC_BankerBeginToContend_MsgID>() {
  return ::SC_BankerBeginToContend_MsgID_descriptor();
}
template <> struct is_proto_enum< ::SC_BankerPlayerContend_MsgID> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::SC_BankerPlayerContend_MsgID>() {
  return ::SC_BankerPlayerContend_MsgID_descriptor();
}
template <> struct is_proto_enum< ::SC_BankerChoosingBanker_MsgID> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::SC_BankerChoosingBanker_MsgID>() {
  return ::SC_BankerChoosingBanker_MsgID_descriptor();
}
template <> struct is_proto_enum< ::SC_BankerPlayerBeginToBet_MsgID> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::SC_BankerPlayerBeginToBet_MsgID>() {
  return ::SC_BankerPlayerBeginToBet_MsgID_descriptor();
}
template <> struct is_proto_enum< ::SC_BankerPlayerBet_MsgID> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::SC_BankerPlayerBet_MsgID>() {
  return ::SC_BankerPlayerBet_MsgID_descriptor();
}
template <> struct is_proto_enum< ::SC_BankerShowOwnCards_MsgID> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::SC_BankerShowOwnCards_MsgID>() {
  return ::SC_BankerShowOwnCards_MsgID_descriptor();
}
template <> struct is_proto_enum< ::SC_BankerShowCards_MsgID> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::SC_BankerShowCards_MsgID>() {
  return ::SC_BankerShowCards_MsgID_descriptor();
}
template <> struct is_proto_enum< ::SC_BankerGameEnd_MsgID> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::SC_BankerGameEnd_MsgID>() {
  return ::SC_BankerGameEnd_MsgID_descriptor();
}
template <> struct is_proto_enum< ::SC_BankerForceToLeave_MsgID> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::SC_BankerForceToLeave_MsgID>() {
  return ::SC_BankerForceToLeave_MsgID_descriptor();
}
template <> struct is_proto_enum< ::SC_BankerReconnectInfo_MsgID> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::SC_BankerReconnectInfo_MsgID>() {
  return ::SC_BankerReconnectInfo_MsgID_descriptor();
}
template <> struct is_proto_enum< ::SC_BankerPlayerSitDown_MsgID> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::SC_BankerPlayerSitDown_MsgID>() {
  return ::SC_BankerPlayerSitDown_MsgID_descriptor();
}
template <> struct is_proto_enum< ::SC_BankerStartVote_MsgID> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::SC_BankerStartVote_MsgID>() {
  return ::SC_BankerStartVote_MsgID_descriptor();
}
template <> struct is_proto_enum< ::SC_BankerVoteResult_MsgID> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::SC_BankerVoteResult_MsgID>() {
  return ::SC_BankerVoteResult_MsgID_descriptor();
}
template <> struct is_proto_enum< ::SC_ReEanter_Next_Game_MsgID> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::SC_ReEanter_Next_Game_MsgID>() {
  return ::SC_ReEanter_Next_Game_MsgID_descriptor();
}
template <> struct is_proto_enum< ::SC_Next_Game_Time_MsgID> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::SC_Next_Game_Time_MsgID>() {
  return ::SC_Next_Game_Time_MsgID_descriptor();
}
template <> struct is_proto_enum< ::CS_BankerEnter_MsgID> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::CS_BankerEnter_MsgID>() {
  return ::CS_BankerEnter_MsgID_descriptor();
}
template <> struct is_proto_enum< ::CS_BankerLeave_MsgID> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::CS_BankerLeave_MsgID>() {
  return ::CS_BankerLeave_MsgID_descriptor();
}
template <> struct is_proto_enum< ::CS_BankerContend_MsgID> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::CS_BankerContend_MsgID>() {
  return ::CS_BankerContend_MsgID_descriptor();
}
template <> struct is_proto_enum< ::CS_BankerPlayerBet_MsgID> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::CS_BankerPlayerBet_MsgID>() {
  return ::CS_BankerPlayerBet_MsgID_descriptor();
}
template <> struct is_proto_enum< ::CS_BankerPlayerGuessCards_MsgID> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::CS_BankerPlayerGuessCards_MsgID>() {
  return ::CS_BankerPlayerGuessCards_MsgID_descriptor();
}
template <> struct is_proto_enum< ::CS_BankerNextGame_MsgID> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::CS_BankerNextGame_MsgID>() {
  return ::CS_BankerNextGame_MsgID_descriptor();
}
template <> struct is_proto_enum< ::CS_BankerVote_MsgID> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::CS_BankerVote_MsgID>() {
  return ::CS_BankerVote_MsgID_descriptor();
}
template <> struct is_proto_enum< ::BANKER_CARD_TYPE> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::BANKER_CARD_TYPE>() {
  return ::BANKER_CARD_TYPE_descriptor();
}
template <> struct is_proto_enum< ::Status> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Status>() {
  return ::Status_descriptor();
}

}  // namespace protobuf
}  // namespace google
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_public_5fbanker_2eproto__INCLUDED
