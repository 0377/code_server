// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: config.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "config.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
class NetworkAddressDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<NetworkAddress> {
} _NetworkAddress_default_instance_;
class DBConnectOptionDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<DBConnectOption> {
} _DBConnectOption_default_instance_;
class RedisConnectOptionDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<RedisConnectOption> {
} _RedisConnectOption_default_instance_;
class RedisSentinelOptionDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<RedisSentinelOption> {
} _RedisSentinelOption_default_instance_;
class ConfigServer_ConfigDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<ConfigServer_Config> {
} _ConfigServer_Config_default_instance_;
class CommonServer_ConfigDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CommonServer_Config> {
} _CommonServer_Config_default_instance_;
class LoginServerConfigInfoDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<LoginServerConfigInfo> {
} _LoginServerConfigInfo_default_instance_;
class GameServerConfigInfoDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<GameServerConfigInfo> {
} _GameServerConfigInfo_default_instance_;
class GateServerConfigInfoDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<GateServerConfigInfo> {
} _GateServerConfigInfo_default_instance_;
class DBServerConfigDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<DBServerConfig> {
} _DBServerConfig_default_instance_;
class PrivateRoomInfoConfigDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<PrivateRoomInfoConfig> {
} _PrivateRoomInfoConfig_default_instance_;
class PrivateRoomListConfigDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<PrivateRoomListConfig> {
} _PrivateRoomListConfig_default_instance_;

namespace protobuf_config_2eproto {


namespace {

::google::protobuf::Metadata file_level_metadata[12];

}  // namespace

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTableField
    const TableStruct::entries[] = {
  {0, 0, 0, ::google::protobuf::internal::kInvalidMask, 0, 0},
};

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::AuxillaryParseTableField
    const TableStruct::aux[] = {
  ::google::protobuf::internal::AuxillaryParseTableField(),
};
PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTable const
    TableStruct::schema[] = {
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
};

const ::google::protobuf::uint32 TableStruct::offsets[] = {
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetworkAddress, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetworkAddress, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetworkAddress, ip_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetworkAddress, port_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetworkAddress, server_id_),
  0,
  1,
  2,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DBConnectOption, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DBConnectOption, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DBConnectOption, host_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DBConnectOption, user_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DBConnectOption, password_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DBConnectOption, database_),
  0,
  1,
  2,
  3,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RedisConnectOption, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RedisConnectOption, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RedisConnectOption, ip_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RedisConnectOption, port_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RedisConnectOption, dbnum_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RedisConnectOption, password_),
  0,
  2,
  3,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RedisSentinelOption, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RedisSentinelOption, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RedisSentinelOption, ip_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RedisSentinelOption, port_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RedisSentinelOption, dbnum_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RedisSentinelOption, master_name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RedisSentinelOption, password_),
  0,
  3,
  4,
  1,
  2,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConfigServer_Config, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConfigServer_Config, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConfigServer_Config, port_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConfigServer_Config, config_db_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConfigServer_Config, config_game_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConfigServer_Config, log_print_open_),
  2,
  0,
  1,
  3,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommonServer_Config, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommonServer_Config, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommonServer_Config, config_addr_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommonServer_Config, log_print_open_),
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoginServerConfigInfo, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoginServerConfigInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoginServerConfigInfo, login_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoginServerConfigInfo, port_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoginServerConfigInfo, db_addr_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoginServerConfigInfo, def_redis_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoginServerConfigInfo, def_sentinel_),
  1,
  2,
  ~0u,
  0,
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameServerConfigInfo, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameServerConfigInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameServerConfigInfo, game_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameServerConfigInfo, port_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameServerConfigInfo, using_login_validatebox_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameServerConfigInfo, default_lobby_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameServerConfigInfo, first_game_type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameServerConfigInfo, second_game_type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameServerConfigInfo, player_limit_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameServerConfigInfo, table_count_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameServerConfigInfo, money_limit_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameServerConfigInfo, cell_money_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameServerConfigInfo, tax_open_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameServerConfigInfo, tax_show_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameServerConfigInfo, tax_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameServerConfigInfo, room_lua_cfg_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameServerConfigInfo, login_addr_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameServerConfigInfo, db_addr_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameServerConfigInfo, def_redis_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameServerConfigInfo, def_sentinel_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameServerConfigInfo, bank_transfer_tax_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameServerConfigInfo, register_money_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameServerConfigInfo, private_room_bank_),
  2,
  3,
  4,
  5,
  6,
  7,
  8,
  9,
  10,
  11,
  12,
  13,
  14,
  0,
  ~0u,
  ~0u,
  1,
  ~0u,
  15,
  16,
  17,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GateServerConfigInfo, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GateServerConfigInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GateServerConfigInfo, gate_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GateServerConfigInfo, port_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GateServerConfigInfo, timeout_limit_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GateServerConfigInfo, sms_time_limit_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GateServerConfigInfo, sms_url_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GateServerConfigInfo, login_addr_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GateServerConfigInfo, game_addr_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GateServerConfigInfo, sms_sign_key_),
  2,
  3,
  4,
  5,
  0,
  ~0u,
  ~0u,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DBServerConfig, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DBServerConfig, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DBServerConfig, port_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DBServerConfig, login_db_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DBServerConfig, game_db_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DBServerConfig, log_db_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DBServerConfig, recharge_db_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DBServerConfig, def_redis_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DBServerConfig, def_sentinel_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DBServerConfig, init_money_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DBServerConfig, php_sign_key_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DBServerConfig, bank_transfer_tax_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DBServerConfig, php_interface_addr_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DBServerConfig, cash_money_addr_),
  8,
  3,
  4,
  5,
  6,
  7,
  ~0u,
  9,
  0,
  10,
  1,
  2,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PrivateRoomInfoConfig, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PrivateRoomInfoConfig, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PrivateRoomInfoConfig, game_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PrivateRoomInfoConfig, first_game_type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PrivateRoomInfoConfig, room_lua_cfg_),
  1,
  2,
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PrivateRoomListConfig, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PrivateRoomListConfig, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PrivateRoomListConfig, info_),
  ~0u,
};

static const ::google::protobuf::internal::MigrationSchema schemas[] = {
  { 0, 8, sizeof(NetworkAddress)},
  { 11, 20, sizeof(DBConnectOption)},
  { 24, 33, sizeof(RedisConnectOption)},
  { 37, 47, sizeof(RedisSentinelOption)},
  { 52, 61, sizeof(ConfigServer_Config)},
  { 65, 72, sizeof(CommonServer_Config)},
  { 74, 84, sizeof(LoginServerConfigInfo)},
  { 89, 115, sizeof(GameServerConfigInfo)},
  { 136, 149, sizeof(GateServerConfigInfo)},
  { 157, 174, sizeof(DBServerConfig)},
  { 186, 194, sizeof(PrivateRoomInfoConfig)},
  { 197, 203, sizeof(PrivateRoomListConfig)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&_NetworkAddress_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_DBConnectOption_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_RedisConnectOption_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_RedisSentinelOption_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_ConfigServer_Config_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CommonServer_Config_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_LoginServerConfigInfo_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_GameServerConfigInfo_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_GateServerConfigInfo_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_DBServerConfig_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_PrivateRoomInfoConfig_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_PrivateRoomListConfig_default_instance_),
};

namespace {

void protobuf_AssignDescriptors() {
  AddDescriptors();
  ::google::protobuf::MessageFactory* factory = NULL;
  AssignDescriptors(
      "config.proto", schemas, file_default_instances, TableStruct::offsets, factory,
      file_level_metadata, NULL, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 12);
}

}  // namespace

void TableStruct::Shutdown() {
  _NetworkAddress_default_instance_.Shutdown();
  delete file_level_metadata[0].reflection;
  _DBConnectOption_default_instance_.Shutdown();
  delete file_level_metadata[1].reflection;
  _RedisConnectOption_default_instance_.Shutdown();
  delete file_level_metadata[2].reflection;
  _RedisSentinelOption_default_instance_.Shutdown();
  delete file_level_metadata[3].reflection;
  _ConfigServer_Config_default_instance_.Shutdown();
  delete file_level_metadata[4].reflection;
  _CommonServer_Config_default_instance_.Shutdown();
  delete file_level_metadata[5].reflection;
  _LoginServerConfigInfo_default_instance_.Shutdown();
  delete file_level_metadata[6].reflection;
  _GameServerConfigInfo_default_instance_.Shutdown();
  delete file_level_metadata[7].reflection;
  _GateServerConfigInfo_default_instance_.Shutdown();
  delete file_level_metadata[8].reflection;
  _DBServerConfig_default_instance_.Shutdown();
  delete file_level_metadata[9].reflection;
  _PrivateRoomInfoConfig_default_instance_.Shutdown();
  delete file_level_metadata[10].reflection;
  _PrivateRoomListConfig_default_instance_.Shutdown();
  delete file_level_metadata[11].reflection;
}

void TableStruct::InitDefaultsImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::internal::InitProtobufDefaults();
  _NetworkAddress_default_instance_.DefaultConstruct();
  _DBConnectOption_default_instance_.DefaultConstruct();
  _RedisConnectOption_default_instance_.DefaultConstruct();
  _RedisSentinelOption_default_instance_.DefaultConstruct();
  _ConfigServer_Config_default_instance_.DefaultConstruct();
  _CommonServer_Config_default_instance_.DefaultConstruct();
  _LoginServerConfigInfo_default_instance_.DefaultConstruct();
  _GameServerConfigInfo_default_instance_.DefaultConstruct();
  _GateServerConfigInfo_default_instance_.DefaultConstruct();
  _DBServerConfig_default_instance_.DefaultConstruct();
  _PrivateRoomInfoConfig_default_instance_.DefaultConstruct();
  _PrivateRoomListConfig_default_instance_.DefaultConstruct();
  _ConfigServer_Config_default_instance_.get_mutable()->config_db_ = const_cast< ::DBConnectOption*>(
      ::DBConnectOption::internal_default_instance());
  _ConfigServer_Config_default_instance_.get_mutable()->config_game_ = const_cast< ::DBConnectOption*>(
      ::DBConnectOption::internal_default_instance());
  _CommonServer_Config_default_instance_.get_mutable()->config_addr_ = const_cast< ::NetworkAddress*>(
      ::NetworkAddress::internal_default_instance());
  _LoginServerConfigInfo_default_instance_.get_mutable()->def_redis_ = const_cast< ::RedisConnectOption*>(
      ::RedisConnectOption::internal_default_instance());
  _GameServerConfigInfo_default_instance_.get_mutable()->def_redis_ = const_cast< ::RedisConnectOption*>(
      ::RedisConnectOption::internal_default_instance());
  _DBServerConfig_default_instance_.get_mutable()->login_db_ = const_cast< ::DBConnectOption*>(
      ::DBConnectOption::internal_default_instance());
  _DBServerConfig_default_instance_.get_mutable()->game_db_ = const_cast< ::DBConnectOption*>(
      ::DBConnectOption::internal_default_instance());
  _DBServerConfig_default_instance_.get_mutable()->log_db_ = const_cast< ::DBConnectOption*>(
      ::DBConnectOption::internal_default_instance());
  _DBServerConfig_default_instance_.get_mutable()->recharge_db_ = const_cast< ::DBConnectOption*>(
      ::DBConnectOption::internal_default_instance());
  _DBServerConfig_default_instance_.get_mutable()->def_redis_ = const_cast< ::RedisConnectOption*>(
      ::RedisConnectOption::internal_default_instance());
}

void InitDefaults() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &TableStruct::InitDefaultsImpl);
}
void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] = {
      "\n\014config.proto\"=\n\016NetworkAddress\022\n\n\002ip\030\001"
      " \002(\t\022\014\n\004port\030\002 \002(\005\022\021\n\tserver_id\030\003 \001(\005\"Q\n"
      "\017DBConnectOption\022\014\n\004host\030\001 \002(\t\022\014\n\004user\030\002"
      " \002(\t\022\020\n\010password\030\003 \002(\t\022\020\n\010database\030\004 \002(\t"
      "\"O\n\022RedisConnectOption\022\n\n\002ip\030\001 \002(\t\022\014\n\004po"
      "rt\030\002 \002(\005\022\r\n\005dbnum\030\003 \001(\005\022\020\n\010password\030\004 \001("
      "\t\"e\n\023RedisSentinelOption\022\n\n\002ip\030\001 \002(\t\022\014\n\004"
      "port\030\002 \002(\005\022\r\n\005dbnum\030\003 \001(\005\022\023\n\013master_name"
      "\030\004 \002(\t\022\020\n\010password\030\005 \001(\t\"\207\001\n\023ConfigServe"
      "r_Config\022\014\n\004port\030\001 \002(\005\022#\n\tconfig_db\030\002 \002("
      "\0132\020.DBConnectOption\022%\n\013config_game\030\003 \002(\013"
      "2\020.DBConnectOption\022\026\n\016log_print_open\030\004 \001"
      "(\010\"S\n\023CommonServer_Config\022$\n\013config_addr"
      "\030\001 \002(\0132\017.NetworkAddress\022\026\n\016log_print_ope"
      "n\030\002 \001(\010\"\255\001\n\025LoginServerConfigInfo\022\020\n\010log"
      "in_id\030\001 \002(\005\022\014\n\004port\030\002 \002(\005\022 \n\007db_addr\030\003 \003"
      "(\0132\017.NetworkAddress\022&\n\tdef_redis\030\004 \001(\0132\023"
      ".RedisConnectOption\022*\n\014def_sentinel\030\005 \003("
      "\0132\024.RedisSentinelOption\"\244\004\n\024GameServerCo"
      "nfigInfo\022\017\n\007game_id\030\001 \002(\005\022\014\n\004port\030\002 \002(\005\022"
      "\037\n\027using_login_validatebox\030\003 \001(\005\022\025\n\rdefa"
      "ult_lobby\030\004 \001(\005\022\027\n\017first_game_type\030\005 \001(\005"
      "\022\030\n\020second_game_type\030\006 \001(\005\022\024\n\014player_lim"
      "it\030\007 \001(\005\022\023\n\013table_count\030\010 \001(\005\022\023\n\013money_l"
      "imit\030\t \001(\005\022\022\n\ncell_money\030\n \001(\005\022\020\n\010tax_op"
      "en\030\013 \001(\005\022\020\n\010tax_show\030\014 \001(\005\022\013\n\003tax\030\r \001(\005\022"
      "\024\n\014room_lua_cfg\030\016 \001(\t\022#\n\nlogin_addr\030\017 \003("
      "\0132\017.NetworkAddress\022 \n\007db_addr\030\020 \003(\0132\017.Ne"
      "tworkAddress\022&\n\tdef_redis\030\021 \001(\0132\023.RedisC"
      "onnectOption\022*\n\014def_sentinel\030\022 \003(\0132\024.Red"
      "isSentinelOption\022\031\n\021bank_transfer_tax\030\023 "
      "\001(\005\022\026\n\016register_money\030\024 \001(\005\022\031\n\021private_r"
      "oom_bank\030\025 \001(\005\"\324\001\n\024GateServerConfigInfo\022"
      "\017\n\007gate_id\030\001 \002(\005\022\014\n\004port\030\002 \002(\005\022\025\n\rtimeou"
      "t_limit\030\003 \001(\005\022\026\n\016sms_time_limit\030\004 \001(\005\022\017\n"
      "\007sms_url\030\005 \001(\t\022#\n\nlogin_addr\030\006 \003(\0132\017.Net"
      "workAddress\022\"\n\tgame_addr\030\007 \003(\0132\017.Network"
      "Address\022\024\n\014sms_sign_key\030\010 \001(\t\"\374\002\n\016DBServ"
      "erConfig\022\014\n\004port\030\001 \002(\005\022\"\n\010login_db\030\002 \002(\013"
      "2\020.DBConnectOption\022!\n\007game_db\030\003 \002(\0132\020.DB"
      "ConnectOption\022 \n\006log_db\030\004 \002(\0132\020.DBConnec"
      "tOption\022%\n\013recharge_db\030\005 \002(\0132\020.DBConnect"
      "Option\022&\n\tdef_redis\030\007 \001(\0132\023.RedisConnect"
      "Option\022*\n\014def_sentinel\030\010 \003(\0132\024.RedisSent"
      "inelOption\022\022\n\ninit_money\030\t \001(\005\022\024\n\014php_si"
      "gn_key\030\n \001(\t\022\031\n\021bank_transfer_tax\030\013 \001(\005\022"
      "\032\n\022php_interface_addr\030\014 \001(\t\022\027\n\017cash_mone"
      "y_addr\030\r \001(\t\"W\n\025PrivateRoomInfoConfig\022\017\n"
      "\007game_id\030\001 \001(\005\022\027\n\017first_game_type\030\002 \001(\005\022"
      "\024\n\014room_lua_cfg\030\003 \001(\t\"=\n\025PrivateRoomList"
      "Config\022$\n\004info\030\001 \003(\0132\026.PrivateRoomInfoCo"
      "nfig"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 2044);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "config.proto", &protobuf_RegisterTypes);
  ::google::protobuf::internal::OnShutdown(&TableStruct::Shutdown);
}

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;

}  // namespace protobuf_config_2eproto


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int NetworkAddress::kIpFieldNumber;
const int NetworkAddress::kPortFieldNumber;
const int NetworkAddress::kServerIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

NetworkAddress::NetworkAddress()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_config_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:NetworkAddress)
}
NetworkAddress::NetworkAddress(const NetworkAddress& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ip_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_ip()) {
    ip_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.ip_);
  }
  ::memcpy(&port_, &from.port_,
    reinterpret_cast<char*>(&server_id_) -
    reinterpret_cast<char*>(&port_) + sizeof(server_id_));
  // @@protoc_insertion_point(copy_constructor:NetworkAddress)
}

void NetworkAddress::SharedCtor() {
  _cached_size_ = 0;
  ip_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&port_, 0, reinterpret_cast<char*>(&server_id_) -
    reinterpret_cast<char*>(&port_) + sizeof(server_id_));
}

NetworkAddress::~NetworkAddress() {
  // @@protoc_insertion_point(destructor:NetworkAddress)
  SharedDtor();
}

void NetworkAddress::SharedDtor() {
  ip_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void NetworkAddress::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NetworkAddress::descriptor() {
  protobuf_config_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_config_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const NetworkAddress& NetworkAddress::default_instance() {
  protobuf_config_2eproto::InitDefaults();
  return *internal_default_instance();
}

NetworkAddress* NetworkAddress::New(::google::protobuf::Arena* arena) const {
  NetworkAddress* n = new NetworkAddress;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void NetworkAddress::Clear() {
// @@protoc_insertion_point(message_clear_start:NetworkAddress)
  if (has_ip()) {
    GOOGLE_DCHECK(!ip_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
    (*ip_.UnsafeRawStringPointer())->clear();
  }
  if (_has_bits_[0 / 32] & 6u) {
    ::memset(&port_, 0, reinterpret_cast<char*>(&server_id_) -
      reinterpret_cast<char*>(&port_) + sizeof(server_id_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool NetworkAddress::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:NetworkAddress)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string ip = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_ip()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->ip().data(), this->ip().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "NetworkAddress.ip");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 port = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_port();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &port_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 server_id = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {
          set_has_server_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &server_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:NetworkAddress)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:NetworkAddress)
  return false;
#undef DO_
}

void NetworkAddress::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:NetworkAddress)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string ip = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->ip().data(), this->ip().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "NetworkAddress.ip");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->ip(), output);
  }

  // required int32 port = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->port(), output);
  }

  // optional int32 server_id = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->server_id(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:NetworkAddress)
}

::google::protobuf::uint8* NetworkAddress::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:NetworkAddress)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string ip = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->ip().data(), this->ip().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "NetworkAddress.ip");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->ip(), target);
  }

  // required int32 port = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->port(), target);
  }

  // optional int32 server_id = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->server_id(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:NetworkAddress)
  return target;
}

size_t NetworkAddress::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:NetworkAddress)
  size_t total_size = 0;

  if (has_ip()) {
    // required string ip = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->ip());
  }

  if (has_port()) {
    // required int32 port = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->port());
  }

  return total_size;
}
size_t NetworkAddress::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:NetworkAddress)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required string ip = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->ip());

    // required int32 port = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->port());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  // optional int32 server_id = 3;
  if (has_server_id()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->server_id());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NetworkAddress::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:NetworkAddress)
  GOOGLE_DCHECK_NE(&from, this);
  const NetworkAddress* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const NetworkAddress>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:NetworkAddress)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:NetworkAddress)
    MergeFrom(*source);
  }
}

void NetworkAddress::MergeFrom(const NetworkAddress& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:NetworkAddress)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_ip();
      ip_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.ip_);
    }
    if (cached_has_bits & 0x00000002u) {
      port_ = from.port_;
    }
    if (cached_has_bits & 0x00000004u) {
      server_id_ = from.server_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void NetworkAddress::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:NetworkAddress)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NetworkAddress::CopyFrom(const NetworkAddress& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:NetworkAddress)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NetworkAddress::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  return true;
}

void NetworkAddress::Swap(NetworkAddress* other) {
  if (other == this) return;
  InternalSwap(other);
}
void NetworkAddress::InternalSwap(NetworkAddress* other) {
  ip_.Swap(&other->ip_);
  std::swap(port_, other->port_);
  std::swap(server_id_, other->server_id_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata NetworkAddress::GetMetadata() const {
  protobuf_config_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_config_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// NetworkAddress

// required string ip = 1;
bool NetworkAddress::has_ip() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void NetworkAddress::set_has_ip() {
  _has_bits_[0] |= 0x00000001u;
}
void NetworkAddress::clear_has_ip() {
  _has_bits_[0] &= ~0x00000001u;
}
void NetworkAddress::clear_ip() {
  ip_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_ip();
}
const ::std::string& NetworkAddress::ip() const {
  // @@protoc_insertion_point(field_get:NetworkAddress.ip)
  return ip_.GetNoArena();
}
void NetworkAddress::set_ip(const ::std::string& value) {
  set_has_ip();
  ip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:NetworkAddress.ip)
}
#if LANG_CXX11
void NetworkAddress::set_ip(::std::string&& value) {
  set_has_ip();
  ip_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:NetworkAddress.ip)
}
#endif
void NetworkAddress::set_ip(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_ip();
  ip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:NetworkAddress.ip)
}
void NetworkAddress::set_ip(const char* value, size_t size) {
  set_has_ip();
  ip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:NetworkAddress.ip)
}
::std::string* NetworkAddress::mutable_ip() {
  set_has_ip();
  // @@protoc_insertion_point(field_mutable:NetworkAddress.ip)
  return ip_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* NetworkAddress::release_ip() {
  // @@protoc_insertion_point(field_release:NetworkAddress.ip)
  clear_has_ip();
  return ip_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void NetworkAddress::set_allocated_ip(::std::string* ip) {
  if (ip != NULL) {
    set_has_ip();
  } else {
    clear_has_ip();
  }
  ip_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ip);
  // @@protoc_insertion_point(field_set_allocated:NetworkAddress.ip)
}

// required int32 port = 2;
bool NetworkAddress::has_port() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void NetworkAddress::set_has_port() {
  _has_bits_[0] |= 0x00000002u;
}
void NetworkAddress::clear_has_port() {
  _has_bits_[0] &= ~0x00000002u;
}
void NetworkAddress::clear_port() {
  port_ = 0;
  clear_has_port();
}
::google::protobuf::int32 NetworkAddress::port() const {
  // @@protoc_insertion_point(field_get:NetworkAddress.port)
  return port_;
}
void NetworkAddress::set_port(::google::protobuf::int32 value) {
  set_has_port();
  port_ = value;
  // @@protoc_insertion_point(field_set:NetworkAddress.port)
}

// optional int32 server_id = 3;
bool NetworkAddress::has_server_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void NetworkAddress::set_has_server_id() {
  _has_bits_[0] |= 0x00000004u;
}
void NetworkAddress::clear_has_server_id() {
  _has_bits_[0] &= ~0x00000004u;
}
void NetworkAddress::clear_server_id() {
  server_id_ = 0;
  clear_has_server_id();
}
::google::protobuf::int32 NetworkAddress::server_id() const {
  // @@protoc_insertion_point(field_get:NetworkAddress.server_id)
  return server_id_;
}
void NetworkAddress::set_server_id(::google::protobuf::int32 value) {
  set_has_server_id();
  server_id_ = value;
  // @@protoc_insertion_point(field_set:NetworkAddress.server_id)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DBConnectOption::kHostFieldNumber;
const int DBConnectOption::kUserFieldNumber;
const int DBConnectOption::kPasswordFieldNumber;
const int DBConnectOption::kDatabaseFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DBConnectOption::DBConnectOption()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_config_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:DBConnectOption)
}
DBConnectOption::DBConnectOption(const DBConnectOption& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  host_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_host()) {
    host_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.host_);
  }
  user_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_user()) {
    user_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.user_);
  }
  password_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_password()) {
    password_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.password_);
  }
  database_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_database()) {
    database_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.database_);
  }
  // @@protoc_insertion_point(copy_constructor:DBConnectOption)
}

void DBConnectOption::SharedCtor() {
  _cached_size_ = 0;
  host_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  user_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  password_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  database_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

DBConnectOption::~DBConnectOption() {
  // @@protoc_insertion_point(destructor:DBConnectOption)
  SharedDtor();
}

void DBConnectOption::SharedDtor() {
  host_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  user_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  password_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  database_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void DBConnectOption::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DBConnectOption::descriptor() {
  protobuf_config_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_config_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const DBConnectOption& DBConnectOption::default_instance() {
  protobuf_config_2eproto::InitDefaults();
  return *internal_default_instance();
}

DBConnectOption* DBConnectOption::New(::google::protobuf::Arena* arena) const {
  DBConnectOption* n = new DBConnectOption;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void DBConnectOption::Clear() {
// @@protoc_insertion_point(message_clear_start:DBConnectOption)
  if (_has_bits_[0 / 32] & 15u) {
    if (has_host()) {
      GOOGLE_DCHECK(!host_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*host_.UnsafeRawStringPointer())->clear();
    }
    if (has_user()) {
      GOOGLE_DCHECK(!user_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*user_.UnsafeRawStringPointer())->clear();
    }
    if (has_password()) {
      GOOGLE_DCHECK(!password_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*password_.UnsafeRawStringPointer())->clear();
    }
    if (has_database()) {
      GOOGLE_DCHECK(!database_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*database_.UnsafeRawStringPointer())->clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool DBConnectOption::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:DBConnectOption)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string host = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_host()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->host().data(), this->host().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "DBConnectOption.host");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required string user = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_user()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->user().data(), this->user().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "DBConnectOption.user");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required string password = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_password()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->password().data(), this->password().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "DBConnectOption.password");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required string database = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_database()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->database().data(), this->database().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "DBConnectOption.database");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:DBConnectOption)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:DBConnectOption)
  return false;
#undef DO_
}

void DBConnectOption::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:DBConnectOption)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string host = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->host().data(), this->host().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "DBConnectOption.host");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->host(), output);
  }

  // required string user = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->user().data(), this->user().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "DBConnectOption.user");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->user(), output);
  }

  // required string password = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->password().data(), this->password().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "DBConnectOption.password");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->password(), output);
  }

  // required string database = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->database().data(), this->database().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "DBConnectOption.database");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->database(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:DBConnectOption)
}

::google::protobuf::uint8* DBConnectOption::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:DBConnectOption)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string host = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->host().data(), this->host().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "DBConnectOption.host");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->host(), target);
  }

  // required string user = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->user().data(), this->user().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "DBConnectOption.user");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->user(), target);
  }

  // required string password = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->password().data(), this->password().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "DBConnectOption.password");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->password(), target);
  }

  // required string database = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->database().data(), this->database().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "DBConnectOption.database");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->database(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:DBConnectOption)
  return target;
}

size_t DBConnectOption::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:DBConnectOption)
  size_t total_size = 0;

  if (has_host()) {
    // required string host = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->host());
  }

  if (has_user()) {
    // required string user = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->user());
  }

  if (has_password()) {
    // required string password = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->password());
  }

  if (has_database()) {
    // required string database = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->database());
  }

  return total_size;
}
size_t DBConnectOption::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:DBConnectOption)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (((_has_bits_[0] & 0x0000000f) ^ 0x0000000f) == 0) {  // All required fields are present.
    // required string host = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->host());

    // required string user = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->user());

    // required string password = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->password());

    // required string database = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->database());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DBConnectOption::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:DBConnectOption)
  GOOGLE_DCHECK_NE(&from, this);
  const DBConnectOption* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const DBConnectOption>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:DBConnectOption)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:DBConnectOption)
    MergeFrom(*source);
  }
}

void DBConnectOption::MergeFrom(const DBConnectOption& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:DBConnectOption)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 15u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_host();
      host_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.host_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_user();
      user_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.user_);
    }
    if (cached_has_bits & 0x00000004u) {
      set_has_password();
      password_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.password_);
    }
    if (cached_has_bits & 0x00000008u) {
      set_has_database();
      database_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.database_);
    }
  }
}

void DBConnectOption::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:DBConnectOption)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DBConnectOption::CopyFrom(const DBConnectOption& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:DBConnectOption)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DBConnectOption::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;
  return true;
}

void DBConnectOption::Swap(DBConnectOption* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DBConnectOption::InternalSwap(DBConnectOption* other) {
  host_.Swap(&other->host_);
  user_.Swap(&other->user_);
  password_.Swap(&other->password_);
  database_.Swap(&other->database_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata DBConnectOption::GetMetadata() const {
  protobuf_config_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_config_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// DBConnectOption

// required string host = 1;
bool DBConnectOption::has_host() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void DBConnectOption::set_has_host() {
  _has_bits_[0] |= 0x00000001u;
}
void DBConnectOption::clear_has_host() {
  _has_bits_[0] &= ~0x00000001u;
}
void DBConnectOption::clear_host() {
  host_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_host();
}
const ::std::string& DBConnectOption::host() const {
  // @@protoc_insertion_point(field_get:DBConnectOption.host)
  return host_.GetNoArena();
}
void DBConnectOption::set_host(const ::std::string& value) {
  set_has_host();
  host_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:DBConnectOption.host)
}
#if LANG_CXX11
void DBConnectOption::set_host(::std::string&& value) {
  set_has_host();
  host_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:DBConnectOption.host)
}
#endif
void DBConnectOption::set_host(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_host();
  host_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:DBConnectOption.host)
}
void DBConnectOption::set_host(const char* value, size_t size) {
  set_has_host();
  host_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:DBConnectOption.host)
}
::std::string* DBConnectOption::mutable_host() {
  set_has_host();
  // @@protoc_insertion_point(field_mutable:DBConnectOption.host)
  return host_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* DBConnectOption::release_host() {
  // @@protoc_insertion_point(field_release:DBConnectOption.host)
  clear_has_host();
  return host_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void DBConnectOption::set_allocated_host(::std::string* host) {
  if (host != NULL) {
    set_has_host();
  } else {
    clear_has_host();
  }
  host_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), host);
  // @@protoc_insertion_point(field_set_allocated:DBConnectOption.host)
}

// required string user = 2;
bool DBConnectOption::has_user() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void DBConnectOption::set_has_user() {
  _has_bits_[0] |= 0x00000002u;
}
void DBConnectOption::clear_has_user() {
  _has_bits_[0] &= ~0x00000002u;
}
void DBConnectOption::clear_user() {
  user_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_user();
}
const ::std::string& DBConnectOption::user() const {
  // @@protoc_insertion_point(field_get:DBConnectOption.user)
  return user_.GetNoArena();
}
void DBConnectOption::set_user(const ::std::string& value) {
  set_has_user();
  user_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:DBConnectOption.user)
}
#if LANG_CXX11
void DBConnectOption::set_user(::std::string&& value) {
  set_has_user();
  user_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:DBConnectOption.user)
}
#endif
void DBConnectOption::set_user(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_user();
  user_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:DBConnectOption.user)
}
void DBConnectOption::set_user(const char* value, size_t size) {
  set_has_user();
  user_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:DBConnectOption.user)
}
::std::string* DBConnectOption::mutable_user() {
  set_has_user();
  // @@protoc_insertion_point(field_mutable:DBConnectOption.user)
  return user_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* DBConnectOption::release_user() {
  // @@protoc_insertion_point(field_release:DBConnectOption.user)
  clear_has_user();
  return user_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void DBConnectOption::set_allocated_user(::std::string* user) {
  if (user != NULL) {
    set_has_user();
  } else {
    clear_has_user();
  }
  user_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), user);
  // @@protoc_insertion_point(field_set_allocated:DBConnectOption.user)
}

// required string password = 3;
bool DBConnectOption::has_password() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void DBConnectOption::set_has_password() {
  _has_bits_[0] |= 0x00000004u;
}
void DBConnectOption::clear_has_password() {
  _has_bits_[0] &= ~0x00000004u;
}
void DBConnectOption::clear_password() {
  password_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_password();
}
const ::std::string& DBConnectOption::password() const {
  // @@protoc_insertion_point(field_get:DBConnectOption.password)
  return password_.GetNoArena();
}
void DBConnectOption::set_password(const ::std::string& value) {
  set_has_password();
  password_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:DBConnectOption.password)
}
#if LANG_CXX11
void DBConnectOption::set_password(::std::string&& value) {
  set_has_password();
  password_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:DBConnectOption.password)
}
#endif
void DBConnectOption::set_password(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_password();
  password_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:DBConnectOption.password)
}
void DBConnectOption::set_password(const char* value, size_t size) {
  set_has_password();
  password_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:DBConnectOption.password)
}
::std::string* DBConnectOption::mutable_password() {
  set_has_password();
  // @@protoc_insertion_point(field_mutable:DBConnectOption.password)
  return password_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* DBConnectOption::release_password() {
  // @@protoc_insertion_point(field_release:DBConnectOption.password)
  clear_has_password();
  return password_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void DBConnectOption::set_allocated_password(::std::string* password) {
  if (password != NULL) {
    set_has_password();
  } else {
    clear_has_password();
  }
  password_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), password);
  // @@protoc_insertion_point(field_set_allocated:DBConnectOption.password)
}

// required string database = 4;
bool DBConnectOption::has_database() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void DBConnectOption::set_has_database() {
  _has_bits_[0] |= 0x00000008u;
}
void DBConnectOption::clear_has_database() {
  _has_bits_[0] &= ~0x00000008u;
}
void DBConnectOption::clear_database() {
  database_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_database();
}
const ::std::string& DBConnectOption::database() const {
  // @@protoc_insertion_point(field_get:DBConnectOption.database)
  return database_.GetNoArena();
}
void DBConnectOption::set_database(const ::std::string& value) {
  set_has_database();
  database_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:DBConnectOption.database)
}
#if LANG_CXX11
void DBConnectOption::set_database(::std::string&& value) {
  set_has_database();
  database_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:DBConnectOption.database)
}
#endif
void DBConnectOption::set_database(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_database();
  database_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:DBConnectOption.database)
}
void DBConnectOption::set_database(const char* value, size_t size) {
  set_has_database();
  database_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:DBConnectOption.database)
}
::std::string* DBConnectOption::mutable_database() {
  set_has_database();
  // @@protoc_insertion_point(field_mutable:DBConnectOption.database)
  return database_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* DBConnectOption::release_database() {
  // @@protoc_insertion_point(field_release:DBConnectOption.database)
  clear_has_database();
  return database_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void DBConnectOption::set_allocated_database(::std::string* database) {
  if (database != NULL) {
    set_has_database();
  } else {
    clear_has_database();
  }
  database_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), database);
  // @@protoc_insertion_point(field_set_allocated:DBConnectOption.database)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int RedisConnectOption::kIpFieldNumber;
const int RedisConnectOption::kPortFieldNumber;
const int RedisConnectOption::kDbnumFieldNumber;
const int RedisConnectOption::kPasswordFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RedisConnectOption::RedisConnectOption()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_config_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:RedisConnectOption)
}
RedisConnectOption::RedisConnectOption(const RedisConnectOption& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ip_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_ip()) {
    ip_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.ip_);
  }
  password_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_password()) {
    password_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.password_);
  }
  ::memcpy(&port_, &from.port_,
    reinterpret_cast<char*>(&dbnum_) -
    reinterpret_cast<char*>(&port_) + sizeof(dbnum_));
  // @@protoc_insertion_point(copy_constructor:RedisConnectOption)
}

void RedisConnectOption::SharedCtor() {
  _cached_size_ = 0;
  ip_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  password_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&port_, 0, reinterpret_cast<char*>(&dbnum_) -
    reinterpret_cast<char*>(&port_) + sizeof(dbnum_));
}

RedisConnectOption::~RedisConnectOption() {
  // @@protoc_insertion_point(destructor:RedisConnectOption)
  SharedDtor();
}

void RedisConnectOption::SharedDtor() {
  ip_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  password_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void RedisConnectOption::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RedisConnectOption::descriptor() {
  protobuf_config_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_config_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const RedisConnectOption& RedisConnectOption::default_instance() {
  protobuf_config_2eproto::InitDefaults();
  return *internal_default_instance();
}

RedisConnectOption* RedisConnectOption::New(::google::protobuf::Arena* arena) const {
  RedisConnectOption* n = new RedisConnectOption;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void RedisConnectOption::Clear() {
// @@protoc_insertion_point(message_clear_start:RedisConnectOption)
  if (_has_bits_[0 / 32] & 3u) {
    if (has_ip()) {
      GOOGLE_DCHECK(!ip_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*ip_.UnsafeRawStringPointer())->clear();
    }
    if (has_password()) {
      GOOGLE_DCHECK(!password_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*password_.UnsafeRawStringPointer())->clear();
    }
  }
  if (_has_bits_[0 / 32] & 12u) {
    ::memset(&port_, 0, reinterpret_cast<char*>(&dbnum_) -
      reinterpret_cast<char*>(&port_) + sizeof(dbnum_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool RedisConnectOption::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:RedisConnectOption)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string ip = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_ip()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->ip().data(), this->ip().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "RedisConnectOption.ip");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 port = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_port();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &port_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 dbnum = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {
          set_has_dbnum();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &dbnum_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string password = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_password()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->password().data(), this->password().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "RedisConnectOption.password");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:RedisConnectOption)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:RedisConnectOption)
  return false;
#undef DO_
}

void RedisConnectOption::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:RedisConnectOption)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string ip = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->ip().data(), this->ip().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "RedisConnectOption.ip");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->ip(), output);
  }

  // required int32 port = 2;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->port(), output);
  }

  // optional int32 dbnum = 3;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->dbnum(), output);
  }

  // optional string password = 4;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->password().data(), this->password().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "RedisConnectOption.password");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->password(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:RedisConnectOption)
}

::google::protobuf::uint8* RedisConnectOption::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:RedisConnectOption)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string ip = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->ip().data(), this->ip().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "RedisConnectOption.ip");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->ip(), target);
  }

  // required int32 port = 2;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->port(), target);
  }

  // optional int32 dbnum = 3;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->dbnum(), target);
  }

  // optional string password = 4;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->password().data(), this->password().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "RedisConnectOption.password");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->password(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:RedisConnectOption)
  return target;
}

size_t RedisConnectOption::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:RedisConnectOption)
  size_t total_size = 0;

  if (has_ip()) {
    // required string ip = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->ip());
  }

  if (has_port()) {
    // required int32 port = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->port());
  }

  return total_size;
}
size_t RedisConnectOption::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:RedisConnectOption)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000005) ^ 0x00000005) == 0) {  // All required fields are present.
    // required string ip = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->ip());

    // required int32 port = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->port());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  // optional string password = 4;
  if (has_password()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->password());
  }

  // optional int32 dbnum = 3;
  if (has_dbnum()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->dbnum());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RedisConnectOption::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:RedisConnectOption)
  GOOGLE_DCHECK_NE(&from, this);
  const RedisConnectOption* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const RedisConnectOption>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:RedisConnectOption)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:RedisConnectOption)
    MergeFrom(*source);
  }
}

void RedisConnectOption::MergeFrom(const RedisConnectOption& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:RedisConnectOption)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 15u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_ip();
      ip_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.ip_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_password();
      password_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.password_);
    }
    if (cached_has_bits & 0x00000004u) {
      port_ = from.port_;
    }
    if (cached_has_bits & 0x00000008u) {
      dbnum_ = from.dbnum_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void RedisConnectOption::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:RedisConnectOption)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RedisConnectOption::CopyFrom(const RedisConnectOption& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:RedisConnectOption)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RedisConnectOption::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000005) != 0x00000005) return false;
  return true;
}

void RedisConnectOption::Swap(RedisConnectOption* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RedisConnectOption::InternalSwap(RedisConnectOption* other) {
  ip_.Swap(&other->ip_);
  password_.Swap(&other->password_);
  std::swap(port_, other->port_);
  std::swap(dbnum_, other->dbnum_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata RedisConnectOption::GetMetadata() const {
  protobuf_config_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_config_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// RedisConnectOption

// required string ip = 1;
bool RedisConnectOption::has_ip() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void RedisConnectOption::set_has_ip() {
  _has_bits_[0] |= 0x00000001u;
}
void RedisConnectOption::clear_has_ip() {
  _has_bits_[0] &= ~0x00000001u;
}
void RedisConnectOption::clear_ip() {
  ip_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_ip();
}
const ::std::string& RedisConnectOption::ip() const {
  // @@protoc_insertion_point(field_get:RedisConnectOption.ip)
  return ip_.GetNoArena();
}
void RedisConnectOption::set_ip(const ::std::string& value) {
  set_has_ip();
  ip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:RedisConnectOption.ip)
}
#if LANG_CXX11
void RedisConnectOption::set_ip(::std::string&& value) {
  set_has_ip();
  ip_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:RedisConnectOption.ip)
}
#endif
void RedisConnectOption::set_ip(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_ip();
  ip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:RedisConnectOption.ip)
}
void RedisConnectOption::set_ip(const char* value, size_t size) {
  set_has_ip();
  ip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:RedisConnectOption.ip)
}
::std::string* RedisConnectOption::mutable_ip() {
  set_has_ip();
  // @@protoc_insertion_point(field_mutable:RedisConnectOption.ip)
  return ip_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* RedisConnectOption::release_ip() {
  // @@protoc_insertion_point(field_release:RedisConnectOption.ip)
  clear_has_ip();
  return ip_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void RedisConnectOption::set_allocated_ip(::std::string* ip) {
  if (ip != NULL) {
    set_has_ip();
  } else {
    clear_has_ip();
  }
  ip_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ip);
  // @@protoc_insertion_point(field_set_allocated:RedisConnectOption.ip)
}

// required int32 port = 2;
bool RedisConnectOption::has_port() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void RedisConnectOption::set_has_port() {
  _has_bits_[0] |= 0x00000004u;
}
void RedisConnectOption::clear_has_port() {
  _has_bits_[0] &= ~0x00000004u;
}
void RedisConnectOption::clear_port() {
  port_ = 0;
  clear_has_port();
}
::google::protobuf::int32 RedisConnectOption::port() const {
  // @@protoc_insertion_point(field_get:RedisConnectOption.port)
  return port_;
}
void RedisConnectOption::set_port(::google::protobuf::int32 value) {
  set_has_port();
  port_ = value;
  // @@protoc_insertion_point(field_set:RedisConnectOption.port)
}

// optional int32 dbnum = 3;
bool RedisConnectOption::has_dbnum() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void RedisConnectOption::set_has_dbnum() {
  _has_bits_[0] |= 0x00000008u;
}
void RedisConnectOption::clear_has_dbnum() {
  _has_bits_[0] &= ~0x00000008u;
}
void RedisConnectOption::clear_dbnum() {
  dbnum_ = 0;
  clear_has_dbnum();
}
::google::protobuf::int32 RedisConnectOption::dbnum() const {
  // @@protoc_insertion_point(field_get:RedisConnectOption.dbnum)
  return dbnum_;
}
void RedisConnectOption::set_dbnum(::google::protobuf::int32 value) {
  set_has_dbnum();
  dbnum_ = value;
  // @@protoc_insertion_point(field_set:RedisConnectOption.dbnum)
}

// optional string password = 4;
bool RedisConnectOption::has_password() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void RedisConnectOption::set_has_password() {
  _has_bits_[0] |= 0x00000002u;
}
void RedisConnectOption::clear_has_password() {
  _has_bits_[0] &= ~0x00000002u;
}
void RedisConnectOption::clear_password() {
  password_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_password();
}
const ::std::string& RedisConnectOption::password() const {
  // @@protoc_insertion_point(field_get:RedisConnectOption.password)
  return password_.GetNoArena();
}
void RedisConnectOption::set_password(const ::std::string& value) {
  set_has_password();
  password_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:RedisConnectOption.password)
}
#if LANG_CXX11
void RedisConnectOption::set_password(::std::string&& value) {
  set_has_password();
  password_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:RedisConnectOption.password)
}
#endif
void RedisConnectOption::set_password(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_password();
  password_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:RedisConnectOption.password)
}
void RedisConnectOption::set_password(const char* value, size_t size) {
  set_has_password();
  password_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:RedisConnectOption.password)
}
::std::string* RedisConnectOption::mutable_password() {
  set_has_password();
  // @@protoc_insertion_point(field_mutable:RedisConnectOption.password)
  return password_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* RedisConnectOption::release_password() {
  // @@protoc_insertion_point(field_release:RedisConnectOption.password)
  clear_has_password();
  return password_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void RedisConnectOption::set_allocated_password(::std::string* password) {
  if (password != NULL) {
    set_has_password();
  } else {
    clear_has_password();
  }
  password_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), password);
  // @@protoc_insertion_point(field_set_allocated:RedisConnectOption.password)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int RedisSentinelOption::kIpFieldNumber;
const int RedisSentinelOption::kPortFieldNumber;
const int RedisSentinelOption::kDbnumFieldNumber;
const int RedisSentinelOption::kMasterNameFieldNumber;
const int RedisSentinelOption::kPasswordFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RedisSentinelOption::RedisSentinelOption()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_config_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:RedisSentinelOption)
}
RedisSentinelOption::RedisSentinelOption(const RedisSentinelOption& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ip_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_ip()) {
    ip_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.ip_);
  }
  master_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_master_name()) {
    master_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.master_name_);
  }
  password_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_password()) {
    password_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.password_);
  }
  ::memcpy(&port_, &from.port_,
    reinterpret_cast<char*>(&dbnum_) -
    reinterpret_cast<char*>(&port_) + sizeof(dbnum_));
  // @@protoc_insertion_point(copy_constructor:RedisSentinelOption)
}

void RedisSentinelOption::SharedCtor() {
  _cached_size_ = 0;
  ip_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  master_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  password_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&port_, 0, reinterpret_cast<char*>(&dbnum_) -
    reinterpret_cast<char*>(&port_) + sizeof(dbnum_));
}

RedisSentinelOption::~RedisSentinelOption() {
  // @@protoc_insertion_point(destructor:RedisSentinelOption)
  SharedDtor();
}

void RedisSentinelOption::SharedDtor() {
  ip_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  master_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  password_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void RedisSentinelOption::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RedisSentinelOption::descriptor() {
  protobuf_config_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_config_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const RedisSentinelOption& RedisSentinelOption::default_instance() {
  protobuf_config_2eproto::InitDefaults();
  return *internal_default_instance();
}

RedisSentinelOption* RedisSentinelOption::New(::google::protobuf::Arena* arena) const {
  RedisSentinelOption* n = new RedisSentinelOption;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void RedisSentinelOption::Clear() {
// @@protoc_insertion_point(message_clear_start:RedisSentinelOption)
  if (_has_bits_[0 / 32] & 7u) {
    if (has_ip()) {
      GOOGLE_DCHECK(!ip_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*ip_.UnsafeRawStringPointer())->clear();
    }
    if (has_master_name()) {
      GOOGLE_DCHECK(!master_name_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*master_name_.UnsafeRawStringPointer())->clear();
    }
    if (has_password()) {
      GOOGLE_DCHECK(!password_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*password_.UnsafeRawStringPointer())->clear();
    }
  }
  if (_has_bits_[0 / 32] & 24u) {
    ::memset(&port_, 0, reinterpret_cast<char*>(&dbnum_) -
      reinterpret_cast<char*>(&port_) + sizeof(dbnum_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool RedisSentinelOption::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:RedisSentinelOption)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string ip = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_ip()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->ip().data(), this->ip().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "RedisSentinelOption.ip");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 port = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_port();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &port_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 dbnum = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {
          set_has_dbnum();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &dbnum_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required string master_name = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_master_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->master_name().data(), this->master_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "RedisSentinelOption.master_name");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string password = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_password()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->password().data(), this->password().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "RedisSentinelOption.password");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:RedisSentinelOption)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:RedisSentinelOption)
  return false;
#undef DO_
}

void RedisSentinelOption::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:RedisSentinelOption)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string ip = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->ip().data(), this->ip().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "RedisSentinelOption.ip");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->ip(), output);
  }

  // required int32 port = 2;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->port(), output);
  }

  // optional int32 dbnum = 3;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->dbnum(), output);
  }

  // required string master_name = 4;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->master_name().data(), this->master_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "RedisSentinelOption.master_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->master_name(), output);
  }

  // optional string password = 5;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->password().data(), this->password().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "RedisSentinelOption.password");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->password(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:RedisSentinelOption)
}

::google::protobuf::uint8* RedisSentinelOption::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:RedisSentinelOption)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string ip = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->ip().data(), this->ip().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "RedisSentinelOption.ip");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->ip(), target);
  }

  // required int32 port = 2;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->port(), target);
  }

  // optional int32 dbnum = 3;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->dbnum(), target);
  }

  // required string master_name = 4;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->master_name().data(), this->master_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "RedisSentinelOption.master_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->master_name(), target);
  }

  // optional string password = 5;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->password().data(), this->password().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "RedisSentinelOption.password");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->password(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:RedisSentinelOption)
  return target;
}

size_t RedisSentinelOption::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:RedisSentinelOption)
  size_t total_size = 0;

  if (has_ip()) {
    // required string ip = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->ip());
  }

  if (has_master_name()) {
    // required string master_name = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->master_name());
  }

  if (has_port()) {
    // required int32 port = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->port());
  }

  return total_size;
}
size_t RedisSentinelOption::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:RedisSentinelOption)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (((_has_bits_[0] & 0x0000000b) ^ 0x0000000b) == 0) {  // All required fields are present.
    // required string ip = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->ip());

    // required string master_name = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->master_name());

    // required int32 port = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->port());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  // optional string password = 5;
  if (has_password()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->password());
  }

  // optional int32 dbnum = 3;
  if (has_dbnum()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->dbnum());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RedisSentinelOption::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:RedisSentinelOption)
  GOOGLE_DCHECK_NE(&from, this);
  const RedisSentinelOption* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const RedisSentinelOption>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:RedisSentinelOption)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:RedisSentinelOption)
    MergeFrom(*source);
  }
}

void RedisSentinelOption::MergeFrom(const RedisSentinelOption& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:RedisSentinelOption)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 31u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_ip();
      ip_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.ip_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_master_name();
      master_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.master_name_);
    }
    if (cached_has_bits & 0x00000004u) {
      set_has_password();
      password_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.password_);
    }
    if (cached_has_bits & 0x00000008u) {
      port_ = from.port_;
    }
    if (cached_has_bits & 0x00000010u) {
      dbnum_ = from.dbnum_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void RedisSentinelOption::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:RedisSentinelOption)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RedisSentinelOption::CopyFrom(const RedisSentinelOption& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:RedisSentinelOption)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RedisSentinelOption::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000b) != 0x0000000b) return false;
  return true;
}

void RedisSentinelOption::Swap(RedisSentinelOption* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RedisSentinelOption::InternalSwap(RedisSentinelOption* other) {
  ip_.Swap(&other->ip_);
  master_name_.Swap(&other->master_name_);
  password_.Swap(&other->password_);
  std::swap(port_, other->port_);
  std::swap(dbnum_, other->dbnum_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata RedisSentinelOption::GetMetadata() const {
  protobuf_config_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_config_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// RedisSentinelOption

// required string ip = 1;
bool RedisSentinelOption::has_ip() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void RedisSentinelOption::set_has_ip() {
  _has_bits_[0] |= 0x00000001u;
}
void RedisSentinelOption::clear_has_ip() {
  _has_bits_[0] &= ~0x00000001u;
}
void RedisSentinelOption::clear_ip() {
  ip_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_ip();
}
const ::std::string& RedisSentinelOption::ip() const {
  // @@protoc_insertion_point(field_get:RedisSentinelOption.ip)
  return ip_.GetNoArena();
}
void RedisSentinelOption::set_ip(const ::std::string& value) {
  set_has_ip();
  ip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:RedisSentinelOption.ip)
}
#if LANG_CXX11
void RedisSentinelOption::set_ip(::std::string&& value) {
  set_has_ip();
  ip_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:RedisSentinelOption.ip)
}
#endif
void RedisSentinelOption::set_ip(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_ip();
  ip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:RedisSentinelOption.ip)
}
void RedisSentinelOption::set_ip(const char* value, size_t size) {
  set_has_ip();
  ip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:RedisSentinelOption.ip)
}
::std::string* RedisSentinelOption::mutable_ip() {
  set_has_ip();
  // @@protoc_insertion_point(field_mutable:RedisSentinelOption.ip)
  return ip_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* RedisSentinelOption::release_ip() {
  // @@protoc_insertion_point(field_release:RedisSentinelOption.ip)
  clear_has_ip();
  return ip_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void RedisSentinelOption::set_allocated_ip(::std::string* ip) {
  if (ip != NULL) {
    set_has_ip();
  } else {
    clear_has_ip();
  }
  ip_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ip);
  // @@protoc_insertion_point(field_set_allocated:RedisSentinelOption.ip)
}

// required int32 port = 2;
bool RedisSentinelOption::has_port() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void RedisSentinelOption::set_has_port() {
  _has_bits_[0] |= 0x00000008u;
}
void RedisSentinelOption::clear_has_port() {
  _has_bits_[0] &= ~0x00000008u;
}
void RedisSentinelOption::clear_port() {
  port_ = 0;
  clear_has_port();
}
::google::protobuf::int32 RedisSentinelOption::port() const {
  // @@protoc_insertion_point(field_get:RedisSentinelOption.port)
  return port_;
}
void RedisSentinelOption::set_port(::google::protobuf::int32 value) {
  set_has_port();
  port_ = value;
  // @@protoc_insertion_point(field_set:RedisSentinelOption.port)
}

// optional int32 dbnum = 3;
bool RedisSentinelOption::has_dbnum() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void RedisSentinelOption::set_has_dbnum() {
  _has_bits_[0] |= 0x00000010u;
}
void RedisSentinelOption::clear_has_dbnum() {
  _has_bits_[0] &= ~0x00000010u;
}
void RedisSentinelOption::clear_dbnum() {
  dbnum_ = 0;
  clear_has_dbnum();
}
::google::protobuf::int32 RedisSentinelOption::dbnum() const {
  // @@protoc_insertion_point(field_get:RedisSentinelOption.dbnum)
  return dbnum_;
}
void RedisSentinelOption::set_dbnum(::google::protobuf::int32 value) {
  set_has_dbnum();
  dbnum_ = value;
  // @@protoc_insertion_point(field_set:RedisSentinelOption.dbnum)
}

// required string master_name = 4;
bool RedisSentinelOption::has_master_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void RedisSentinelOption::set_has_master_name() {
  _has_bits_[0] |= 0x00000002u;
}
void RedisSentinelOption::clear_has_master_name() {
  _has_bits_[0] &= ~0x00000002u;
}
void RedisSentinelOption::clear_master_name() {
  master_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_master_name();
}
const ::std::string& RedisSentinelOption::master_name() const {
  // @@protoc_insertion_point(field_get:RedisSentinelOption.master_name)
  return master_name_.GetNoArena();
}
void RedisSentinelOption::set_master_name(const ::std::string& value) {
  set_has_master_name();
  master_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:RedisSentinelOption.master_name)
}
#if LANG_CXX11
void RedisSentinelOption::set_master_name(::std::string&& value) {
  set_has_master_name();
  master_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:RedisSentinelOption.master_name)
}
#endif
void RedisSentinelOption::set_master_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_master_name();
  master_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:RedisSentinelOption.master_name)
}
void RedisSentinelOption::set_master_name(const char* value, size_t size) {
  set_has_master_name();
  master_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:RedisSentinelOption.master_name)
}
::std::string* RedisSentinelOption::mutable_master_name() {
  set_has_master_name();
  // @@protoc_insertion_point(field_mutable:RedisSentinelOption.master_name)
  return master_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* RedisSentinelOption::release_master_name() {
  // @@protoc_insertion_point(field_release:RedisSentinelOption.master_name)
  clear_has_master_name();
  return master_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void RedisSentinelOption::set_allocated_master_name(::std::string* master_name) {
  if (master_name != NULL) {
    set_has_master_name();
  } else {
    clear_has_master_name();
  }
  master_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), master_name);
  // @@protoc_insertion_point(field_set_allocated:RedisSentinelOption.master_name)
}

// optional string password = 5;
bool RedisSentinelOption::has_password() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void RedisSentinelOption::set_has_password() {
  _has_bits_[0] |= 0x00000004u;
}
void RedisSentinelOption::clear_has_password() {
  _has_bits_[0] &= ~0x00000004u;
}
void RedisSentinelOption::clear_password() {
  password_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_password();
}
const ::std::string& RedisSentinelOption::password() const {
  // @@protoc_insertion_point(field_get:RedisSentinelOption.password)
  return password_.GetNoArena();
}
void RedisSentinelOption::set_password(const ::std::string& value) {
  set_has_password();
  password_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:RedisSentinelOption.password)
}
#if LANG_CXX11
void RedisSentinelOption::set_password(::std::string&& value) {
  set_has_password();
  password_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:RedisSentinelOption.password)
}
#endif
void RedisSentinelOption::set_password(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_password();
  password_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:RedisSentinelOption.password)
}
void RedisSentinelOption::set_password(const char* value, size_t size) {
  set_has_password();
  password_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:RedisSentinelOption.password)
}
::std::string* RedisSentinelOption::mutable_password() {
  set_has_password();
  // @@protoc_insertion_point(field_mutable:RedisSentinelOption.password)
  return password_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* RedisSentinelOption::release_password() {
  // @@protoc_insertion_point(field_release:RedisSentinelOption.password)
  clear_has_password();
  return password_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void RedisSentinelOption::set_allocated_password(::std::string* password) {
  if (password != NULL) {
    set_has_password();
  } else {
    clear_has_password();
  }
  password_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), password);
  // @@protoc_insertion_point(field_set_allocated:RedisSentinelOption.password)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ConfigServer_Config::kPortFieldNumber;
const int ConfigServer_Config::kConfigDbFieldNumber;
const int ConfigServer_Config::kConfigGameFieldNumber;
const int ConfigServer_Config::kLogPrintOpenFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ConfigServer_Config::ConfigServer_Config()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_config_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:ConfigServer_Config)
}
ConfigServer_Config::ConfigServer_Config(const ConfigServer_Config& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_config_db()) {
    config_db_ = new ::DBConnectOption(*from.config_db_);
  } else {
    config_db_ = NULL;
  }
  if (from.has_config_game()) {
    config_game_ = new ::DBConnectOption(*from.config_game_);
  } else {
    config_game_ = NULL;
  }
  ::memcpy(&port_, &from.port_,
    reinterpret_cast<char*>(&log_print_open_) -
    reinterpret_cast<char*>(&port_) + sizeof(log_print_open_));
  // @@protoc_insertion_point(copy_constructor:ConfigServer_Config)
}

void ConfigServer_Config::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&config_db_, 0, reinterpret_cast<char*>(&log_print_open_) -
    reinterpret_cast<char*>(&config_db_) + sizeof(log_print_open_));
}

ConfigServer_Config::~ConfigServer_Config() {
  // @@protoc_insertion_point(destructor:ConfigServer_Config)
  SharedDtor();
}

void ConfigServer_Config::SharedDtor() {
  if (this != internal_default_instance()) {
    delete config_db_;
  }
  if (this != internal_default_instance()) {
    delete config_game_;
  }
}

void ConfigServer_Config::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ConfigServer_Config::descriptor() {
  protobuf_config_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_config_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ConfigServer_Config& ConfigServer_Config::default_instance() {
  protobuf_config_2eproto::InitDefaults();
  return *internal_default_instance();
}

ConfigServer_Config* ConfigServer_Config::New(::google::protobuf::Arena* arena) const {
  ConfigServer_Config* n = new ConfigServer_Config;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ConfigServer_Config::Clear() {
// @@protoc_insertion_point(message_clear_start:ConfigServer_Config)
  if (_has_bits_[0 / 32] & 3u) {
    if (has_config_db()) {
      GOOGLE_DCHECK(config_db_ != NULL);
      config_db_->::DBConnectOption::Clear();
    }
    if (has_config_game()) {
      GOOGLE_DCHECK(config_game_ != NULL);
      config_game_->::DBConnectOption::Clear();
    }
  }
  if (_has_bits_[0 / 32] & 12u) {
    ::memset(&port_, 0, reinterpret_cast<char*>(&log_print_open_) -
      reinterpret_cast<char*>(&port_) + sizeof(log_print_open_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool ConfigServer_Config::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ConfigServer_Config)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 port = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_port();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &port_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required .DBConnectOption config_db = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_config_db()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required .DBConnectOption config_game = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_config_game()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool log_print_open = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u)) {
          set_has_log_print_open();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &log_print_open_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ConfigServer_Config)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ConfigServer_Config)
  return false;
#undef DO_
}

void ConfigServer_Config::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ConfigServer_Config)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 port = 1;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->port(), output);
  }

  // required .DBConnectOption config_db = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->config_db_, output);
  }

  // required .DBConnectOption config_game = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *this->config_game_, output);
  }

  // optional bool log_print_open = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->log_print_open(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ConfigServer_Config)
}

::google::protobuf::uint8* ConfigServer_Config::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ConfigServer_Config)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 port = 1;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->port(), target);
  }

  // required .DBConnectOption config_db = 2;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->config_db_, deterministic, target);
  }

  // required .DBConnectOption config_game = 3;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, *this->config_game_, deterministic, target);
  }

  // optional bool log_print_open = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->log_print_open(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ConfigServer_Config)
  return target;
}

size_t ConfigServer_Config::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:ConfigServer_Config)
  size_t total_size = 0;

  if (has_config_db()) {
    // required .DBConnectOption config_db = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->config_db_);
  }

  if (has_config_game()) {
    // required .DBConnectOption config_game = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->config_game_);
  }

  if (has_port()) {
    // required int32 port = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->port());
  }

  return total_size;
}
size_t ConfigServer_Config::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ConfigServer_Config)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000007) ^ 0x00000007) == 0) {  // All required fields are present.
    // required .DBConnectOption config_db = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->config_db_);

    // required .DBConnectOption config_game = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->config_game_);

    // required int32 port = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->port());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  // optional bool log_print_open = 4;
  if (has_log_print_open()) {
    total_size += 1 + 1;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ConfigServer_Config::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ConfigServer_Config)
  GOOGLE_DCHECK_NE(&from, this);
  const ConfigServer_Config* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ConfigServer_Config>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ConfigServer_Config)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ConfigServer_Config)
    MergeFrom(*source);
  }
}

void ConfigServer_Config::MergeFrom(const ConfigServer_Config& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ConfigServer_Config)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 15u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_config_db()->::DBConnectOption::MergeFrom(from.config_db());
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_config_game()->::DBConnectOption::MergeFrom(from.config_game());
    }
    if (cached_has_bits & 0x00000004u) {
      port_ = from.port_;
    }
    if (cached_has_bits & 0x00000008u) {
      log_print_open_ = from.log_print_open_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void ConfigServer_Config::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ConfigServer_Config)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ConfigServer_Config::CopyFrom(const ConfigServer_Config& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ConfigServer_Config)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ConfigServer_Config::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;
  if (has_config_db()) {
    if (!this->config_db_->IsInitialized()) return false;
  }
  if (has_config_game()) {
    if (!this->config_game_->IsInitialized()) return false;
  }
  return true;
}

void ConfigServer_Config::Swap(ConfigServer_Config* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ConfigServer_Config::InternalSwap(ConfigServer_Config* other) {
  std::swap(config_db_, other->config_db_);
  std::swap(config_game_, other->config_game_);
  std::swap(port_, other->port_);
  std::swap(log_print_open_, other->log_print_open_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ConfigServer_Config::GetMetadata() const {
  protobuf_config_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_config_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ConfigServer_Config

// required int32 port = 1;
bool ConfigServer_Config::has_port() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void ConfigServer_Config::set_has_port() {
  _has_bits_[0] |= 0x00000004u;
}
void ConfigServer_Config::clear_has_port() {
  _has_bits_[0] &= ~0x00000004u;
}
void ConfigServer_Config::clear_port() {
  port_ = 0;
  clear_has_port();
}
::google::protobuf::int32 ConfigServer_Config::port() const {
  // @@protoc_insertion_point(field_get:ConfigServer_Config.port)
  return port_;
}
void ConfigServer_Config::set_port(::google::protobuf::int32 value) {
  set_has_port();
  port_ = value;
  // @@protoc_insertion_point(field_set:ConfigServer_Config.port)
}

// required .DBConnectOption config_db = 2;
bool ConfigServer_Config::has_config_db() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void ConfigServer_Config::set_has_config_db() {
  _has_bits_[0] |= 0x00000001u;
}
void ConfigServer_Config::clear_has_config_db() {
  _has_bits_[0] &= ~0x00000001u;
}
void ConfigServer_Config::clear_config_db() {
  if (config_db_ != NULL) config_db_->::DBConnectOption::Clear();
  clear_has_config_db();
}
const ::DBConnectOption& ConfigServer_Config::config_db() const {
  // @@protoc_insertion_point(field_get:ConfigServer_Config.config_db)
  return config_db_ != NULL ? *config_db_
                         : *::DBConnectOption::internal_default_instance();
}
::DBConnectOption* ConfigServer_Config::mutable_config_db() {
  set_has_config_db();
  if (config_db_ == NULL) {
    config_db_ = new ::DBConnectOption;
  }
  // @@protoc_insertion_point(field_mutable:ConfigServer_Config.config_db)
  return config_db_;
}
::DBConnectOption* ConfigServer_Config::release_config_db() {
  // @@protoc_insertion_point(field_release:ConfigServer_Config.config_db)
  clear_has_config_db();
  ::DBConnectOption* temp = config_db_;
  config_db_ = NULL;
  return temp;
}
void ConfigServer_Config::set_allocated_config_db(::DBConnectOption* config_db) {
  delete config_db_;
  config_db_ = config_db;
  if (config_db) {
    set_has_config_db();
  } else {
    clear_has_config_db();
  }
  // @@protoc_insertion_point(field_set_allocated:ConfigServer_Config.config_db)
}

// required .DBConnectOption config_game = 3;
bool ConfigServer_Config::has_config_game() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void ConfigServer_Config::set_has_config_game() {
  _has_bits_[0] |= 0x00000002u;
}
void ConfigServer_Config::clear_has_config_game() {
  _has_bits_[0] &= ~0x00000002u;
}
void ConfigServer_Config::clear_config_game() {
  if (config_game_ != NULL) config_game_->::DBConnectOption::Clear();
  clear_has_config_game();
}
const ::DBConnectOption& ConfigServer_Config::config_game() const {
  // @@protoc_insertion_point(field_get:ConfigServer_Config.config_game)
  return config_game_ != NULL ? *config_game_
                         : *::DBConnectOption::internal_default_instance();
}
::DBConnectOption* ConfigServer_Config::mutable_config_game() {
  set_has_config_game();
  if (config_game_ == NULL) {
    config_game_ = new ::DBConnectOption;
  }
  // @@protoc_insertion_point(field_mutable:ConfigServer_Config.config_game)
  return config_game_;
}
::DBConnectOption* ConfigServer_Config::release_config_game() {
  // @@protoc_insertion_point(field_release:ConfigServer_Config.config_game)
  clear_has_config_game();
  ::DBConnectOption* temp = config_game_;
  config_game_ = NULL;
  return temp;
}
void ConfigServer_Config::set_allocated_config_game(::DBConnectOption* config_game) {
  delete config_game_;
  config_game_ = config_game;
  if (config_game) {
    set_has_config_game();
  } else {
    clear_has_config_game();
  }
  // @@protoc_insertion_point(field_set_allocated:ConfigServer_Config.config_game)
}

// optional bool log_print_open = 4;
bool ConfigServer_Config::has_log_print_open() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void ConfigServer_Config::set_has_log_print_open() {
  _has_bits_[0] |= 0x00000008u;
}
void ConfigServer_Config::clear_has_log_print_open() {
  _has_bits_[0] &= ~0x00000008u;
}
void ConfigServer_Config::clear_log_print_open() {
  log_print_open_ = false;
  clear_has_log_print_open();
}
bool ConfigServer_Config::log_print_open() const {
  // @@protoc_insertion_point(field_get:ConfigServer_Config.log_print_open)
  return log_print_open_;
}
void ConfigServer_Config::set_log_print_open(bool value) {
  set_has_log_print_open();
  log_print_open_ = value;
  // @@protoc_insertion_point(field_set:ConfigServer_Config.log_print_open)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CommonServer_Config::kConfigAddrFieldNumber;
const int CommonServer_Config::kLogPrintOpenFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CommonServer_Config::CommonServer_Config()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_config_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:CommonServer_Config)
}
CommonServer_Config::CommonServer_Config(const CommonServer_Config& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_config_addr()) {
    config_addr_ = new ::NetworkAddress(*from.config_addr_);
  } else {
    config_addr_ = NULL;
  }
  log_print_open_ = from.log_print_open_;
  // @@protoc_insertion_point(copy_constructor:CommonServer_Config)
}

void CommonServer_Config::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&config_addr_, 0, reinterpret_cast<char*>(&log_print_open_) -
    reinterpret_cast<char*>(&config_addr_) + sizeof(log_print_open_));
}

CommonServer_Config::~CommonServer_Config() {
  // @@protoc_insertion_point(destructor:CommonServer_Config)
  SharedDtor();
}

void CommonServer_Config::SharedDtor() {
  if (this != internal_default_instance()) {
    delete config_addr_;
  }
}

void CommonServer_Config::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CommonServer_Config::descriptor() {
  protobuf_config_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_config_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CommonServer_Config& CommonServer_Config::default_instance() {
  protobuf_config_2eproto::InitDefaults();
  return *internal_default_instance();
}

CommonServer_Config* CommonServer_Config::New(::google::protobuf::Arena* arena) const {
  CommonServer_Config* n = new CommonServer_Config;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CommonServer_Config::Clear() {
// @@protoc_insertion_point(message_clear_start:CommonServer_Config)
  if (has_config_addr()) {
    GOOGLE_DCHECK(config_addr_ != NULL);
    config_addr_->::NetworkAddress::Clear();
  }
  log_print_open_ = false;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CommonServer_Config::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CommonServer_Config)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .NetworkAddress config_addr = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_config_addr()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool log_print_open = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_log_print_open();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &log_print_open_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CommonServer_Config)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CommonServer_Config)
  return false;
#undef DO_
}

void CommonServer_Config::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CommonServer_Config)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .NetworkAddress config_addr = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->config_addr_, output);
  }

  // optional bool log_print_open = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->log_print_open(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CommonServer_Config)
}

::google::protobuf::uint8* CommonServer_Config::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CommonServer_Config)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .NetworkAddress config_addr = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->config_addr_, deterministic, target);
  }

  // optional bool log_print_open = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->log_print_open(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CommonServer_Config)
  return target;
}

size_t CommonServer_Config::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CommonServer_Config)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // required .NetworkAddress config_addr = 1;
  if (has_config_addr()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->config_addr_);
  }
  // optional bool log_print_open = 2;
  if (has_log_print_open()) {
    total_size += 1 + 1;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CommonServer_Config::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CommonServer_Config)
  GOOGLE_DCHECK_NE(&from, this);
  const CommonServer_Config* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CommonServer_Config>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CommonServer_Config)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CommonServer_Config)
    MergeFrom(*source);
  }
}

void CommonServer_Config::MergeFrom(const CommonServer_Config& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CommonServer_Config)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_config_addr()->::NetworkAddress::MergeFrom(from.config_addr());
    }
    if (cached_has_bits & 0x00000002u) {
      log_print_open_ = from.log_print_open_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CommonServer_Config::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CommonServer_Config)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CommonServer_Config::CopyFrom(const CommonServer_Config& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CommonServer_Config)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CommonServer_Config::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  if (has_config_addr()) {
    if (!this->config_addr_->IsInitialized()) return false;
  }
  return true;
}

void CommonServer_Config::Swap(CommonServer_Config* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CommonServer_Config::InternalSwap(CommonServer_Config* other) {
  std::swap(config_addr_, other->config_addr_);
  std::swap(log_print_open_, other->log_print_open_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CommonServer_Config::GetMetadata() const {
  protobuf_config_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_config_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CommonServer_Config

// required .NetworkAddress config_addr = 1;
bool CommonServer_Config::has_config_addr() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CommonServer_Config::set_has_config_addr() {
  _has_bits_[0] |= 0x00000001u;
}
void CommonServer_Config::clear_has_config_addr() {
  _has_bits_[0] &= ~0x00000001u;
}
void CommonServer_Config::clear_config_addr() {
  if (config_addr_ != NULL) config_addr_->::NetworkAddress::Clear();
  clear_has_config_addr();
}
const ::NetworkAddress& CommonServer_Config::config_addr() const {
  // @@protoc_insertion_point(field_get:CommonServer_Config.config_addr)
  return config_addr_ != NULL ? *config_addr_
                         : *::NetworkAddress::internal_default_instance();
}
::NetworkAddress* CommonServer_Config::mutable_config_addr() {
  set_has_config_addr();
  if (config_addr_ == NULL) {
    config_addr_ = new ::NetworkAddress;
  }
  // @@protoc_insertion_point(field_mutable:CommonServer_Config.config_addr)
  return config_addr_;
}
::NetworkAddress* CommonServer_Config::release_config_addr() {
  // @@protoc_insertion_point(field_release:CommonServer_Config.config_addr)
  clear_has_config_addr();
  ::NetworkAddress* temp = config_addr_;
  config_addr_ = NULL;
  return temp;
}
void CommonServer_Config::set_allocated_config_addr(::NetworkAddress* config_addr) {
  delete config_addr_;
  config_addr_ = config_addr;
  if (config_addr) {
    set_has_config_addr();
  } else {
    clear_has_config_addr();
  }
  // @@protoc_insertion_point(field_set_allocated:CommonServer_Config.config_addr)
}

// optional bool log_print_open = 2;
bool CommonServer_Config::has_log_print_open() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CommonServer_Config::set_has_log_print_open() {
  _has_bits_[0] |= 0x00000002u;
}
void CommonServer_Config::clear_has_log_print_open() {
  _has_bits_[0] &= ~0x00000002u;
}
void CommonServer_Config::clear_log_print_open() {
  log_print_open_ = false;
  clear_has_log_print_open();
}
bool CommonServer_Config::log_print_open() const {
  // @@protoc_insertion_point(field_get:CommonServer_Config.log_print_open)
  return log_print_open_;
}
void CommonServer_Config::set_log_print_open(bool value) {
  set_has_log_print_open();
  log_print_open_ = value;
  // @@protoc_insertion_point(field_set:CommonServer_Config.log_print_open)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int LoginServerConfigInfo::kLoginIdFieldNumber;
const int LoginServerConfigInfo::kPortFieldNumber;
const int LoginServerConfigInfo::kDbAddrFieldNumber;
const int LoginServerConfigInfo::kDefRedisFieldNumber;
const int LoginServerConfigInfo::kDefSentinelFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

LoginServerConfigInfo::LoginServerConfigInfo()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_config_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:LoginServerConfigInfo)
}
LoginServerConfigInfo::LoginServerConfigInfo(const LoginServerConfigInfo& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      db_addr_(from.db_addr_),
      def_sentinel_(from.def_sentinel_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_def_redis()) {
    def_redis_ = new ::RedisConnectOption(*from.def_redis_);
  } else {
    def_redis_ = NULL;
  }
  ::memcpy(&login_id_, &from.login_id_,
    reinterpret_cast<char*>(&port_) -
    reinterpret_cast<char*>(&login_id_) + sizeof(port_));
  // @@protoc_insertion_point(copy_constructor:LoginServerConfigInfo)
}

void LoginServerConfigInfo::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&def_redis_, 0, reinterpret_cast<char*>(&port_) -
    reinterpret_cast<char*>(&def_redis_) + sizeof(port_));
}

LoginServerConfigInfo::~LoginServerConfigInfo() {
  // @@protoc_insertion_point(destructor:LoginServerConfigInfo)
  SharedDtor();
}

void LoginServerConfigInfo::SharedDtor() {
  if (this != internal_default_instance()) {
    delete def_redis_;
  }
}

void LoginServerConfigInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LoginServerConfigInfo::descriptor() {
  protobuf_config_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_config_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const LoginServerConfigInfo& LoginServerConfigInfo::default_instance() {
  protobuf_config_2eproto::InitDefaults();
  return *internal_default_instance();
}

LoginServerConfigInfo* LoginServerConfigInfo::New(::google::protobuf::Arena* arena) const {
  LoginServerConfigInfo* n = new LoginServerConfigInfo;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void LoginServerConfigInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:LoginServerConfigInfo)
  db_addr_.Clear();
  def_sentinel_.Clear();
  if (has_def_redis()) {
    GOOGLE_DCHECK(def_redis_ != NULL);
    def_redis_->::RedisConnectOption::Clear();
  }
  if (_has_bits_[0 / 32] & 6u) {
    ::memset(&login_id_, 0, reinterpret_cast<char*>(&port_) -
      reinterpret_cast<char*>(&login_id_) + sizeof(port_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool LoginServerConfigInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:LoginServerConfigInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 login_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_login_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &login_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 port = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_port();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &port_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .NetworkAddress db_addr = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_db_addr()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .RedisConnectOption def_redis = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_def_redis()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .RedisSentinelOption def_sentinel = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_def_sentinel()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:LoginServerConfigInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:LoginServerConfigInfo)
  return false;
#undef DO_
}

void LoginServerConfigInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:LoginServerConfigInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 login_id = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->login_id(), output);
  }

  // required int32 port = 2;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->port(), output);
  }

  // repeated .NetworkAddress db_addr = 3;
  for (unsigned int i = 0, n = this->db_addr_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->db_addr(i), output);
  }

  // optional .RedisConnectOption def_redis = 4;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, *this->def_redis_, output);
  }

  // repeated .RedisSentinelOption def_sentinel = 5;
  for (unsigned int i = 0, n = this->def_sentinel_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->def_sentinel(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:LoginServerConfigInfo)
}

::google::protobuf::uint8* LoginServerConfigInfo::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:LoginServerConfigInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 login_id = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->login_id(), target);
  }

  // required int32 port = 2;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->port(), target);
  }

  // repeated .NetworkAddress db_addr = 3;
  for (unsigned int i = 0, n = this->db_addr_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, this->db_addr(i), deterministic, target);
  }

  // optional .RedisConnectOption def_redis = 4;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        4, *this->def_redis_, deterministic, target);
  }

  // repeated .RedisSentinelOption def_sentinel = 5;
  for (unsigned int i = 0, n = this->def_sentinel_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        5, this->def_sentinel(i), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:LoginServerConfigInfo)
  return target;
}

size_t LoginServerConfigInfo::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:LoginServerConfigInfo)
  size_t total_size = 0;

  if (has_login_id()) {
    // required int32 login_id = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->login_id());
  }

  if (has_port()) {
    // required int32 port = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->port());
  }

  return total_size;
}
size_t LoginServerConfigInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:LoginServerConfigInfo)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000006) ^ 0x00000006) == 0) {  // All required fields are present.
    // required int32 login_id = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->login_id());

    // required int32 port = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->port());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  // repeated .NetworkAddress db_addr = 3;
  {
    unsigned int count = this->db_addr_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->db_addr(i));
    }
  }

  // repeated .RedisSentinelOption def_sentinel = 5;
  {
    unsigned int count = this->def_sentinel_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->def_sentinel(i));
    }
  }

  // optional .RedisConnectOption def_redis = 4;
  if (has_def_redis()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->def_redis_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LoginServerConfigInfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:LoginServerConfigInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const LoginServerConfigInfo* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const LoginServerConfigInfo>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:LoginServerConfigInfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:LoginServerConfigInfo)
    MergeFrom(*source);
  }
}

void LoginServerConfigInfo::MergeFrom(const LoginServerConfigInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:LoginServerConfigInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  db_addr_.MergeFrom(from.db_addr_);
  def_sentinel_.MergeFrom(from.def_sentinel_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_def_redis()->::RedisConnectOption::MergeFrom(from.def_redis());
    }
    if (cached_has_bits & 0x00000002u) {
      login_id_ = from.login_id_;
    }
    if (cached_has_bits & 0x00000004u) {
      port_ = from.port_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void LoginServerConfigInfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:LoginServerConfigInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LoginServerConfigInfo::CopyFrom(const LoginServerConfigInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:LoginServerConfigInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LoginServerConfigInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000006) != 0x00000006) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->db_addr())) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->def_sentinel())) return false;
  if (has_def_redis()) {
    if (!this->def_redis_->IsInitialized()) return false;
  }
  return true;
}

void LoginServerConfigInfo::Swap(LoginServerConfigInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void LoginServerConfigInfo::InternalSwap(LoginServerConfigInfo* other) {
  db_addr_.InternalSwap(&other->db_addr_);
  def_sentinel_.InternalSwap(&other->def_sentinel_);
  std::swap(def_redis_, other->def_redis_);
  std::swap(login_id_, other->login_id_);
  std::swap(port_, other->port_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata LoginServerConfigInfo::GetMetadata() const {
  protobuf_config_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_config_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// LoginServerConfigInfo

// required int32 login_id = 1;
bool LoginServerConfigInfo::has_login_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void LoginServerConfigInfo::set_has_login_id() {
  _has_bits_[0] |= 0x00000002u;
}
void LoginServerConfigInfo::clear_has_login_id() {
  _has_bits_[0] &= ~0x00000002u;
}
void LoginServerConfigInfo::clear_login_id() {
  login_id_ = 0;
  clear_has_login_id();
}
::google::protobuf::int32 LoginServerConfigInfo::login_id() const {
  // @@protoc_insertion_point(field_get:LoginServerConfigInfo.login_id)
  return login_id_;
}
void LoginServerConfigInfo::set_login_id(::google::protobuf::int32 value) {
  set_has_login_id();
  login_id_ = value;
  // @@protoc_insertion_point(field_set:LoginServerConfigInfo.login_id)
}

// required int32 port = 2;
bool LoginServerConfigInfo::has_port() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void LoginServerConfigInfo::set_has_port() {
  _has_bits_[0] |= 0x00000004u;
}
void LoginServerConfigInfo::clear_has_port() {
  _has_bits_[0] &= ~0x00000004u;
}
void LoginServerConfigInfo::clear_port() {
  port_ = 0;
  clear_has_port();
}
::google::protobuf::int32 LoginServerConfigInfo::port() const {
  // @@protoc_insertion_point(field_get:LoginServerConfigInfo.port)
  return port_;
}
void LoginServerConfigInfo::set_port(::google::protobuf::int32 value) {
  set_has_port();
  port_ = value;
  // @@protoc_insertion_point(field_set:LoginServerConfigInfo.port)
}

// repeated .NetworkAddress db_addr = 3;
int LoginServerConfigInfo::db_addr_size() const {
  return db_addr_.size();
}
void LoginServerConfigInfo::clear_db_addr() {
  db_addr_.Clear();
}
const ::NetworkAddress& LoginServerConfigInfo::db_addr(int index) const {
  // @@protoc_insertion_point(field_get:LoginServerConfigInfo.db_addr)
  return db_addr_.Get(index);
}
::NetworkAddress* LoginServerConfigInfo::mutable_db_addr(int index) {
  // @@protoc_insertion_point(field_mutable:LoginServerConfigInfo.db_addr)
  return db_addr_.Mutable(index);
}
::NetworkAddress* LoginServerConfigInfo::add_db_addr() {
  // @@protoc_insertion_point(field_add:LoginServerConfigInfo.db_addr)
  return db_addr_.Add();
}
::google::protobuf::RepeatedPtrField< ::NetworkAddress >*
LoginServerConfigInfo::mutable_db_addr() {
  // @@protoc_insertion_point(field_mutable_list:LoginServerConfigInfo.db_addr)
  return &db_addr_;
}
const ::google::protobuf::RepeatedPtrField< ::NetworkAddress >&
LoginServerConfigInfo::db_addr() const {
  // @@protoc_insertion_point(field_list:LoginServerConfigInfo.db_addr)
  return db_addr_;
}

// optional .RedisConnectOption def_redis = 4;
bool LoginServerConfigInfo::has_def_redis() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void LoginServerConfigInfo::set_has_def_redis() {
  _has_bits_[0] |= 0x00000001u;
}
void LoginServerConfigInfo::clear_has_def_redis() {
  _has_bits_[0] &= ~0x00000001u;
}
void LoginServerConfigInfo::clear_def_redis() {
  if (def_redis_ != NULL) def_redis_->::RedisConnectOption::Clear();
  clear_has_def_redis();
}
const ::RedisConnectOption& LoginServerConfigInfo::def_redis() const {
  // @@protoc_insertion_point(field_get:LoginServerConfigInfo.def_redis)
  return def_redis_ != NULL ? *def_redis_
                         : *::RedisConnectOption::internal_default_instance();
}
::RedisConnectOption* LoginServerConfigInfo::mutable_def_redis() {
  set_has_def_redis();
  if (def_redis_ == NULL) {
    def_redis_ = new ::RedisConnectOption;
  }
  // @@protoc_insertion_point(field_mutable:LoginServerConfigInfo.def_redis)
  return def_redis_;
}
::RedisConnectOption* LoginServerConfigInfo::release_def_redis() {
  // @@protoc_insertion_point(field_release:LoginServerConfigInfo.def_redis)
  clear_has_def_redis();
  ::RedisConnectOption* temp = def_redis_;
  def_redis_ = NULL;
  return temp;
}
void LoginServerConfigInfo::set_allocated_def_redis(::RedisConnectOption* def_redis) {
  delete def_redis_;
  def_redis_ = def_redis;
  if (def_redis) {
    set_has_def_redis();
  } else {
    clear_has_def_redis();
  }
  // @@protoc_insertion_point(field_set_allocated:LoginServerConfigInfo.def_redis)
}

// repeated .RedisSentinelOption def_sentinel = 5;
int LoginServerConfigInfo::def_sentinel_size() const {
  return def_sentinel_.size();
}
void LoginServerConfigInfo::clear_def_sentinel() {
  def_sentinel_.Clear();
}
const ::RedisSentinelOption& LoginServerConfigInfo::def_sentinel(int index) const {
  // @@protoc_insertion_point(field_get:LoginServerConfigInfo.def_sentinel)
  return def_sentinel_.Get(index);
}
::RedisSentinelOption* LoginServerConfigInfo::mutable_def_sentinel(int index) {
  // @@protoc_insertion_point(field_mutable:LoginServerConfigInfo.def_sentinel)
  return def_sentinel_.Mutable(index);
}
::RedisSentinelOption* LoginServerConfigInfo::add_def_sentinel() {
  // @@protoc_insertion_point(field_add:LoginServerConfigInfo.def_sentinel)
  return def_sentinel_.Add();
}
::google::protobuf::RepeatedPtrField< ::RedisSentinelOption >*
LoginServerConfigInfo::mutable_def_sentinel() {
  // @@protoc_insertion_point(field_mutable_list:LoginServerConfigInfo.def_sentinel)
  return &def_sentinel_;
}
const ::google::protobuf::RepeatedPtrField< ::RedisSentinelOption >&
LoginServerConfigInfo::def_sentinel() const {
  // @@protoc_insertion_point(field_list:LoginServerConfigInfo.def_sentinel)
  return def_sentinel_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GameServerConfigInfo::kGameIdFieldNumber;
const int GameServerConfigInfo::kPortFieldNumber;
const int GameServerConfigInfo::kUsingLoginValidateboxFieldNumber;
const int GameServerConfigInfo::kDefaultLobbyFieldNumber;
const int GameServerConfigInfo::kFirstGameTypeFieldNumber;
const int GameServerConfigInfo::kSecondGameTypeFieldNumber;
const int GameServerConfigInfo::kPlayerLimitFieldNumber;
const int GameServerConfigInfo::kTableCountFieldNumber;
const int GameServerConfigInfo::kMoneyLimitFieldNumber;
const int GameServerConfigInfo::kCellMoneyFieldNumber;
const int GameServerConfigInfo::kTaxOpenFieldNumber;
const int GameServerConfigInfo::kTaxShowFieldNumber;
const int GameServerConfigInfo::kTaxFieldNumber;
const int GameServerConfigInfo::kRoomLuaCfgFieldNumber;
const int GameServerConfigInfo::kLoginAddrFieldNumber;
const int GameServerConfigInfo::kDbAddrFieldNumber;
const int GameServerConfigInfo::kDefRedisFieldNumber;
const int GameServerConfigInfo::kDefSentinelFieldNumber;
const int GameServerConfigInfo::kBankTransferTaxFieldNumber;
const int GameServerConfigInfo::kRegisterMoneyFieldNumber;
const int GameServerConfigInfo::kPrivateRoomBankFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GameServerConfigInfo::GameServerConfigInfo()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_config_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:GameServerConfigInfo)
}
GameServerConfigInfo::GameServerConfigInfo(const GameServerConfigInfo& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      login_addr_(from.login_addr_),
      db_addr_(from.db_addr_),
      def_sentinel_(from.def_sentinel_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  room_lua_cfg_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_room_lua_cfg()) {
    room_lua_cfg_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.room_lua_cfg_);
  }
  if (from.has_def_redis()) {
    def_redis_ = new ::RedisConnectOption(*from.def_redis_);
  } else {
    def_redis_ = NULL;
  }
  ::memcpy(&game_id_, &from.game_id_,
    reinterpret_cast<char*>(&private_room_bank_) -
    reinterpret_cast<char*>(&game_id_) + sizeof(private_room_bank_));
  // @@protoc_insertion_point(copy_constructor:GameServerConfigInfo)
}

void GameServerConfigInfo::SharedCtor() {
  _cached_size_ = 0;
  room_lua_cfg_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&def_redis_, 0, reinterpret_cast<char*>(&private_room_bank_) -
    reinterpret_cast<char*>(&def_redis_) + sizeof(private_room_bank_));
}

GameServerConfigInfo::~GameServerConfigInfo() {
  // @@protoc_insertion_point(destructor:GameServerConfigInfo)
  SharedDtor();
}

void GameServerConfigInfo::SharedDtor() {
  room_lua_cfg_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) {
    delete def_redis_;
  }
}

void GameServerConfigInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GameServerConfigInfo::descriptor() {
  protobuf_config_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_config_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const GameServerConfigInfo& GameServerConfigInfo::default_instance() {
  protobuf_config_2eproto::InitDefaults();
  return *internal_default_instance();
}

GameServerConfigInfo* GameServerConfigInfo::New(::google::protobuf::Arena* arena) const {
  GameServerConfigInfo* n = new GameServerConfigInfo;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void GameServerConfigInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:GameServerConfigInfo)
  login_addr_.Clear();
  db_addr_.Clear();
  def_sentinel_.Clear();
  if (_has_bits_[0 / 32] & 3u) {
    if (has_room_lua_cfg()) {
      GOOGLE_DCHECK(!room_lua_cfg_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*room_lua_cfg_.UnsafeRawStringPointer())->clear();
    }
    if (has_def_redis()) {
      GOOGLE_DCHECK(def_redis_ != NULL);
      def_redis_->::RedisConnectOption::Clear();
    }
  }
  if (_has_bits_[0 / 32] & 252u) {
    ::memset(&game_id_, 0, reinterpret_cast<char*>(&second_game_type_) -
      reinterpret_cast<char*>(&game_id_) + sizeof(second_game_type_));
  }
  if (_has_bits_[8 / 32] & 65280u) {
    ::memset(&player_limit_, 0, reinterpret_cast<char*>(&bank_transfer_tax_) -
      reinterpret_cast<char*>(&player_limit_) + sizeof(bank_transfer_tax_));
  }
  if (_has_bits_[16 / 32] & 196608u) {
    ::memset(&register_money_, 0, reinterpret_cast<char*>(&private_room_bank_) -
      reinterpret_cast<char*>(&register_money_) + sizeof(private_room_bank_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool GameServerConfigInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:GameServerConfigInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 game_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_game_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &game_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 port = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_port();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &port_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 using_login_validatebox = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {
          set_has_using_login_validatebox();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &using_login_validatebox_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 default_lobby = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u)) {
          set_has_default_lobby();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &default_lobby_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 first_game_type = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u)) {
          set_has_first_game_type();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &first_game_type_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 second_game_type = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u)) {
          set_has_second_game_type();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &second_game_type_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 player_limit = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u)) {
          set_has_player_limit();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &player_limit_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 table_count = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(64u)) {
          set_has_table_count();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &table_count_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 money_limit = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(72u)) {
          set_has_money_limit();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &money_limit_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 cell_money = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(80u)) {
          set_has_cell_money();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &cell_money_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 tax_open = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(88u)) {
          set_has_tax_open();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &tax_open_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 tax_show = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(96u)) {
          set_has_tax_show();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &tax_show_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 tax = 13;
      case 13: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(104u)) {
          set_has_tax();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &tax_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string room_lua_cfg = 14;
      case 14: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(114u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_room_lua_cfg()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->room_lua_cfg().data(), this->room_lua_cfg().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "GameServerConfigInfo.room_lua_cfg");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .NetworkAddress login_addr = 15;
      case 15: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(122u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_login_addr()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .NetworkAddress db_addr = 16;
      case 16: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(130u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_db_addr()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .RedisConnectOption def_redis = 17;
      case 17: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(138u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_def_redis()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .RedisSentinelOption def_sentinel = 18;
      case 18: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(146u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_def_sentinel()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 bank_transfer_tax = 19;
      case 19: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(152u)) {
          set_has_bank_transfer_tax();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &bank_transfer_tax_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 register_money = 20;
      case 20: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(160u)) {
          set_has_register_money();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &register_money_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 private_room_bank = 21;
      case 21: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(168u)) {
          set_has_private_room_bank();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &private_room_bank_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:GameServerConfigInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:GameServerConfigInfo)
  return false;
#undef DO_
}

void GameServerConfigInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:GameServerConfigInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 game_id = 1;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->game_id(), output);
  }

  // required int32 port = 2;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->port(), output);
  }

  // optional int32 using_login_validatebox = 3;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->using_login_validatebox(), output);
  }

  // optional int32 default_lobby = 4;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->default_lobby(), output);
  }

  // optional int32 first_game_type = 5;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->first_game_type(), output);
  }

  // optional int32 second_game_type = 6;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->second_game_type(), output);
  }

  // optional int32 player_limit = 7;
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->player_limit(), output);
  }

  // optional int32 table_count = 8;
  if (cached_has_bits & 0x00000200u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->table_count(), output);
  }

  // optional int32 money_limit = 9;
  if (cached_has_bits & 0x00000400u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->money_limit(), output);
  }

  // optional int32 cell_money = 10;
  if (cached_has_bits & 0x00000800u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->cell_money(), output);
  }

  // optional int32 tax_open = 11;
  if (cached_has_bits & 0x00001000u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(11, this->tax_open(), output);
  }

  // optional int32 tax_show = 12;
  if (cached_has_bits & 0x00002000u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(12, this->tax_show(), output);
  }

  // optional int32 tax = 13;
  if (cached_has_bits & 0x00004000u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(13, this->tax(), output);
  }

  // optional string room_lua_cfg = 14;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->room_lua_cfg().data(), this->room_lua_cfg().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "GameServerConfigInfo.room_lua_cfg");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      14, this->room_lua_cfg(), output);
  }

  // repeated .NetworkAddress login_addr = 15;
  for (unsigned int i = 0, n = this->login_addr_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      15, this->login_addr(i), output);
  }

  // repeated .NetworkAddress db_addr = 16;
  for (unsigned int i = 0, n = this->db_addr_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      16, this->db_addr(i), output);
  }

  // optional .RedisConnectOption def_redis = 17;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      17, *this->def_redis_, output);
  }

  // repeated .RedisSentinelOption def_sentinel = 18;
  for (unsigned int i = 0, n = this->def_sentinel_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      18, this->def_sentinel(i), output);
  }

  // optional int32 bank_transfer_tax = 19;
  if (cached_has_bits & 0x00008000u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(19, this->bank_transfer_tax(), output);
  }

  // optional int32 register_money = 20;
  if (cached_has_bits & 0x00010000u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(20, this->register_money(), output);
  }

  // optional int32 private_room_bank = 21;
  if (cached_has_bits & 0x00020000u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(21, this->private_room_bank(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:GameServerConfigInfo)
}

::google::protobuf::uint8* GameServerConfigInfo::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:GameServerConfigInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 game_id = 1;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->game_id(), target);
  }

  // required int32 port = 2;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->port(), target);
  }

  // optional int32 using_login_validatebox = 3;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->using_login_validatebox(), target);
  }

  // optional int32 default_lobby = 4;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->default_lobby(), target);
  }

  // optional int32 first_game_type = 5;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->first_game_type(), target);
  }

  // optional int32 second_game_type = 6;
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->second_game_type(), target);
  }

  // optional int32 player_limit = 7;
  if (cached_has_bits & 0x00000100u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->player_limit(), target);
  }

  // optional int32 table_count = 8;
  if (cached_has_bits & 0x00000200u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->table_count(), target);
  }

  // optional int32 money_limit = 9;
  if (cached_has_bits & 0x00000400u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->money_limit(), target);
  }

  // optional int32 cell_money = 10;
  if (cached_has_bits & 0x00000800u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(10, this->cell_money(), target);
  }

  // optional int32 tax_open = 11;
  if (cached_has_bits & 0x00001000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(11, this->tax_open(), target);
  }

  // optional int32 tax_show = 12;
  if (cached_has_bits & 0x00002000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(12, this->tax_show(), target);
  }

  // optional int32 tax = 13;
  if (cached_has_bits & 0x00004000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(13, this->tax(), target);
  }

  // optional string room_lua_cfg = 14;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->room_lua_cfg().data(), this->room_lua_cfg().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "GameServerConfigInfo.room_lua_cfg");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        14, this->room_lua_cfg(), target);
  }

  // repeated .NetworkAddress login_addr = 15;
  for (unsigned int i = 0, n = this->login_addr_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        15, this->login_addr(i), deterministic, target);
  }

  // repeated .NetworkAddress db_addr = 16;
  for (unsigned int i = 0, n = this->db_addr_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        16, this->db_addr(i), deterministic, target);
  }

  // optional .RedisConnectOption def_redis = 17;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        17, *this->def_redis_, deterministic, target);
  }

  // repeated .RedisSentinelOption def_sentinel = 18;
  for (unsigned int i = 0, n = this->def_sentinel_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        18, this->def_sentinel(i), deterministic, target);
  }

  // optional int32 bank_transfer_tax = 19;
  if (cached_has_bits & 0x00008000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(19, this->bank_transfer_tax(), target);
  }

  // optional int32 register_money = 20;
  if (cached_has_bits & 0x00010000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(20, this->register_money(), target);
  }

  // optional int32 private_room_bank = 21;
  if (cached_has_bits & 0x00020000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(21, this->private_room_bank(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GameServerConfigInfo)
  return target;
}

size_t GameServerConfigInfo::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:GameServerConfigInfo)
  size_t total_size = 0;

  if (has_game_id()) {
    // required int32 game_id = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->game_id());
  }

  if (has_port()) {
    // required int32 port = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->port());
  }

  return total_size;
}
size_t GameServerConfigInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:GameServerConfigInfo)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (((_has_bits_[0] & 0x0000000c) ^ 0x0000000c) == 0) {  // All required fields are present.
    // required int32 game_id = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->game_id());

    // required int32 port = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->port());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  // repeated .NetworkAddress login_addr = 15;
  {
    unsigned int count = this->login_addr_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->login_addr(i));
    }
  }

  // repeated .NetworkAddress db_addr = 16;
  {
    unsigned int count = this->db_addr_size();
    total_size += 2UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->db_addr(i));
    }
  }

  // repeated .RedisSentinelOption def_sentinel = 18;
  {
    unsigned int count = this->def_sentinel_size();
    total_size += 2UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->def_sentinel(i));
    }
  }

  if (_has_bits_[0 / 32] & 3u) {
    // optional string room_lua_cfg = 14;
    if (has_room_lua_cfg()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->room_lua_cfg());
    }

    // optional .RedisConnectOption def_redis = 17;
    if (has_def_redis()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->def_redis_);
    }

  }
  if (_has_bits_[0 / 32] & 240u) {
    // optional int32 using_login_validatebox = 3;
    if (has_using_login_validatebox()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->using_login_validatebox());
    }

    // optional int32 default_lobby = 4;
    if (has_default_lobby()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->default_lobby());
    }

    // optional int32 first_game_type = 5;
    if (has_first_game_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->first_game_type());
    }

    // optional int32 second_game_type = 6;
    if (has_second_game_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->second_game_type());
    }

  }
  if (_has_bits_[8 / 32] & 65280u) {
    // optional int32 player_limit = 7;
    if (has_player_limit()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->player_limit());
    }

    // optional int32 table_count = 8;
    if (has_table_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->table_count());
    }

    // optional int32 money_limit = 9;
    if (has_money_limit()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->money_limit());
    }

    // optional int32 cell_money = 10;
    if (has_cell_money()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->cell_money());
    }

    // optional int32 tax_open = 11;
    if (has_tax_open()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->tax_open());
    }

    // optional int32 tax_show = 12;
    if (has_tax_show()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->tax_show());
    }

    // optional int32 tax = 13;
    if (has_tax()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->tax());
    }

    // optional int32 bank_transfer_tax = 19;
    if (has_bank_transfer_tax()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->bank_transfer_tax());
    }

  }
  if (_has_bits_[16 / 32] & 196608u) {
    // optional int32 register_money = 20;
    if (has_register_money()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->register_money());
    }

    // optional int32 private_room_bank = 21;
    if (has_private_room_bank()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->private_room_bank());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GameServerConfigInfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:GameServerConfigInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const GameServerConfigInfo* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const GameServerConfigInfo>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:GameServerConfigInfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:GameServerConfigInfo)
    MergeFrom(*source);
  }
}

void GameServerConfigInfo::MergeFrom(const GameServerConfigInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:GameServerConfigInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  login_addr_.MergeFrom(from.login_addr_);
  db_addr_.MergeFrom(from.db_addr_);
  def_sentinel_.MergeFrom(from.def_sentinel_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_room_lua_cfg();
      room_lua_cfg_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.room_lua_cfg_);
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_def_redis()->::RedisConnectOption::MergeFrom(from.def_redis());
    }
    if (cached_has_bits & 0x00000004u) {
      game_id_ = from.game_id_;
    }
    if (cached_has_bits & 0x00000008u) {
      port_ = from.port_;
    }
    if (cached_has_bits & 0x00000010u) {
      using_login_validatebox_ = from.using_login_validatebox_;
    }
    if (cached_has_bits & 0x00000020u) {
      default_lobby_ = from.default_lobby_;
    }
    if (cached_has_bits & 0x00000040u) {
      first_game_type_ = from.first_game_type_;
    }
    if (cached_has_bits & 0x00000080u) {
      second_game_type_ = from.second_game_type_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 65280u) {
    if (cached_has_bits & 0x00000100u) {
      player_limit_ = from.player_limit_;
    }
    if (cached_has_bits & 0x00000200u) {
      table_count_ = from.table_count_;
    }
    if (cached_has_bits & 0x00000400u) {
      money_limit_ = from.money_limit_;
    }
    if (cached_has_bits & 0x00000800u) {
      cell_money_ = from.cell_money_;
    }
    if (cached_has_bits & 0x00001000u) {
      tax_open_ = from.tax_open_;
    }
    if (cached_has_bits & 0x00002000u) {
      tax_show_ = from.tax_show_;
    }
    if (cached_has_bits & 0x00004000u) {
      tax_ = from.tax_;
    }
    if (cached_has_bits & 0x00008000u) {
      bank_transfer_tax_ = from.bank_transfer_tax_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 196608u) {
    if (cached_has_bits & 0x00010000u) {
      register_money_ = from.register_money_;
    }
    if (cached_has_bits & 0x00020000u) {
      private_room_bank_ = from.private_room_bank_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void GameServerConfigInfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:GameServerConfigInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GameServerConfigInfo::CopyFrom(const GameServerConfigInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:GameServerConfigInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GameServerConfigInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000c) != 0x0000000c) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->login_addr())) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->db_addr())) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->def_sentinel())) return false;
  if (has_def_redis()) {
    if (!this->def_redis_->IsInitialized()) return false;
  }
  return true;
}

void GameServerConfigInfo::Swap(GameServerConfigInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GameServerConfigInfo::InternalSwap(GameServerConfigInfo* other) {
  login_addr_.InternalSwap(&other->login_addr_);
  db_addr_.InternalSwap(&other->db_addr_);
  def_sentinel_.InternalSwap(&other->def_sentinel_);
  room_lua_cfg_.Swap(&other->room_lua_cfg_);
  std::swap(def_redis_, other->def_redis_);
  std::swap(game_id_, other->game_id_);
  std::swap(port_, other->port_);
  std::swap(using_login_validatebox_, other->using_login_validatebox_);
  std::swap(default_lobby_, other->default_lobby_);
  std::swap(first_game_type_, other->first_game_type_);
  std::swap(second_game_type_, other->second_game_type_);
  std::swap(player_limit_, other->player_limit_);
  std::swap(table_count_, other->table_count_);
  std::swap(money_limit_, other->money_limit_);
  std::swap(cell_money_, other->cell_money_);
  std::swap(tax_open_, other->tax_open_);
  std::swap(tax_show_, other->tax_show_);
  std::swap(tax_, other->tax_);
  std::swap(bank_transfer_tax_, other->bank_transfer_tax_);
  std::swap(register_money_, other->register_money_);
  std::swap(private_room_bank_, other->private_room_bank_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata GameServerConfigInfo::GetMetadata() const {
  protobuf_config_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_config_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// GameServerConfigInfo

// required int32 game_id = 1;
bool GameServerConfigInfo::has_game_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void GameServerConfigInfo::set_has_game_id() {
  _has_bits_[0] |= 0x00000004u;
}
void GameServerConfigInfo::clear_has_game_id() {
  _has_bits_[0] &= ~0x00000004u;
}
void GameServerConfigInfo::clear_game_id() {
  game_id_ = 0;
  clear_has_game_id();
}
::google::protobuf::int32 GameServerConfigInfo::game_id() const {
  // @@protoc_insertion_point(field_get:GameServerConfigInfo.game_id)
  return game_id_;
}
void GameServerConfigInfo::set_game_id(::google::protobuf::int32 value) {
  set_has_game_id();
  game_id_ = value;
  // @@protoc_insertion_point(field_set:GameServerConfigInfo.game_id)
}

// required int32 port = 2;
bool GameServerConfigInfo::has_port() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void GameServerConfigInfo::set_has_port() {
  _has_bits_[0] |= 0x00000008u;
}
void GameServerConfigInfo::clear_has_port() {
  _has_bits_[0] &= ~0x00000008u;
}
void GameServerConfigInfo::clear_port() {
  port_ = 0;
  clear_has_port();
}
::google::protobuf::int32 GameServerConfigInfo::port() const {
  // @@protoc_insertion_point(field_get:GameServerConfigInfo.port)
  return port_;
}
void GameServerConfigInfo::set_port(::google::protobuf::int32 value) {
  set_has_port();
  port_ = value;
  // @@protoc_insertion_point(field_set:GameServerConfigInfo.port)
}

// optional int32 using_login_validatebox = 3;
bool GameServerConfigInfo::has_using_login_validatebox() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void GameServerConfigInfo::set_has_using_login_validatebox() {
  _has_bits_[0] |= 0x00000010u;
}
void GameServerConfigInfo::clear_has_using_login_validatebox() {
  _has_bits_[0] &= ~0x00000010u;
}
void GameServerConfigInfo::clear_using_login_validatebox() {
  using_login_validatebox_ = 0;
  clear_has_using_login_validatebox();
}
::google::protobuf::int32 GameServerConfigInfo::using_login_validatebox() const {
  // @@protoc_insertion_point(field_get:GameServerConfigInfo.using_login_validatebox)
  return using_login_validatebox_;
}
void GameServerConfigInfo::set_using_login_validatebox(::google::protobuf::int32 value) {
  set_has_using_login_validatebox();
  using_login_validatebox_ = value;
  // @@protoc_insertion_point(field_set:GameServerConfigInfo.using_login_validatebox)
}

// optional int32 default_lobby = 4;
bool GameServerConfigInfo::has_default_lobby() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void GameServerConfigInfo::set_has_default_lobby() {
  _has_bits_[0] |= 0x00000020u;
}
void GameServerConfigInfo::clear_has_default_lobby() {
  _has_bits_[0] &= ~0x00000020u;
}
void GameServerConfigInfo::clear_default_lobby() {
  default_lobby_ = 0;
  clear_has_default_lobby();
}
::google::protobuf::int32 GameServerConfigInfo::default_lobby() const {
  // @@protoc_insertion_point(field_get:GameServerConfigInfo.default_lobby)
  return default_lobby_;
}
void GameServerConfigInfo::set_default_lobby(::google::protobuf::int32 value) {
  set_has_default_lobby();
  default_lobby_ = value;
  // @@protoc_insertion_point(field_set:GameServerConfigInfo.default_lobby)
}

// optional int32 first_game_type = 5;
bool GameServerConfigInfo::has_first_game_type() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void GameServerConfigInfo::set_has_first_game_type() {
  _has_bits_[0] |= 0x00000040u;
}
void GameServerConfigInfo::clear_has_first_game_type() {
  _has_bits_[0] &= ~0x00000040u;
}
void GameServerConfigInfo::clear_first_game_type() {
  first_game_type_ = 0;
  clear_has_first_game_type();
}
::google::protobuf::int32 GameServerConfigInfo::first_game_type() const {
  // @@protoc_insertion_point(field_get:GameServerConfigInfo.first_game_type)
  return first_game_type_;
}
void GameServerConfigInfo::set_first_game_type(::google::protobuf::int32 value) {
  set_has_first_game_type();
  first_game_type_ = value;
  // @@protoc_insertion_point(field_set:GameServerConfigInfo.first_game_type)
}

// optional int32 second_game_type = 6;
bool GameServerConfigInfo::has_second_game_type() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void GameServerConfigInfo::set_has_second_game_type() {
  _has_bits_[0] |= 0x00000080u;
}
void GameServerConfigInfo::clear_has_second_game_type() {
  _has_bits_[0] &= ~0x00000080u;
}
void GameServerConfigInfo::clear_second_game_type() {
  second_game_type_ = 0;
  clear_has_second_game_type();
}
::google::protobuf::int32 GameServerConfigInfo::second_game_type() const {
  // @@protoc_insertion_point(field_get:GameServerConfigInfo.second_game_type)
  return second_game_type_;
}
void GameServerConfigInfo::set_second_game_type(::google::protobuf::int32 value) {
  set_has_second_game_type();
  second_game_type_ = value;
  // @@protoc_insertion_point(field_set:GameServerConfigInfo.second_game_type)
}

// optional int32 player_limit = 7;
bool GameServerConfigInfo::has_player_limit() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
void GameServerConfigInfo::set_has_player_limit() {
  _has_bits_[0] |= 0x00000100u;
}
void GameServerConfigInfo::clear_has_player_limit() {
  _has_bits_[0] &= ~0x00000100u;
}
void GameServerConfigInfo::clear_player_limit() {
  player_limit_ = 0;
  clear_has_player_limit();
}
::google::protobuf::int32 GameServerConfigInfo::player_limit() const {
  // @@protoc_insertion_point(field_get:GameServerConfigInfo.player_limit)
  return player_limit_;
}
void GameServerConfigInfo::set_player_limit(::google::protobuf::int32 value) {
  set_has_player_limit();
  player_limit_ = value;
  // @@protoc_insertion_point(field_set:GameServerConfigInfo.player_limit)
}

// optional int32 table_count = 8;
bool GameServerConfigInfo::has_table_count() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
void GameServerConfigInfo::set_has_table_count() {
  _has_bits_[0] |= 0x00000200u;
}
void GameServerConfigInfo::clear_has_table_count() {
  _has_bits_[0] &= ~0x00000200u;
}
void GameServerConfigInfo::clear_table_count() {
  table_count_ = 0;
  clear_has_table_count();
}
::google::protobuf::int32 GameServerConfigInfo::table_count() const {
  // @@protoc_insertion_point(field_get:GameServerConfigInfo.table_count)
  return table_count_;
}
void GameServerConfigInfo::set_table_count(::google::protobuf::int32 value) {
  set_has_table_count();
  table_count_ = value;
  // @@protoc_insertion_point(field_set:GameServerConfigInfo.table_count)
}

// optional int32 money_limit = 9;
bool GameServerConfigInfo::has_money_limit() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
void GameServerConfigInfo::set_has_money_limit() {
  _has_bits_[0] |= 0x00000400u;
}
void GameServerConfigInfo::clear_has_money_limit() {
  _has_bits_[0] &= ~0x00000400u;
}
void GameServerConfigInfo::clear_money_limit() {
  money_limit_ = 0;
  clear_has_money_limit();
}
::google::protobuf::int32 GameServerConfigInfo::money_limit() const {
  // @@protoc_insertion_point(field_get:GameServerConfigInfo.money_limit)
  return money_limit_;
}
void GameServerConfigInfo::set_money_limit(::google::protobuf::int32 value) {
  set_has_money_limit();
  money_limit_ = value;
  // @@protoc_insertion_point(field_set:GameServerConfigInfo.money_limit)
}

// optional int32 cell_money = 10;
bool GameServerConfigInfo::has_cell_money() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
void GameServerConfigInfo::set_has_cell_money() {
  _has_bits_[0] |= 0x00000800u;
}
void GameServerConfigInfo::clear_has_cell_money() {
  _has_bits_[0] &= ~0x00000800u;
}
void GameServerConfigInfo::clear_cell_money() {
  cell_money_ = 0;
  clear_has_cell_money();
}
::google::protobuf::int32 GameServerConfigInfo::cell_money() const {
  // @@protoc_insertion_point(field_get:GameServerConfigInfo.cell_money)
  return cell_money_;
}
void GameServerConfigInfo::set_cell_money(::google::protobuf::int32 value) {
  set_has_cell_money();
  cell_money_ = value;
  // @@protoc_insertion_point(field_set:GameServerConfigInfo.cell_money)
}

// optional int32 tax_open = 11;
bool GameServerConfigInfo::has_tax_open() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
void GameServerConfigInfo::set_has_tax_open() {
  _has_bits_[0] |= 0x00001000u;
}
void GameServerConfigInfo::clear_has_tax_open() {
  _has_bits_[0] &= ~0x00001000u;
}
void GameServerConfigInfo::clear_tax_open() {
  tax_open_ = 0;
  clear_has_tax_open();
}
::google::protobuf::int32 GameServerConfigInfo::tax_open() const {
  // @@protoc_insertion_point(field_get:GameServerConfigInfo.tax_open)
  return tax_open_;
}
void GameServerConfigInfo::set_tax_open(::google::protobuf::int32 value) {
  set_has_tax_open();
  tax_open_ = value;
  // @@protoc_insertion_point(field_set:GameServerConfigInfo.tax_open)
}

// optional int32 tax_show = 12;
bool GameServerConfigInfo::has_tax_show() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
void GameServerConfigInfo::set_has_tax_show() {
  _has_bits_[0] |= 0x00002000u;
}
void GameServerConfigInfo::clear_has_tax_show() {
  _has_bits_[0] &= ~0x00002000u;
}
void GameServerConfigInfo::clear_tax_show() {
  tax_show_ = 0;
  clear_has_tax_show();
}
::google::protobuf::int32 GameServerConfigInfo::tax_show() const {
  // @@protoc_insertion_point(field_get:GameServerConfigInfo.tax_show)
  return tax_show_;
}
void GameServerConfigInfo::set_tax_show(::google::protobuf::int32 value) {
  set_has_tax_show();
  tax_show_ = value;
  // @@protoc_insertion_point(field_set:GameServerConfigInfo.tax_show)
}

// optional int32 tax = 13;
bool GameServerConfigInfo::has_tax() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
void GameServerConfigInfo::set_has_tax() {
  _has_bits_[0] |= 0x00004000u;
}
void GameServerConfigInfo::clear_has_tax() {
  _has_bits_[0] &= ~0x00004000u;
}
void GameServerConfigInfo::clear_tax() {
  tax_ = 0;
  clear_has_tax();
}
::google::protobuf::int32 GameServerConfigInfo::tax() const {
  // @@protoc_insertion_point(field_get:GameServerConfigInfo.tax)
  return tax_;
}
void GameServerConfigInfo::set_tax(::google::protobuf::int32 value) {
  set_has_tax();
  tax_ = value;
  // @@protoc_insertion_point(field_set:GameServerConfigInfo.tax)
}

// optional string room_lua_cfg = 14;
bool GameServerConfigInfo::has_room_lua_cfg() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void GameServerConfigInfo::set_has_room_lua_cfg() {
  _has_bits_[0] |= 0x00000001u;
}
void GameServerConfigInfo::clear_has_room_lua_cfg() {
  _has_bits_[0] &= ~0x00000001u;
}
void GameServerConfigInfo::clear_room_lua_cfg() {
  room_lua_cfg_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_room_lua_cfg();
}
const ::std::string& GameServerConfigInfo::room_lua_cfg() const {
  // @@protoc_insertion_point(field_get:GameServerConfigInfo.room_lua_cfg)
  return room_lua_cfg_.GetNoArena();
}
void GameServerConfigInfo::set_room_lua_cfg(const ::std::string& value) {
  set_has_room_lua_cfg();
  room_lua_cfg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:GameServerConfigInfo.room_lua_cfg)
}
#if LANG_CXX11
void GameServerConfigInfo::set_room_lua_cfg(::std::string&& value) {
  set_has_room_lua_cfg();
  room_lua_cfg_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:GameServerConfigInfo.room_lua_cfg)
}
#endif
void GameServerConfigInfo::set_room_lua_cfg(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_room_lua_cfg();
  room_lua_cfg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:GameServerConfigInfo.room_lua_cfg)
}
void GameServerConfigInfo::set_room_lua_cfg(const char* value, size_t size) {
  set_has_room_lua_cfg();
  room_lua_cfg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:GameServerConfigInfo.room_lua_cfg)
}
::std::string* GameServerConfigInfo::mutable_room_lua_cfg() {
  set_has_room_lua_cfg();
  // @@protoc_insertion_point(field_mutable:GameServerConfigInfo.room_lua_cfg)
  return room_lua_cfg_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* GameServerConfigInfo::release_room_lua_cfg() {
  // @@protoc_insertion_point(field_release:GameServerConfigInfo.room_lua_cfg)
  clear_has_room_lua_cfg();
  return room_lua_cfg_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void GameServerConfigInfo::set_allocated_room_lua_cfg(::std::string* room_lua_cfg) {
  if (room_lua_cfg != NULL) {
    set_has_room_lua_cfg();
  } else {
    clear_has_room_lua_cfg();
  }
  room_lua_cfg_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), room_lua_cfg);
  // @@protoc_insertion_point(field_set_allocated:GameServerConfigInfo.room_lua_cfg)
}

// repeated .NetworkAddress login_addr = 15;
int GameServerConfigInfo::login_addr_size() const {
  return login_addr_.size();
}
void GameServerConfigInfo::clear_login_addr() {
  login_addr_.Clear();
}
const ::NetworkAddress& GameServerConfigInfo::login_addr(int index) const {
  // @@protoc_insertion_point(field_get:GameServerConfigInfo.login_addr)
  return login_addr_.Get(index);
}
::NetworkAddress* GameServerConfigInfo::mutable_login_addr(int index) {
  // @@protoc_insertion_point(field_mutable:GameServerConfigInfo.login_addr)
  return login_addr_.Mutable(index);
}
::NetworkAddress* GameServerConfigInfo::add_login_addr() {
  // @@protoc_insertion_point(field_add:GameServerConfigInfo.login_addr)
  return login_addr_.Add();
}
::google::protobuf::RepeatedPtrField< ::NetworkAddress >*
GameServerConfigInfo::mutable_login_addr() {
  // @@protoc_insertion_point(field_mutable_list:GameServerConfigInfo.login_addr)
  return &login_addr_;
}
const ::google::protobuf::RepeatedPtrField< ::NetworkAddress >&
GameServerConfigInfo::login_addr() const {
  // @@protoc_insertion_point(field_list:GameServerConfigInfo.login_addr)
  return login_addr_;
}

// repeated .NetworkAddress db_addr = 16;
int GameServerConfigInfo::db_addr_size() const {
  return db_addr_.size();
}
void GameServerConfigInfo::clear_db_addr() {
  db_addr_.Clear();
}
const ::NetworkAddress& GameServerConfigInfo::db_addr(int index) const {
  // @@protoc_insertion_point(field_get:GameServerConfigInfo.db_addr)
  return db_addr_.Get(index);
}
::NetworkAddress* GameServerConfigInfo::mutable_db_addr(int index) {
  // @@protoc_insertion_point(field_mutable:GameServerConfigInfo.db_addr)
  return db_addr_.Mutable(index);
}
::NetworkAddress* GameServerConfigInfo::add_db_addr() {
  // @@protoc_insertion_point(field_add:GameServerConfigInfo.db_addr)
  return db_addr_.Add();
}
::google::protobuf::RepeatedPtrField< ::NetworkAddress >*
GameServerConfigInfo::mutable_db_addr() {
  // @@protoc_insertion_point(field_mutable_list:GameServerConfigInfo.db_addr)
  return &db_addr_;
}
const ::google::protobuf::RepeatedPtrField< ::NetworkAddress >&
GameServerConfigInfo::db_addr() const {
  // @@protoc_insertion_point(field_list:GameServerConfigInfo.db_addr)
  return db_addr_;
}

// optional .RedisConnectOption def_redis = 17;
bool GameServerConfigInfo::has_def_redis() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void GameServerConfigInfo::set_has_def_redis() {
  _has_bits_[0] |= 0x00000002u;
}
void GameServerConfigInfo::clear_has_def_redis() {
  _has_bits_[0] &= ~0x00000002u;
}
void GameServerConfigInfo::clear_def_redis() {
  if (def_redis_ != NULL) def_redis_->::RedisConnectOption::Clear();
  clear_has_def_redis();
}
const ::RedisConnectOption& GameServerConfigInfo::def_redis() const {
  // @@protoc_insertion_point(field_get:GameServerConfigInfo.def_redis)
  return def_redis_ != NULL ? *def_redis_
                         : *::RedisConnectOption::internal_default_instance();
}
::RedisConnectOption* GameServerConfigInfo::mutable_def_redis() {
  set_has_def_redis();
  if (def_redis_ == NULL) {
    def_redis_ = new ::RedisConnectOption;
  }
  // @@protoc_insertion_point(field_mutable:GameServerConfigInfo.def_redis)
  return def_redis_;
}
::RedisConnectOption* GameServerConfigInfo::release_def_redis() {
  // @@protoc_insertion_point(field_release:GameServerConfigInfo.def_redis)
  clear_has_def_redis();
  ::RedisConnectOption* temp = def_redis_;
  def_redis_ = NULL;
  return temp;
}
void GameServerConfigInfo::set_allocated_def_redis(::RedisConnectOption* def_redis) {
  delete def_redis_;
  def_redis_ = def_redis;
  if (def_redis) {
    set_has_def_redis();
  } else {
    clear_has_def_redis();
  }
  // @@protoc_insertion_point(field_set_allocated:GameServerConfigInfo.def_redis)
}

// repeated .RedisSentinelOption def_sentinel = 18;
int GameServerConfigInfo::def_sentinel_size() const {
  return def_sentinel_.size();
}
void GameServerConfigInfo::clear_def_sentinel() {
  def_sentinel_.Clear();
}
const ::RedisSentinelOption& GameServerConfigInfo::def_sentinel(int index) const {
  // @@protoc_insertion_point(field_get:GameServerConfigInfo.def_sentinel)
  return def_sentinel_.Get(index);
}
::RedisSentinelOption* GameServerConfigInfo::mutable_def_sentinel(int index) {
  // @@protoc_insertion_point(field_mutable:GameServerConfigInfo.def_sentinel)
  return def_sentinel_.Mutable(index);
}
::RedisSentinelOption* GameServerConfigInfo::add_def_sentinel() {
  // @@protoc_insertion_point(field_add:GameServerConfigInfo.def_sentinel)
  return def_sentinel_.Add();
}
::google::protobuf::RepeatedPtrField< ::RedisSentinelOption >*
GameServerConfigInfo::mutable_def_sentinel() {
  // @@protoc_insertion_point(field_mutable_list:GameServerConfigInfo.def_sentinel)
  return &def_sentinel_;
}
const ::google::protobuf::RepeatedPtrField< ::RedisSentinelOption >&
GameServerConfigInfo::def_sentinel() const {
  // @@protoc_insertion_point(field_list:GameServerConfigInfo.def_sentinel)
  return def_sentinel_;
}

// optional int32 bank_transfer_tax = 19;
bool GameServerConfigInfo::has_bank_transfer_tax() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
void GameServerConfigInfo::set_has_bank_transfer_tax() {
  _has_bits_[0] |= 0x00008000u;
}
void GameServerConfigInfo::clear_has_bank_transfer_tax() {
  _has_bits_[0] &= ~0x00008000u;
}
void GameServerConfigInfo::clear_bank_transfer_tax() {
  bank_transfer_tax_ = 0;
  clear_has_bank_transfer_tax();
}
::google::protobuf::int32 GameServerConfigInfo::bank_transfer_tax() const {
  // @@protoc_insertion_point(field_get:GameServerConfigInfo.bank_transfer_tax)
  return bank_transfer_tax_;
}
void GameServerConfigInfo::set_bank_transfer_tax(::google::protobuf::int32 value) {
  set_has_bank_transfer_tax();
  bank_transfer_tax_ = value;
  // @@protoc_insertion_point(field_set:GameServerConfigInfo.bank_transfer_tax)
}

// optional int32 register_money = 20;
bool GameServerConfigInfo::has_register_money() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
void GameServerConfigInfo::set_has_register_money() {
  _has_bits_[0] |= 0x00010000u;
}
void GameServerConfigInfo::clear_has_register_money() {
  _has_bits_[0] &= ~0x00010000u;
}
void GameServerConfigInfo::clear_register_money() {
  register_money_ = 0;
  clear_has_register_money();
}
::google::protobuf::int32 GameServerConfigInfo::register_money() const {
  // @@protoc_insertion_point(field_get:GameServerConfigInfo.register_money)
  return register_money_;
}
void GameServerConfigInfo::set_register_money(::google::protobuf::int32 value) {
  set_has_register_money();
  register_money_ = value;
  // @@protoc_insertion_point(field_set:GameServerConfigInfo.register_money)
}

// optional int32 private_room_bank = 21;
bool GameServerConfigInfo::has_private_room_bank() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
void GameServerConfigInfo::set_has_private_room_bank() {
  _has_bits_[0] |= 0x00020000u;
}
void GameServerConfigInfo::clear_has_private_room_bank() {
  _has_bits_[0] &= ~0x00020000u;
}
void GameServerConfigInfo::clear_private_room_bank() {
  private_room_bank_ = 0;
  clear_has_private_room_bank();
}
::google::protobuf::int32 GameServerConfigInfo::private_room_bank() const {
  // @@protoc_insertion_point(field_get:GameServerConfigInfo.private_room_bank)
  return private_room_bank_;
}
void GameServerConfigInfo::set_private_room_bank(::google::protobuf::int32 value) {
  set_has_private_room_bank();
  private_room_bank_ = value;
  // @@protoc_insertion_point(field_set:GameServerConfigInfo.private_room_bank)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GateServerConfigInfo::kGateIdFieldNumber;
const int GateServerConfigInfo::kPortFieldNumber;
const int GateServerConfigInfo::kTimeoutLimitFieldNumber;
const int GateServerConfigInfo::kSmsTimeLimitFieldNumber;
const int GateServerConfigInfo::kSmsUrlFieldNumber;
const int GateServerConfigInfo::kLoginAddrFieldNumber;
const int GateServerConfigInfo::kGameAddrFieldNumber;
const int GateServerConfigInfo::kSmsSignKeyFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GateServerConfigInfo::GateServerConfigInfo()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_config_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:GateServerConfigInfo)
}
GateServerConfigInfo::GateServerConfigInfo(const GateServerConfigInfo& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      login_addr_(from.login_addr_),
      game_addr_(from.game_addr_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  sms_url_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_sms_url()) {
    sms_url_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.sms_url_);
  }
  sms_sign_key_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_sms_sign_key()) {
    sms_sign_key_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.sms_sign_key_);
  }
  ::memcpy(&gate_id_, &from.gate_id_,
    reinterpret_cast<char*>(&sms_time_limit_) -
    reinterpret_cast<char*>(&gate_id_) + sizeof(sms_time_limit_));
  // @@protoc_insertion_point(copy_constructor:GateServerConfigInfo)
}

void GateServerConfigInfo::SharedCtor() {
  _cached_size_ = 0;
  sms_url_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  sms_sign_key_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&gate_id_, 0, reinterpret_cast<char*>(&sms_time_limit_) -
    reinterpret_cast<char*>(&gate_id_) + sizeof(sms_time_limit_));
}

GateServerConfigInfo::~GateServerConfigInfo() {
  // @@protoc_insertion_point(destructor:GateServerConfigInfo)
  SharedDtor();
}

void GateServerConfigInfo::SharedDtor() {
  sms_url_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  sms_sign_key_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void GateServerConfigInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GateServerConfigInfo::descriptor() {
  protobuf_config_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_config_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const GateServerConfigInfo& GateServerConfigInfo::default_instance() {
  protobuf_config_2eproto::InitDefaults();
  return *internal_default_instance();
}

GateServerConfigInfo* GateServerConfigInfo::New(::google::protobuf::Arena* arena) const {
  GateServerConfigInfo* n = new GateServerConfigInfo;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void GateServerConfigInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:GateServerConfigInfo)
  login_addr_.Clear();
  game_addr_.Clear();
  if (_has_bits_[0 / 32] & 3u) {
    if (has_sms_url()) {
      GOOGLE_DCHECK(!sms_url_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*sms_url_.UnsafeRawStringPointer())->clear();
    }
    if (has_sms_sign_key()) {
      GOOGLE_DCHECK(!sms_sign_key_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*sms_sign_key_.UnsafeRawStringPointer())->clear();
    }
  }
  if (_has_bits_[0 / 32] & 60u) {
    ::memset(&gate_id_, 0, reinterpret_cast<char*>(&sms_time_limit_) -
      reinterpret_cast<char*>(&gate_id_) + sizeof(sms_time_limit_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool GateServerConfigInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:GateServerConfigInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 gate_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_gate_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &gate_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 port = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_port();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &port_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 timeout_limit = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {
          set_has_timeout_limit();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &timeout_limit_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 sms_time_limit = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u)) {
          set_has_sms_time_limit();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &sms_time_limit_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string sms_url = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_sms_url()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->sms_url().data(), this->sms_url().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "GateServerConfigInfo.sms_url");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .NetworkAddress login_addr = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_login_addr()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .NetworkAddress game_addr = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(58u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_game_addr()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string sms_sign_key = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(66u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_sms_sign_key()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->sms_sign_key().data(), this->sms_sign_key().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "GateServerConfigInfo.sms_sign_key");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:GateServerConfigInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:GateServerConfigInfo)
  return false;
#undef DO_
}

void GateServerConfigInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:GateServerConfigInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 gate_id = 1;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->gate_id(), output);
  }

  // required int32 port = 2;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->port(), output);
  }

  // optional int32 timeout_limit = 3;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->timeout_limit(), output);
  }

  // optional int32 sms_time_limit = 4;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->sms_time_limit(), output);
  }

  // optional string sms_url = 5;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->sms_url().data(), this->sms_url().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "GateServerConfigInfo.sms_url");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->sms_url(), output);
  }

  // repeated .NetworkAddress login_addr = 6;
  for (unsigned int i = 0, n = this->login_addr_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->login_addr(i), output);
  }

  // repeated .NetworkAddress game_addr = 7;
  for (unsigned int i = 0, n = this->game_addr_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->game_addr(i), output);
  }

  // optional string sms_sign_key = 8;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->sms_sign_key().data(), this->sms_sign_key().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "GateServerConfigInfo.sms_sign_key");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      8, this->sms_sign_key(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:GateServerConfigInfo)
}

::google::protobuf::uint8* GateServerConfigInfo::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:GateServerConfigInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 gate_id = 1;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->gate_id(), target);
  }

  // required int32 port = 2;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->port(), target);
  }

  // optional int32 timeout_limit = 3;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->timeout_limit(), target);
  }

  // optional int32 sms_time_limit = 4;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->sms_time_limit(), target);
  }

  // optional string sms_url = 5;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->sms_url().data(), this->sms_url().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "GateServerConfigInfo.sms_url");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->sms_url(), target);
  }

  // repeated .NetworkAddress login_addr = 6;
  for (unsigned int i = 0, n = this->login_addr_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        6, this->login_addr(i), deterministic, target);
  }

  // repeated .NetworkAddress game_addr = 7;
  for (unsigned int i = 0, n = this->game_addr_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        7, this->game_addr(i), deterministic, target);
  }

  // optional string sms_sign_key = 8;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->sms_sign_key().data(), this->sms_sign_key().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "GateServerConfigInfo.sms_sign_key");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        8, this->sms_sign_key(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GateServerConfigInfo)
  return target;
}

size_t GateServerConfigInfo::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:GateServerConfigInfo)
  size_t total_size = 0;

  if (has_gate_id()) {
    // required int32 gate_id = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->gate_id());
  }

  if (has_port()) {
    // required int32 port = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->port());
  }

  return total_size;
}
size_t GateServerConfigInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:GateServerConfigInfo)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (((_has_bits_[0] & 0x0000000c) ^ 0x0000000c) == 0) {  // All required fields are present.
    // required int32 gate_id = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->gate_id());

    // required int32 port = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->port());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  // repeated .NetworkAddress login_addr = 6;
  {
    unsigned int count = this->login_addr_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->login_addr(i));
    }
  }

  // repeated .NetworkAddress game_addr = 7;
  {
    unsigned int count = this->game_addr_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->game_addr(i));
    }
  }

  if (_has_bits_[0 / 32] & 3u) {
    // optional string sms_url = 5;
    if (has_sms_url()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->sms_url());
    }

    // optional string sms_sign_key = 8;
    if (has_sms_sign_key()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->sms_sign_key());
    }

  }
  if (_has_bits_[0 / 32] & 48u) {
    // optional int32 timeout_limit = 3;
    if (has_timeout_limit()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->timeout_limit());
    }

    // optional int32 sms_time_limit = 4;
    if (has_sms_time_limit()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->sms_time_limit());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GateServerConfigInfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:GateServerConfigInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const GateServerConfigInfo* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const GateServerConfigInfo>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:GateServerConfigInfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:GateServerConfigInfo)
    MergeFrom(*source);
  }
}

void GateServerConfigInfo::MergeFrom(const GateServerConfigInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:GateServerConfigInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  login_addr_.MergeFrom(from.login_addr_);
  game_addr_.MergeFrom(from.game_addr_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 63u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_sms_url();
      sms_url_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.sms_url_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_sms_sign_key();
      sms_sign_key_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.sms_sign_key_);
    }
    if (cached_has_bits & 0x00000004u) {
      gate_id_ = from.gate_id_;
    }
    if (cached_has_bits & 0x00000008u) {
      port_ = from.port_;
    }
    if (cached_has_bits & 0x00000010u) {
      timeout_limit_ = from.timeout_limit_;
    }
    if (cached_has_bits & 0x00000020u) {
      sms_time_limit_ = from.sms_time_limit_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void GateServerConfigInfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:GateServerConfigInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GateServerConfigInfo::CopyFrom(const GateServerConfigInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:GateServerConfigInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GateServerConfigInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000c) != 0x0000000c) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->login_addr())) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->game_addr())) return false;
  return true;
}

void GateServerConfigInfo::Swap(GateServerConfigInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GateServerConfigInfo::InternalSwap(GateServerConfigInfo* other) {
  login_addr_.InternalSwap(&other->login_addr_);
  game_addr_.InternalSwap(&other->game_addr_);
  sms_url_.Swap(&other->sms_url_);
  sms_sign_key_.Swap(&other->sms_sign_key_);
  std::swap(gate_id_, other->gate_id_);
  std::swap(port_, other->port_);
  std::swap(timeout_limit_, other->timeout_limit_);
  std::swap(sms_time_limit_, other->sms_time_limit_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata GateServerConfigInfo::GetMetadata() const {
  protobuf_config_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_config_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// GateServerConfigInfo

// required int32 gate_id = 1;
bool GateServerConfigInfo::has_gate_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void GateServerConfigInfo::set_has_gate_id() {
  _has_bits_[0] |= 0x00000004u;
}
void GateServerConfigInfo::clear_has_gate_id() {
  _has_bits_[0] &= ~0x00000004u;
}
void GateServerConfigInfo::clear_gate_id() {
  gate_id_ = 0;
  clear_has_gate_id();
}
::google::protobuf::int32 GateServerConfigInfo::gate_id() const {
  // @@protoc_insertion_point(field_get:GateServerConfigInfo.gate_id)
  return gate_id_;
}
void GateServerConfigInfo::set_gate_id(::google::protobuf::int32 value) {
  set_has_gate_id();
  gate_id_ = value;
  // @@protoc_insertion_point(field_set:GateServerConfigInfo.gate_id)
}

// required int32 port = 2;
bool GateServerConfigInfo::has_port() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void GateServerConfigInfo::set_has_port() {
  _has_bits_[0] |= 0x00000008u;
}
void GateServerConfigInfo::clear_has_port() {
  _has_bits_[0] &= ~0x00000008u;
}
void GateServerConfigInfo::clear_port() {
  port_ = 0;
  clear_has_port();
}
::google::protobuf::int32 GateServerConfigInfo::port() const {
  // @@protoc_insertion_point(field_get:GateServerConfigInfo.port)
  return port_;
}
void GateServerConfigInfo::set_port(::google::protobuf::int32 value) {
  set_has_port();
  port_ = value;
  // @@protoc_insertion_point(field_set:GateServerConfigInfo.port)
}

// optional int32 timeout_limit = 3;
bool GateServerConfigInfo::has_timeout_limit() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void GateServerConfigInfo::set_has_timeout_limit() {
  _has_bits_[0] |= 0x00000010u;
}
void GateServerConfigInfo::clear_has_timeout_limit() {
  _has_bits_[0] &= ~0x00000010u;
}
void GateServerConfigInfo::clear_timeout_limit() {
  timeout_limit_ = 0;
  clear_has_timeout_limit();
}
::google::protobuf::int32 GateServerConfigInfo::timeout_limit() const {
  // @@protoc_insertion_point(field_get:GateServerConfigInfo.timeout_limit)
  return timeout_limit_;
}
void GateServerConfigInfo::set_timeout_limit(::google::protobuf::int32 value) {
  set_has_timeout_limit();
  timeout_limit_ = value;
  // @@protoc_insertion_point(field_set:GateServerConfigInfo.timeout_limit)
}

// optional int32 sms_time_limit = 4;
bool GateServerConfigInfo::has_sms_time_limit() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void GateServerConfigInfo::set_has_sms_time_limit() {
  _has_bits_[0] |= 0x00000020u;
}
void GateServerConfigInfo::clear_has_sms_time_limit() {
  _has_bits_[0] &= ~0x00000020u;
}
void GateServerConfigInfo::clear_sms_time_limit() {
  sms_time_limit_ = 0;
  clear_has_sms_time_limit();
}
::google::protobuf::int32 GateServerConfigInfo::sms_time_limit() const {
  // @@protoc_insertion_point(field_get:GateServerConfigInfo.sms_time_limit)
  return sms_time_limit_;
}
void GateServerConfigInfo::set_sms_time_limit(::google::protobuf::int32 value) {
  set_has_sms_time_limit();
  sms_time_limit_ = value;
  // @@protoc_insertion_point(field_set:GateServerConfigInfo.sms_time_limit)
}

// optional string sms_url = 5;
bool GateServerConfigInfo::has_sms_url() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void GateServerConfigInfo::set_has_sms_url() {
  _has_bits_[0] |= 0x00000001u;
}
void GateServerConfigInfo::clear_has_sms_url() {
  _has_bits_[0] &= ~0x00000001u;
}
void GateServerConfigInfo::clear_sms_url() {
  sms_url_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_sms_url();
}
const ::std::string& GateServerConfigInfo::sms_url() const {
  // @@protoc_insertion_point(field_get:GateServerConfigInfo.sms_url)
  return sms_url_.GetNoArena();
}
void GateServerConfigInfo::set_sms_url(const ::std::string& value) {
  set_has_sms_url();
  sms_url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:GateServerConfigInfo.sms_url)
}
#if LANG_CXX11
void GateServerConfigInfo::set_sms_url(::std::string&& value) {
  set_has_sms_url();
  sms_url_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:GateServerConfigInfo.sms_url)
}
#endif
void GateServerConfigInfo::set_sms_url(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_sms_url();
  sms_url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:GateServerConfigInfo.sms_url)
}
void GateServerConfigInfo::set_sms_url(const char* value, size_t size) {
  set_has_sms_url();
  sms_url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:GateServerConfigInfo.sms_url)
}
::std::string* GateServerConfigInfo::mutable_sms_url() {
  set_has_sms_url();
  // @@protoc_insertion_point(field_mutable:GateServerConfigInfo.sms_url)
  return sms_url_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* GateServerConfigInfo::release_sms_url() {
  // @@protoc_insertion_point(field_release:GateServerConfigInfo.sms_url)
  clear_has_sms_url();
  return sms_url_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void GateServerConfigInfo::set_allocated_sms_url(::std::string* sms_url) {
  if (sms_url != NULL) {
    set_has_sms_url();
  } else {
    clear_has_sms_url();
  }
  sms_url_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), sms_url);
  // @@protoc_insertion_point(field_set_allocated:GateServerConfigInfo.sms_url)
}

// repeated .NetworkAddress login_addr = 6;
int GateServerConfigInfo::login_addr_size() const {
  return login_addr_.size();
}
void GateServerConfigInfo::clear_login_addr() {
  login_addr_.Clear();
}
const ::NetworkAddress& GateServerConfigInfo::login_addr(int index) const {
  // @@protoc_insertion_point(field_get:GateServerConfigInfo.login_addr)
  return login_addr_.Get(index);
}
::NetworkAddress* GateServerConfigInfo::mutable_login_addr(int index) {
  // @@protoc_insertion_point(field_mutable:GateServerConfigInfo.login_addr)
  return login_addr_.Mutable(index);
}
::NetworkAddress* GateServerConfigInfo::add_login_addr() {
  // @@protoc_insertion_point(field_add:GateServerConfigInfo.login_addr)
  return login_addr_.Add();
}
::google::protobuf::RepeatedPtrField< ::NetworkAddress >*
GateServerConfigInfo::mutable_login_addr() {
  // @@protoc_insertion_point(field_mutable_list:GateServerConfigInfo.login_addr)
  return &login_addr_;
}
const ::google::protobuf::RepeatedPtrField< ::NetworkAddress >&
GateServerConfigInfo::login_addr() const {
  // @@protoc_insertion_point(field_list:GateServerConfigInfo.login_addr)
  return login_addr_;
}

// repeated .NetworkAddress game_addr = 7;
int GateServerConfigInfo::game_addr_size() const {
  return game_addr_.size();
}
void GateServerConfigInfo::clear_game_addr() {
  game_addr_.Clear();
}
const ::NetworkAddress& GateServerConfigInfo::game_addr(int index) const {
  // @@protoc_insertion_point(field_get:GateServerConfigInfo.game_addr)
  return game_addr_.Get(index);
}
::NetworkAddress* GateServerConfigInfo::mutable_game_addr(int index) {
  // @@protoc_insertion_point(field_mutable:GateServerConfigInfo.game_addr)
  return game_addr_.Mutable(index);
}
::NetworkAddress* GateServerConfigInfo::add_game_addr() {
  // @@protoc_insertion_point(field_add:GateServerConfigInfo.game_addr)
  return game_addr_.Add();
}
::google::protobuf::RepeatedPtrField< ::NetworkAddress >*
GateServerConfigInfo::mutable_game_addr() {
  // @@protoc_insertion_point(field_mutable_list:GateServerConfigInfo.game_addr)
  return &game_addr_;
}
const ::google::protobuf::RepeatedPtrField< ::NetworkAddress >&
GateServerConfigInfo::game_addr() const {
  // @@protoc_insertion_point(field_list:GateServerConfigInfo.game_addr)
  return game_addr_;
}

// optional string sms_sign_key = 8;
bool GateServerConfigInfo::has_sms_sign_key() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void GateServerConfigInfo::set_has_sms_sign_key() {
  _has_bits_[0] |= 0x00000002u;
}
void GateServerConfigInfo::clear_has_sms_sign_key() {
  _has_bits_[0] &= ~0x00000002u;
}
void GateServerConfigInfo::clear_sms_sign_key() {
  sms_sign_key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_sms_sign_key();
}
const ::std::string& GateServerConfigInfo::sms_sign_key() const {
  // @@protoc_insertion_point(field_get:GateServerConfigInfo.sms_sign_key)
  return sms_sign_key_.GetNoArena();
}
void GateServerConfigInfo::set_sms_sign_key(const ::std::string& value) {
  set_has_sms_sign_key();
  sms_sign_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:GateServerConfigInfo.sms_sign_key)
}
#if LANG_CXX11
void GateServerConfigInfo::set_sms_sign_key(::std::string&& value) {
  set_has_sms_sign_key();
  sms_sign_key_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:GateServerConfigInfo.sms_sign_key)
}
#endif
void GateServerConfigInfo::set_sms_sign_key(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_sms_sign_key();
  sms_sign_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:GateServerConfigInfo.sms_sign_key)
}
void GateServerConfigInfo::set_sms_sign_key(const char* value, size_t size) {
  set_has_sms_sign_key();
  sms_sign_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:GateServerConfigInfo.sms_sign_key)
}
::std::string* GateServerConfigInfo::mutable_sms_sign_key() {
  set_has_sms_sign_key();
  // @@protoc_insertion_point(field_mutable:GateServerConfigInfo.sms_sign_key)
  return sms_sign_key_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* GateServerConfigInfo::release_sms_sign_key() {
  // @@protoc_insertion_point(field_release:GateServerConfigInfo.sms_sign_key)
  clear_has_sms_sign_key();
  return sms_sign_key_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void GateServerConfigInfo::set_allocated_sms_sign_key(::std::string* sms_sign_key) {
  if (sms_sign_key != NULL) {
    set_has_sms_sign_key();
  } else {
    clear_has_sms_sign_key();
  }
  sms_sign_key_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), sms_sign_key);
  // @@protoc_insertion_point(field_set_allocated:GateServerConfigInfo.sms_sign_key)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DBServerConfig::kPortFieldNumber;
const int DBServerConfig::kLoginDbFieldNumber;
const int DBServerConfig::kGameDbFieldNumber;
const int DBServerConfig::kLogDbFieldNumber;
const int DBServerConfig::kRechargeDbFieldNumber;
const int DBServerConfig::kDefRedisFieldNumber;
const int DBServerConfig::kDefSentinelFieldNumber;
const int DBServerConfig::kInitMoneyFieldNumber;
const int DBServerConfig::kPhpSignKeyFieldNumber;
const int DBServerConfig::kBankTransferTaxFieldNumber;
const int DBServerConfig::kPhpInterfaceAddrFieldNumber;
const int DBServerConfig::kCashMoneyAddrFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DBServerConfig::DBServerConfig()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_config_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:DBServerConfig)
}
DBServerConfig::DBServerConfig(const DBServerConfig& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      def_sentinel_(from.def_sentinel_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  php_sign_key_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_php_sign_key()) {
    php_sign_key_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.php_sign_key_);
  }
  php_interface_addr_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_php_interface_addr()) {
    php_interface_addr_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.php_interface_addr_);
  }
  cash_money_addr_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_cash_money_addr()) {
    cash_money_addr_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.cash_money_addr_);
  }
  if (from.has_login_db()) {
    login_db_ = new ::DBConnectOption(*from.login_db_);
  } else {
    login_db_ = NULL;
  }
  if (from.has_game_db()) {
    game_db_ = new ::DBConnectOption(*from.game_db_);
  } else {
    game_db_ = NULL;
  }
  if (from.has_log_db()) {
    log_db_ = new ::DBConnectOption(*from.log_db_);
  } else {
    log_db_ = NULL;
  }
  if (from.has_recharge_db()) {
    recharge_db_ = new ::DBConnectOption(*from.recharge_db_);
  } else {
    recharge_db_ = NULL;
  }
  if (from.has_def_redis()) {
    def_redis_ = new ::RedisConnectOption(*from.def_redis_);
  } else {
    def_redis_ = NULL;
  }
  ::memcpy(&port_, &from.port_,
    reinterpret_cast<char*>(&bank_transfer_tax_) -
    reinterpret_cast<char*>(&port_) + sizeof(bank_transfer_tax_));
  // @@protoc_insertion_point(copy_constructor:DBServerConfig)
}

void DBServerConfig::SharedCtor() {
  _cached_size_ = 0;
  php_sign_key_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  php_interface_addr_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  cash_money_addr_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&login_db_, 0, reinterpret_cast<char*>(&bank_transfer_tax_) -
    reinterpret_cast<char*>(&login_db_) + sizeof(bank_transfer_tax_));
}

DBServerConfig::~DBServerConfig() {
  // @@protoc_insertion_point(destructor:DBServerConfig)
  SharedDtor();
}

void DBServerConfig::SharedDtor() {
  php_sign_key_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  php_interface_addr_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  cash_money_addr_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) {
    delete login_db_;
  }
  if (this != internal_default_instance()) {
    delete game_db_;
  }
  if (this != internal_default_instance()) {
    delete log_db_;
  }
  if (this != internal_default_instance()) {
    delete recharge_db_;
  }
  if (this != internal_default_instance()) {
    delete def_redis_;
  }
}

void DBServerConfig::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DBServerConfig::descriptor() {
  protobuf_config_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_config_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const DBServerConfig& DBServerConfig::default_instance() {
  protobuf_config_2eproto::InitDefaults();
  return *internal_default_instance();
}

DBServerConfig* DBServerConfig::New(::google::protobuf::Arena* arena) const {
  DBServerConfig* n = new DBServerConfig;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void DBServerConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:DBServerConfig)
  def_sentinel_.Clear();
  if (_has_bits_[0 / 32] & 255u) {
    if (has_php_sign_key()) {
      GOOGLE_DCHECK(!php_sign_key_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*php_sign_key_.UnsafeRawStringPointer())->clear();
    }
    if (has_php_interface_addr()) {
      GOOGLE_DCHECK(!php_interface_addr_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*php_interface_addr_.UnsafeRawStringPointer())->clear();
    }
    if (has_cash_money_addr()) {
      GOOGLE_DCHECK(!cash_money_addr_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*cash_money_addr_.UnsafeRawStringPointer())->clear();
    }
    if (has_login_db()) {
      GOOGLE_DCHECK(login_db_ != NULL);
      login_db_->::DBConnectOption::Clear();
    }
    if (has_game_db()) {
      GOOGLE_DCHECK(game_db_ != NULL);
      game_db_->::DBConnectOption::Clear();
    }
    if (has_log_db()) {
      GOOGLE_DCHECK(log_db_ != NULL);
      log_db_->::DBConnectOption::Clear();
    }
    if (has_recharge_db()) {
      GOOGLE_DCHECK(recharge_db_ != NULL);
      recharge_db_->::DBConnectOption::Clear();
    }
    if (has_def_redis()) {
      GOOGLE_DCHECK(def_redis_ != NULL);
      def_redis_->::RedisConnectOption::Clear();
    }
  }
  if (_has_bits_[8 / 32] & 1792u) {
    ::memset(&port_, 0, reinterpret_cast<char*>(&bank_transfer_tax_) -
      reinterpret_cast<char*>(&port_) + sizeof(bank_transfer_tax_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool DBServerConfig::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:DBServerConfig)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 port = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_port();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &port_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required .DBConnectOption login_db = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_login_db()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required .DBConnectOption game_db = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_game_db()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required .DBConnectOption log_db = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_log_db()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required .DBConnectOption recharge_db = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_recharge_db()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .RedisConnectOption def_redis = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(58u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_def_redis()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .RedisSentinelOption def_sentinel = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(66u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_def_sentinel()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 init_money = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(72u)) {
          set_has_init_money();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &init_money_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string php_sign_key = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(82u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_php_sign_key()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->php_sign_key().data(), this->php_sign_key().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "DBServerConfig.php_sign_key");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 bank_transfer_tax = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(88u)) {
          set_has_bank_transfer_tax();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &bank_transfer_tax_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string php_interface_addr = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(98u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_php_interface_addr()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->php_interface_addr().data(), this->php_interface_addr().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "DBServerConfig.php_interface_addr");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string cash_money_addr = 13;
      case 13: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(106u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_cash_money_addr()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->cash_money_addr().data(), this->cash_money_addr().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "DBServerConfig.cash_money_addr");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:DBServerConfig)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:DBServerConfig)
  return false;
#undef DO_
}

void DBServerConfig::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:DBServerConfig)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 port = 1;
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->port(), output);
  }

  // required .DBConnectOption login_db = 2;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->login_db_, output);
  }

  // required .DBConnectOption game_db = 3;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *this->game_db_, output);
  }

  // required .DBConnectOption log_db = 4;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, *this->log_db_, output);
  }

  // required .DBConnectOption recharge_db = 5;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, *this->recharge_db_, output);
  }

  // optional .RedisConnectOption def_redis = 7;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, *this->def_redis_, output);
  }

  // repeated .RedisSentinelOption def_sentinel = 8;
  for (unsigned int i = 0, n = this->def_sentinel_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, this->def_sentinel(i), output);
  }

  // optional int32 init_money = 9;
  if (cached_has_bits & 0x00000200u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->init_money(), output);
  }

  // optional string php_sign_key = 10;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->php_sign_key().data(), this->php_sign_key().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "DBServerConfig.php_sign_key");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      10, this->php_sign_key(), output);
  }

  // optional int32 bank_transfer_tax = 11;
  if (cached_has_bits & 0x00000400u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(11, this->bank_transfer_tax(), output);
  }

  // optional string php_interface_addr = 12;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->php_interface_addr().data(), this->php_interface_addr().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "DBServerConfig.php_interface_addr");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      12, this->php_interface_addr(), output);
  }

  // optional string cash_money_addr = 13;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->cash_money_addr().data(), this->cash_money_addr().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "DBServerConfig.cash_money_addr");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      13, this->cash_money_addr(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:DBServerConfig)
}

::google::protobuf::uint8* DBServerConfig::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:DBServerConfig)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 port = 1;
  if (cached_has_bits & 0x00000100u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->port(), target);
  }

  // required .DBConnectOption login_db = 2;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->login_db_, deterministic, target);
  }

  // required .DBConnectOption game_db = 3;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, *this->game_db_, deterministic, target);
  }

  // required .DBConnectOption log_db = 4;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        4, *this->log_db_, deterministic, target);
  }

  // required .DBConnectOption recharge_db = 5;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        5, *this->recharge_db_, deterministic, target);
  }

  // optional .RedisConnectOption def_redis = 7;
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        7, *this->def_redis_, deterministic, target);
  }

  // repeated .RedisSentinelOption def_sentinel = 8;
  for (unsigned int i = 0, n = this->def_sentinel_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        8, this->def_sentinel(i), deterministic, target);
  }

  // optional int32 init_money = 9;
  if (cached_has_bits & 0x00000200u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->init_money(), target);
  }

  // optional string php_sign_key = 10;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->php_sign_key().data(), this->php_sign_key().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "DBServerConfig.php_sign_key");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        10, this->php_sign_key(), target);
  }

  // optional int32 bank_transfer_tax = 11;
  if (cached_has_bits & 0x00000400u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(11, this->bank_transfer_tax(), target);
  }

  // optional string php_interface_addr = 12;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->php_interface_addr().data(), this->php_interface_addr().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "DBServerConfig.php_interface_addr");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        12, this->php_interface_addr(), target);
  }

  // optional string cash_money_addr = 13;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->cash_money_addr().data(), this->cash_money_addr().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "DBServerConfig.cash_money_addr");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        13, this->cash_money_addr(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:DBServerConfig)
  return target;
}

size_t DBServerConfig::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:DBServerConfig)
  size_t total_size = 0;

  if (has_login_db()) {
    // required .DBConnectOption login_db = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->login_db_);
  }

  if (has_game_db()) {
    // required .DBConnectOption game_db = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->game_db_);
  }

  if (has_log_db()) {
    // required .DBConnectOption log_db = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->log_db_);
  }

  if (has_recharge_db()) {
    // required .DBConnectOption recharge_db = 5;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->recharge_db_);
  }

  if (has_port()) {
    // required int32 port = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->port());
  }

  return total_size;
}
size_t DBServerConfig::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:DBServerConfig)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000178) ^ 0x00000178) == 0) {  // All required fields are present.
    // required .DBConnectOption login_db = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->login_db_);

    // required .DBConnectOption game_db = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->game_db_);

    // required .DBConnectOption log_db = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->log_db_);

    // required .DBConnectOption recharge_db = 5;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->recharge_db_);

    // required int32 port = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->port());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  // repeated .RedisSentinelOption def_sentinel = 8;
  {
    unsigned int count = this->def_sentinel_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->def_sentinel(i));
    }
  }

  if (_has_bits_[0 / 32] & 7u) {
    // optional string php_sign_key = 10;
    if (has_php_sign_key()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->php_sign_key());
    }

    // optional string php_interface_addr = 12;
    if (has_php_interface_addr()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->php_interface_addr());
    }

    // optional string cash_money_addr = 13;
    if (has_cash_money_addr()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->cash_money_addr());
    }

  }
  // optional .RedisConnectOption def_redis = 7;
  if (has_def_redis()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->def_redis_);
  }

  if (_has_bits_[8 / 32] & 1536u) {
    // optional int32 init_money = 9;
    if (has_init_money()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->init_money());
    }

    // optional int32 bank_transfer_tax = 11;
    if (has_bank_transfer_tax()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->bank_transfer_tax());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DBServerConfig::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:DBServerConfig)
  GOOGLE_DCHECK_NE(&from, this);
  const DBServerConfig* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const DBServerConfig>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:DBServerConfig)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:DBServerConfig)
    MergeFrom(*source);
  }
}

void DBServerConfig::MergeFrom(const DBServerConfig& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:DBServerConfig)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  def_sentinel_.MergeFrom(from.def_sentinel_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_php_sign_key();
      php_sign_key_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.php_sign_key_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_php_interface_addr();
      php_interface_addr_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.php_interface_addr_);
    }
    if (cached_has_bits & 0x00000004u) {
      set_has_cash_money_addr();
      cash_money_addr_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.cash_money_addr_);
    }
    if (cached_has_bits & 0x00000008u) {
      mutable_login_db()->::DBConnectOption::MergeFrom(from.login_db());
    }
    if (cached_has_bits & 0x00000010u) {
      mutable_game_db()->::DBConnectOption::MergeFrom(from.game_db());
    }
    if (cached_has_bits & 0x00000020u) {
      mutable_log_db()->::DBConnectOption::MergeFrom(from.log_db());
    }
    if (cached_has_bits & 0x00000040u) {
      mutable_recharge_db()->::DBConnectOption::MergeFrom(from.recharge_db());
    }
    if (cached_has_bits & 0x00000080u) {
      mutable_def_redis()->::RedisConnectOption::MergeFrom(from.def_redis());
    }
  }
  if (cached_has_bits & 1792u) {
    if (cached_has_bits & 0x00000100u) {
      port_ = from.port_;
    }
    if (cached_has_bits & 0x00000200u) {
      init_money_ = from.init_money_;
    }
    if (cached_has_bits & 0x00000400u) {
      bank_transfer_tax_ = from.bank_transfer_tax_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void DBServerConfig::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:DBServerConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DBServerConfig::CopyFrom(const DBServerConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:DBServerConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DBServerConfig::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000178) != 0x00000178) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->def_sentinel())) return false;
  if (has_login_db()) {
    if (!this->login_db_->IsInitialized()) return false;
  }
  if (has_game_db()) {
    if (!this->game_db_->IsInitialized()) return false;
  }
  if (has_log_db()) {
    if (!this->log_db_->IsInitialized()) return false;
  }
  if (has_recharge_db()) {
    if (!this->recharge_db_->IsInitialized()) return false;
  }
  if (has_def_redis()) {
    if (!this->def_redis_->IsInitialized()) return false;
  }
  return true;
}

void DBServerConfig::Swap(DBServerConfig* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DBServerConfig::InternalSwap(DBServerConfig* other) {
  def_sentinel_.InternalSwap(&other->def_sentinel_);
  php_sign_key_.Swap(&other->php_sign_key_);
  php_interface_addr_.Swap(&other->php_interface_addr_);
  cash_money_addr_.Swap(&other->cash_money_addr_);
  std::swap(login_db_, other->login_db_);
  std::swap(game_db_, other->game_db_);
  std::swap(log_db_, other->log_db_);
  std::swap(recharge_db_, other->recharge_db_);
  std::swap(def_redis_, other->def_redis_);
  std::swap(port_, other->port_);
  std::swap(init_money_, other->init_money_);
  std::swap(bank_transfer_tax_, other->bank_transfer_tax_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata DBServerConfig::GetMetadata() const {
  protobuf_config_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_config_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// DBServerConfig

// required int32 port = 1;
bool DBServerConfig::has_port() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
void DBServerConfig::set_has_port() {
  _has_bits_[0] |= 0x00000100u;
}
void DBServerConfig::clear_has_port() {
  _has_bits_[0] &= ~0x00000100u;
}
void DBServerConfig::clear_port() {
  port_ = 0;
  clear_has_port();
}
::google::protobuf::int32 DBServerConfig::port() const {
  // @@protoc_insertion_point(field_get:DBServerConfig.port)
  return port_;
}
void DBServerConfig::set_port(::google::protobuf::int32 value) {
  set_has_port();
  port_ = value;
  // @@protoc_insertion_point(field_set:DBServerConfig.port)
}

// required .DBConnectOption login_db = 2;
bool DBServerConfig::has_login_db() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void DBServerConfig::set_has_login_db() {
  _has_bits_[0] |= 0x00000008u;
}
void DBServerConfig::clear_has_login_db() {
  _has_bits_[0] &= ~0x00000008u;
}
void DBServerConfig::clear_login_db() {
  if (login_db_ != NULL) login_db_->::DBConnectOption::Clear();
  clear_has_login_db();
}
const ::DBConnectOption& DBServerConfig::login_db() const {
  // @@protoc_insertion_point(field_get:DBServerConfig.login_db)
  return login_db_ != NULL ? *login_db_
                         : *::DBConnectOption::internal_default_instance();
}
::DBConnectOption* DBServerConfig::mutable_login_db() {
  set_has_login_db();
  if (login_db_ == NULL) {
    login_db_ = new ::DBConnectOption;
  }
  // @@protoc_insertion_point(field_mutable:DBServerConfig.login_db)
  return login_db_;
}
::DBConnectOption* DBServerConfig::release_login_db() {
  // @@protoc_insertion_point(field_release:DBServerConfig.login_db)
  clear_has_login_db();
  ::DBConnectOption* temp = login_db_;
  login_db_ = NULL;
  return temp;
}
void DBServerConfig::set_allocated_login_db(::DBConnectOption* login_db) {
  delete login_db_;
  login_db_ = login_db;
  if (login_db) {
    set_has_login_db();
  } else {
    clear_has_login_db();
  }
  // @@protoc_insertion_point(field_set_allocated:DBServerConfig.login_db)
}

// required .DBConnectOption game_db = 3;
bool DBServerConfig::has_game_db() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void DBServerConfig::set_has_game_db() {
  _has_bits_[0] |= 0x00000010u;
}
void DBServerConfig::clear_has_game_db() {
  _has_bits_[0] &= ~0x00000010u;
}
void DBServerConfig::clear_game_db() {
  if (game_db_ != NULL) game_db_->::DBConnectOption::Clear();
  clear_has_game_db();
}
const ::DBConnectOption& DBServerConfig::game_db() const {
  // @@protoc_insertion_point(field_get:DBServerConfig.game_db)
  return game_db_ != NULL ? *game_db_
                         : *::DBConnectOption::internal_default_instance();
}
::DBConnectOption* DBServerConfig::mutable_game_db() {
  set_has_game_db();
  if (game_db_ == NULL) {
    game_db_ = new ::DBConnectOption;
  }
  // @@protoc_insertion_point(field_mutable:DBServerConfig.game_db)
  return game_db_;
}
::DBConnectOption* DBServerConfig::release_game_db() {
  // @@protoc_insertion_point(field_release:DBServerConfig.game_db)
  clear_has_game_db();
  ::DBConnectOption* temp = game_db_;
  game_db_ = NULL;
  return temp;
}
void DBServerConfig::set_allocated_game_db(::DBConnectOption* game_db) {
  delete game_db_;
  game_db_ = game_db;
  if (game_db) {
    set_has_game_db();
  } else {
    clear_has_game_db();
  }
  // @@protoc_insertion_point(field_set_allocated:DBServerConfig.game_db)
}

// required .DBConnectOption log_db = 4;
bool DBServerConfig::has_log_db() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void DBServerConfig::set_has_log_db() {
  _has_bits_[0] |= 0x00000020u;
}
void DBServerConfig::clear_has_log_db() {
  _has_bits_[0] &= ~0x00000020u;
}
void DBServerConfig::clear_log_db() {
  if (log_db_ != NULL) log_db_->::DBConnectOption::Clear();
  clear_has_log_db();
}
const ::DBConnectOption& DBServerConfig::log_db() const {
  // @@protoc_insertion_point(field_get:DBServerConfig.log_db)
  return log_db_ != NULL ? *log_db_
                         : *::DBConnectOption::internal_default_instance();
}
::DBConnectOption* DBServerConfig::mutable_log_db() {
  set_has_log_db();
  if (log_db_ == NULL) {
    log_db_ = new ::DBConnectOption;
  }
  // @@protoc_insertion_point(field_mutable:DBServerConfig.log_db)
  return log_db_;
}
::DBConnectOption* DBServerConfig::release_log_db() {
  // @@protoc_insertion_point(field_release:DBServerConfig.log_db)
  clear_has_log_db();
  ::DBConnectOption* temp = log_db_;
  log_db_ = NULL;
  return temp;
}
void DBServerConfig::set_allocated_log_db(::DBConnectOption* log_db) {
  delete log_db_;
  log_db_ = log_db;
  if (log_db) {
    set_has_log_db();
  } else {
    clear_has_log_db();
  }
  // @@protoc_insertion_point(field_set_allocated:DBServerConfig.log_db)
}

// required .DBConnectOption recharge_db = 5;
bool DBServerConfig::has_recharge_db() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void DBServerConfig::set_has_recharge_db() {
  _has_bits_[0] |= 0x00000040u;
}
void DBServerConfig::clear_has_recharge_db() {
  _has_bits_[0] &= ~0x00000040u;
}
void DBServerConfig::clear_recharge_db() {
  if (recharge_db_ != NULL) recharge_db_->::DBConnectOption::Clear();
  clear_has_recharge_db();
}
const ::DBConnectOption& DBServerConfig::recharge_db() const {
  // @@protoc_insertion_point(field_get:DBServerConfig.recharge_db)
  return recharge_db_ != NULL ? *recharge_db_
                         : *::DBConnectOption::internal_default_instance();
}
::DBConnectOption* DBServerConfig::mutable_recharge_db() {
  set_has_recharge_db();
  if (recharge_db_ == NULL) {
    recharge_db_ = new ::DBConnectOption;
  }
  // @@protoc_insertion_point(field_mutable:DBServerConfig.recharge_db)
  return recharge_db_;
}
::DBConnectOption* DBServerConfig::release_recharge_db() {
  // @@protoc_insertion_point(field_release:DBServerConfig.recharge_db)
  clear_has_recharge_db();
  ::DBConnectOption* temp = recharge_db_;
  recharge_db_ = NULL;
  return temp;
}
void DBServerConfig::set_allocated_recharge_db(::DBConnectOption* recharge_db) {
  delete recharge_db_;
  recharge_db_ = recharge_db;
  if (recharge_db) {
    set_has_recharge_db();
  } else {
    clear_has_recharge_db();
  }
  // @@protoc_insertion_point(field_set_allocated:DBServerConfig.recharge_db)
}

// optional .RedisConnectOption def_redis = 7;
bool DBServerConfig::has_def_redis() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void DBServerConfig::set_has_def_redis() {
  _has_bits_[0] |= 0x00000080u;
}
void DBServerConfig::clear_has_def_redis() {
  _has_bits_[0] &= ~0x00000080u;
}
void DBServerConfig::clear_def_redis() {
  if (def_redis_ != NULL) def_redis_->::RedisConnectOption::Clear();
  clear_has_def_redis();
}
const ::RedisConnectOption& DBServerConfig::def_redis() const {
  // @@protoc_insertion_point(field_get:DBServerConfig.def_redis)
  return def_redis_ != NULL ? *def_redis_
                         : *::RedisConnectOption::internal_default_instance();
}
::RedisConnectOption* DBServerConfig::mutable_def_redis() {
  set_has_def_redis();
  if (def_redis_ == NULL) {
    def_redis_ = new ::RedisConnectOption;
  }
  // @@protoc_insertion_point(field_mutable:DBServerConfig.def_redis)
  return def_redis_;
}
::RedisConnectOption* DBServerConfig::release_def_redis() {
  // @@protoc_insertion_point(field_release:DBServerConfig.def_redis)
  clear_has_def_redis();
  ::RedisConnectOption* temp = def_redis_;
  def_redis_ = NULL;
  return temp;
}
void DBServerConfig::set_allocated_def_redis(::RedisConnectOption* def_redis) {
  delete def_redis_;
  def_redis_ = def_redis;
  if (def_redis) {
    set_has_def_redis();
  } else {
    clear_has_def_redis();
  }
  // @@protoc_insertion_point(field_set_allocated:DBServerConfig.def_redis)
}

// repeated .RedisSentinelOption def_sentinel = 8;
int DBServerConfig::def_sentinel_size() const {
  return def_sentinel_.size();
}
void DBServerConfig::clear_def_sentinel() {
  def_sentinel_.Clear();
}
const ::RedisSentinelOption& DBServerConfig::def_sentinel(int index) const {
  // @@protoc_insertion_point(field_get:DBServerConfig.def_sentinel)
  return def_sentinel_.Get(index);
}
::RedisSentinelOption* DBServerConfig::mutable_def_sentinel(int index) {
  // @@protoc_insertion_point(field_mutable:DBServerConfig.def_sentinel)
  return def_sentinel_.Mutable(index);
}
::RedisSentinelOption* DBServerConfig::add_def_sentinel() {
  // @@protoc_insertion_point(field_add:DBServerConfig.def_sentinel)
  return def_sentinel_.Add();
}
::google::protobuf::RepeatedPtrField< ::RedisSentinelOption >*
DBServerConfig::mutable_def_sentinel() {
  // @@protoc_insertion_point(field_mutable_list:DBServerConfig.def_sentinel)
  return &def_sentinel_;
}
const ::google::protobuf::RepeatedPtrField< ::RedisSentinelOption >&
DBServerConfig::def_sentinel() const {
  // @@protoc_insertion_point(field_list:DBServerConfig.def_sentinel)
  return def_sentinel_;
}

// optional int32 init_money = 9;
bool DBServerConfig::has_init_money() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
void DBServerConfig::set_has_init_money() {
  _has_bits_[0] |= 0x00000200u;
}
void DBServerConfig::clear_has_init_money() {
  _has_bits_[0] &= ~0x00000200u;
}
void DBServerConfig::clear_init_money() {
  init_money_ = 0;
  clear_has_init_money();
}
::google::protobuf::int32 DBServerConfig::init_money() const {
  // @@protoc_insertion_point(field_get:DBServerConfig.init_money)
  return init_money_;
}
void DBServerConfig::set_init_money(::google::protobuf::int32 value) {
  set_has_init_money();
  init_money_ = value;
  // @@protoc_insertion_point(field_set:DBServerConfig.init_money)
}

// optional string php_sign_key = 10;
bool DBServerConfig::has_php_sign_key() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void DBServerConfig::set_has_php_sign_key() {
  _has_bits_[0] |= 0x00000001u;
}
void DBServerConfig::clear_has_php_sign_key() {
  _has_bits_[0] &= ~0x00000001u;
}
void DBServerConfig::clear_php_sign_key() {
  php_sign_key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_php_sign_key();
}
const ::std::string& DBServerConfig::php_sign_key() const {
  // @@protoc_insertion_point(field_get:DBServerConfig.php_sign_key)
  return php_sign_key_.GetNoArena();
}
void DBServerConfig::set_php_sign_key(const ::std::string& value) {
  set_has_php_sign_key();
  php_sign_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:DBServerConfig.php_sign_key)
}
#if LANG_CXX11
void DBServerConfig::set_php_sign_key(::std::string&& value) {
  set_has_php_sign_key();
  php_sign_key_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:DBServerConfig.php_sign_key)
}
#endif
void DBServerConfig::set_php_sign_key(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_php_sign_key();
  php_sign_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:DBServerConfig.php_sign_key)
}
void DBServerConfig::set_php_sign_key(const char* value, size_t size) {
  set_has_php_sign_key();
  php_sign_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:DBServerConfig.php_sign_key)
}
::std::string* DBServerConfig::mutable_php_sign_key() {
  set_has_php_sign_key();
  // @@protoc_insertion_point(field_mutable:DBServerConfig.php_sign_key)
  return php_sign_key_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* DBServerConfig::release_php_sign_key() {
  // @@protoc_insertion_point(field_release:DBServerConfig.php_sign_key)
  clear_has_php_sign_key();
  return php_sign_key_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void DBServerConfig::set_allocated_php_sign_key(::std::string* php_sign_key) {
  if (php_sign_key != NULL) {
    set_has_php_sign_key();
  } else {
    clear_has_php_sign_key();
  }
  php_sign_key_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), php_sign_key);
  // @@protoc_insertion_point(field_set_allocated:DBServerConfig.php_sign_key)
}

// optional int32 bank_transfer_tax = 11;
bool DBServerConfig::has_bank_transfer_tax() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
void DBServerConfig::set_has_bank_transfer_tax() {
  _has_bits_[0] |= 0x00000400u;
}
void DBServerConfig::clear_has_bank_transfer_tax() {
  _has_bits_[0] &= ~0x00000400u;
}
void DBServerConfig::clear_bank_transfer_tax() {
  bank_transfer_tax_ = 0;
  clear_has_bank_transfer_tax();
}
::google::protobuf::int32 DBServerConfig::bank_transfer_tax() const {
  // @@protoc_insertion_point(field_get:DBServerConfig.bank_transfer_tax)
  return bank_transfer_tax_;
}
void DBServerConfig::set_bank_transfer_tax(::google::protobuf::int32 value) {
  set_has_bank_transfer_tax();
  bank_transfer_tax_ = value;
  // @@protoc_insertion_point(field_set:DBServerConfig.bank_transfer_tax)
}

// optional string php_interface_addr = 12;
bool DBServerConfig::has_php_interface_addr() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void DBServerConfig::set_has_php_interface_addr() {
  _has_bits_[0] |= 0x00000002u;
}
void DBServerConfig::clear_has_php_interface_addr() {
  _has_bits_[0] &= ~0x00000002u;
}
void DBServerConfig::clear_php_interface_addr() {
  php_interface_addr_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_php_interface_addr();
}
const ::std::string& DBServerConfig::php_interface_addr() const {
  // @@protoc_insertion_point(field_get:DBServerConfig.php_interface_addr)
  return php_interface_addr_.GetNoArena();
}
void DBServerConfig::set_php_interface_addr(const ::std::string& value) {
  set_has_php_interface_addr();
  php_interface_addr_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:DBServerConfig.php_interface_addr)
}
#if LANG_CXX11
void DBServerConfig::set_php_interface_addr(::std::string&& value) {
  set_has_php_interface_addr();
  php_interface_addr_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:DBServerConfig.php_interface_addr)
}
#endif
void DBServerConfig::set_php_interface_addr(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_php_interface_addr();
  php_interface_addr_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:DBServerConfig.php_interface_addr)
}
void DBServerConfig::set_php_interface_addr(const char* value, size_t size) {
  set_has_php_interface_addr();
  php_interface_addr_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:DBServerConfig.php_interface_addr)
}
::std::string* DBServerConfig::mutable_php_interface_addr() {
  set_has_php_interface_addr();
  // @@protoc_insertion_point(field_mutable:DBServerConfig.php_interface_addr)
  return php_interface_addr_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* DBServerConfig::release_php_interface_addr() {
  // @@protoc_insertion_point(field_release:DBServerConfig.php_interface_addr)
  clear_has_php_interface_addr();
  return php_interface_addr_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void DBServerConfig::set_allocated_php_interface_addr(::std::string* php_interface_addr) {
  if (php_interface_addr != NULL) {
    set_has_php_interface_addr();
  } else {
    clear_has_php_interface_addr();
  }
  php_interface_addr_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), php_interface_addr);
  // @@protoc_insertion_point(field_set_allocated:DBServerConfig.php_interface_addr)
}

// optional string cash_money_addr = 13;
bool DBServerConfig::has_cash_money_addr() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void DBServerConfig::set_has_cash_money_addr() {
  _has_bits_[0] |= 0x00000004u;
}
void DBServerConfig::clear_has_cash_money_addr() {
  _has_bits_[0] &= ~0x00000004u;
}
void DBServerConfig::clear_cash_money_addr() {
  cash_money_addr_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_cash_money_addr();
}
const ::std::string& DBServerConfig::cash_money_addr() const {
  // @@protoc_insertion_point(field_get:DBServerConfig.cash_money_addr)
  return cash_money_addr_.GetNoArena();
}
void DBServerConfig::set_cash_money_addr(const ::std::string& value) {
  set_has_cash_money_addr();
  cash_money_addr_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:DBServerConfig.cash_money_addr)
}
#if LANG_CXX11
void DBServerConfig::set_cash_money_addr(::std::string&& value) {
  set_has_cash_money_addr();
  cash_money_addr_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:DBServerConfig.cash_money_addr)
}
#endif
void DBServerConfig::set_cash_money_addr(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_cash_money_addr();
  cash_money_addr_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:DBServerConfig.cash_money_addr)
}
void DBServerConfig::set_cash_money_addr(const char* value, size_t size) {
  set_has_cash_money_addr();
  cash_money_addr_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:DBServerConfig.cash_money_addr)
}
::std::string* DBServerConfig::mutable_cash_money_addr() {
  set_has_cash_money_addr();
  // @@protoc_insertion_point(field_mutable:DBServerConfig.cash_money_addr)
  return cash_money_addr_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* DBServerConfig::release_cash_money_addr() {
  // @@protoc_insertion_point(field_release:DBServerConfig.cash_money_addr)
  clear_has_cash_money_addr();
  return cash_money_addr_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void DBServerConfig::set_allocated_cash_money_addr(::std::string* cash_money_addr) {
  if (cash_money_addr != NULL) {
    set_has_cash_money_addr();
  } else {
    clear_has_cash_money_addr();
  }
  cash_money_addr_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), cash_money_addr);
  // @@protoc_insertion_point(field_set_allocated:DBServerConfig.cash_money_addr)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PrivateRoomInfoConfig::kGameIdFieldNumber;
const int PrivateRoomInfoConfig::kFirstGameTypeFieldNumber;
const int PrivateRoomInfoConfig::kRoomLuaCfgFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PrivateRoomInfoConfig::PrivateRoomInfoConfig()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_config_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:PrivateRoomInfoConfig)
}
PrivateRoomInfoConfig::PrivateRoomInfoConfig(const PrivateRoomInfoConfig& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  room_lua_cfg_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_room_lua_cfg()) {
    room_lua_cfg_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.room_lua_cfg_);
  }
  ::memcpy(&game_id_, &from.game_id_,
    reinterpret_cast<char*>(&first_game_type_) -
    reinterpret_cast<char*>(&game_id_) + sizeof(first_game_type_));
  // @@protoc_insertion_point(copy_constructor:PrivateRoomInfoConfig)
}

void PrivateRoomInfoConfig::SharedCtor() {
  _cached_size_ = 0;
  room_lua_cfg_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&game_id_, 0, reinterpret_cast<char*>(&first_game_type_) -
    reinterpret_cast<char*>(&game_id_) + sizeof(first_game_type_));
}

PrivateRoomInfoConfig::~PrivateRoomInfoConfig() {
  // @@protoc_insertion_point(destructor:PrivateRoomInfoConfig)
  SharedDtor();
}

void PrivateRoomInfoConfig::SharedDtor() {
  room_lua_cfg_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void PrivateRoomInfoConfig::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PrivateRoomInfoConfig::descriptor() {
  protobuf_config_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_config_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const PrivateRoomInfoConfig& PrivateRoomInfoConfig::default_instance() {
  protobuf_config_2eproto::InitDefaults();
  return *internal_default_instance();
}

PrivateRoomInfoConfig* PrivateRoomInfoConfig::New(::google::protobuf::Arena* arena) const {
  PrivateRoomInfoConfig* n = new PrivateRoomInfoConfig;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void PrivateRoomInfoConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:PrivateRoomInfoConfig)
  if (has_room_lua_cfg()) {
    GOOGLE_DCHECK(!room_lua_cfg_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
    (*room_lua_cfg_.UnsafeRawStringPointer())->clear();
  }
  if (_has_bits_[0 / 32] & 6u) {
    ::memset(&game_id_, 0, reinterpret_cast<char*>(&first_game_type_) -
      reinterpret_cast<char*>(&game_id_) + sizeof(first_game_type_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool PrivateRoomInfoConfig::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:PrivateRoomInfoConfig)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 game_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_game_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &game_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 first_game_type = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_first_game_type();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &first_game_type_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string room_lua_cfg = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_room_lua_cfg()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->room_lua_cfg().data(), this->room_lua_cfg().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "PrivateRoomInfoConfig.room_lua_cfg");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:PrivateRoomInfoConfig)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:PrivateRoomInfoConfig)
  return false;
#undef DO_
}

void PrivateRoomInfoConfig::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:PrivateRoomInfoConfig)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 game_id = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->game_id(), output);
  }

  // optional int32 first_game_type = 2;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->first_game_type(), output);
  }

  // optional string room_lua_cfg = 3;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->room_lua_cfg().data(), this->room_lua_cfg().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "PrivateRoomInfoConfig.room_lua_cfg");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->room_lua_cfg(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:PrivateRoomInfoConfig)
}

::google::protobuf::uint8* PrivateRoomInfoConfig::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:PrivateRoomInfoConfig)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 game_id = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->game_id(), target);
  }

  // optional int32 first_game_type = 2;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->first_game_type(), target);
  }

  // optional string room_lua_cfg = 3;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->room_lua_cfg().data(), this->room_lua_cfg().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "PrivateRoomInfoConfig.room_lua_cfg");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->room_lua_cfg(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:PrivateRoomInfoConfig)
  return target;
}

size_t PrivateRoomInfoConfig::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:PrivateRoomInfoConfig)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 7u) {
    // optional string room_lua_cfg = 3;
    if (has_room_lua_cfg()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->room_lua_cfg());
    }

    // optional int32 game_id = 1;
    if (has_game_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->game_id());
    }

    // optional int32 first_game_type = 2;
    if (has_first_game_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->first_game_type());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PrivateRoomInfoConfig::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:PrivateRoomInfoConfig)
  GOOGLE_DCHECK_NE(&from, this);
  const PrivateRoomInfoConfig* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const PrivateRoomInfoConfig>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:PrivateRoomInfoConfig)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:PrivateRoomInfoConfig)
    MergeFrom(*source);
  }
}

void PrivateRoomInfoConfig::MergeFrom(const PrivateRoomInfoConfig& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:PrivateRoomInfoConfig)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_room_lua_cfg();
      room_lua_cfg_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.room_lua_cfg_);
    }
    if (cached_has_bits & 0x00000002u) {
      game_id_ = from.game_id_;
    }
    if (cached_has_bits & 0x00000004u) {
      first_game_type_ = from.first_game_type_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void PrivateRoomInfoConfig::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:PrivateRoomInfoConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PrivateRoomInfoConfig::CopyFrom(const PrivateRoomInfoConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:PrivateRoomInfoConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PrivateRoomInfoConfig::IsInitialized() const {
  return true;
}

void PrivateRoomInfoConfig::Swap(PrivateRoomInfoConfig* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PrivateRoomInfoConfig::InternalSwap(PrivateRoomInfoConfig* other) {
  room_lua_cfg_.Swap(&other->room_lua_cfg_);
  std::swap(game_id_, other->game_id_);
  std::swap(first_game_type_, other->first_game_type_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata PrivateRoomInfoConfig::GetMetadata() const {
  protobuf_config_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_config_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// PrivateRoomInfoConfig

// optional int32 game_id = 1;
bool PrivateRoomInfoConfig::has_game_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void PrivateRoomInfoConfig::set_has_game_id() {
  _has_bits_[0] |= 0x00000002u;
}
void PrivateRoomInfoConfig::clear_has_game_id() {
  _has_bits_[0] &= ~0x00000002u;
}
void PrivateRoomInfoConfig::clear_game_id() {
  game_id_ = 0;
  clear_has_game_id();
}
::google::protobuf::int32 PrivateRoomInfoConfig::game_id() const {
  // @@protoc_insertion_point(field_get:PrivateRoomInfoConfig.game_id)
  return game_id_;
}
void PrivateRoomInfoConfig::set_game_id(::google::protobuf::int32 value) {
  set_has_game_id();
  game_id_ = value;
  // @@protoc_insertion_point(field_set:PrivateRoomInfoConfig.game_id)
}

// optional int32 first_game_type = 2;
bool PrivateRoomInfoConfig::has_first_game_type() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void PrivateRoomInfoConfig::set_has_first_game_type() {
  _has_bits_[0] |= 0x00000004u;
}
void PrivateRoomInfoConfig::clear_has_first_game_type() {
  _has_bits_[0] &= ~0x00000004u;
}
void PrivateRoomInfoConfig::clear_first_game_type() {
  first_game_type_ = 0;
  clear_has_first_game_type();
}
::google::protobuf::int32 PrivateRoomInfoConfig::first_game_type() const {
  // @@protoc_insertion_point(field_get:PrivateRoomInfoConfig.first_game_type)
  return first_game_type_;
}
void PrivateRoomInfoConfig::set_first_game_type(::google::protobuf::int32 value) {
  set_has_first_game_type();
  first_game_type_ = value;
  // @@protoc_insertion_point(field_set:PrivateRoomInfoConfig.first_game_type)
}

// optional string room_lua_cfg = 3;
bool PrivateRoomInfoConfig::has_room_lua_cfg() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void PrivateRoomInfoConfig::set_has_room_lua_cfg() {
  _has_bits_[0] |= 0x00000001u;
}
void PrivateRoomInfoConfig::clear_has_room_lua_cfg() {
  _has_bits_[0] &= ~0x00000001u;
}
void PrivateRoomInfoConfig::clear_room_lua_cfg() {
  room_lua_cfg_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_room_lua_cfg();
}
const ::std::string& PrivateRoomInfoConfig::room_lua_cfg() const {
  // @@protoc_insertion_point(field_get:PrivateRoomInfoConfig.room_lua_cfg)
  return room_lua_cfg_.GetNoArena();
}
void PrivateRoomInfoConfig::set_room_lua_cfg(const ::std::string& value) {
  set_has_room_lua_cfg();
  room_lua_cfg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:PrivateRoomInfoConfig.room_lua_cfg)
}
#if LANG_CXX11
void PrivateRoomInfoConfig::set_room_lua_cfg(::std::string&& value) {
  set_has_room_lua_cfg();
  room_lua_cfg_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:PrivateRoomInfoConfig.room_lua_cfg)
}
#endif
void PrivateRoomInfoConfig::set_room_lua_cfg(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_room_lua_cfg();
  room_lua_cfg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:PrivateRoomInfoConfig.room_lua_cfg)
}
void PrivateRoomInfoConfig::set_room_lua_cfg(const char* value, size_t size) {
  set_has_room_lua_cfg();
  room_lua_cfg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:PrivateRoomInfoConfig.room_lua_cfg)
}
::std::string* PrivateRoomInfoConfig::mutable_room_lua_cfg() {
  set_has_room_lua_cfg();
  // @@protoc_insertion_point(field_mutable:PrivateRoomInfoConfig.room_lua_cfg)
  return room_lua_cfg_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* PrivateRoomInfoConfig::release_room_lua_cfg() {
  // @@protoc_insertion_point(field_release:PrivateRoomInfoConfig.room_lua_cfg)
  clear_has_room_lua_cfg();
  return room_lua_cfg_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void PrivateRoomInfoConfig::set_allocated_room_lua_cfg(::std::string* room_lua_cfg) {
  if (room_lua_cfg != NULL) {
    set_has_room_lua_cfg();
  } else {
    clear_has_room_lua_cfg();
  }
  room_lua_cfg_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), room_lua_cfg);
  // @@protoc_insertion_point(field_set_allocated:PrivateRoomInfoConfig.room_lua_cfg)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PrivateRoomListConfig::kInfoFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PrivateRoomListConfig::PrivateRoomListConfig()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_config_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:PrivateRoomListConfig)
}
PrivateRoomListConfig::PrivateRoomListConfig(const PrivateRoomListConfig& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      info_(from.info_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:PrivateRoomListConfig)
}

void PrivateRoomListConfig::SharedCtor() {
  _cached_size_ = 0;
}

PrivateRoomListConfig::~PrivateRoomListConfig() {
  // @@protoc_insertion_point(destructor:PrivateRoomListConfig)
  SharedDtor();
}

void PrivateRoomListConfig::SharedDtor() {
}

void PrivateRoomListConfig::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PrivateRoomListConfig::descriptor() {
  protobuf_config_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_config_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const PrivateRoomListConfig& PrivateRoomListConfig::default_instance() {
  protobuf_config_2eproto::InitDefaults();
  return *internal_default_instance();
}

PrivateRoomListConfig* PrivateRoomListConfig::New(::google::protobuf::Arena* arena) const {
  PrivateRoomListConfig* n = new PrivateRoomListConfig;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void PrivateRoomListConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:PrivateRoomListConfig)
  info_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool PrivateRoomListConfig::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:PrivateRoomListConfig)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .PrivateRoomInfoConfig info = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_info()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:PrivateRoomListConfig)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:PrivateRoomListConfig)
  return false;
#undef DO_
}

void PrivateRoomListConfig::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:PrivateRoomListConfig)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .PrivateRoomInfoConfig info = 1;
  for (unsigned int i = 0, n = this->info_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->info(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:PrivateRoomListConfig)
}

::google::protobuf::uint8* PrivateRoomListConfig::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:PrivateRoomListConfig)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .PrivateRoomInfoConfig info = 1;
  for (unsigned int i = 0, n = this->info_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, this->info(i), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:PrivateRoomListConfig)
  return target;
}

size_t PrivateRoomListConfig::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:PrivateRoomListConfig)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // repeated .PrivateRoomInfoConfig info = 1;
  {
    unsigned int count = this->info_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->info(i));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PrivateRoomListConfig::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:PrivateRoomListConfig)
  GOOGLE_DCHECK_NE(&from, this);
  const PrivateRoomListConfig* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const PrivateRoomListConfig>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:PrivateRoomListConfig)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:PrivateRoomListConfig)
    MergeFrom(*source);
  }
}

void PrivateRoomListConfig::MergeFrom(const PrivateRoomListConfig& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:PrivateRoomListConfig)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  info_.MergeFrom(from.info_);
}

void PrivateRoomListConfig::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:PrivateRoomListConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PrivateRoomListConfig::CopyFrom(const PrivateRoomListConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:PrivateRoomListConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PrivateRoomListConfig::IsInitialized() const {
  return true;
}

void PrivateRoomListConfig::Swap(PrivateRoomListConfig* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PrivateRoomListConfig::InternalSwap(PrivateRoomListConfig* other) {
  info_.InternalSwap(&other->info_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata PrivateRoomListConfig::GetMetadata() const {
  protobuf_config_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_config_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// PrivateRoomListConfig

// repeated .PrivateRoomInfoConfig info = 1;
int PrivateRoomListConfig::info_size() const {
  return info_.size();
}
void PrivateRoomListConfig::clear_info() {
  info_.Clear();
}
const ::PrivateRoomInfoConfig& PrivateRoomListConfig::info(int index) const {
  // @@protoc_insertion_point(field_get:PrivateRoomListConfig.info)
  return info_.Get(index);
}
::PrivateRoomInfoConfig* PrivateRoomListConfig::mutable_info(int index) {
  // @@protoc_insertion_point(field_mutable:PrivateRoomListConfig.info)
  return info_.Mutable(index);
}
::PrivateRoomInfoConfig* PrivateRoomListConfig::add_info() {
  // @@protoc_insertion_point(field_add:PrivateRoomListConfig.info)
  return info_.Add();
}
::google::protobuf::RepeatedPtrField< ::PrivateRoomInfoConfig >*
PrivateRoomListConfig::mutable_info() {
  // @@protoc_insertion_point(field_mutable_list:PrivateRoomListConfig.info)
  return &info_;
}
const ::google::protobuf::RepeatedPtrField< ::PrivateRoomInfoConfig >&
PrivateRoomListConfig::info() const {
  // @@protoc_insertion_point(field_list:PrivateRoomListConfig.info)
  return info_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)
