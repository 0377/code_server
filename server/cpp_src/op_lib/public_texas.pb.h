// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: public_texas.proto

#ifndef PROTOBUF_public_5ftexas_2eproto__INCLUDED
#define PROTOBUF_public_5ftexas_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3003000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3003000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
class CS_TexasEnterTable;
class CS_TexasEnterTableDefaultTypeInternal;
extern CS_TexasEnterTableDefaultTypeInternal _CS_TexasEnterTable_default_instance_;
class CS_TexasGiveTips;
class CS_TexasGiveTipsDefaultTypeInternal;
extern CS_TexasGiveTipsDefaultTypeInternal _CS_TexasGiveTips_default_instance_;
class CS_TexasLeaveTable;
class CS_TexasLeaveTableDefaultTypeInternal;
extern CS_TexasLeaveTableDefaultTypeInternal _CS_TexasLeaveTable_default_instance_;
class CS_TexasShowCards;
class CS_TexasShowCardsDefaultTypeInternal;
extern CS_TexasShowCardsDefaultTypeInternal _CS_TexasShowCards_default_instance_;
class CS_TexasUserAction;
class CS_TexasUserActionDefaultTypeInternal;
extern CS_TexasUserActionDefaultTypeInternal _CS_TexasUserAction_default_instance_;
class SC_TexasError;
class SC_TexasErrorDefaultTypeInternal;
extern SC_TexasErrorDefaultTypeInternal _SC_TexasError_default_instance_;
class SC_TexasForceLeave;
class SC_TexasForceLeaveDefaultTypeInternal;
extern SC_TexasForceLeaveDefaultTypeInternal _SC_TexasForceLeave_default_instance_;
class SC_TexasGiveTips;
class SC_TexasGiveTipsDefaultTypeInternal;
extern SC_TexasGiveTipsDefaultTypeInternal _SC_TexasGiveTips_default_instance_;
class SC_TexasNewUser;
class SC_TexasNewUserDefaultTypeInternal;
extern SC_TexasNewUserDefaultTypeInternal _SC_TexasNewUser_default_instance_;
class SC_TexasSendPublicCards;
class SC_TexasSendPublicCardsDefaultTypeInternal;
extern SC_TexasSendPublicCardsDefaultTypeInternal _SC_TexasSendPublicCards_default_instance_;
class SC_TexasSendUserCards;
class SC_TexasSendUserCardsDefaultTypeInternal;
extern SC_TexasSendUserCardsDefaultTypeInternal _SC_TexasSendUserCards_default_instance_;
class SC_TexasShowCards;
class SC_TexasShowCardsDefaultTypeInternal;
extern SC_TexasShowCardsDefaultTypeInternal _SC_TexasShowCards_default_instance_;
class SC_TexasShowCardsPermission;
class SC_TexasShowCardsPermissionDefaultTypeInternal;
extern SC_TexasShowCardsPermissionDefaultTypeInternal _SC_TexasShowCardsPermission_default_instance_;
class SC_TexasTableEnd;
class SC_TexasTableEndDefaultTypeInternal;
extern SC_TexasTableEndDefaultTypeInternal _SC_TexasTableEnd_default_instance_;
class SC_TexasTableInfo;
class SC_TexasTableInfoDefaultTypeInternal;
extern SC_TexasTableInfoDefaultTypeInternal _SC_TexasTableInfo_default_instance_;
class SC_TexasUserAction;
class SC_TexasUserActionDefaultTypeInternal;
extern SC_TexasUserActionDefaultTypeInternal _SC_TexasUserAction_default_instance_;
class SC_TexasUserLeave;
class SC_TexasUserLeaveDefaultTypeInternal;
extern SC_TexasUserLeaveDefaultTypeInternal _SC_TexasUserLeave_default_instance_;
class TexasTable;
class TexasTableDefaultTypeInternal;
extern TexasTableDefaultTypeInternal _TexasTable_default_instance_;
class UserInfo;
class UserInfoDefaultTypeInternal;
extern UserInfoDefaultTypeInternal _UserInfo_default_instance_;

namespace protobuf_public_5ftexas_2eproto {
// Internal implementation detail -- do not call these.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[];
  static const ::google::protobuf::uint32 offsets[];
  static void InitDefaultsImpl();
  static void Shutdown();
};
void AddDescriptors();
void InitDefaults();
}  // namespace protobuf_public_5ftexas_2eproto

enum SC_TexasTableInfo_MsgID {
  SC_TexasTableInfo_MsgID_ID = 25000
};
bool SC_TexasTableInfo_MsgID_IsValid(int value);
const SC_TexasTableInfo_MsgID SC_TexasTableInfo_MsgID_MsgID_MIN = SC_TexasTableInfo_MsgID_ID;
const SC_TexasTableInfo_MsgID SC_TexasTableInfo_MsgID_MsgID_MAX = SC_TexasTableInfo_MsgID_ID;
const int SC_TexasTableInfo_MsgID_MsgID_ARRAYSIZE = SC_TexasTableInfo_MsgID_MsgID_MAX + 1;

const ::google::protobuf::EnumDescriptor* SC_TexasTableInfo_MsgID_descriptor();
inline const ::std::string& SC_TexasTableInfo_MsgID_Name(SC_TexasTableInfo_MsgID value) {
  return ::google::protobuf::internal::NameOfEnum(
    SC_TexasTableInfo_MsgID_descriptor(), value);
}
inline bool SC_TexasTableInfo_MsgID_Parse(
    const ::std::string& name, SC_TexasTableInfo_MsgID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<SC_TexasTableInfo_MsgID>(
    SC_TexasTableInfo_MsgID_descriptor(), name, value);
}
enum SC_TexasSendUserCards_MsgID {
  SC_TexasSendUserCards_MsgID_ID = 25002
};
bool SC_TexasSendUserCards_MsgID_IsValid(int value);
const SC_TexasSendUserCards_MsgID SC_TexasSendUserCards_MsgID_MsgID_MIN = SC_TexasSendUserCards_MsgID_ID;
const SC_TexasSendUserCards_MsgID SC_TexasSendUserCards_MsgID_MsgID_MAX = SC_TexasSendUserCards_MsgID_ID;
const int SC_TexasSendUserCards_MsgID_MsgID_ARRAYSIZE = SC_TexasSendUserCards_MsgID_MsgID_MAX + 1;

const ::google::protobuf::EnumDescriptor* SC_TexasSendUserCards_MsgID_descriptor();
inline const ::std::string& SC_TexasSendUserCards_MsgID_Name(SC_TexasSendUserCards_MsgID value) {
  return ::google::protobuf::internal::NameOfEnum(
    SC_TexasSendUserCards_MsgID_descriptor(), value);
}
inline bool SC_TexasSendUserCards_MsgID_Parse(
    const ::std::string& name, SC_TexasSendUserCards_MsgID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<SC_TexasSendUserCards_MsgID>(
    SC_TexasSendUserCards_MsgID_descriptor(), name, value);
}
enum SC_TexasSendPublicCards_MsgID {
  SC_TexasSendPublicCards_MsgID_ID = 25001
};
bool SC_TexasSendPublicCards_MsgID_IsValid(int value);
const SC_TexasSendPublicCards_MsgID SC_TexasSendPublicCards_MsgID_MsgID_MIN = SC_TexasSendPublicCards_MsgID_ID;
const SC_TexasSendPublicCards_MsgID SC_TexasSendPublicCards_MsgID_MsgID_MAX = SC_TexasSendPublicCards_MsgID_ID;
const int SC_TexasSendPublicCards_MsgID_MsgID_ARRAYSIZE = SC_TexasSendPublicCards_MsgID_MsgID_MAX + 1;

const ::google::protobuf::EnumDescriptor* SC_TexasSendPublicCards_MsgID_descriptor();
inline const ::std::string& SC_TexasSendPublicCards_MsgID_Name(SC_TexasSendPublicCards_MsgID value) {
  return ::google::protobuf::internal::NameOfEnum(
    SC_TexasSendPublicCards_MsgID_descriptor(), value);
}
inline bool SC_TexasSendPublicCards_MsgID_Parse(
    const ::std::string& name, SC_TexasSendPublicCards_MsgID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<SC_TexasSendPublicCards_MsgID>(
    SC_TexasSendPublicCards_MsgID_descriptor(), name, value);
}
enum SC_TexasUserAction_MsgID {
  SC_TexasUserAction_MsgID_ID = 25003
};
bool SC_TexasUserAction_MsgID_IsValid(int value);
const SC_TexasUserAction_MsgID SC_TexasUserAction_MsgID_MsgID_MIN = SC_TexasUserAction_MsgID_ID;
const SC_TexasUserAction_MsgID SC_TexasUserAction_MsgID_MsgID_MAX = SC_TexasUserAction_MsgID_ID;
const int SC_TexasUserAction_MsgID_MsgID_ARRAYSIZE = SC_TexasUserAction_MsgID_MsgID_MAX + 1;

const ::google::protobuf::EnumDescriptor* SC_TexasUserAction_MsgID_descriptor();
inline const ::std::string& SC_TexasUserAction_MsgID_Name(SC_TexasUserAction_MsgID value) {
  return ::google::protobuf::internal::NameOfEnum(
    SC_TexasUserAction_MsgID_descriptor(), value);
}
inline bool SC_TexasUserAction_MsgID_Parse(
    const ::std::string& name, SC_TexasUserAction_MsgID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<SC_TexasUserAction_MsgID>(
    SC_TexasUserAction_MsgID_descriptor(), name, value);
}
enum SC_TexasNewUser_MsgID {
  SC_TexasNewUser_MsgID_ID = 25004
};
bool SC_TexasNewUser_MsgID_IsValid(int value);
const SC_TexasNewUser_MsgID SC_TexasNewUser_MsgID_MsgID_MIN = SC_TexasNewUser_MsgID_ID;
const SC_TexasNewUser_MsgID SC_TexasNewUser_MsgID_MsgID_MAX = SC_TexasNewUser_MsgID_ID;
const int SC_TexasNewUser_MsgID_MsgID_ARRAYSIZE = SC_TexasNewUser_MsgID_MsgID_MAX + 1;

const ::google::protobuf::EnumDescriptor* SC_TexasNewUser_MsgID_descriptor();
inline const ::std::string& SC_TexasNewUser_MsgID_Name(SC_TexasNewUser_MsgID value) {
  return ::google::protobuf::internal::NameOfEnum(
    SC_TexasNewUser_MsgID_descriptor(), value);
}
inline bool SC_TexasNewUser_MsgID_Parse(
    const ::std::string& name, SC_TexasNewUser_MsgID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<SC_TexasNewUser_MsgID>(
    SC_TexasNewUser_MsgID_descriptor(), name, value);
}
enum SC_TexasUserLeave_MsgID {
  SC_TexasUserLeave_MsgID_ID = 25005
};
bool SC_TexasUserLeave_MsgID_IsValid(int value);
const SC_TexasUserLeave_MsgID SC_TexasUserLeave_MsgID_MsgID_MIN = SC_TexasUserLeave_MsgID_ID;
const SC_TexasUserLeave_MsgID SC_TexasUserLeave_MsgID_MsgID_MAX = SC_TexasUserLeave_MsgID_ID;
const int SC_TexasUserLeave_MsgID_MsgID_ARRAYSIZE = SC_TexasUserLeave_MsgID_MsgID_MAX + 1;

const ::google::protobuf::EnumDescriptor* SC_TexasUserLeave_MsgID_descriptor();
inline const ::std::string& SC_TexasUserLeave_MsgID_Name(SC_TexasUserLeave_MsgID value) {
  return ::google::protobuf::internal::NameOfEnum(
    SC_TexasUserLeave_MsgID_descriptor(), value);
}
inline bool SC_TexasUserLeave_MsgID_Parse(
    const ::std::string& name, SC_TexasUserLeave_MsgID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<SC_TexasUserLeave_MsgID>(
    SC_TexasUserLeave_MsgID_descriptor(), name, value);
}
enum SC_TexasForceLeave_MsgID {
  SC_TexasForceLeave_MsgID_ID = 25007
};
bool SC_TexasForceLeave_MsgID_IsValid(int value);
const SC_TexasForceLeave_MsgID SC_TexasForceLeave_MsgID_MsgID_MIN = SC_TexasForceLeave_MsgID_ID;
const SC_TexasForceLeave_MsgID SC_TexasForceLeave_MsgID_MsgID_MAX = SC_TexasForceLeave_MsgID_ID;
const int SC_TexasForceLeave_MsgID_MsgID_ARRAYSIZE = SC_TexasForceLeave_MsgID_MsgID_MAX + 1;

const ::google::protobuf::EnumDescriptor* SC_TexasForceLeave_MsgID_descriptor();
inline const ::std::string& SC_TexasForceLeave_MsgID_Name(SC_TexasForceLeave_MsgID value) {
  return ::google::protobuf::internal::NameOfEnum(
    SC_TexasForceLeave_MsgID_descriptor(), value);
}
inline bool SC_TexasForceLeave_MsgID_Parse(
    const ::std::string& name, SC_TexasForceLeave_MsgID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<SC_TexasForceLeave_MsgID>(
    SC_TexasForceLeave_MsgID_descriptor(), name, value);
}
enum SC_TexasTableEnd_MsgID {
  SC_TexasTableEnd_MsgID_ID = 25006
};
bool SC_TexasTableEnd_MsgID_IsValid(int value);
const SC_TexasTableEnd_MsgID SC_TexasTableEnd_MsgID_MsgID_MIN = SC_TexasTableEnd_MsgID_ID;
const SC_TexasTableEnd_MsgID SC_TexasTableEnd_MsgID_MsgID_MAX = SC_TexasTableEnd_MsgID_ID;
const int SC_TexasTableEnd_MsgID_MsgID_ARRAYSIZE = SC_TexasTableEnd_MsgID_MsgID_MAX + 1;

const ::google::protobuf::EnumDescriptor* SC_TexasTableEnd_MsgID_descriptor();
inline const ::std::string& SC_TexasTableEnd_MsgID_Name(SC_TexasTableEnd_MsgID value) {
  return ::google::protobuf::internal::NameOfEnum(
    SC_TexasTableEnd_MsgID_descriptor(), value);
}
inline bool SC_TexasTableEnd_MsgID_Parse(
    const ::std::string& name, SC_TexasTableEnd_MsgID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<SC_TexasTableEnd_MsgID>(
    SC_TexasTableEnd_MsgID_descriptor(), name, value);
}
enum SC_TexasGiveTips_MsgID {
  SC_TexasGiveTips_MsgID_ID = 25008
};
bool SC_TexasGiveTips_MsgID_IsValid(int value);
const SC_TexasGiveTips_MsgID SC_TexasGiveTips_MsgID_MsgID_MIN = SC_TexasGiveTips_MsgID_ID;
const SC_TexasGiveTips_MsgID SC_TexasGiveTips_MsgID_MsgID_MAX = SC_TexasGiveTips_MsgID_ID;
const int SC_TexasGiveTips_MsgID_MsgID_ARRAYSIZE = SC_TexasGiveTips_MsgID_MsgID_MAX + 1;

const ::google::protobuf::EnumDescriptor* SC_TexasGiveTips_MsgID_descriptor();
inline const ::std::string& SC_TexasGiveTips_MsgID_Name(SC_TexasGiveTips_MsgID value) {
  return ::google::protobuf::internal::NameOfEnum(
    SC_TexasGiveTips_MsgID_descriptor(), value);
}
inline bool SC_TexasGiveTips_MsgID_Parse(
    const ::std::string& name, SC_TexasGiveTips_MsgID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<SC_TexasGiveTips_MsgID>(
    SC_TexasGiveTips_MsgID_descriptor(), name, value);
}
enum SC_TexasShowCards_MsgID {
  SC_TexasShowCards_MsgID_ID = 25009
};
bool SC_TexasShowCards_MsgID_IsValid(int value);
const SC_TexasShowCards_MsgID SC_TexasShowCards_MsgID_MsgID_MIN = SC_TexasShowCards_MsgID_ID;
const SC_TexasShowCards_MsgID SC_TexasShowCards_MsgID_MsgID_MAX = SC_TexasShowCards_MsgID_ID;
const int SC_TexasShowCards_MsgID_MsgID_ARRAYSIZE = SC_TexasShowCards_MsgID_MsgID_MAX + 1;

const ::google::protobuf::EnumDescriptor* SC_TexasShowCards_MsgID_descriptor();
inline const ::std::string& SC_TexasShowCards_MsgID_Name(SC_TexasShowCards_MsgID value) {
  return ::google::protobuf::internal::NameOfEnum(
    SC_TexasShowCards_MsgID_descriptor(), value);
}
inline bool SC_TexasShowCards_MsgID_Parse(
    const ::std::string& name, SC_TexasShowCards_MsgID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<SC_TexasShowCards_MsgID>(
    SC_TexasShowCards_MsgID_descriptor(), name, value);
}
enum SC_TexasShowCardsPermission_MsgID {
  SC_TexasShowCardsPermission_MsgID_ID = 25010
};
bool SC_TexasShowCardsPermission_MsgID_IsValid(int value);
const SC_TexasShowCardsPermission_MsgID SC_TexasShowCardsPermission_MsgID_MsgID_MIN = SC_TexasShowCardsPermission_MsgID_ID;
const SC_TexasShowCardsPermission_MsgID SC_TexasShowCardsPermission_MsgID_MsgID_MAX = SC_TexasShowCardsPermission_MsgID_ID;
const int SC_TexasShowCardsPermission_MsgID_MsgID_ARRAYSIZE = SC_TexasShowCardsPermission_MsgID_MsgID_MAX + 1;

const ::google::protobuf::EnumDescriptor* SC_TexasShowCardsPermission_MsgID_descriptor();
inline const ::std::string& SC_TexasShowCardsPermission_MsgID_Name(SC_TexasShowCardsPermission_MsgID value) {
  return ::google::protobuf::internal::NameOfEnum(
    SC_TexasShowCardsPermission_MsgID_descriptor(), value);
}
inline bool SC_TexasShowCardsPermission_MsgID_Parse(
    const ::std::string& name, SC_TexasShowCardsPermission_MsgID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<SC_TexasShowCardsPermission_MsgID>(
    SC_TexasShowCardsPermission_MsgID_descriptor(), name, value);
}
enum SC_TexasError_MsgID {
  SC_TexasError_MsgID_ID = 25999
};
bool SC_TexasError_MsgID_IsValid(int value);
const SC_TexasError_MsgID SC_TexasError_MsgID_MsgID_MIN = SC_TexasError_MsgID_ID;
const SC_TexasError_MsgID SC_TexasError_MsgID_MsgID_MAX = SC_TexasError_MsgID_ID;
const int SC_TexasError_MsgID_MsgID_ARRAYSIZE = SC_TexasError_MsgID_MsgID_MAX + 1;

const ::google::protobuf::EnumDescriptor* SC_TexasError_MsgID_descriptor();
inline const ::std::string& SC_TexasError_MsgID_Name(SC_TexasError_MsgID value) {
  return ::google::protobuf::internal::NameOfEnum(
    SC_TexasError_MsgID_descriptor(), value);
}
inline bool SC_TexasError_MsgID_Parse(
    const ::std::string& name, SC_TexasError_MsgID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<SC_TexasError_MsgID>(
    SC_TexasError_MsgID_descriptor(), name, value);
}
enum CS_TexasUserAction_MsgID {
  CS_TexasUserAction_MsgID_ID = 25100
};
bool CS_TexasUserAction_MsgID_IsValid(int value);
const CS_TexasUserAction_MsgID CS_TexasUserAction_MsgID_MsgID_MIN = CS_TexasUserAction_MsgID_ID;
const CS_TexasUserAction_MsgID CS_TexasUserAction_MsgID_MsgID_MAX = CS_TexasUserAction_MsgID_ID;
const int CS_TexasUserAction_MsgID_MsgID_ARRAYSIZE = CS_TexasUserAction_MsgID_MsgID_MAX + 1;

const ::google::protobuf::EnumDescriptor* CS_TexasUserAction_MsgID_descriptor();
inline const ::std::string& CS_TexasUserAction_MsgID_Name(CS_TexasUserAction_MsgID value) {
  return ::google::protobuf::internal::NameOfEnum(
    CS_TexasUserAction_MsgID_descriptor(), value);
}
inline bool CS_TexasUserAction_MsgID_Parse(
    const ::std::string& name, CS_TexasUserAction_MsgID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<CS_TexasUserAction_MsgID>(
    CS_TexasUserAction_MsgID_descriptor(), name, value);
}
enum CS_TexasEnterTable_MsgID {
  CS_TexasEnterTable_MsgID_ID = 25101
};
bool CS_TexasEnterTable_MsgID_IsValid(int value);
const CS_TexasEnterTable_MsgID CS_TexasEnterTable_MsgID_MsgID_MIN = CS_TexasEnterTable_MsgID_ID;
const CS_TexasEnterTable_MsgID CS_TexasEnterTable_MsgID_MsgID_MAX = CS_TexasEnterTable_MsgID_ID;
const int CS_TexasEnterTable_MsgID_MsgID_ARRAYSIZE = CS_TexasEnterTable_MsgID_MsgID_MAX + 1;

const ::google::protobuf::EnumDescriptor* CS_TexasEnterTable_MsgID_descriptor();
inline const ::std::string& CS_TexasEnterTable_MsgID_Name(CS_TexasEnterTable_MsgID value) {
  return ::google::protobuf::internal::NameOfEnum(
    CS_TexasEnterTable_MsgID_descriptor(), value);
}
inline bool CS_TexasEnterTable_MsgID_Parse(
    const ::std::string& name, CS_TexasEnterTable_MsgID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<CS_TexasEnterTable_MsgID>(
    CS_TexasEnterTable_MsgID_descriptor(), name, value);
}
enum CS_TexasLeaveTable_MsgID {
  CS_TexasLeaveTable_MsgID_ID = 25102
};
bool CS_TexasLeaveTable_MsgID_IsValid(int value);
const CS_TexasLeaveTable_MsgID CS_TexasLeaveTable_MsgID_MsgID_MIN = CS_TexasLeaveTable_MsgID_ID;
const CS_TexasLeaveTable_MsgID CS_TexasLeaveTable_MsgID_MsgID_MAX = CS_TexasLeaveTable_MsgID_ID;
const int CS_TexasLeaveTable_MsgID_MsgID_ARRAYSIZE = CS_TexasLeaveTable_MsgID_MsgID_MAX + 1;

const ::google::protobuf::EnumDescriptor* CS_TexasLeaveTable_MsgID_descriptor();
inline const ::std::string& CS_TexasLeaveTable_MsgID_Name(CS_TexasLeaveTable_MsgID value) {
  return ::google::protobuf::internal::NameOfEnum(
    CS_TexasLeaveTable_MsgID_descriptor(), value);
}
inline bool CS_TexasLeaveTable_MsgID_Parse(
    const ::std::string& name, CS_TexasLeaveTable_MsgID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<CS_TexasLeaveTable_MsgID>(
    CS_TexasLeaveTable_MsgID_descriptor(), name, value);
}
enum CS_TexasGiveTips_MsgID {
  CS_TexasGiveTips_MsgID_ID = 25103
};
bool CS_TexasGiveTips_MsgID_IsValid(int value);
const CS_TexasGiveTips_MsgID CS_TexasGiveTips_MsgID_MsgID_MIN = CS_TexasGiveTips_MsgID_ID;
const CS_TexasGiveTips_MsgID CS_TexasGiveTips_MsgID_MsgID_MAX = CS_TexasGiveTips_MsgID_ID;
const int CS_TexasGiveTips_MsgID_MsgID_ARRAYSIZE = CS_TexasGiveTips_MsgID_MsgID_MAX + 1;

const ::google::protobuf::EnumDescriptor* CS_TexasGiveTips_MsgID_descriptor();
inline const ::std::string& CS_TexasGiveTips_MsgID_Name(CS_TexasGiveTips_MsgID value) {
  return ::google::protobuf::internal::NameOfEnum(
    CS_TexasGiveTips_MsgID_descriptor(), value);
}
inline bool CS_TexasGiveTips_MsgID_Parse(
    const ::std::string& name, CS_TexasGiveTips_MsgID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<CS_TexasGiveTips_MsgID>(
    CS_TexasGiveTips_MsgID_descriptor(), name, value);
}
enum CS_TexasShowCards_MsgID {
  CS_TexasShowCards_MsgID_ID = 25104
};
bool CS_TexasShowCards_MsgID_IsValid(int value);
const CS_TexasShowCards_MsgID CS_TexasShowCards_MsgID_MsgID_MIN = CS_TexasShowCards_MsgID_ID;
const CS_TexasShowCards_MsgID CS_TexasShowCards_MsgID_MsgID_MAX = CS_TexasShowCards_MsgID_ID;
const int CS_TexasShowCards_MsgID_MsgID_ARRAYSIZE = CS_TexasShowCards_MsgID_MsgID_MAX + 1;

const ::google::protobuf::EnumDescriptor* CS_TexasShowCards_MsgID_descriptor();
inline const ::std::string& CS_TexasShowCards_MsgID_Name(CS_TexasShowCards_MsgID value) {
  return ::google::protobuf::internal::NameOfEnum(
    CS_TexasShowCards_MsgID_descriptor(), value);
}
inline bool CS_TexasShowCards_MsgID_Parse(
    const ::std::string& name, CS_TexasShowCards_MsgID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<CS_TexasShowCards_MsgID>(
    CS_TexasShowCards_MsgID_descriptor(), name, value);
}
enum TexasCardsType {
  CT_HIGH_CARD = 1,
  CT_ONE_PAIR = 2,
  CT_TWO_PAIRS = 3,
  CT_THREE_OF_A_KIND = 4,
  CT_STRAIGHT = 5,
  CT_FLUSH = 6,
  CT_FULL_HOUSE = 7,
  CT_FOUR_OF_KIND = 8,
  CT_STRAIT_FLUSH = 9,
  CT_ROYAL_FLUSH = 10
};
bool TexasCardsType_IsValid(int value);
const TexasCardsType TexasCardsType_MIN = CT_HIGH_CARD;
const TexasCardsType TexasCardsType_MAX = CT_ROYAL_FLUSH;
const int TexasCardsType_ARRAYSIZE = TexasCardsType_MAX + 1;

const ::google::protobuf::EnumDescriptor* TexasCardsType_descriptor();
inline const ::std::string& TexasCardsType_Name(TexasCardsType value) {
  return ::google::protobuf::internal::NameOfEnum(
    TexasCardsType_descriptor(), value);
}
inline bool TexasCardsType_Parse(
    const ::std::string& name, TexasCardsType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<TexasCardsType>(
    TexasCardsType_descriptor(), name, value);
}
enum TexasAction {
  ACT_CALL = 1,
  ACT_RAISE = 2,
  ACT_CHECK = 3,
  ACT_FOLD = 4,
  ACT_ALL_IN = 5,
  ACT_NORMAL = 6,
  ACT_THINK = 7,
  ACT_WAITING = 8
};
bool TexasAction_IsValid(int value);
const TexasAction TexasAction_MIN = ACT_CALL;
const TexasAction TexasAction_MAX = ACT_WAITING;
const int TexasAction_ARRAYSIZE = TexasAction_MAX + 1;

const ::google::protobuf::EnumDescriptor* TexasAction_descriptor();
inline const ::std::string& TexasAction_Name(TexasAction value) {
  return ::google::protobuf::internal::NameOfEnum(
    TexasAction_descriptor(), value);
}
inline bool TexasAction_Parse(
    const ::std::string& name, TexasAction* value) {
  return ::google::protobuf::internal::ParseNamedEnum<TexasAction>(
    TexasAction_descriptor(), name, value);
}
enum TexasStatus {
  STATUS_WAITING = 1,
  STATUS_PRE_FLOP = 2,
  STATUS_FLOP = 3,
  STATUS_TURN = 4,
  STATUS_RIVER = 5,
  STATUS_SHOW_DOWN = 6
};
bool TexasStatus_IsValid(int value);
const TexasStatus TexasStatus_MIN = STATUS_WAITING;
const TexasStatus TexasStatus_MAX = STATUS_SHOW_DOWN;
const int TexasStatus_ARRAYSIZE = TexasStatus_MAX + 1;

const ::google::protobuf::EnumDescriptor* TexasStatus_descriptor();
inline const ::std::string& TexasStatus_Name(TexasStatus value) {
  return ::google::protobuf::internal::NameOfEnum(
    TexasStatus_descriptor(), value);
}
inline bool TexasStatus_Parse(
    const ::std::string& name, TexasStatus* value) {
  return ::google::protobuf::internal::ParseNamedEnum<TexasStatus>(
    TexasStatus_descriptor(), name, value);
}
enum TexasUserPosition {
  POSITION_LITTLE_BLIND = 1,
  POSITION_BIG_BLIND = 2,
  POSITION_BOTTON = 3,
  POSITION_NORMAL = 4
};
bool TexasUserPosition_IsValid(int value);
const TexasUserPosition TexasUserPosition_MIN = POSITION_LITTLE_BLIND;
const TexasUserPosition TexasUserPosition_MAX = POSITION_NORMAL;
const int TexasUserPosition_ARRAYSIZE = TexasUserPosition_MAX + 1;

const ::google::protobuf::EnumDescriptor* TexasUserPosition_descriptor();
inline const ::std::string& TexasUserPosition_Name(TexasUserPosition value) {
  return ::google::protobuf::internal::NameOfEnum(
    TexasUserPosition_descriptor(), value);
}
inline bool TexasUserPosition_Parse(
    const ::std::string& name, TexasUserPosition* value) {
  return ::google::protobuf::internal::ParseNamedEnum<TexasUserPosition>(
    TexasUserPosition_descriptor(), name, value);
}
enum TexasError {
  CS_ERR_MONEY = 1,
  CS_ERR_STATUS = 2
};
bool TexasError_IsValid(int value);
const TexasError TexasError_MIN = CS_ERR_MONEY;
const TexasError TexasError_MAX = CS_ERR_STATUS;
const int TexasError_ARRAYSIZE = TexasError_MAX + 1;

const ::google::protobuf::EnumDescriptor* TexasError_descriptor();
inline const ::std::string& TexasError_Name(TexasError value) {
  return ::google::protobuf::internal::NameOfEnum(
    TexasError_descriptor(), value);
}
inline bool TexasError_Parse(
    const ::std::string& name, TexasError* value) {
  return ::google::protobuf::internal::ParseNamedEnum<TexasError>(
    TexasError_descriptor(), name, value);
}
// ===================================================================

class UserInfo : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:UserInfo) */ {
 public:
  UserInfo();
  virtual ~UserInfo();

  UserInfo(const UserInfo& from);

  inline UserInfo& operator=(const UserInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const UserInfo& default_instance();

  static inline const UserInfo* internal_default_instance() {
    return reinterpret_cast<const UserInfo*>(
               &_UserInfo_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    0;

  void Swap(UserInfo* other);

  // implements Message ----------------------------------------------

  inline UserInfo* New() const PROTOBUF_FINAL { return New(NULL); }

  UserInfo* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const UserInfo& from);
  void MergeFrom(const UserInfo& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(UserInfo* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated int32 cards = 11;
  int cards_size() const;
  void clear_cards();
  static const int kCardsFieldNumber = 11;
  ::google::protobuf::int32 cards(int index) const;
  void set_cards(int index, ::google::protobuf::int32 value);
  void add_cards(::google::protobuf::int32 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      cards() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_cards();

  // repeated int32 side_pot_money = 18;
  int side_pot_money_size() const;
  void clear_side_pot_money();
  static const int kSidePotMoneyFieldNumber = 18;
  ::google::protobuf::int32 side_pot_money(int index) const;
  void set_side_pot_money(int index, ::google::protobuf::int32 value);
  void add_side_pot_money(::google::protobuf::int32 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      side_pot_money() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_side_pot_money();

  // repeated int32 cards_show = 19;
  int cards_show_size() const;
  void clear_cards_show();
  static const int kCardsShowFieldNumber = 19;
  ::google::protobuf::int32 cards_show(int index) const;
  void set_cards_show(int index, ::google::protobuf::int32 value);
  void add_cards_show(::google::protobuf::int32 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      cards_show() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_cards_show();

  // optional string name = 3;
  bool has_name() const;
  void clear_name();
  static const int kNameFieldNumber = 3;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // optional string icon = 4;
  bool has_icon() const;
  void clear_icon();
  static const int kIconFieldNumber = 4;
  const ::std::string& icon() const;
  void set_icon(const ::std::string& value);
  #if LANG_CXX11
  void set_icon(::std::string&& value);
  #endif
  void set_icon(const char* value);
  void set_icon(const char* value, size_t size);
  ::std::string* mutable_icon();
  ::std::string* release_icon();
  void set_allocated_icon(::std::string* icon);

  // required int32 guid = 1;
  bool has_guid() const;
  void clear_guid();
  static const int kGuidFieldNumber = 1;
  ::google::protobuf::int32 guid() const;
  void set_guid(::google::protobuf::int32 value);

  // required int32 chair = 2;
  bool has_chair() const;
  void clear_chair();
  static const int kChairFieldNumber = 2;
  ::google::protobuf::int32 chair() const;
  void set_chair(::google::protobuf::int32 value);

  // required int64 money = 5;
  bool has_money() const;
  void clear_money();
  static const int kMoneyFieldNumber = 5;
  ::google::protobuf::int64 money() const;
  void set_money(::google::protobuf::int64 value);

  // required int64 bet_money = 6;
  bool has_bet_money() const;
  void clear_bet_money();
  static const int kBetMoneyFieldNumber = 6;
  ::google::protobuf::int64 bet_money() const;
  void set_bet_money(::google::protobuf::int64 value);

  // optional int32 action = 7;
  bool has_action() const;
  void clear_action();
  static const int kActionFieldNumber = 7;
  ::google::protobuf::int32 action() const;
  void set_action(::google::protobuf::int32 value);

  // optional int32 position = 8;
  bool has_position() const;
  void clear_position();
  static const int kPositionFieldNumber = 8;
  ::google::protobuf::int32 position() const;
  void set_position(::google::protobuf::int32 value);

  // required int32 hole_cards = 9;
  bool has_hole_cards() const;
  void clear_hole_cards();
  static const int kHoleCardsFieldNumber = 9;
  ::google::protobuf::int32 hole_cards() const;
  void set_hole_cards(::google::protobuf::int32 value);

  // required int32 countdown = 10;
  bool has_countdown() const;
  void clear_countdown();
  static const int kCountdownFieldNumber = 10;
  ::google::protobuf::int32 countdown() const;
  void set_countdown(::google::protobuf::int32 value);

  // optional int64 tax = 13;
  bool has_tax() const;
  void clear_tax();
  static const int kTaxFieldNumber = 13;
  ::google::protobuf::int64 tax() const;
  void set_tax(::google::protobuf::int64 value);

  // optional int32 cards_type = 12;
  bool has_cards_type() const;
  void clear_cards_type();
  static const int kCardsTypeFieldNumber = 12;
  ::google::protobuf::int32 cards_type() const;
  void set_cards_type(::google::protobuf::int32 value);

  // optional int32 victory = 14;
  bool has_victory() const;
  void clear_victory();
  static const int kVictoryFieldNumber = 14;
  ::google::protobuf::int32 victory() const;
  void set_victory(::google::protobuf::int32 value);

  // required int64 win_money = 16;
  bool has_win_money() const;
  void clear_win_money();
  static const int kWinMoneyFieldNumber = 16;
  ::google::protobuf::int64 win_money() const;
  void set_win_money(::google::protobuf::int64 value);

  // optional int32 biggest_winner = 15;
  bool has_biggest_winner() const;
  void clear_biggest_winner();
  static const int kBiggestWinnerFieldNumber = 15;
  ::google::protobuf::int32 biggest_winner() const;
  void set_biggest_winner(::google::protobuf::int32 value);

  // required int32 main_pot_money = 17;
  bool has_main_pot_money() const;
  void clear_main_pot_money();
  static const int kMainPotMoneyFieldNumber = 17;
  ::google::protobuf::int32 main_pot_money() const;
  void set_main_pot_money(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:UserInfo)
 private:
  void set_has_guid();
  void clear_has_guid();
  void set_has_chair();
  void clear_has_chair();
  void set_has_name();
  void clear_has_name();
  void set_has_icon();
  void clear_has_icon();
  void set_has_money();
  void clear_has_money();
  void set_has_bet_money();
  void clear_has_bet_money();
  void set_has_action();
  void clear_has_action();
  void set_has_position();
  void clear_has_position();
  void set_has_hole_cards();
  void clear_has_hole_cards();
  void set_has_countdown();
  void clear_has_countdown();
  void set_has_cards_type();
  void clear_has_cards_type();
  void set_has_tax();
  void clear_has_tax();
  void set_has_victory();
  void clear_has_victory();
  void set_has_biggest_winner();
  void clear_has_biggest_winner();
  void set_has_win_money();
  void clear_has_win_money();
  void set_has_main_pot_money();
  void clear_has_main_pot_money();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > cards_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > side_pot_money_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > cards_show_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::google::protobuf::internal::ArenaStringPtr icon_;
  ::google::protobuf::int32 guid_;
  ::google::protobuf::int32 chair_;
  ::google::protobuf::int64 money_;
  ::google::protobuf::int64 bet_money_;
  ::google::protobuf::int32 action_;
  ::google::protobuf::int32 position_;
  ::google::protobuf::int32 hole_cards_;
  ::google::protobuf::int32 countdown_;
  ::google::protobuf::int64 tax_;
  ::google::protobuf::int32 cards_type_;
  ::google::protobuf::int32 victory_;
  ::google::protobuf::int64 win_money_;
  ::google::protobuf::int32 biggest_winner_;
  ::google::protobuf::int32 main_pot_money_;
  friend struct protobuf_public_5ftexas_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class TexasTable : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:TexasTable) */ {
 public:
  TexasTable();
  virtual ~TexasTable();

  TexasTable(const TexasTable& from);

  inline TexasTable& operator=(const TexasTable& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TexasTable& default_instance();

  static inline const TexasTable* internal_default_instance() {
    return reinterpret_cast<const TexasTable*>(
               &_TexasTable_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    1;

  void Swap(TexasTable* other);

  // implements Message ----------------------------------------------

  inline TexasTable* New() const PROTOBUF_FINAL { return New(NULL); }

  TexasTable* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const TexasTable& from);
  void MergeFrom(const TexasTable& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(TexasTable* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated int64 side_pot = 6;
  int side_pot_size() const;
  void clear_side_pot();
  static const int kSidePotFieldNumber = 6;
  ::google::protobuf::int64 side_pot(int index) const;
  void set_side_pot(int index, ::google::protobuf::int64 value);
  void add_side_pot(::google::protobuf::int64 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::int64 >&
      side_pot() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::int64 >*
      mutable_side_pot();

  // repeated int32 public_cards = 8;
  int public_cards_size() const;
  void clear_public_cards();
  static const int kPublicCardsFieldNumber = 8;
  ::google::protobuf::int32 public_cards(int index) const;
  void set_public_cards(int index, ::google::protobuf::int32 value);
  void add_public_cards(::google::protobuf::int32 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      public_cards() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_public_cards();

  // optional int64 max_bet = 2;
  bool has_max_bet() const;
  void clear_max_bet();
  static const int kMaxBetFieldNumber = 2;
  ::google::protobuf::int64 max_bet() const;
  void set_max_bet(::google::protobuf::int64 value);

  // optional int64 min_bet = 3;
  bool has_min_bet() const;
  void clear_min_bet();
  static const int kMinBetFieldNumber = 3;
  ::google::protobuf::int64 min_bet() const;
  void set_min_bet(::google::protobuf::int64 value);

  // optional int64 blind_bet = 4;
  bool has_blind_bet() const;
  void clear_blind_bet();
  static const int kBlindBetFieldNumber = 4;
  ::google::protobuf::int64 blind_bet() const;
  void set_blind_bet(::google::protobuf::int64 value);

  // optional int32 state = 1;
  bool has_state() const;
  void clear_state();
  static const int kStateFieldNumber = 1;
  ::google::protobuf::int32 state() const;
  void set_state(::google::protobuf::int32 value);

  // optional int32 think_time = 7;
  bool has_think_time() const;
  void clear_think_time();
  static const int kThinkTimeFieldNumber = 7;
  ::google::protobuf::int32 think_time() const;
  void set_think_time(::google::protobuf::int32 value);

  // required int64 pot = 5;
  bool has_pot() const;
  void clear_pot();
  static const int kPotFieldNumber = 5;
  ::google::protobuf::int64 pot() const;
  void set_pot(::google::protobuf::int64 value);

  // optional int32 own_chair = 9;
  bool has_own_chair() const;
  void clear_own_chair();
  static const int kOwnChairFieldNumber = 9;
  ::google::protobuf::int32 own_chair() const;
  void set_own_chair(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:TexasTable)
 private:
  void set_has_state();
  void clear_has_state();
  void set_has_max_bet();
  void clear_has_max_bet();
  void set_has_min_bet();
  void clear_has_min_bet();
  void set_has_blind_bet();
  void clear_has_blind_bet();
  void set_has_pot();
  void clear_has_pot();
  void set_has_think_time();
  void clear_has_think_time();
  void set_has_own_chair();
  void clear_has_own_chair();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int64 > side_pot_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > public_cards_;
  ::google::protobuf::int64 max_bet_;
  ::google::protobuf::int64 min_bet_;
  ::google::protobuf::int64 blind_bet_;
  ::google::protobuf::int32 state_;
  ::google::protobuf::int32 think_time_;
  ::google::protobuf::int64 pot_;
  ::google::protobuf::int32 own_chair_;
  friend struct protobuf_public_5ftexas_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class SC_TexasTableInfo : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:SC_TexasTableInfo) */ {
 public:
  SC_TexasTableInfo();
  virtual ~SC_TexasTableInfo();

  SC_TexasTableInfo(const SC_TexasTableInfo& from);

  inline SC_TexasTableInfo& operator=(const SC_TexasTableInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SC_TexasTableInfo& default_instance();

  static inline const SC_TexasTableInfo* internal_default_instance() {
    return reinterpret_cast<const SC_TexasTableInfo*>(
               &_SC_TexasTableInfo_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    2;

  void Swap(SC_TexasTableInfo* other);

  // implements Message ----------------------------------------------

  inline SC_TexasTableInfo* New() const PROTOBUF_FINAL { return New(NULL); }

  SC_TexasTableInfo* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const SC_TexasTableInfo& from);
  void MergeFrom(const SC_TexasTableInfo& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(SC_TexasTableInfo* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  typedef SC_TexasTableInfo_MsgID MsgID;
  static const MsgID ID =
    SC_TexasTableInfo_MsgID_ID;
  static inline bool MsgID_IsValid(int value) {
    return SC_TexasTableInfo_MsgID_IsValid(value);
  }
  static const MsgID MsgID_MIN =
    SC_TexasTableInfo_MsgID_MsgID_MIN;
  static const MsgID MsgID_MAX =
    SC_TexasTableInfo_MsgID_MsgID_MAX;
  static const int MsgID_ARRAYSIZE =
    SC_TexasTableInfo_MsgID_MsgID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  MsgID_descriptor() {
    return SC_TexasTableInfo_MsgID_descriptor();
  }
  static inline const ::std::string& MsgID_Name(MsgID value) {
    return SC_TexasTableInfo_MsgID_Name(value);
  }
  static inline bool MsgID_Parse(const ::std::string& name,
      MsgID* value) {
    return SC_TexasTableInfo_MsgID_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // repeated .UserInfo pb_user = 2;
  int pb_user_size() const;
  void clear_pb_user();
  static const int kPbUserFieldNumber = 2;
  const ::UserInfo& pb_user(int index) const;
  ::UserInfo* mutable_pb_user(int index);
  ::UserInfo* add_pb_user();
  ::google::protobuf::RepeatedPtrField< ::UserInfo >*
      mutable_pb_user();
  const ::google::protobuf::RepeatedPtrField< ::UserInfo >&
      pb_user() const;

  // optional .TexasTable pb_table = 1;
  bool has_pb_table() const;
  void clear_pb_table();
  static const int kPbTableFieldNumber = 1;
  const ::TexasTable& pb_table() const;
  ::TexasTable* mutable_pb_table();
  ::TexasTable* release_pb_table();
  void set_allocated_pb_table(::TexasTable* pb_table);

  // @@protoc_insertion_point(class_scope:SC_TexasTableInfo)
 private:
  void set_has_pb_table();
  void clear_has_pb_table();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::UserInfo > pb_user_;
  ::TexasTable* pb_table_;
  friend struct protobuf_public_5ftexas_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class SC_TexasSendUserCards : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:SC_TexasSendUserCards) */ {
 public:
  SC_TexasSendUserCards();
  virtual ~SC_TexasSendUserCards();

  SC_TexasSendUserCards(const SC_TexasSendUserCards& from);

  inline SC_TexasSendUserCards& operator=(const SC_TexasSendUserCards& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SC_TexasSendUserCards& default_instance();

  static inline const SC_TexasSendUserCards* internal_default_instance() {
    return reinterpret_cast<const SC_TexasSendUserCards*>(
               &_SC_TexasSendUserCards_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    3;

  void Swap(SC_TexasSendUserCards* other);

  // implements Message ----------------------------------------------

  inline SC_TexasSendUserCards* New() const PROTOBUF_FINAL { return New(NULL); }

  SC_TexasSendUserCards* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const SC_TexasSendUserCards& from);
  void MergeFrom(const SC_TexasSendUserCards& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(SC_TexasSendUserCards* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  typedef SC_TexasSendUserCards_MsgID MsgID;
  static const MsgID ID =
    SC_TexasSendUserCards_MsgID_ID;
  static inline bool MsgID_IsValid(int value) {
    return SC_TexasSendUserCards_MsgID_IsValid(value);
  }
  static const MsgID MsgID_MIN =
    SC_TexasSendUserCards_MsgID_MsgID_MIN;
  static const MsgID MsgID_MAX =
    SC_TexasSendUserCards_MsgID_MsgID_MAX;
  static const int MsgID_ARRAYSIZE =
    SC_TexasSendUserCards_MsgID_MsgID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  MsgID_descriptor() {
    return SC_TexasSendUserCards_MsgID_descriptor();
  }
  static inline const ::std::string& MsgID_Name(MsgID value) {
    return SC_TexasSendUserCards_MsgID_Name(value);
  }
  static inline bool MsgID_Parse(const ::std::string& name,
      MsgID* value) {
    return SC_TexasSendUserCards_MsgID_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // repeated .UserInfo pb_user = 1;
  int pb_user_size() const;
  void clear_pb_user();
  static const int kPbUserFieldNumber = 1;
  const ::UserInfo& pb_user(int index) const;
  ::UserInfo* mutable_pb_user(int index);
  ::UserInfo* add_pb_user();
  ::google::protobuf::RepeatedPtrField< ::UserInfo >*
      mutable_pb_user();
  const ::google::protobuf::RepeatedPtrField< ::UserInfo >&
      pb_user() const;

  // optional .TexasTable pb_table = 2;
  bool has_pb_table() const;
  void clear_pb_table();
  static const int kPbTableFieldNumber = 2;
  const ::TexasTable& pb_table() const;
  ::TexasTable* mutable_pb_table();
  ::TexasTable* release_pb_table();
  void set_allocated_pb_table(::TexasTable* pb_table);

  // @@protoc_insertion_point(class_scope:SC_TexasSendUserCards)
 private:
  void set_has_pb_table();
  void clear_has_pb_table();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::UserInfo > pb_user_;
  ::TexasTable* pb_table_;
  friend struct protobuf_public_5ftexas_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class SC_TexasSendPublicCards : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:SC_TexasSendPublicCards) */ {
 public:
  SC_TexasSendPublicCards();
  virtual ~SC_TexasSendPublicCards();

  SC_TexasSendPublicCards(const SC_TexasSendPublicCards& from);

  inline SC_TexasSendPublicCards& operator=(const SC_TexasSendPublicCards& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SC_TexasSendPublicCards& default_instance();

  static inline const SC_TexasSendPublicCards* internal_default_instance() {
    return reinterpret_cast<const SC_TexasSendPublicCards*>(
               &_SC_TexasSendPublicCards_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    4;

  void Swap(SC_TexasSendPublicCards* other);

  // implements Message ----------------------------------------------

  inline SC_TexasSendPublicCards* New() const PROTOBUF_FINAL { return New(NULL); }

  SC_TexasSendPublicCards* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const SC_TexasSendPublicCards& from);
  void MergeFrom(const SC_TexasSendPublicCards& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(SC_TexasSendPublicCards* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  typedef SC_TexasSendPublicCards_MsgID MsgID;
  static const MsgID ID =
    SC_TexasSendPublicCards_MsgID_ID;
  static inline bool MsgID_IsValid(int value) {
    return SC_TexasSendPublicCards_MsgID_IsValid(value);
  }
  static const MsgID MsgID_MIN =
    SC_TexasSendPublicCards_MsgID_MsgID_MIN;
  static const MsgID MsgID_MAX =
    SC_TexasSendPublicCards_MsgID_MsgID_MAX;
  static const int MsgID_ARRAYSIZE =
    SC_TexasSendPublicCards_MsgID_MsgID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  MsgID_descriptor() {
    return SC_TexasSendPublicCards_MsgID_descriptor();
  }
  static inline const ::std::string& MsgID_Name(MsgID value) {
    return SC_TexasSendPublicCards_MsgID_Name(value);
  }
  static inline bool MsgID_Parse(const ::std::string& name,
      MsgID* value) {
    return SC_TexasSendPublicCards_MsgID_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // repeated .UserInfo pb_user = 2;
  int pb_user_size() const;
  void clear_pb_user();
  static const int kPbUserFieldNumber = 2;
  const ::UserInfo& pb_user(int index) const;
  ::UserInfo* mutable_pb_user(int index);
  ::UserInfo* add_pb_user();
  ::google::protobuf::RepeatedPtrField< ::UserInfo >*
      mutable_pb_user();
  const ::google::protobuf::RepeatedPtrField< ::UserInfo >&
      pb_user() const;

  // repeated int32 public_cards = 3;
  int public_cards_size() const;
  void clear_public_cards();
  static const int kPublicCardsFieldNumber = 3;
  ::google::protobuf::int32 public_cards(int index) const;
  void set_public_cards(int index, ::google::protobuf::int32 value);
  void add_public_cards(::google::protobuf::int32 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      public_cards() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_public_cards();

  // optional .TexasTable pb_table = 1;
  bool has_pb_table() const;
  void clear_pb_table();
  static const int kPbTableFieldNumber = 1;
  const ::TexasTable& pb_table() const;
  ::TexasTable* mutable_pb_table();
  ::TexasTable* release_pb_table();
  void set_allocated_pb_table(::TexasTable* pb_table);

  // @@protoc_insertion_point(class_scope:SC_TexasSendPublicCards)
 private:
  void set_has_pb_table();
  void clear_has_pb_table();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::UserInfo > pb_user_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > public_cards_;
  ::TexasTable* pb_table_;
  friend struct protobuf_public_5ftexas_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class SC_TexasUserAction : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:SC_TexasUserAction) */ {
 public:
  SC_TexasUserAction();
  virtual ~SC_TexasUserAction();

  SC_TexasUserAction(const SC_TexasUserAction& from);

  inline SC_TexasUserAction& operator=(const SC_TexasUserAction& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SC_TexasUserAction& default_instance();

  static inline const SC_TexasUserAction* internal_default_instance() {
    return reinterpret_cast<const SC_TexasUserAction*>(
               &_SC_TexasUserAction_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    5;

  void Swap(SC_TexasUserAction* other);

  // implements Message ----------------------------------------------

  inline SC_TexasUserAction* New() const PROTOBUF_FINAL { return New(NULL); }

  SC_TexasUserAction* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const SC_TexasUserAction& from);
  void MergeFrom(const SC_TexasUserAction& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(SC_TexasUserAction* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  typedef SC_TexasUserAction_MsgID MsgID;
  static const MsgID ID =
    SC_TexasUserAction_MsgID_ID;
  static inline bool MsgID_IsValid(int value) {
    return SC_TexasUserAction_MsgID_IsValid(value);
  }
  static const MsgID MsgID_MIN =
    SC_TexasUserAction_MsgID_MsgID_MIN;
  static const MsgID MsgID_MAX =
    SC_TexasUserAction_MsgID_MsgID_MAX;
  static const int MsgID_ARRAYSIZE =
    SC_TexasUserAction_MsgID_MsgID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  MsgID_descriptor() {
    return SC_TexasUserAction_MsgID_descriptor();
  }
  static inline const ::std::string& MsgID_Name(MsgID value) {
    return SC_TexasUserAction_MsgID_Name(value);
  }
  static inline bool MsgID_Parse(const ::std::string& name,
      MsgID* value) {
    return SC_TexasUserAction_MsgID_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional .UserInfo pb_action = 1;
  bool has_pb_action() const;
  void clear_pb_action();
  static const int kPbActionFieldNumber = 1;
  const ::UserInfo& pb_action() const;
  ::UserInfo* mutable_pb_action();
  ::UserInfo* release_pb_action();
  void set_allocated_pb_action(::UserInfo* pb_action);

  // optional .TexasTable pb_table = 2;
  bool has_pb_table() const;
  void clear_pb_table();
  static const int kPbTableFieldNumber = 2;
  const ::TexasTable& pb_table() const;
  ::TexasTable* mutable_pb_table();
  ::TexasTable* release_pb_table();
  void set_allocated_pb_table(::TexasTable* pb_table);

  // required int32 chair = 3;
  bool has_chair() const;
  void clear_chair();
  static const int kChairFieldNumber = 3;
  ::google::protobuf::int32 chair() const;
  void set_chair(::google::protobuf::int32 value);

  // required int32 action = 4;
  bool has_action() const;
  void clear_action();
  static const int kActionFieldNumber = 4;
  ::google::protobuf::int32 action() const;
  void set_action(::google::protobuf::int32 value);

  // required int64 bet_money = 5;
  bool has_bet_money() const;
  void clear_bet_money();
  static const int kBetMoneyFieldNumber = 5;
  ::google::protobuf::int64 bet_money() const;
  void set_bet_money(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:SC_TexasUserAction)
 private:
  void set_has_pb_action();
  void clear_has_pb_action();
  void set_has_pb_table();
  void clear_has_pb_table();
  void set_has_chair();
  void clear_has_chair();
  void set_has_action();
  void clear_has_action();
  void set_has_bet_money();
  void clear_has_bet_money();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::UserInfo* pb_action_;
  ::TexasTable* pb_table_;
  ::google::protobuf::int32 chair_;
  ::google::protobuf::int32 action_;
  ::google::protobuf::int64 bet_money_;
  friend struct protobuf_public_5ftexas_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class SC_TexasNewUser : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:SC_TexasNewUser) */ {
 public:
  SC_TexasNewUser();
  virtual ~SC_TexasNewUser();

  SC_TexasNewUser(const SC_TexasNewUser& from);

  inline SC_TexasNewUser& operator=(const SC_TexasNewUser& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SC_TexasNewUser& default_instance();

  static inline const SC_TexasNewUser* internal_default_instance() {
    return reinterpret_cast<const SC_TexasNewUser*>(
               &_SC_TexasNewUser_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    6;

  void Swap(SC_TexasNewUser* other);

  // implements Message ----------------------------------------------

  inline SC_TexasNewUser* New() const PROTOBUF_FINAL { return New(NULL); }

  SC_TexasNewUser* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const SC_TexasNewUser& from);
  void MergeFrom(const SC_TexasNewUser& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(SC_TexasNewUser* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  typedef SC_TexasNewUser_MsgID MsgID;
  static const MsgID ID =
    SC_TexasNewUser_MsgID_ID;
  static inline bool MsgID_IsValid(int value) {
    return SC_TexasNewUser_MsgID_IsValid(value);
  }
  static const MsgID MsgID_MIN =
    SC_TexasNewUser_MsgID_MsgID_MIN;
  static const MsgID MsgID_MAX =
    SC_TexasNewUser_MsgID_MsgID_MAX;
  static const int MsgID_ARRAYSIZE =
    SC_TexasNewUser_MsgID_MsgID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  MsgID_descriptor() {
    return SC_TexasNewUser_MsgID_descriptor();
  }
  static inline const ::std::string& MsgID_Name(MsgID value) {
    return SC_TexasNewUser_MsgID_Name(value);
  }
  static inline bool MsgID_Parse(const ::std::string& name,
      MsgID* value) {
    return SC_TexasNewUser_MsgID_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional .UserInfo pb_user = 1;
  bool has_pb_user() const;
  void clear_pb_user();
  static const int kPbUserFieldNumber = 1;
  const ::UserInfo& pb_user() const;
  ::UserInfo* mutable_pb_user();
  ::UserInfo* release_pb_user();
  void set_allocated_pb_user(::UserInfo* pb_user);

  // @@protoc_insertion_point(class_scope:SC_TexasNewUser)
 private:
  void set_has_pb_user();
  void clear_has_pb_user();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::UserInfo* pb_user_;
  friend struct protobuf_public_5ftexas_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class SC_TexasUserLeave : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:SC_TexasUserLeave) */ {
 public:
  SC_TexasUserLeave();
  virtual ~SC_TexasUserLeave();

  SC_TexasUserLeave(const SC_TexasUserLeave& from);

  inline SC_TexasUserLeave& operator=(const SC_TexasUserLeave& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SC_TexasUserLeave& default_instance();

  static inline const SC_TexasUserLeave* internal_default_instance() {
    return reinterpret_cast<const SC_TexasUserLeave*>(
               &_SC_TexasUserLeave_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    7;

  void Swap(SC_TexasUserLeave* other);

  // implements Message ----------------------------------------------

  inline SC_TexasUserLeave* New() const PROTOBUF_FINAL { return New(NULL); }

  SC_TexasUserLeave* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const SC_TexasUserLeave& from);
  void MergeFrom(const SC_TexasUserLeave& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(SC_TexasUserLeave* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  typedef SC_TexasUserLeave_MsgID MsgID;
  static const MsgID ID =
    SC_TexasUserLeave_MsgID_ID;
  static inline bool MsgID_IsValid(int value) {
    return SC_TexasUserLeave_MsgID_IsValid(value);
  }
  static const MsgID MsgID_MIN =
    SC_TexasUserLeave_MsgID_MsgID_MIN;
  static const MsgID MsgID_MAX =
    SC_TexasUserLeave_MsgID_MsgID_MAX;
  static const int MsgID_ARRAYSIZE =
    SC_TexasUserLeave_MsgID_MsgID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  MsgID_descriptor() {
    return SC_TexasUserLeave_MsgID_descriptor();
  }
  static inline const ::std::string& MsgID_Name(MsgID value) {
    return SC_TexasUserLeave_MsgID_Name(value);
  }
  static inline bool MsgID_Parse(const ::std::string& name,
      MsgID* value) {
    return SC_TexasUserLeave_MsgID_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional .UserInfo pb_user = 1;
  bool has_pb_user() const;
  void clear_pb_user();
  static const int kPbUserFieldNumber = 1;
  const ::UserInfo& pb_user() const;
  ::UserInfo* mutable_pb_user();
  ::UserInfo* release_pb_user();
  void set_allocated_pb_user(::UserInfo* pb_user);

  // @@protoc_insertion_point(class_scope:SC_TexasUserLeave)
 private:
  void set_has_pb_user();
  void clear_has_pb_user();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::UserInfo* pb_user_;
  friend struct protobuf_public_5ftexas_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class SC_TexasForceLeave : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:SC_TexasForceLeave) */ {
 public:
  SC_TexasForceLeave();
  virtual ~SC_TexasForceLeave();

  SC_TexasForceLeave(const SC_TexasForceLeave& from);

  inline SC_TexasForceLeave& operator=(const SC_TexasForceLeave& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SC_TexasForceLeave& default_instance();

  static inline const SC_TexasForceLeave* internal_default_instance() {
    return reinterpret_cast<const SC_TexasForceLeave*>(
               &_SC_TexasForceLeave_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    8;

  void Swap(SC_TexasForceLeave* other);

  // implements Message ----------------------------------------------

  inline SC_TexasForceLeave* New() const PROTOBUF_FINAL { return New(NULL); }

  SC_TexasForceLeave* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const SC_TexasForceLeave& from);
  void MergeFrom(const SC_TexasForceLeave& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(SC_TexasForceLeave* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  typedef SC_TexasForceLeave_MsgID MsgID;
  static const MsgID ID =
    SC_TexasForceLeave_MsgID_ID;
  static inline bool MsgID_IsValid(int value) {
    return SC_TexasForceLeave_MsgID_IsValid(value);
  }
  static const MsgID MsgID_MIN =
    SC_TexasForceLeave_MsgID_MsgID_MIN;
  static const MsgID MsgID_MAX =
    SC_TexasForceLeave_MsgID_MsgID_MAX;
  static const int MsgID_ARRAYSIZE =
    SC_TexasForceLeave_MsgID_MsgID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  MsgID_descriptor() {
    return SC_TexasForceLeave_MsgID_descriptor();
  }
  static inline const ::std::string& MsgID_Name(MsgID value) {
    return SC_TexasForceLeave_MsgID_Name(value);
  }
  static inline bool MsgID_Parse(const ::std::string& name,
      MsgID* value) {
    return SC_TexasForceLeave_MsgID_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional string reason = 1;
  bool has_reason() const;
  void clear_reason();
  static const int kReasonFieldNumber = 1;
  const ::std::string& reason() const;
  void set_reason(const ::std::string& value);
  #if LANG_CXX11
  void set_reason(::std::string&& value);
  #endif
  void set_reason(const char* value);
  void set_reason(const char* value, size_t size);
  ::std::string* mutable_reason();
  ::std::string* release_reason();
  void set_allocated_reason(::std::string* reason);

  // optional int32 num = 2;
  bool has_num() const;
  void clear_num();
  static const int kNumFieldNumber = 2;
  ::google::protobuf::int32 num() const;
  void set_num(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:SC_TexasForceLeave)
 private:
  void set_has_reason();
  void clear_has_reason();
  void set_has_num();
  void clear_has_num();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr reason_;
  ::google::protobuf::int32 num_;
  friend struct protobuf_public_5ftexas_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class SC_TexasTableEnd : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:SC_TexasTableEnd) */ {
 public:
  SC_TexasTableEnd();
  virtual ~SC_TexasTableEnd();

  SC_TexasTableEnd(const SC_TexasTableEnd& from);

  inline SC_TexasTableEnd& operator=(const SC_TexasTableEnd& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SC_TexasTableEnd& default_instance();

  static inline const SC_TexasTableEnd* internal_default_instance() {
    return reinterpret_cast<const SC_TexasTableEnd*>(
               &_SC_TexasTableEnd_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    9;

  void Swap(SC_TexasTableEnd* other);

  // implements Message ----------------------------------------------

  inline SC_TexasTableEnd* New() const PROTOBUF_FINAL { return New(NULL); }

  SC_TexasTableEnd* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const SC_TexasTableEnd& from);
  void MergeFrom(const SC_TexasTableEnd& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(SC_TexasTableEnd* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  typedef SC_TexasTableEnd_MsgID MsgID;
  static const MsgID ID =
    SC_TexasTableEnd_MsgID_ID;
  static inline bool MsgID_IsValid(int value) {
    return SC_TexasTableEnd_MsgID_IsValid(value);
  }
  static const MsgID MsgID_MIN =
    SC_TexasTableEnd_MsgID_MsgID_MIN;
  static const MsgID MsgID_MAX =
    SC_TexasTableEnd_MsgID_MsgID_MAX;
  static const int MsgID_ARRAYSIZE =
    SC_TexasTableEnd_MsgID_MsgID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  MsgID_descriptor() {
    return SC_TexasTableEnd_MsgID_descriptor();
  }
  static inline const ::std::string& MsgID_Name(MsgID value) {
    return SC_TexasTableEnd_MsgID_Name(value);
  }
  static inline bool MsgID_Parse(const ::std::string& name,
      MsgID* value) {
    return SC_TexasTableEnd_MsgID_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // repeated .UserInfo pb_user = 1;
  int pb_user_size() const;
  void clear_pb_user();
  static const int kPbUserFieldNumber = 1;
  const ::UserInfo& pb_user(int index) const;
  ::UserInfo* mutable_pb_user(int index);
  ::UserInfo* add_pb_user();
  ::google::protobuf::RepeatedPtrField< ::UserInfo >*
      mutable_pb_user();
  const ::google::protobuf::RepeatedPtrField< ::UserInfo >&
      pb_user() const;

  // optional .TexasTable pb_table = 2;
  bool has_pb_table() const;
  void clear_pb_table();
  static const int kPbTableFieldNumber = 2;
  const ::TexasTable& pb_table() const;
  ::TexasTable* mutable_pb_table();
  ::TexasTable* release_pb_table();
  void set_allocated_pb_table(::TexasTable* pb_table);

  // @@protoc_insertion_point(class_scope:SC_TexasTableEnd)
 private:
  void set_has_pb_table();
  void clear_has_pb_table();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::UserInfo > pb_user_;
  ::TexasTable* pb_table_;
  friend struct protobuf_public_5ftexas_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class SC_TexasGiveTips : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:SC_TexasGiveTips) */ {
 public:
  SC_TexasGiveTips();
  virtual ~SC_TexasGiveTips();

  SC_TexasGiveTips(const SC_TexasGiveTips& from);

  inline SC_TexasGiveTips& operator=(const SC_TexasGiveTips& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SC_TexasGiveTips& default_instance();

  static inline const SC_TexasGiveTips* internal_default_instance() {
    return reinterpret_cast<const SC_TexasGiveTips*>(
               &_SC_TexasGiveTips_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    10;

  void Swap(SC_TexasGiveTips* other);

  // implements Message ----------------------------------------------

  inline SC_TexasGiveTips* New() const PROTOBUF_FINAL { return New(NULL); }

  SC_TexasGiveTips* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const SC_TexasGiveTips& from);
  void MergeFrom(const SC_TexasGiveTips& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(SC_TexasGiveTips* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  typedef SC_TexasGiveTips_MsgID MsgID;
  static const MsgID ID =
    SC_TexasGiveTips_MsgID_ID;
  static inline bool MsgID_IsValid(int value) {
    return SC_TexasGiveTips_MsgID_IsValid(value);
  }
  static const MsgID MsgID_MIN =
    SC_TexasGiveTips_MsgID_MsgID_MIN;
  static const MsgID MsgID_MAX =
    SC_TexasGiveTips_MsgID_MsgID_MAX;
  static const int MsgID_ARRAYSIZE =
    SC_TexasGiveTips_MsgID_MsgID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  MsgID_descriptor() {
    return SC_TexasGiveTips_MsgID_descriptor();
  }
  static inline const ::std::string& MsgID_Name(MsgID value) {
    return SC_TexasGiveTips_MsgID_Name(value);
  }
  static inline bool MsgID_Parse(const ::std::string& name,
      MsgID* value) {
    return SC_TexasGiveTips_MsgID_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional int64 money = 2;
  bool has_money() const;
  void clear_money();
  static const int kMoneyFieldNumber = 2;
  ::google::protobuf::int64 money() const;
  void set_money(::google::protobuf::int64 value);

  // required int32 chair = 1;
  bool has_chair() const;
  void clear_chair();
  static const int kChairFieldNumber = 1;
  ::google::protobuf::int32 chair() const;
  void set_chair(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:SC_TexasGiveTips)
 private:
  void set_has_chair();
  void clear_has_chair();
  void set_has_money();
  void clear_has_money();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::int64 money_;
  ::google::protobuf::int32 chair_;
  friend struct protobuf_public_5ftexas_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class SC_TexasShowCards : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:SC_TexasShowCards) */ {
 public:
  SC_TexasShowCards();
  virtual ~SC_TexasShowCards();

  SC_TexasShowCards(const SC_TexasShowCards& from);

  inline SC_TexasShowCards& operator=(const SC_TexasShowCards& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SC_TexasShowCards& default_instance();

  static inline const SC_TexasShowCards* internal_default_instance() {
    return reinterpret_cast<const SC_TexasShowCards*>(
               &_SC_TexasShowCards_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    11;

  void Swap(SC_TexasShowCards* other);

  // implements Message ----------------------------------------------

  inline SC_TexasShowCards* New() const PROTOBUF_FINAL { return New(NULL); }

  SC_TexasShowCards* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const SC_TexasShowCards& from);
  void MergeFrom(const SC_TexasShowCards& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(SC_TexasShowCards* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  typedef SC_TexasShowCards_MsgID MsgID;
  static const MsgID ID =
    SC_TexasShowCards_MsgID_ID;
  static inline bool MsgID_IsValid(int value) {
    return SC_TexasShowCards_MsgID_IsValid(value);
  }
  static const MsgID MsgID_MIN =
    SC_TexasShowCards_MsgID_MsgID_MIN;
  static const MsgID MsgID_MAX =
    SC_TexasShowCards_MsgID_MsgID_MAX;
  static const int MsgID_ARRAYSIZE =
    SC_TexasShowCards_MsgID_MsgID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  MsgID_descriptor() {
    return SC_TexasShowCards_MsgID_descriptor();
  }
  static inline const ::std::string& MsgID_Name(MsgID value) {
    return SC_TexasShowCards_MsgID_Name(value);
  }
  static inline bool MsgID_Parse(const ::std::string& name,
      MsgID* value) {
    return SC_TexasShowCards_MsgID_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // repeated int32 user_cards = 2;
  int user_cards_size() const;
  void clear_user_cards();
  static const int kUserCardsFieldNumber = 2;
  ::google::protobuf::int32 user_cards(int index) const;
  void set_user_cards(int index, ::google::protobuf::int32 value);
  void add_user_cards(::google::protobuf::int32 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      user_cards() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_user_cards();

  // required int32 chair = 1;
  bool has_chair() const;
  void clear_chair();
  static const int kChairFieldNumber = 1;
  ::google::protobuf::int32 chair() const;
  void set_chair(::google::protobuf::int32 value);

  // optional int32 cards_type = 3;
  bool has_cards_type() const;
  void clear_cards_type();
  static const int kCardsTypeFieldNumber = 3;
  ::google::protobuf::int32 cards_type() const;
  void set_cards_type(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:SC_TexasShowCards)
 private:
  void set_has_chair();
  void clear_has_chair();
  void set_has_cards_type();
  void clear_has_cards_type();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > user_cards_;
  ::google::protobuf::int32 chair_;
  ::google::protobuf::int32 cards_type_;
  friend struct protobuf_public_5ftexas_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class SC_TexasShowCardsPermission : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:SC_TexasShowCardsPermission) */ {
 public:
  SC_TexasShowCardsPermission();
  virtual ~SC_TexasShowCardsPermission();

  SC_TexasShowCardsPermission(const SC_TexasShowCardsPermission& from);

  inline SC_TexasShowCardsPermission& operator=(const SC_TexasShowCardsPermission& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SC_TexasShowCardsPermission& default_instance();

  static inline const SC_TexasShowCardsPermission* internal_default_instance() {
    return reinterpret_cast<const SC_TexasShowCardsPermission*>(
               &_SC_TexasShowCardsPermission_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    12;

  void Swap(SC_TexasShowCardsPermission* other);

  // implements Message ----------------------------------------------

  inline SC_TexasShowCardsPermission* New() const PROTOBUF_FINAL { return New(NULL); }

  SC_TexasShowCardsPermission* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const SC_TexasShowCardsPermission& from);
  void MergeFrom(const SC_TexasShowCardsPermission& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(SC_TexasShowCardsPermission* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  typedef SC_TexasShowCardsPermission_MsgID MsgID;
  static const MsgID ID =
    SC_TexasShowCardsPermission_MsgID_ID;
  static inline bool MsgID_IsValid(int value) {
    return SC_TexasShowCardsPermission_MsgID_IsValid(value);
  }
  static const MsgID MsgID_MIN =
    SC_TexasShowCardsPermission_MsgID_MsgID_MIN;
  static const MsgID MsgID_MAX =
    SC_TexasShowCardsPermission_MsgID_MsgID_MAX;
  static const int MsgID_ARRAYSIZE =
    SC_TexasShowCardsPermission_MsgID_MsgID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  MsgID_descriptor() {
    return SC_TexasShowCardsPermission_MsgID_descriptor();
  }
  static inline const ::std::string& MsgID_Name(MsgID value) {
    return SC_TexasShowCardsPermission_MsgID_Name(value);
  }
  static inline bool MsgID_Parse(const ::std::string& name,
      MsgID* value) {
    return SC_TexasShowCardsPermission_MsgID_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // required int32 chair = 1;
  bool has_chair() const;
  void clear_chair();
  static const int kChairFieldNumber = 1;
  ::google::protobuf::int32 chair() const;
  void set_chair(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:SC_TexasShowCardsPermission)
 private:
  void set_has_chair();
  void clear_has_chair();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::int32 chair_;
  friend struct protobuf_public_5ftexas_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class SC_TexasError : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:SC_TexasError) */ {
 public:
  SC_TexasError();
  virtual ~SC_TexasError();

  SC_TexasError(const SC_TexasError& from);

  inline SC_TexasError& operator=(const SC_TexasError& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SC_TexasError& default_instance();

  static inline const SC_TexasError* internal_default_instance() {
    return reinterpret_cast<const SC_TexasError*>(
               &_SC_TexasError_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    13;

  void Swap(SC_TexasError* other);

  // implements Message ----------------------------------------------

  inline SC_TexasError* New() const PROTOBUF_FINAL { return New(NULL); }

  SC_TexasError* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const SC_TexasError& from);
  void MergeFrom(const SC_TexasError& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(SC_TexasError* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  typedef SC_TexasError_MsgID MsgID;
  static const MsgID ID =
    SC_TexasError_MsgID_ID;
  static inline bool MsgID_IsValid(int value) {
    return SC_TexasError_MsgID_IsValid(value);
  }
  static const MsgID MsgID_MIN =
    SC_TexasError_MsgID_MsgID_MIN;
  static const MsgID MsgID_MAX =
    SC_TexasError_MsgID_MsgID_MAX;
  static const int MsgID_ARRAYSIZE =
    SC_TexasError_MsgID_MsgID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  MsgID_descriptor() {
    return SC_TexasError_MsgID_descriptor();
  }
  static inline const ::std::string& MsgID_Name(MsgID value) {
    return SC_TexasError_MsgID_Name(value);
  }
  static inline bool MsgID_Parse(const ::std::string& name,
      MsgID* value) {
    return SC_TexasError_MsgID_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional int32 error = 1;
  bool has_error() const;
  void clear_error();
  static const int kErrorFieldNumber = 1;
  ::google::protobuf::int32 error() const;
  void set_error(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:SC_TexasError)
 private:
  void set_has_error();
  void clear_has_error();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::int32 error_;
  friend struct protobuf_public_5ftexas_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class CS_TexasUserAction : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:CS_TexasUserAction) */ {
 public:
  CS_TexasUserAction();
  virtual ~CS_TexasUserAction();

  CS_TexasUserAction(const CS_TexasUserAction& from);

  inline CS_TexasUserAction& operator=(const CS_TexasUserAction& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CS_TexasUserAction& default_instance();

  static inline const CS_TexasUserAction* internal_default_instance() {
    return reinterpret_cast<const CS_TexasUserAction*>(
               &_CS_TexasUserAction_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    14;

  void Swap(CS_TexasUserAction* other);

  // implements Message ----------------------------------------------

  inline CS_TexasUserAction* New() const PROTOBUF_FINAL { return New(NULL); }

  CS_TexasUserAction* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const CS_TexasUserAction& from);
  void MergeFrom(const CS_TexasUserAction& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(CS_TexasUserAction* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  typedef CS_TexasUserAction_MsgID MsgID;
  static const MsgID ID =
    CS_TexasUserAction_MsgID_ID;
  static inline bool MsgID_IsValid(int value) {
    return CS_TexasUserAction_MsgID_IsValid(value);
  }
  static const MsgID MsgID_MIN =
    CS_TexasUserAction_MsgID_MsgID_MIN;
  static const MsgID MsgID_MAX =
    CS_TexasUserAction_MsgID_MsgID_MAX;
  static const int MsgID_ARRAYSIZE =
    CS_TexasUserAction_MsgID_MsgID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  MsgID_descriptor() {
    return CS_TexasUserAction_MsgID_descriptor();
  }
  static inline const ::std::string& MsgID_Name(MsgID value) {
    return CS_TexasUserAction_MsgID_Name(value);
  }
  static inline bool MsgID_Parse(const ::std::string& name,
      MsgID* value) {
    return CS_TexasUserAction_MsgID_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // required int64 bet_money = 2;
  bool has_bet_money() const;
  void clear_bet_money();
  static const int kBetMoneyFieldNumber = 2;
  ::google::protobuf::int64 bet_money() const;
  void set_bet_money(::google::protobuf::int64 value);

  // required int32 action = 1;
  bool has_action() const;
  void clear_action();
  static const int kActionFieldNumber = 1;
  ::google::protobuf::int32 action() const;
  void set_action(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:CS_TexasUserAction)
 private:
  void set_has_action();
  void clear_has_action();
  void set_has_bet_money();
  void clear_has_bet_money();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::int64 bet_money_;
  ::google::protobuf::int32 action_;
  friend struct protobuf_public_5ftexas_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class CS_TexasEnterTable : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:CS_TexasEnterTable) */ {
 public:
  CS_TexasEnterTable();
  virtual ~CS_TexasEnterTable();

  CS_TexasEnterTable(const CS_TexasEnterTable& from);

  inline CS_TexasEnterTable& operator=(const CS_TexasEnterTable& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CS_TexasEnterTable& default_instance();

  static inline const CS_TexasEnterTable* internal_default_instance() {
    return reinterpret_cast<const CS_TexasEnterTable*>(
               &_CS_TexasEnterTable_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    15;

  void Swap(CS_TexasEnterTable* other);

  // implements Message ----------------------------------------------

  inline CS_TexasEnterTable* New() const PROTOBUF_FINAL { return New(NULL); }

  CS_TexasEnterTable* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const CS_TexasEnterTable& from);
  void MergeFrom(const CS_TexasEnterTable& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(CS_TexasEnterTable* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  typedef CS_TexasEnterTable_MsgID MsgID;
  static const MsgID ID =
    CS_TexasEnterTable_MsgID_ID;
  static inline bool MsgID_IsValid(int value) {
    return CS_TexasEnterTable_MsgID_IsValid(value);
  }
  static const MsgID MsgID_MIN =
    CS_TexasEnterTable_MsgID_MsgID_MIN;
  static const MsgID MsgID_MAX =
    CS_TexasEnterTable_MsgID_MsgID_MAX;
  static const int MsgID_ARRAYSIZE =
    CS_TexasEnterTable_MsgID_MsgID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  MsgID_descriptor() {
    return CS_TexasEnterTable_MsgID_descriptor();
  }
  static inline const ::std::string& MsgID_Name(MsgID value) {
    return CS_TexasEnterTable_MsgID_Name(value);
  }
  static inline bool MsgID_Parse(const ::std::string& name,
      MsgID* value) {
    return CS_TexasEnterTable_MsgID_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:CS_TexasEnterTable)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  friend struct protobuf_public_5ftexas_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class CS_TexasLeaveTable : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:CS_TexasLeaveTable) */ {
 public:
  CS_TexasLeaveTable();
  virtual ~CS_TexasLeaveTable();

  CS_TexasLeaveTable(const CS_TexasLeaveTable& from);

  inline CS_TexasLeaveTable& operator=(const CS_TexasLeaveTable& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CS_TexasLeaveTable& default_instance();

  static inline const CS_TexasLeaveTable* internal_default_instance() {
    return reinterpret_cast<const CS_TexasLeaveTable*>(
               &_CS_TexasLeaveTable_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    16;

  void Swap(CS_TexasLeaveTable* other);

  // implements Message ----------------------------------------------

  inline CS_TexasLeaveTable* New() const PROTOBUF_FINAL { return New(NULL); }

  CS_TexasLeaveTable* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const CS_TexasLeaveTable& from);
  void MergeFrom(const CS_TexasLeaveTable& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(CS_TexasLeaveTable* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  typedef CS_TexasLeaveTable_MsgID MsgID;
  static const MsgID ID =
    CS_TexasLeaveTable_MsgID_ID;
  static inline bool MsgID_IsValid(int value) {
    return CS_TexasLeaveTable_MsgID_IsValid(value);
  }
  static const MsgID MsgID_MIN =
    CS_TexasLeaveTable_MsgID_MsgID_MIN;
  static const MsgID MsgID_MAX =
    CS_TexasLeaveTable_MsgID_MsgID_MAX;
  static const int MsgID_ARRAYSIZE =
    CS_TexasLeaveTable_MsgID_MsgID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  MsgID_descriptor() {
    return CS_TexasLeaveTable_MsgID_descriptor();
  }
  static inline const ::std::string& MsgID_Name(MsgID value) {
    return CS_TexasLeaveTable_MsgID_Name(value);
  }
  static inline bool MsgID_Parse(const ::std::string& name,
      MsgID* value) {
    return CS_TexasLeaveTable_MsgID_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:CS_TexasLeaveTable)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  friend struct protobuf_public_5ftexas_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class CS_TexasGiveTips : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:CS_TexasGiveTips) */ {
 public:
  CS_TexasGiveTips();
  virtual ~CS_TexasGiveTips();

  CS_TexasGiveTips(const CS_TexasGiveTips& from);

  inline CS_TexasGiveTips& operator=(const CS_TexasGiveTips& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CS_TexasGiveTips& default_instance();

  static inline const CS_TexasGiveTips* internal_default_instance() {
    return reinterpret_cast<const CS_TexasGiveTips*>(
               &_CS_TexasGiveTips_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    17;

  void Swap(CS_TexasGiveTips* other);

  // implements Message ----------------------------------------------

  inline CS_TexasGiveTips* New() const PROTOBUF_FINAL { return New(NULL); }

  CS_TexasGiveTips* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const CS_TexasGiveTips& from);
  void MergeFrom(const CS_TexasGiveTips& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(CS_TexasGiveTips* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  typedef CS_TexasGiveTips_MsgID MsgID;
  static const MsgID ID =
    CS_TexasGiveTips_MsgID_ID;
  static inline bool MsgID_IsValid(int value) {
    return CS_TexasGiveTips_MsgID_IsValid(value);
  }
  static const MsgID MsgID_MIN =
    CS_TexasGiveTips_MsgID_MsgID_MIN;
  static const MsgID MsgID_MAX =
    CS_TexasGiveTips_MsgID_MsgID_MAX;
  static const int MsgID_ARRAYSIZE =
    CS_TexasGiveTips_MsgID_MsgID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  MsgID_descriptor() {
    return CS_TexasGiveTips_MsgID_descriptor();
  }
  static inline const ::std::string& MsgID_Name(MsgID value) {
    return CS_TexasGiveTips_MsgID_Name(value);
  }
  static inline bool MsgID_Parse(const ::std::string& name,
      MsgID* value) {
    return CS_TexasGiveTips_MsgID_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:CS_TexasGiveTips)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  friend struct protobuf_public_5ftexas_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class CS_TexasShowCards : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:CS_TexasShowCards) */ {
 public:
  CS_TexasShowCards();
  virtual ~CS_TexasShowCards();

  CS_TexasShowCards(const CS_TexasShowCards& from);

  inline CS_TexasShowCards& operator=(const CS_TexasShowCards& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CS_TexasShowCards& default_instance();

  static inline const CS_TexasShowCards* internal_default_instance() {
    return reinterpret_cast<const CS_TexasShowCards*>(
               &_CS_TexasShowCards_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    18;

  void Swap(CS_TexasShowCards* other);

  // implements Message ----------------------------------------------

  inline CS_TexasShowCards* New() const PROTOBUF_FINAL { return New(NULL); }

  CS_TexasShowCards* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const CS_TexasShowCards& from);
  void MergeFrom(const CS_TexasShowCards& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(CS_TexasShowCards* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  typedef CS_TexasShowCards_MsgID MsgID;
  static const MsgID ID =
    CS_TexasShowCards_MsgID_ID;
  static inline bool MsgID_IsValid(int value) {
    return CS_TexasShowCards_MsgID_IsValid(value);
  }
  static const MsgID MsgID_MIN =
    CS_TexasShowCards_MsgID_MsgID_MIN;
  static const MsgID MsgID_MAX =
    CS_TexasShowCards_MsgID_MsgID_MAX;
  static const int MsgID_ARRAYSIZE =
    CS_TexasShowCards_MsgID_MsgID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  MsgID_descriptor() {
    return CS_TexasShowCards_MsgID_descriptor();
  }
  static inline const ::std::string& MsgID_Name(MsgID value) {
    return CS_TexasShowCards_MsgID_Name(value);
  }
  static inline bool MsgID_Parse(const ::std::string& name,
      MsgID* value) {
    return CS_TexasShowCards_MsgID_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // required bool show_cards = 1;
  bool has_show_cards() const;
  void clear_show_cards();
  static const int kShowCardsFieldNumber = 1;
  bool show_cards() const;
  void set_show_cards(bool value);

  // @@protoc_insertion_point(class_scope:CS_TexasShowCards)
 private:
  void set_has_show_cards();
  void clear_has_show_cards();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  bool show_cards_;
  friend struct protobuf_public_5ftexas_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
// UserInfo

// required int32 guid = 1;
inline bool UserInfo::has_guid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void UserInfo::set_has_guid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void UserInfo::clear_has_guid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void UserInfo::clear_guid() {
  guid_ = 0;
  clear_has_guid();
}
inline ::google::protobuf::int32 UserInfo::guid() const {
  // @@protoc_insertion_point(field_get:UserInfo.guid)
  return guid_;
}
inline void UserInfo::set_guid(::google::protobuf::int32 value) {
  set_has_guid();
  guid_ = value;
  // @@protoc_insertion_point(field_set:UserInfo.guid)
}

// required int32 chair = 2;
inline bool UserInfo::has_chair() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void UserInfo::set_has_chair() {
  _has_bits_[0] |= 0x00000008u;
}
inline void UserInfo::clear_has_chair() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void UserInfo::clear_chair() {
  chair_ = 0;
  clear_has_chair();
}
inline ::google::protobuf::int32 UserInfo::chair() const {
  // @@protoc_insertion_point(field_get:UserInfo.chair)
  return chair_;
}
inline void UserInfo::set_chair(::google::protobuf::int32 value) {
  set_has_chair();
  chair_ = value;
  // @@protoc_insertion_point(field_set:UserInfo.chair)
}

// optional string name = 3;
inline bool UserInfo::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void UserInfo::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void UserInfo::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void UserInfo::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_name();
}
inline const ::std::string& UserInfo::name() const {
  // @@protoc_insertion_point(field_get:UserInfo.name)
  return name_.GetNoArena();
}
inline void UserInfo::set_name(const ::std::string& value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:UserInfo.name)
}
#if LANG_CXX11
inline void UserInfo::set_name(::std::string&& value) {
  set_has_name();
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:UserInfo.name)
}
#endif
inline void UserInfo::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:UserInfo.name)
}
inline void UserInfo::set_name(const char* value, size_t size) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:UserInfo.name)
}
inline ::std::string* UserInfo::mutable_name() {
  set_has_name();
  // @@protoc_insertion_point(field_mutable:UserInfo.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* UserInfo::release_name() {
  // @@protoc_insertion_point(field_release:UserInfo.name)
  clear_has_name();
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void UserInfo::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    set_has_name();
  } else {
    clear_has_name();
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:UserInfo.name)
}

// optional string icon = 4;
inline bool UserInfo::has_icon() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void UserInfo::set_has_icon() {
  _has_bits_[0] |= 0x00000002u;
}
inline void UserInfo::clear_has_icon() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void UserInfo::clear_icon() {
  icon_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_icon();
}
inline const ::std::string& UserInfo::icon() const {
  // @@protoc_insertion_point(field_get:UserInfo.icon)
  return icon_.GetNoArena();
}
inline void UserInfo::set_icon(const ::std::string& value) {
  set_has_icon();
  icon_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:UserInfo.icon)
}
#if LANG_CXX11
inline void UserInfo::set_icon(::std::string&& value) {
  set_has_icon();
  icon_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:UserInfo.icon)
}
#endif
inline void UserInfo::set_icon(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_icon();
  icon_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:UserInfo.icon)
}
inline void UserInfo::set_icon(const char* value, size_t size) {
  set_has_icon();
  icon_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:UserInfo.icon)
}
inline ::std::string* UserInfo::mutable_icon() {
  set_has_icon();
  // @@protoc_insertion_point(field_mutable:UserInfo.icon)
  return icon_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* UserInfo::release_icon() {
  // @@protoc_insertion_point(field_release:UserInfo.icon)
  clear_has_icon();
  return icon_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void UserInfo::set_allocated_icon(::std::string* icon) {
  if (icon != NULL) {
    set_has_icon();
  } else {
    clear_has_icon();
  }
  icon_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), icon);
  // @@protoc_insertion_point(field_set_allocated:UserInfo.icon)
}

// required int64 money = 5;
inline bool UserInfo::has_money() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void UserInfo::set_has_money() {
  _has_bits_[0] |= 0x00000010u;
}
inline void UserInfo::clear_has_money() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void UserInfo::clear_money() {
  money_ = GOOGLE_LONGLONG(0);
  clear_has_money();
}
inline ::google::protobuf::int64 UserInfo::money() const {
  // @@protoc_insertion_point(field_get:UserInfo.money)
  return money_;
}
inline void UserInfo::set_money(::google::protobuf::int64 value) {
  set_has_money();
  money_ = value;
  // @@protoc_insertion_point(field_set:UserInfo.money)
}

// required int64 bet_money = 6;
inline bool UserInfo::has_bet_money() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void UserInfo::set_has_bet_money() {
  _has_bits_[0] |= 0x00000020u;
}
inline void UserInfo::clear_has_bet_money() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void UserInfo::clear_bet_money() {
  bet_money_ = GOOGLE_LONGLONG(0);
  clear_has_bet_money();
}
inline ::google::protobuf::int64 UserInfo::bet_money() const {
  // @@protoc_insertion_point(field_get:UserInfo.bet_money)
  return bet_money_;
}
inline void UserInfo::set_bet_money(::google::protobuf::int64 value) {
  set_has_bet_money();
  bet_money_ = value;
  // @@protoc_insertion_point(field_set:UserInfo.bet_money)
}

// optional int32 action = 7;
inline bool UserInfo::has_action() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void UserInfo::set_has_action() {
  _has_bits_[0] |= 0x00000040u;
}
inline void UserInfo::clear_has_action() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void UserInfo::clear_action() {
  action_ = 0;
  clear_has_action();
}
inline ::google::protobuf::int32 UserInfo::action() const {
  // @@protoc_insertion_point(field_get:UserInfo.action)
  return action_;
}
inline void UserInfo::set_action(::google::protobuf::int32 value) {
  set_has_action();
  action_ = value;
  // @@protoc_insertion_point(field_set:UserInfo.action)
}

// optional int32 position = 8;
inline bool UserInfo::has_position() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void UserInfo::set_has_position() {
  _has_bits_[0] |= 0x00000080u;
}
inline void UserInfo::clear_has_position() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void UserInfo::clear_position() {
  position_ = 0;
  clear_has_position();
}
inline ::google::protobuf::int32 UserInfo::position() const {
  // @@protoc_insertion_point(field_get:UserInfo.position)
  return position_;
}
inline void UserInfo::set_position(::google::protobuf::int32 value) {
  set_has_position();
  position_ = value;
  // @@protoc_insertion_point(field_set:UserInfo.position)
}

// required int32 hole_cards = 9;
inline bool UserInfo::has_hole_cards() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void UserInfo::set_has_hole_cards() {
  _has_bits_[0] |= 0x00000100u;
}
inline void UserInfo::clear_has_hole_cards() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void UserInfo::clear_hole_cards() {
  hole_cards_ = 0;
  clear_has_hole_cards();
}
inline ::google::protobuf::int32 UserInfo::hole_cards() const {
  // @@protoc_insertion_point(field_get:UserInfo.hole_cards)
  return hole_cards_;
}
inline void UserInfo::set_hole_cards(::google::protobuf::int32 value) {
  set_has_hole_cards();
  hole_cards_ = value;
  // @@protoc_insertion_point(field_set:UserInfo.hole_cards)
}

// required int32 countdown = 10;
inline bool UserInfo::has_countdown() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void UserInfo::set_has_countdown() {
  _has_bits_[0] |= 0x00000200u;
}
inline void UserInfo::clear_has_countdown() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void UserInfo::clear_countdown() {
  countdown_ = 0;
  clear_has_countdown();
}
inline ::google::protobuf::int32 UserInfo::countdown() const {
  // @@protoc_insertion_point(field_get:UserInfo.countdown)
  return countdown_;
}
inline void UserInfo::set_countdown(::google::protobuf::int32 value) {
  set_has_countdown();
  countdown_ = value;
  // @@protoc_insertion_point(field_set:UserInfo.countdown)
}

// repeated int32 cards = 11;
inline int UserInfo::cards_size() const {
  return cards_.size();
}
inline void UserInfo::clear_cards() {
  cards_.Clear();
}
inline ::google::protobuf::int32 UserInfo::cards(int index) const {
  // @@protoc_insertion_point(field_get:UserInfo.cards)
  return cards_.Get(index);
}
inline void UserInfo::set_cards(int index, ::google::protobuf::int32 value) {
  cards_.Set(index, value);
  // @@protoc_insertion_point(field_set:UserInfo.cards)
}
inline void UserInfo::add_cards(::google::protobuf::int32 value) {
  cards_.Add(value);
  // @@protoc_insertion_point(field_add:UserInfo.cards)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
UserInfo::cards() const {
  // @@protoc_insertion_point(field_list:UserInfo.cards)
  return cards_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
UserInfo::mutable_cards() {
  // @@protoc_insertion_point(field_mutable_list:UserInfo.cards)
  return &cards_;
}

// optional int32 cards_type = 12;
inline bool UserInfo::has_cards_type() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void UserInfo::set_has_cards_type() {
  _has_bits_[0] |= 0x00000800u;
}
inline void UserInfo::clear_has_cards_type() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void UserInfo::clear_cards_type() {
  cards_type_ = 0;
  clear_has_cards_type();
}
inline ::google::protobuf::int32 UserInfo::cards_type() const {
  // @@protoc_insertion_point(field_get:UserInfo.cards_type)
  return cards_type_;
}
inline void UserInfo::set_cards_type(::google::protobuf::int32 value) {
  set_has_cards_type();
  cards_type_ = value;
  // @@protoc_insertion_point(field_set:UserInfo.cards_type)
}

// optional int64 tax = 13;
inline bool UserInfo::has_tax() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void UserInfo::set_has_tax() {
  _has_bits_[0] |= 0x00000400u;
}
inline void UserInfo::clear_has_tax() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void UserInfo::clear_tax() {
  tax_ = GOOGLE_LONGLONG(0);
  clear_has_tax();
}
inline ::google::protobuf::int64 UserInfo::tax() const {
  // @@protoc_insertion_point(field_get:UserInfo.tax)
  return tax_;
}
inline void UserInfo::set_tax(::google::protobuf::int64 value) {
  set_has_tax();
  tax_ = value;
  // @@protoc_insertion_point(field_set:UserInfo.tax)
}

// optional int32 victory = 14;
inline bool UserInfo::has_victory() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void UserInfo::set_has_victory() {
  _has_bits_[0] |= 0x00001000u;
}
inline void UserInfo::clear_has_victory() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void UserInfo::clear_victory() {
  victory_ = 0;
  clear_has_victory();
}
inline ::google::protobuf::int32 UserInfo::victory() const {
  // @@protoc_insertion_point(field_get:UserInfo.victory)
  return victory_;
}
inline void UserInfo::set_victory(::google::protobuf::int32 value) {
  set_has_victory();
  victory_ = value;
  // @@protoc_insertion_point(field_set:UserInfo.victory)
}

// optional int32 biggest_winner = 15;
inline bool UserInfo::has_biggest_winner() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void UserInfo::set_has_biggest_winner() {
  _has_bits_[0] |= 0x00004000u;
}
inline void UserInfo::clear_has_biggest_winner() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void UserInfo::clear_biggest_winner() {
  biggest_winner_ = 0;
  clear_has_biggest_winner();
}
inline ::google::protobuf::int32 UserInfo::biggest_winner() const {
  // @@protoc_insertion_point(field_get:UserInfo.biggest_winner)
  return biggest_winner_;
}
inline void UserInfo::set_biggest_winner(::google::protobuf::int32 value) {
  set_has_biggest_winner();
  biggest_winner_ = value;
  // @@protoc_insertion_point(field_set:UserInfo.biggest_winner)
}

// required int64 win_money = 16;
inline bool UserInfo::has_win_money() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void UserInfo::set_has_win_money() {
  _has_bits_[0] |= 0x00002000u;
}
inline void UserInfo::clear_has_win_money() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void UserInfo::clear_win_money() {
  win_money_ = GOOGLE_LONGLONG(0);
  clear_has_win_money();
}
inline ::google::protobuf::int64 UserInfo::win_money() const {
  // @@protoc_insertion_point(field_get:UserInfo.win_money)
  return win_money_;
}
inline void UserInfo::set_win_money(::google::protobuf::int64 value) {
  set_has_win_money();
  win_money_ = value;
  // @@protoc_insertion_point(field_set:UserInfo.win_money)
}

// required int32 main_pot_money = 17;
inline bool UserInfo::has_main_pot_money() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
inline void UserInfo::set_has_main_pot_money() {
  _has_bits_[0] |= 0x00008000u;
}
inline void UserInfo::clear_has_main_pot_money() {
  _has_bits_[0] &= ~0x00008000u;
}
inline void UserInfo::clear_main_pot_money() {
  main_pot_money_ = 0;
  clear_has_main_pot_money();
}
inline ::google::protobuf::int32 UserInfo::main_pot_money() const {
  // @@protoc_insertion_point(field_get:UserInfo.main_pot_money)
  return main_pot_money_;
}
inline void UserInfo::set_main_pot_money(::google::protobuf::int32 value) {
  set_has_main_pot_money();
  main_pot_money_ = value;
  // @@protoc_insertion_point(field_set:UserInfo.main_pot_money)
}

// repeated int32 side_pot_money = 18;
inline int UserInfo::side_pot_money_size() const {
  return side_pot_money_.size();
}
inline void UserInfo::clear_side_pot_money() {
  side_pot_money_.Clear();
}
inline ::google::protobuf::int32 UserInfo::side_pot_money(int index) const {
  // @@protoc_insertion_point(field_get:UserInfo.side_pot_money)
  return side_pot_money_.Get(index);
}
inline void UserInfo::set_side_pot_money(int index, ::google::protobuf::int32 value) {
  side_pot_money_.Set(index, value);
  // @@protoc_insertion_point(field_set:UserInfo.side_pot_money)
}
inline void UserInfo::add_side_pot_money(::google::protobuf::int32 value) {
  side_pot_money_.Add(value);
  // @@protoc_insertion_point(field_add:UserInfo.side_pot_money)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
UserInfo::side_pot_money() const {
  // @@protoc_insertion_point(field_list:UserInfo.side_pot_money)
  return side_pot_money_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
UserInfo::mutable_side_pot_money() {
  // @@protoc_insertion_point(field_mutable_list:UserInfo.side_pot_money)
  return &side_pot_money_;
}

// repeated int32 cards_show = 19;
inline int UserInfo::cards_show_size() const {
  return cards_show_.size();
}
inline void UserInfo::clear_cards_show() {
  cards_show_.Clear();
}
inline ::google::protobuf::int32 UserInfo::cards_show(int index) const {
  // @@protoc_insertion_point(field_get:UserInfo.cards_show)
  return cards_show_.Get(index);
}
inline void UserInfo::set_cards_show(int index, ::google::protobuf::int32 value) {
  cards_show_.Set(index, value);
  // @@protoc_insertion_point(field_set:UserInfo.cards_show)
}
inline void UserInfo::add_cards_show(::google::protobuf::int32 value) {
  cards_show_.Add(value);
  // @@protoc_insertion_point(field_add:UserInfo.cards_show)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
UserInfo::cards_show() const {
  // @@protoc_insertion_point(field_list:UserInfo.cards_show)
  return cards_show_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
UserInfo::mutable_cards_show() {
  // @@protoc_insertion_point(field_mutable_list:UserInfo.cards_show)
  return &cards_show_;
}

// -------------------------------------------------------------------

// TexasTable

// optional int32 state = 1;
inline bool TexasTable::has_state() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void TexasTable::set_has_state() {
  _has_bits_[0] |= 0x00000008u;
}
inline void TexasTable::clear_has_state() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void TexasTable::clear_state() {
  state_ = 0;
  clear_has_state();
}
inline ::google::protobuf::int32 TexasTable::state() const {
  // @@protoc_insertion_point(field_get:TexasTable.state)
  return state_;
}
inline void TexasTable::set_state(::google::protobuf::int32 value) {
  set_has_state();
  state_ = value;
  // @@protoc_insertion_point(field_set:TexasTable.state)
}

// optional int64 max_bet = 2;
inline bool TexasTable::has_max_bet() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TexasTable::set_has_max_bet() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TexasTable::clear_has_max_bet() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TexasTable::clear_max_bet() {
  max_bet_ = GOOGLE_LONGLONG(0);
  clear_has_max_bet();
}
inline ::google::protobuf::int64 TexasTable::max_bet() const {
  // @@protoc_insertion_point(field_get:TexasTable.max_bet)
  return max_bet_;
}
inline void TexasTable::set_max_bet(::google::protobuf::int64 value) {
  set_has_max_bet();
  max_bet_ = value;
  // @@protoc_insertion_point(field_set:TexasTable.max_bet)
}

// optional int64 min_bet = 3;
inline bool TexasTable::has_min_bet() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TexasTable::set_has_min_bet() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TexasTable::clear_has_min_bet() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TexasTable::clear_min_bet() {
  min_bet_ = GOOGLE_LONGLONG(0);
  clear_has_min_bet();
}
inline ::google::protobuf::int64 TexasTable::min_bet() const {
  // @@protoc_insertion_point(field_get:TexasTable.min_bet)
  return min_bet_;
}
inline void TexasTable::set_min_bet(::google::protobuf::int64 value) {
  set_has_min_bet();
  min_bet_ = value;
  // @@protoc_insertion_point(field_set:TexasTable.min_bet)
}

// optional int64 blind_bet = 4;
inline bool TexasTable::has_blind_bet() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void TexasTable::set_has_blind_bet() {
  _has_bits_[0] |= 0x00000004u;
}
inline void TexasTable::clear_has_blind_bet() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void TexasTable::clear_blind_bet() {
  blind_bet_ = GOOGLE_LONGLONG(0);
  clear_has_blind_bet();
}
inline ::google::protobuf::int64 TexasTable::blind_bet() const {
  // @@protoc_insertion_point(field_get:TexasTable.blind_bet)
  return blind_bet_;
}
inline void TexasTable::set_blind_bet(::google::protobuf::int64 value) {
  set_has_blind_bet();
  blind_bet_ = value;
  // @@protoc_insertion_point(field_set:TexasTable.blind_bet)
}

// required int64 pot = 5;
inline bool TexasTable::has_pot() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void TexasTable::set_has_pot() {
  _has_bits_[0] |= 0x00000020u;
}
inline void TexasTable::clear_has_pot() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void TexasTable::clear_pot() {
  pot_ = GOOGLE_LONGLONG(0);
  clear_has_pot();
}
inline ::google::protobuf::int64 TexasTable::pot() const {
  // @@protoc_insertion_point(field_get:TexasTable.pot)
  return pot_;
}
inline void TexasTable::set_pot(::google::protobuf::int64 value) {
  set_has_pot();
  pot_ = value;
  // @@protoc_insertion_point(field_set:TexasTable.pot)
}

// repeated int64 side_pot = 6;
inline int TexasTable::side_pot_size() const {
  return side_pot_.size();
}
inline void TexasTable::clear_side_pot() {
  side_pot_.Clear();
}
inline ::google::protobuf::int64 TexasTable::side_pot(int index) const {
  // @@protoc_insertion_point(field_get:TexasTable.side_pot)
  return side_pot_.Get(index);
}
inline void TexasTable::set_side_pot(int index, ::google::protobuf::int64 value) {
  side_pot_.Set(index, value);
  // @@protoc_insertion_point(field_set:TexasTable.side_pot)
}
inline void TexasTable::add_side_pot(::google::protobuf::int64 value) {
  side_pot_.Add(value);
  // @@protoc_insertion_point(field_add:TexasTable.side_pot)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int64 >&
TexasTable::side_pot() const {
  // @@protoc_insertion_point(field_list:TexasTable.side_pot)
  return side_pot_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int64 >*
TexasTable::mutable_side_pot() {
  // @@protoc_insertion_point(field_mutable_list:TexasTable.side_pot)
  return &side_pot_;
}

// optional int32 think_time = 7;
inline bool TexasTable::has_think_time() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void TexasTable::set_has_think_time() {
  _has_bits_[0] |= 0x00000010u;
}
inline void TexasTable::clear_has_think_time() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void TexasTable::clear_think_time() {
  think_time_ = 0;
  clear_has_think_time();
}
inline ::google::protobuf::int32 TexasTable::think_time() const {
  // @@protoc_insertion_point(field_get:TexasTable.think_time)
  return think_time_;
}
inline void TexasTable::set_think_time(::google::protobuf::int32 value) {
  set_has_think_time();
  think_time_ = value;
  // @@protoc_insertion_point(field_set:TexasTable.think_time)
}

// repeated int32 public_cards = 8;
inline int TexasTable::public_cards_size() const {
  return public_cards_.size();
}
inline void TexasTable::clear_public_cards() {
  public_cards_.Clear();
}
inline ::google::protobuf::int32 TexasTable::public_cards(int index) const {
  // @@protoc_insertion_point(field_get:TexasTable.public_cards)
  return public_cards_.Get(index);
}
inline void TexasTable::set_public_cards(int index, ::google::protobuf::int32 value) {
  public_cards_.Set(index, value);
  // @@protoc_insertion_point(field_set:TexasTable.public_cards)
}
inline void TexasTable::add_public_cards(::google::protobuf::int32 value) {
  public_cards_.Add(value);
  // @@protoc_insertion_point(field_add:TexasTable.public_cards)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
TexasTable::public_cards() const {
  // @@protoc_insertion_point(field_list:TexasTable.public_cards)
  return public_cards_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
TexasTable::mutable_public_cards() {
  // @@protoc_insertion_point(field_mutable_list:TexasTable.public_cards)
  return &public_cards_;
}

// optional int32 own_chair = 9;
inline bool TexasTable::has_own_chair() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void TexasTable::set_has_own_chair() {
  _has_bits_[0] |= 0x00000040u;
}
inline void TexasTable::clear_has_own_chair() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void TexasTable::clear_own_chair() {
  own_chair_ = 0;
  clear_has_own_chair();
}
inline ::google::protobuf::int32 TexasTable::own_chair() const {
  // @@protoc_insertion_point(field_get:TexasTable.own_chair)
  return own_chair_;
}
inline void TexasTable::set_own_chair(::google::protobuf::int32 value) {
  set_has_own_chair();
  own_chair_ = value;
  // @@protoc_insertion_point(field_set:TexasTable.own_chair)
}

// -------------------------------------------------------------------

// SC_TexasTableInfo

// optional .TexasTable pb_table = 1;
inline bool SC_TexasTableInfo::has_pb_table() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SC_TexasTableInfo::set_has_pb_table() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SC_TexasTableInfo::clear_has_pb_table() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SC_TexasTableInfo::clear_pb_table() {
  if (pb_table_ != NULL) pb_table_->::TexasTable::Clear();
  clear_has_pb_table();
}
inline const ::TexasTable& SC_TexasTableInfo::pb_table() const {
  // @@protoc_insertion_point(field_get:SC_TexasTableInfo.pb_table)
  return pb_table_ != NULL ? *pb_table_
                         : *::TexasTable::internal_default_instance();
}
inline ::TexasTable* SC_TexasTableInfo::mutable_pb_table() {
  set_has_pb_table();
  if (pb_table_ == NULL) {
    pb_table_ = new ::TexasTable;
  }
  // @@protoc_insertion_point(field_mutable:SC_TexasTableInfo.pb_table)
  return pb_table_;
}
inline ::TexasTable* SC_TexasTableInfo::release_pb_table() {
  // @@protoc_insertion_point(field_release:SC_TexasTableInfo.pb_table)
  clear_has_pb_table();
  ::TexasTable* temp = pb_table_;
  pb_table_ = NULL;
  return temp;
}
inline void SC_TexasTableInfo::set_allocated_pb_table(::TexasTable* pb_table) {
  delete pb_table_;
  pb_table_ = pb_table;
  if (pb_table) {
    set_has_pb_table();
  } else {
    clear_has_pb_table();
  }
  // @@protoc_insertion_point(field_set_allocated:SC_TexasTableInfo.pb_table)
}

// repeated .UserInfo pb_user = 2;
inline int SC_TexasTableInfo::pb_user_size() const {
  return pb_user_.size();
}
inline void SC_TexasTableInfo::clear_pb_user() {
  pb_user_.Clear();
}
inline const ::UserInfo& SC_TexasTableInfo::pb_user(int index) const {
  // @@protoc_insertion_point(field_get:SC_TexasTableInfo.pb_user)
  return pb_user_.Get(index);
}
inline ::UserInfo* SC_TexasTableInfo::mutable_pb_user(int index) {
  // @@protoc_insertion_point(field_mutable:SC_TexasTableInfo.pb_user)
  return pb_user_.Mutable(index);
}
inline ::UserInfo* SC_TexasTableInfo::add_pb_user() {
  // @@protoc_insertion_point(field_add:SC_TexasTableInfo.pb_user)
  return pb_user_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::UserInfo >*
SC_TexasTableInfo::mutable_pb_user() {
  // @@protoc_insertion_point(field_mutable_list:SC_TexasTableInfo.pb_user)
  return &pb_user_;
}
inline const ::google::protobuf::RepeatedPtrField< ::UserInfo >&
SC_TexasTableInfo::pb_user() const {
  // @@protoc_insertion_point(field_list:SC_TexasTableInfo.pb_user)
  return pb_user_;
}

// -------------------------------------------------------------------

// SC_TexasSendUserCards

// repeated .UserInfo pb_user = 1;
inline int SC_TexasSendUserCards::pb_user_size() const {
  return pb_user_.size();
}
inline void SC_TexasSendUserCards::clear_pb_user() {
  pb_user_.Clear();
}
inline const ::UserInfo& SC_TexasSendUserCards::pb_user(int index) const {
  // @@protoc_insertion_point(field_get:SC_TexasSendUserCards.pb_user)
  return pb_user_.Get(index);
}
inline ::UserInfo* SC_TexasSendUserCards::mutable_pb_user(int index) {
  // @@protoc_insertion_point(field_mutable:SC_TexasSendUserCards.pb_user)
  return pb_user_.Mutable(index);
}
inline ::UserInfo* SC_TexasSendUserCards::add_pb_user() {
  // @@protoc_insertion_point(field_add:SC_TexasSendUserCards.pb_user)
  return pb_user_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::UserInfo >*
SC_TexasSendUserCards::mutable_pb_user() {
  // @@protoc_insertion_point(field_mutable_list:SC_TexasSendUserCards.pb_user)
  return &pb_user_;
}
inline const ::google::protobuf::RepeatedPtrField< ::UserInfo >&
SC_TexasSendUserCards::pb_user() const {
  // @@protoc_insertion_point(field_list:SC_TexasSendUserCards.pb_user)
  return pb_user_;
}

// optional .TexasTable pb_table = 2;
inline bool SC_TexasSendUserCards::has_pb_table() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SC_TexasSendUserCards::set_has_pb_table() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SC_TexasSendUserCards::clear_has_pb_table() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SC_TexasSendUserCards::clear_pb_table() {
  if (pb_table_ != NULL) pb_table_->::TexasTable::Clear();
  clear_has_pb_table();
}
inline const ::TexasTable& SC_TexasSendUserCards::pb_table() const {
  // @@protoc_insertion_point(field_get:SC_TexasSendUserCards.pb_table)
  return pb_table_ != NULL ? *pb_table_
                         : *::TexasTable::internal_default_instance();
}
inline ::TexasTable* SC_TexasSendUserCards::mutable_pb_table() {
  set_has_pb_table();
  if (pb_table_ == NULL) {
    pb_table_ = new ::TexasTable;
  }
  // @@protoc_insertion_point(field_mutable:SC_TexasSendUserCards.pb_table)
  return pb_table_;
}
inline ::TexasTable* SC_TexasSendUserCards::release_pb_table() {
  // @@protoc_insertion_point(field_release:SC_TexasSendUserCards.pb_table)
  clear_has_pb_table();
  ::TexasTable* temp = pb_table_;
  pb_table_ = NULL;
  return temp;
}
inline void SC_TexasSendUserCards::set_allocated_pb_table(::TexasTable* pb_table) {
  delete pb_table_;
  pb_table_ = pb_table;
  if (pb_table) {
    set_has_pb_table();
  } else {
    clear_has_pb_table();
  }
  // @@protoc_insertion_point(field_set_allocated:SC_TexasSendUserCards.pb_table)
}

// -------------------------------------------------------------------

// SC_TexasSendPublicCards

// optional .TexasTable pb_table = 1;
inline bool SC_TexasSendPublicCards::has_pb_table() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SC_TexasSendPublicCards::set_has_pb_table() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SC_TexasSendPublicCards::clear_has_pb_table() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SC_TexasSendPublicCards::clear_pb_table() {
  if (pb_table_ != NULL) pb_table_->::TexasTable::Clear();
  clear_has_pb_table();
}
inline const ::TexasTable& SC_TexasSendPublicCards::pb_table() const {
  // @@protoc_insertion_point(field_get:SC_TexasSendPublicCards.pb_table)
  return pb_table_ != NULL ? *pb_table_
                         : *::TexasTable::internal_default_instance();
}
inline ::TexasTable* SC_TexasSendPublicCards::mutable_pb_table() {
  set_has_pb_table();
  if (pb_table_ == NULL) {
    pb_table_ = new ::TexasTable;
  }
  // @@protoc_insertion_point(field_mutable:SC_TexasSendPublicCards.pb_table)
  return pb_table_;
}
inline ::TexasTable* SC_TexasSendPublicCards::release_pb_table() {
  // @@protoc_insertion_point(field_release:SC_TexasSendPublicCards.pb_table)
  clear_has_pb_table();
  ::TexasTable* temp = pb_table_;
  pb_table_ = NULL;
  return temp;
}
inline void SC_TexasSendPublicCards::set_allocated_pb_table(::TexasTable* pb_table) {
  delete pb_table_;
  pb_table_ = pb_table;
  if (pb_table) {
    set_has_pb_table();
  } else {
    clear_has_pb_table();
  }
  // @@protoc_insertion_point(field_set_allocated:SC_TexasSendPublicCards.pb_table)
}

// repeated .UserInfo pb_user = 2;
inline int SC_TexasSendPublicCards::pb_user_size() const {
  return pb_user_.size();
}
inline void SC_TexasSendPublicCards::clear_pb_user() {
  pb_user_.Clear();
}
inline const ::UserInfo& SC_TexasSendPublicCards::pb_user(int index) const {
  // @@protoc_insertion_point(field_get:SC_TexasSendPublicCards.pb_user)
  return pb_user_.Get(index);
}
inline ::UserInfo* SC_TexasSendPublicCards::mutable_pb_user(int index) {
  // @@protoc_insertion_point(field_mutable:SC_TexasSendPublicCards.pb_user)
  return pb_user_.Mutable(index);
}
inline ::UserInfo* SC_TexasSendPublicCards::add_pb_user() {
  // @@protoc_insertion_point(field_add:SC_TexasSendPublicCards.pb_user)
  return pb_user_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::UserInfo >*
SC_TexasSendPublicCards::mutable_pb_user() {
  // @@protoc_insertion_point(field_mutable_list:SC_TexasSendPublicCards.pb_user)
  return &pb_user_;
}
inline const ::google::protobuf::RepeatedPtrField< ::UserInfo >&
SC_TexasSendPublicCards::pb_user() const {
  // @@protoc_insertion_point(field_list:SC_TexasSendPublicCards.pb_user)
  return pb_user_;
}

// repeated int32 public_cards = 3;
inline int SC_TexasSendPublicCards::public_cards_size() const {
  return public_cards_.size();
}
inline void SC_TexasSendPublicCards::clear_public_cards() {
  public_cards_.Clear();
}
inline ::google::protobuf::int32 SC_TexasSendPublicCards::public_cards(int index) const {
  // @@protoc_insertion_point(field_get:SC_TexasSendPublicCards.public_cards)
  return public_cards_.Get(index);
}
inline void SC_TexasSendPublicCards::set_public_cards(int index, ::google::protobuf::int32 value) {
  public_cards_.Set(index, value);
  // @@protoc_insertion_point(field_set:SC_TexasSendPublicCards.public_cards)
}
inline void SC_TexasSendPublicCards::add_public_cards(::google::protobuf::int32 value) {
  public_cards_.Add(value);
  // @@protoc_insertion_point(field_add:SC_TexasSendPublicCards.public_cards)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
SC_TexasSendPublicCards::public_cards() const {
  // @@protoc_insertion_point(field_list:SC_TexasSendPublicCards.public_cards)
  return public_cards_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
SC_TexasSendPublicCards::mutable_public_cards() {
  // @@protoc_insertion_point(field_mutable_list:SC_TexasSendPublicCards.public_cards)
  return &public_cards_;
}

// -------------------------------------------------------------------

// SC_TexasUserAction

// optional .UserInfo pb_action = 1;
inline bool SC_TexasUserAction::has_pb_action() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SC_TexasUserAction::set_has_pb_action() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SC_TexasUserAction::clear_has_pb_action() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SC_TexasUserAction::clear_pb_action() {
  if (pb_action_ != NULL) pb_action_->::UserInfo::Clear();
  clear_has_pb_action();
}
inline const ::UserInfo& SC_TexasUserAction::pb_action() const {
  // @@protoc_insertion_point(field_get:SC_TexasUserAction.pb_action)
  return pb_action_ != NULL ? *pb_action_
                         : *::UserInfo::internal_default_instance();
}
inline ::UserInfo* SC_TexasUserAction::mutable_pb_action() {
  set_has_pb_action();
  if (pb_action_ == NULL) {
    pb_action_ = new ::UserInfo;
  }
  // @@protoc_insertion_point(field_mutable:SC_TexasUserAction.pb_action)
  return pb_action_;
}
inline ::UserInfo* SC_TexasUserAction::release_pb_action() {
  // @@protoc_insertion_point(field_release:SC_TexasUserAction.pb_action)
  clear_has_pb_action();
  ::UserInfo* temp = pb_action_;
  pb_action_ = NULL;
  return temp;
}
inline void SC_TexasUserAction::set_allocated_pb_action(::UserInfo* pb_action) {
  delete pb_action_;
  pb_action_ = pb_action;
  if (pb_action) {
    set_has_pb_action();
  } else {
    clear_has_pb_action();
  }
  // @@protoc_insertion_point(field_set_allocated:SC_TexasUserAction.pb_action)
}

// optional .TexasTable pb_table = 2;
inline bool SC_TexasUserAction::has_pb_table() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SC_TexasUserAction::set_has_pb_table() {
  _has_bits_[0] |= 0x00000002u;
}
inline void SC_TexasUserAction::clear_has_pb_table() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void SC_TexasUserAction::clear_pb_table() {
  if (pb_table_ != NULL) pb_table_->::TexasTable::Clear();
  clear_has_pb_table();
}
inline const ::TexasTable& SC_TexasUserAction::pb_table() const {
  // @@protoc_insertion_point(field_get:SC_TexasUserAction.pb_table)
  return pb_table_ != NULL ? *pb_table_
                         : *::TexasTable::internal_default_instance();
}
inline ::TexasTable* SC_TexasUserAction::mutable_pb_table() {
  set_has_pb_table();
  if (pb_table_ == NULL) {
    pb_table_ = new ::TexasTable;
  }
  // @@protoc_insertion_point(field_mutable:SC_TexasUserAction.pb_table)
  return pb_table_;
}
inline ::TexasTable* SC_TexasUserAction::release_pb_table() {
  // @@protoc_insertion_point(field_release:SC_TexasUserAction.pb_table)
  clear_has_pb_table();
  ::TexasTable* temp = pb_table_;
  pb_table_ = NULL;
  return temp;
}
inline void SC_TexasUserAction::set_allocated_pb_table(::TexasTable* pb_table) {
  delete pb_table_;
  pb_table_ = pb_table;
  if (pb_table) {
    set_has_pb_table();
  } else {
    clear_has_pb_table();
  }
  // @@protoc_insertion_point(field_set_allocated:SC_TexasUserAction.pb_table)
}

// required int32 chair = 3;
inline bool SC_TexasUserAction::has_chair() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void SC_TexasUserAction::set_has_chair() {
  _has_bits_[0] |= 0x00000004u;
}
inline void SC_TexasUserAction::clear_has_chair() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void SC_TexasUserAction::clear_chair() {
  chair_ = 0;
  clear_has_chair();
}
inline ::google::protobuf::int32 SC_TexasUserAction::chair() const {
  // @@protoc_insertion_point(field_get:SC_TexasUserAction.chair)
  return chair_;
}
inline void SC_TexasUserAction::set_chair(::google::protobuf::int32 value) {
  set_has_chair();
  chair_ = value;
  // @@protoc_insertion_point(field_set:SC_TexasUserAction.chair)
}

// required int32 action = 4;
inline bool SC_TexasUserAction::has_action() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void SC_TexasUserAction::set_has_action() {
  _has_bits_[0] |= 0x00000008u;
}
inline void SC_TexasUserAction::clear_has_action() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void SC_TexasUserAction::clear_action() {
  action_ = 0;
  clear_has_action();
}
inline ::google::protobuf::int32 SC_TexasUserAction::action() const {
  // @@protoc_insertion_point(field_get:SC_TexasUserAction.action)
  return action_;
}
inline void SC_TexasUserAction::set_action(::google::protobuf::int32 value) {
  set_has_action();
  action_ = value;
  // @@protoc_insertion_point(field_set:SC_TexasUserAction.action)
}

// required int64 bet_money = 5;
inline bool SC_TexasUserAction::has_bet_money() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void SC_TexasUserAction::set_has_bet_money() {
  _has_bits_[0] |= 0x00000010u;
}
inline void SC_TexasUserAction::clear_has_bet_money() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void SC_TexasUserAction::clear_bet_money() {
  bet_money_ = GOOGLE_LONGLONG(0);
  clear_has_bet_money();
}
inline ::google::protobuf::int64 SC_TexasUserAction::bet_money() const {
  // @@protoc_insertion_point(field_get:SC_TexasUserAction.bet_money)
  return bet_money_;
}
inline void SC_TexasUserAction::set_bet_money(::google::protobuf::int64 value) {
  set_has_bet_money();
  bet_money_ = value;
  // @@protoc_insertion_point(field_set:SC_TexasUserAction.bet_money)
}

// -------------------------------------------------------------------

// SC_TexasNewUser

// optional .UserInfo pb_user = 1;
inline bool SC_TexasNewUser::has_pb_user() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SC_TexasNewUser::set_has_pb_user() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SC_TexasNewUser::clear_has_pb_user() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SC_TexasNewUser::clear_pb_user() {
  if (pb_user_ != NULL) pb_user_->::UserInfo::Clear();
  clear_has_pb_user();
}
inline const ::UserInfo& SC_TexasNewUser::pb_user() const {
  // @@protoc_insertion_point(field_get:SC_TexasNewUser.pb_user)
  return pb_user_ != NULL ? *pb_user_
                         : *::UserInfo::internal_default_instance();
}
inline ::UserInfo* SC_TexasNewUser::mutable_pb_user() {
  set_has_pb_user();
  if (pb_user_ == NULL) {
    pb_user_ = new ::UserInfo;
  }
  // @@protoc_insertion_point(field_mutable:SC_TexasNewUser.pb_user)
  return pb_user_;
}
inline ::UserInfo* SC_TexasNewUser::release_pb_user() {
  // @@protoc_insertion_point(field_release:SC_TexasNewUser.pb_user)
  clear_has_pb_user();
  ::UserInfo* temp = pb_user_;
  pb_user_ = NULL;
  return temp;
}
inline void SC_TexasNewUser::set_allocated_pb_user(::UserInfo* pb_user) {
  delete pb_user_;
  pb_user_ = pb_user;
  if (pb_user) {
    set_has_pb_user();
  } else {
    clear_has_pb_user();
  }
  // @@protoc_insertion_point(field_set_allocated:SC_TexasNewUser.pb_user)
}

// -------------------------------------------------------------------

// SC_TexasUserLeave

// optional .UserInfo pb_user = 1;
inline bool SC_TexasUserLeave::has_pb_user() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SC_TexasUserLeave::set_has_pb_user() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SC_TexasUserLeave::clear_has_pb_user() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SC_TexasUserLeave::clear_pb_user() {
  if (pb_user_ != NULL) pb_user_->::UserInfo::Clear();
  clear_has_pb_user();
}
inline const ::UserInfo& SC_TexasUserLeave::pb_user() const {
  // @@protoc_insertion_point(field_get:SC_TexasUserLeave.pb_user)
  return pb_user_ != NULL ? *pb_user_
                         : *::UserInfo::internal_default_instance();
}
inline ::UserInfo* SC_TexasUserLeave::mutable_pb_user() {
  set_has_pb_user();
  if (pb_user_ == NULL) {
    pb_user_ = new ::UserInfo;
  }
  // @@protoc_insertion_point(field_mutable:SC_TexasUserLeave.pb_user)
  return pb_user_;
}
inline ::UserInfo* SC_TexasUserLeave::release_pb_user() {
  // @@protoc_insertion_point(field_release:SC_TexasUserLeave.pb_user)
  clear_has_pb_user();
  ::UserInfo* temp = pb_user_;
  pb_user_ = NULL;
  return temp;
}
inline void SC_TexasUserLeave::set_allocated_pb_user(::UserInfo* pb_user) {
  delete pb_user_;
  pb_user_ = pb_user;
  if (pb_user) {
    set_has_pb_user();
  } else {
    clear_has_pb_user();
  }
  // @@protoc_insertion_point(field_set_allocated:SC_TexasUserLeave.pb_user)
}

// -------------------------------------------------------------------

// SC_TexasForceLeave

// optional string reason = 1;
inline bool SC_TexasForceLeave::has_reason() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SC_TexasForceLeave::set_has_reason() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SC_TexasForceLeave::clear_has_reason() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SC_TexasForceLeave::clear_reason() {
  reason_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_reason();
}
inline const ::std::string& SC_TexasForceLeave::reason() const {
  // @@protoc_insertion_point(field_get:SC_TexasForceLeave.reason)
  return reason_.GetNoArena();
}
inline void SC_TexasForceLeave::set_reason(const ::std::string& value) {
  set_has_reason();
  reason_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:SC_TexasForceLeave.reason)
}
#if LANG_CXX11
inline void SC_TexasForceLeave::set_reason(::std::string&& value) {
  set_has_reason();
  reason_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:SC_TexasForceLeave.reason)
}
#endif
inline void SC_TexasForceLeave::set_reason(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_reason();
  reason_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:SC_TexasForceLeave.reason)
}
inline void SC_TexasForceLeave::set_reason(const char* value, size_t size) {
  set_has_reason();
  reason_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:SC_TexasForceLeave.reason)
}
inline ::std::string* SC_TexasForceLeave::mutable_reason() {
  set_has_reason();
  // @@protoc_insertion_point(field_mutable:SC_TexasForceLeave.reason)
  return reason_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SC_TexasForceLeave::release_reason() {
  // @@protoc_insertion_point(field_release:SC_TexasForceLeave.reason)
  clear_has_reason();
  return reason_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SC_TexasForceLeave::set_allocated_reason(::std::string* reason) {
  if (reason != NULL) {
    set_has_reason();
  } else {
    clear_has_reason();
  }
  reason_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), reason);
  // @@protoc_insertion_point(field_set_allocated:SC_TexasForceLeave.reason)
}

// optional int32 num = 2;
inline bool SC_TexasForceLeave::has_num() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SC_TexasForceLeave::set_has_num() {
  _has_bits_[0] |= 0x00000002u;
}
inline void SC_TexasForceLeave::clear_has_num() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void SC_TexasForceLeave::clear_num() {
  num_ = 0;
  clear_has_num();
}
inline ::google::protobuf::int32 SC_TexasForceLeave::num() const {
  // @@protoc_insertion_point(field_get:SC_TexasForceLeave.num)
  return num_;
}
inline void SC_TexasForceLeave::set_num(::google::protobuf::int32 value) {
  set_has_num();
  num_ = value;
  // @@protoc_insertion_point(field_set:SC_TexasForceLeave.num)
}

// -------------------------------------------------------------------

// SC_TexasTableEnd

// repeated .UserInfo pb_user = 1;
inline int SC_TexasTableEnd::pb_user_size() const {
  return pb_user_.size();
}
inline void SC_TexasTableEnd::clear_pb_user() {
  pb_user_.Clear();
}
inline const ::UserInfo& SC_TexasTableEnd::pb_user(int index) const {
  // @@protoc_insertion_point(field_get:SC_TexasTableEnd.pb_user)
  return pb_user_.Get(index);
}
inline ::UserInfo* SC_TexasTableEnd::mutable_pb_user(int index) {
  // @@protoc_insertion_point(field_mutable:SC_TexasTableEnd.pb_user)
  return pb_user_.Mutable(index);
}
inline ::UserInfo* SC_TexasTableEnd::add_pb_user() {
  // @@protoc_insertion_point(field_add:SC_TexasTableEnd.pb_user)
  return pb_user_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::UserInfo >*
SC_TexasTableEnd::mutable_pb_user() {
  // @@protoc_insertion_point(field_mutable_list:SC_TexasTableEnd.pb_user)
  return &pb_user_;
}
inline const ::google::protobuf::RepeatedPtrField< ::UserInfo >&
SC_TexasTableEnd::pb_user() const {
  // @@protoc_insertion_point(field_list:SC_TexasTableEnd.pb_user)
  return pb_user_;
}

// optional .TexasTable pb_table = 2;
inline bool SC_TexasTableEnd::has_pb_table() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SC_TexasTableEnd::set_has_pb_table() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SC_TexasTableEnd::clear_has_pb_table() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SC_TexasTableEnd::clear_pb_table() {
  if (pb_table_ != NULL) pb_table_->::TexasTable::Clear();
  clear_has_pb_table();
}
inline const ::TexasTable& SC_TexasTableEnd::pb_table() const {
  // @@protoc_insertion_point(field_get:SC_TexasTableEnd.pb_table)
  return pb_table_ != NULL ? *pb_table_
                         : *::TexasTable::internal_default_instance();
}
inline ::TexasTable* SC_TexasTableEnd::mutable_pb_table() {
  set_has_pb_table();
  if (pb_table_ == NULL) {
    pb_table_ = new ::TexasTable;
  }
  // @@protoc_insertion_point(field_mutable:SC_TexasTableEnd.pb_table)
  return pb_table_;
}
inline ::TexasTable* SC_TexasTableEnd::release_pb_table() {
  // @@protoc_insertion_point(field_release:SC_TexasTableEnd.pb_table)
  clear_has_pb_table();
  ::TexasTable* temp = pb_table_;
  pb_table_ = NULL;
  return temp;
}
inline void SC_TexasTableEnd::set_allocated_pb_table(::TexasTable* pb_table) {
  delete pb_table_;
  pb_table_ = pb_table;
  if (pb_table) {
    set_has_pb_table();
  } else {
    clear_has_pb_table();
  }
  // @@protoc_insertion_point(field_set_allocated:SC_TexasTableEnd.pb_table)
}

// -------------------------------------------------------------------

// SC_TexasGiveTips

// required int32 chair = 1;
inline bool SC_TexasGiveTips::has_chair() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SC_TexasGiveTips::set_has_chair() {
  _has_bits_[0] |= 0x00000002u;
}
inline void SC_TexasGiveTips::clear_has_chair() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void SC_TexasGiveTips::clear_chair() {
  chair_ = 0;
  clear_has_chair();
}
inline ::google::protobuf::int32 SC_TexasGiveTips::chair() const {
  // @@protoc_insertion_point(field_get:SC_TexasGiveTips.chair)
  return chair_;
}
inline void SC_TexasGiveTips::set_chair(::google::protobuf::int32 value) {
  set_has_chair();
  chair_ = value;
  // @@protoc_insertion_point(field_set:SC_TexasGiveTips.chair)
}

// optional int64 money = 2;
inline bool SC_TexasGiveTips::has_money() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SC_TexasGiveTips::set_has_money() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SC_TexasGiveTips::clear_has_money() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SC_TexasGiveTips::clear_money() {
  money_ = GOOGLE_LONGLONG(0);
  clear_has_money();
}
inline ::google::protobuf::int64 SC_TexasGiveTips::money() const {
  // @@protoc_insertion_point(field_get:SC_TexasGiveTips.money)
  return money_;
}
inline void SC_TexasGiveTips::set_money(::google::protobuf::int64 value) {
  set_has_money();
  money_ = value;
  // @@protoc_insertion_point(field_set:SC_TexasGiveTips.money)
}

// -------------------------------------------------------------------

// SC_TexasShowCards

// required int32 chair = 1;
inline bool SC_TexasShowCards::has_chair() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SC_TexasShowCards::set_has_chair() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SC_TexasShowCards::clear_has_chair() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SC_TexasShowCards::clear_chair() {
  chair_ = 0;
  clear_has_chair();
}
inline ::google::protobuf::int32 SC_TexasShowCards::chair() const {
  // @@protoc_insertion_point(field_get:SC_TexasShowCards.chair)
  return chair_;
}
inline void SC_TexasShowCards::set_chair(::google::protobuf::int32 value) {
  set_has_chair();
  chair_ = value;
  // @@protoc_insertion_point(field_set:SC_TexasShowCards.chair)
}

// repeated int32 user_cards = 2;
inline int SC_TexasShowCards::user_cards_size() const {
  return user_cards_.size();
}
inline void SC_TexasShowCards::clear_user_cards() {
  user_cards_.Clear();
}
inline ::google::protobuf::int32 SC_TexasShowCards::user_cards(int index) const {
  // @@protoc_insertion_point(field_get:SC_TexasShowCards.user_cards)
  return user_cards_.Get(index);
}
inline void SC_TexasShowCards::set_user_cards(int index, ::google::protobuf::int32 value) {
  user_cards_.Set(index, value);
  // @@protoc_insertion_point(field_set:SC_TexasShowCards.user_cards)
}
inline void SC_TexasShowCards::add_user_cards(::google::protobuf::int32 value) {
  user_cards_.Add(value);
  // @@protoc_insertion_point(field_add:SC_TexasShowCards.user_cards)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
SC_TexasShowCards::user_cards() const {
  // @@protoc_insertion_point(field_list:SC_TexasShowCards.user_cards)
  return user_cards_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
SC_TexasShowCards::mutable_user_cards() {
  // @@protoc_insertion_point(field_mutable_list:SC_TexasShowCards.user_cards)
  return &user_cards_;
}

// optional int32 cards_type = 3;
inline bool SC_TexasShowCards::has_cards_type() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SC_TexasShowCards::set_has_cards_type() {
  _has_bits_[0] |= 0x00000002u;
}
inline void SC_TexasShowCards::clear_has_cards_type() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void SC_TexasShowCards::clear_cards_type() {
  cards_type_ = 0;
  clear_has_cards_type();
}
inline ::google::protobuf::int32 SC_TexasShowCards::cards_type() const {
  // @@protoc_insertion_point(field_get:SC_TexasShowCards.cards_type)
  return cards_type_;
}
inline void SC_TexasShowCards::set_cards_type(::google::protobuf::int32 value) {
  set_has_cards_type();
  cards_type_ = value;
  // @@protoc_insertion_point(field_set:SC_TexasShowCards.cards_type)
}

// -------------------------------------------------------------------

// SC_TexasShowCardsPermission

// required int32 chair = 1;
inline bool SC_TexasShowCardsPermission::has_chair() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SC_TexasShowCardsPermission::set_has_chair() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SC_TexasShowCardsPermission::clear_has_chair() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SC_TexasShowCardsPermission::clear_chair() {
  chair_ = 0;
  clear_has_chair();
}
inline ::google::protobuf::int32 SC_TexasShowCardsPermission::chair() const {
  // @@protoc_insertion_point(field_get:SC_TexasShowCardsPermission.chair)
  return chair_;
}
inline void SC_TexasShowCardsPermission::set_chair(::google::protobuf::int32 value) {
  set_has_chair();
  chair_ = value;
  // @@protoc_insertion_point(field_set:SC_TexasShowCardsPermission.chair)
}

// -------------------------------------------------------------------

// SC_TexasError

// optional int32 error = 1;
inline bool SC_TexasError::has_error() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SC_TexasError::set_has_error() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SC_TexasError::clear_has_error() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SC_TexasError::clear_error() {
  error_ = 0;
  clear_has_error();
}
inline ::google::protobuf::int32 SC_TexasError::error() const {
  // @@protoc_insertion_point(field_get:SC_TexasError.error)
  return error_;
}
inline void SC_TexasError::set_error(::google::protobuf::int32 value) {
  set_has_error();
  error_ = value;
  // @@protoc_insertion_point(field_set:SC_TexasError.error)
}

// -------------------------------------------------------------------

// CS_TexasUserAction

// required int32 action = 1;
inline bool CS_TexasUserAction::has_action() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CS_TexasUserAction::set_has_action() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CS_TexasUserAction::clear_has_action() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CS_TexasUserAction::clear_action() {
  action_ = 0;
  clear_has_action();
}
inline ::google::protobuf::int32 CS_TexasUserAction::action() const {
  // @@protoc_insertion_point(field_get:CS_TexasUserAction.action)
  return action_;
}
inline void CS_TexasUserAction::set_action(::google::protobuf::int32 value) {
  set_has_action();
  action_ = value;
  // @@protoc_insertion_point(field_set:CS_TexasUserAction.action)
}

// required int64 bet_money = 2;
inline bool CS_TexasUserAction::has_bet_money() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CS_TexasUserAction::set_has_bet_money() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CS_TexasUserAction::clear_has_bet_money() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CS_TexasUserAction::clear_bet_money() {
  bet_money_ = GOOGLE_LONGLONG(0);
  clear_has_bet_money();
}
inline ::google::protobuf::int64 CS_TexasUserAction::bet_money() const {
  // @@protoc_insertion_point(field_get:CS_TexasUserAction.bet_money)
  return bet_money_;
}
inline void CS_TexasUserAction::set_bet_money(::google::protobuf::int64 value) {
  set_has_bet_money();
  bet_money_ = value;
  // @@protoc_insertion_point(field_set:CS_TexasUserAction.bet_money)
}

// -------------------------------------------------------------------

// CS_TexasEnterTable

// -------------------------------------------------------------------

// CS_TexasLeaveTable

// -------------------------------------------------------------------

// CS_TexasGiveTips

// -------------------------------------------------------------------

// CS_TexasShowCards

// required bool show_cards = 1;
inline bool CS_TexasShowCards::has_show_cards() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CS_TexasShowCards::set_has_show_cards() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CS_TexasShowCards::clear_has_show_cards() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CS_TexasShowCards::clear_show_cards() {
  show_cards_ = false;
  clear_has_show_cards();
}
inline bool CS_TexasShowCards::show_cards() const {
  // @@protoc_insertion_point(field_get:CS_TexasShowCards.show_cards)
  return show_cards_;
}
inline void CS_TexasShowCards::set_show_cards(bool value) {
  set_has_show_cards();
  show_cards_ = value;
  // @@protoc_insertion_point(field_set:CS_TexasShowCards.show_cards)
}

#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)


#ifndef SWIG
namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::SC_TexasTableInfo_MsgID> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::SC_TexasTableInfo_MsgID>() {
  return ::SC_TexasTableInfo_MsgID_descriptor();
}
template <> struct is_proto_enum< ::SC_TexasSendUserCards_MsgID> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::SC_TexasSendUserCards_MsgID>() {
  return ::SC_TexasSendUserCards_MsgID_descriptor();
}
template <> struct is_proto_enum< ::SC_TexasSendPublicCards_MsgID> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::SC_TexasSendPublicCards_MsgID>() {
  return ::SC_TexasSendPublicCards_MsgID_descriptor();
}
template <> struct is_proto_enum< ::SC_TexasUserAction_MsgID> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::SC_TexasUserAction_MsgID>() {
  return ::SC_TexasUserAction_MsgID_descriptor();
}
template <> struct is_proto_enum< ::SC_TexasNewUser_MsgID> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::SC_TexasNewUser_MsgID>() {
  return ::SC_TexasNewUser_MsgID_descriptor();
}
template <> struct is_proto_enum< ::SC_TexasUserLeave_MsgID> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::SC_TexasUserLeave_MsgID>() {
  return ::SC_TexasUserLeave_MsgID_descriptor();
}
template <> struct is_proto_enum< ::SC_TexasForceLeave_MsgID> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::SC_TexasForceLeave_MsgID>() {
  return ::SC_TexasForceLeave_MsgID_descriptor();
}
template <> struct is_proto_enum< ::SC_TexasTableEnd_MsgID> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::SC_TexasTableEnd_MsgID>() {
  return ::SC_TexasTableEnd_MsgID_descriptor();
}
template <> struct is_proto_enum< ::SC_TexasGiveTips_MsgID> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::SC_TexasGiveTips_MsgID>() {
  return ::SC_TexasGiveTips_MsgID_descriptor();
}
template <> struct is_proto_enum< ::SC_TexasShowCards_MsgID> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::SC_TexasShowCards_MsgID>() {
  return ::SC_TexasShowCards_MsgID_descriptor();
}
template <> struct is_proto_enum< ::SC_TexasShowCardsPermission_MsgID> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::SC_TexasShowCardsPermission_MsgID>() {
  return ::SC_TexasShowCardsPermission_MsgID_descriptor();
}
template <> struct is_proto_enum< ::SC_TexasError_MsgID> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::SC_TexasError_MsgID>() {
  return ::SC_TexasError_MsgID_descriptor();
}
template <> struct is_proto_enum< ::CS_TexasUserAction_MsgID> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::CS_TexasUserAction_MsgID>() {
  return ::CS_TexasUserAction_MsgID_descriptor();
}
template <> struct is_proto_enum< ::CS_TexasEnterTable_MsgID> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::CS_TexasEnterTable_MsgID>() {
  return ::CS_TexasEnterTable_MsgID_descriptor();
}
template <> struct is_proto_enum< ::CS_TexasLeaveTable_MsgID> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::CS_TexasLeaveTable_MsgID>() {
  return ::CS_TexasLeaveTable_MsgID_descriptor();
}
template <> struct is_proto_enum< ::CS_TexasGiveTips_MsgID> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::CS_TexasGiveTips_MsgID>() {
  return ::CS_TexasGiveTips_MsgID_descriptor();
}
template <> struct is_proto_enum< ::CS_TexasShowCards_MsgID> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::CS_TexasShowCards_MsgID>() {
  return ::CS_TexasShowCards_MsgID_descriptor();
}
template <> struct is_proto_enum< ::TexasCardsType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::TexasCardsType>() {
  return ::TexasCardsType_descriptor();
}
template <> struct is_proto_enum< ::TexasAction> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::TexasAction>() {
  return ::TexasAction_descriptor();
}
template <> struct is_proto_enum< ::TexasStatus> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::TexasStatus>() {
  return ::TexasStatus_descriptor();
}
template <> struct is_proto_enum< ::TexasUserPosition> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::TexasUserPosition>() {
  return ::TexasUserPosition_descriptor();
}
template <> struct is_proto_enum< ::TexasError> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::TexasError>() {
  return ::TexasError_descriptor();
}

}  // namespace protobuf
}  // namespace google
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_public_5ftexas_2eproto__INCLUDED
