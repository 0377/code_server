// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: public_ox.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "public_ox.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
class SC_OxStartDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<SC_OxStart> {
} _SC_OxStart_default_instance_;
class CS_OxCallBankerDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CS_OxCallBanker> {
} _CS_OxCallBanker_default_instance_;
class SC_OxCallBankerDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<SC_OxCallBanker> {
} _SC_OxCallBanker_default_instance_;
class SC_OxAddScoreStatusDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<SC_OxAddScoreStatus> {
} _SC_OxAddScoreStatus_default_instance_;
class CS_OxAddScoreDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CS_OxAddScore> {
} _CS_OxAddScore_default_instance_;
class SC_OxAddScoreDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<SC_OxAddScore> {
} _SC_OxAddScore_default_instance_;
class CardsDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<Cards> {
} _Cards_default_instance_;
class SC_OxDealCardDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<SC_OxDealCard> {
} _SC_OxDealCard_default_instance_;
class CS_OxOpenCardsDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CS_OxOpenCards> {
} _CS_OxOpenCards_default_instance_;
class SC_OxOpenCardsDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<SC_OxOpenCards> {
} _SC_OxOpenCards_default_instance_;
class OxPlayerConcludeDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<OxPlayerConclude> {
} _OxPlayerConclude_default_instance_;
class SC_OxEndDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<SC_OxEnd> {
} _SC_OxEnd_default_instance_;
class CS_OxRecordDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CS_OxRecord> {
} _CS_OxRecord_default_instance_;
class RecordResultDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<RecordResult> {
} _RecordResult_default_instance_;
class SC_OxRecordDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<SC_OxRecord> {
} _SC_OxRecord_default_instance_;
class CS_OxTopDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CS_OxTop> {
} _CS_OxTop_default_instance_;
class PlayerTopInfoDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<PlayerTopInfo> {
} _PlayerTopInfo_default_instance_;
class SC_OxTopDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<SC_OxTop> {
} _SC_OxTop_default_instance_;
class BankerInfoDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<BankerInfo> {
} _BankerInfo_default_instance_;
class SC_OxBankerInfoDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<SC_OxBankerInfo> {
} _SC_OxBankerInfo_default_instance_;
class BankerListDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<BankerList> {
} _BankerList_default_instance_;
class SC_OxBankerListDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<SC_OxBankerList> {
} _SC_OxBankerList_default_instance_;
class SC_OxForBankerFlagDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<SC_OxForBankerFlag> {
} _SC_OxForBankerFlag_default_instance_;
class SC_OxBetCoinDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<SC_OxBetCoin> {
} _SC_OxBetCoin_default_instance_;
class SC_OxPlayerListDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<SC_OxPlayerList> {
} _SC_OxPlayerList_default_instance_;
class EveryAreaInfoDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<EveryAreaInfo> {
} _EveryAreaInfo_default_instance_;
class SC_OxEveryAreaDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<SC_OxEveryArea> {
} _SC_OxEveryArea_default_instance_;
class CS_OxApplyForBankerDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CS_OxApplyForBanker> {
} _CS_OxApplyForBanker_default_instance_;
class CS_OxLeaveForBankerDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CS_OxLeaveForBanker> {
} _CS_OxLeaveForBanker_default_instance_;
class CS_OxCurBankerLeaveDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CS_OxCurBankerLeave> {
} _CS_OxCurBankerLeave_default_instance_;
class SC_OxSatusAndDownTimeDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<SC_OxSatusAndDownTime> {
} _SC_OxSatusAndDownTime_default_instance_;
class Oxplayer_infoDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<Oxplayer_info> {
} _Oxplayer_info_default_instance_;
class SC_OxPlayerConnectionDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<SC_OxPlayerConnection> {
} _SC_OxPlayerConnection_default_instance_;
class Player_bet_infoDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<Player_bet_info> {
} _Player_bet_info_default_instance_;
class CardResultDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CardResult> {
} _CardResult_default_instance_;
class SC_OxTableInfoDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<SC_OxTableInfo> {
} _SC_OxTableInfo_default_instance_;
class CS_OxPlayerConnectGameDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CS_OxPlayerConnectGame> {
} _CS_OxPlayerConnectGame_default_instance_;
class SC_CardResultDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<SC_CardResult> {
} _SC_CardResult_default_instance_;
class SC_OxResultDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<SC_OxResult> {
} _SC_OxResult_default_instance_;
class SC_OxBankerLeaveFlagDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<SC_OxBankerLeaveFlag> {
} _SC_OxBankerLeaveFlag_default_instance_;
class CS_OxLeaveGameDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CS_OxLeaveGame> {
} _CS_OxLeaveGame_default_instance_;
class chip_infoDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<chip_info> {
} _chip_info_default_instance_;
class SC_Ox_config_infoDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<SC_Ox_config_info> {
} _SC_Ox_config_info_default_instance_;
class CardCompareResultDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CardCompareResult> {
} _CardCompareResult_default_instance_;
class SC_CardCompareResultDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<SC_CardCompareResult> {
} _SC_CardCompareResult_default_instance_;
class CS_OxGetBetCfgDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CS_OxGetBetCfg> {
} _CS_OxGetBetCfg_default_instance_;
class SC_OxGetBetCfgDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<SC_OxGetBetCfg> {
} _SC_OxGetBetCfg_default_instance_;

namespace protobuf_public_5fox_2eproto {


namespace {

::google::protobuf::Metadata file_level_metadata[47];
const ::google::protobuf::EnumDescriptor* file_level_enum_descriptors[40];

}  // namespace

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTableField
    const TableStruct::entries[] = {
  {0, 0, 0, ::google::protobuf::internal::kInvalidMask, 0, 0},
};

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::AuxillaryParseTableField
    const TableStruct::aux[] = {
  ::google::protobuf::internal::AuxillaryParseTableField(),
};
PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTable const
    TableStruct::schema[] = {
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
};

const ::google::protobuf::uint32 TableStruct::offsets[] = {
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SC_OxStart, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SC_OxStart, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SC_OxStart, cur_chair_id_),
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CS_OxCallBanker, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CS_OxCallBanker, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CS_OxCallBanker, call_banker_),
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SC_OxCallBanker, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SC_OxCallBanker, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SC_OxCallBanker, cur_chair_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SC_OxCallBanker, call_chair_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SC_OxCallBanker, call_banker_),
  0,
  1,
  2,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SC_OxAddScoreStatus, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SC_OxAddScoreStatus, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SC_OxAddScoreStatus, banker_chair_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SC_OxAddScoreStatus, max_score_),
  1,
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CS_OxAddScore, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CS_OxAddScore, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CS_OxAddScore, guid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CS_OxAddScore, score_area_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CS_OxAddScore, score_),
  0,
  1,
  2,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SC_OxAddScore, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SC_OxAddScore, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SC_OxAddScore, add_score_chair_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SC_OxAddScore, score_area_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SC_OxAddScore, score_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SC_OxAddScore, player_bet_this_area_money_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SC_OxAddScore, money_),
  0,
  1,
  2,
  3,
  4,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Cards, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Cards, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Cards, score_area_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Cards, card_),
  0,
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SC_OxDealCard, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SC_OxDealCard, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SC_OxDealCard, pb_cards_),
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CS_OxOpenCards, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CS_OxOpenCards, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SC_OxOpenCards, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SC_OxOpenCards, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SC_OxOpenCards, open_chair_id_),
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OxPlayerConclude, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OxPlayerConclude, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OxPlayerConclude, chair_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OxPlayerConclude, pay_score_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OxPlayerConclude, earn_score_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OxPlayerConclude, system_tax_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OxPlayerConclude, banker_score_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OxPlayerConclude, all_win_or_lose_flag_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OxPlayerConclude, money_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OxPlayerConclude, tax_show_flag_),
  1,
  0,
  3,
  2,
  4,
  6,
  5,
  7,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SC_OxEnd, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SC_OxEnd, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SC_OxEnd, pb_conclude_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SC_OxEnd, pb_cards_),
  ~0u,
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CS_OxRecord, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CS_OxRecord, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RecordResult, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RecordResult, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RecordResult, result_),
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SC_OxRecord, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SC_OxRecord, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SC_OxRecord, pb_recordresult_),
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CS_OxTop, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CS_OxTop, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerTopInfo, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerTopInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerTopInfo, guid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerTopInfo, head_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerTopInfo, nickname_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerTopInfo, money_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerTopInfo, header_icon_),
  1,
  2,
  0,
  3,
  4,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SC_OxTop, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SC_OxTop, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SC_OxTop, count_all_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SC_OxTop, pb_player_top_info_),
  0,
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BankerInfo, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BankerInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BankerInfo, guid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BankerInfo, nickname_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BankerInfo, money_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BankerInfo, bankertimes_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BankerInfo, max_score_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BankerInfo, banker_score_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BankerInfo, left_score_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BankerInfo, header_icon_),
  1,
  0,
  3,
  2,
  4,
  5,
  6,
  7,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SC_OxBankerInfo, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SC_OxBankerInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SC_OxBankerInfo, pb_banker_info_),
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BankerList, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BankerList, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BankerList, guid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BankerList, nickname_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BankerList, money_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BankerList, header_icon_),
  1,
  0,
  3,
  2,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SC_OxBankerList, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SC_OxBankerList, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SC_OxBankerList, banker_num_total_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SC_OxBankerList, pb_banker_list_),
  0,
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SC_OxForBankerFlag, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SC_OxForBankerFlag, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SC_OxForBankerFlag, result_),
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SC_OxBetCoin, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SC_OxBetCoin, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SC_OxBetCoin, result_),
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SC_OxPlayerList, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SC_OxPlayerList, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SC_OxPlayerList, top_player_total_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SC_OxPlayerList, pb_player_info_list_),
  0,
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EveryAreaInfo, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EveryAreaInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EveryAreaInfo, max_bet_score_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EveryAreaInfo, bet_tian_total_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EveryAreaInfo, bet_di_total_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EveryAreaInfo, bet_xuan_total_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EveryAreaInfo, bet_huang_total_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EveryAreaInfo, left_money_bet_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EveryAreaInfo, total_all_area_bet_money_),
  0,
  1,
  2,
  3,
  4,
  5,
  6,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SC_OxEveryArea, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SC_OxEveryArea, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SC_OxEveryArea, pb_areainfo_),
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CS_OxApplyForBanker, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CS_OxApplyForBanker, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CS_OxApplyForBanker, guid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CS_OxApplyForBanker, nickname_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CS_OxApplyForBanker, money_),
  2,
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CS_OxLeaveForBanker, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CS_OxLeaveForBanker, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CS_OxLeaveForBanker, guid_),
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CS_OxCurBankerLeave, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CS_OxCurBankerLeave, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CS_OxCurBankerLeave, guid_),
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SC_OxSatusAndDownTime, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SC_OxSatusAndDownTime, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SC_OxSatusAndDownTime, status_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SC_OxSatusAndDownTime, count_down_time_),
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Oxplayer_info, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Oxplayer_info, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Oxplayer_info, guid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Oxplayer_info, nickname_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Oxplayer_info, money_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Oxplayer_info, header_icon_),
  1,
  0,
  3,
  2,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SC_OxPlayerConnection, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SC_OxPlayerConnection, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SC_OxPlayerConnection, pb_player_info_),
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Player_bet_info, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Player_bet_info, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Player_bet_info, which_area_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Player_bet_info, bet_money_),
  1,
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CardResult, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CardResult, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CardResult, score_area_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CardResult, card_type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CardResult, card_times_),
  0,
  1,
  2,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SC_OxTableInfo, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SC_OxTableInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SC_OxTableInfo, status_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SC_OxTableInfo, count_down_time_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SC_OxTableInfo, pb_curbanker_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SC_OxTableInfo, pb_player_info_list_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SC_OxTableInfo, pb_banker_list_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SC_OxTableInfo, pb_areainfo_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SC_OxTableInfo, pb_player_area_bet_info_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SC_OxTableInfo, pb_cards_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SC_OxTableInfo, pb_result_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SC_OxTableInfo, pb_conclude_),
  3,
  4,
  0,
  ~0u,
  ~0u,
  1,
  ~0u,
  ~0u,
  ~0u,
  2,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CS_OxPlayerConnectGame, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CS_OxPlayerConnectGame, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CS_OxPlayerConnectGame, guid_),
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SC_CardResult, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SC_CardResult, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SC_CardResult, pb_result_),
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SC_OxResult, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SC_OxResult, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SC_OxResult, pb_player_result_),
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SC_OxBankerLeaveFlag, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SC_OxBankerLeaveFlag, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SC_OxBankerLeaveFlag, result_),
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CS_OxLeaveGame, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CS_OxLeaveGame, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CS_OxLeaveGame, guid_),
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(chip_info, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(chip_info, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(chip_info, chip_index_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(chip_info, chip_money_),
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SC_Ox_config_info, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SC_Ox_config_info, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SC_Ox_config_info, banker_limit_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SC_Ox_config_info, pb_info_chip_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SC_Ox_config_info, bet_min_limit_money_),
  0,
  ~0u,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CardCompareResult, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CardCompareResult, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CardCompareResult, area__),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CardCompareResult, result_),
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SC_CardCompareResult, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SC_CardCompareResult, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SC_CardCompareResult, pb_compareresult_),
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CS_OxGetBetCfg, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CS_OxGetBetCfg, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SC_OxGetBetCfg, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SC_OxGetBetCfg, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SC_OxGetBetCfg, bets_),
  ~0u,
};

static const ::google::protobuf::internal::MigrationSchema schemas[] = {
  { 0, 6, sizeof(SC_OxStart)},
  { 7, 13, sizeof(CS_OxCallBanker)},
  { 14, 22, sizeof(SC_OxCallBanker)},
  { 25, 32, sizeof(SC_OxAddScoreStatus)},
  { 34, 42, sizeof(CS_OxAddScore)},
  { 45, 55, sizeof(SC_OxAddScore)},
  { 60, 67, sizeof(Cards)},
  { 69, 75, sizeof(SC_OxDealCard)},
  { 76, 81, sizeof(CS_OxOpenCards)},
  { 81, 87, sizeof(SC_OxOpenCards)},
  { 88, 101, sizeof(OxPlayerConclude)},
  { 109, 116, sizeof(SC_OxEnd)},
  { 118, 123, sizeof(CS_OxRecord)},
  { 123, 129, sizeof(RecordResult)},
  { 130, 136, sizeof(SC_OxRecord)},
  { 137, 142, sizeof(CS_OxTop)},
  { 142, 152, sizeof(PlayerTopInfo)},
  { 157, 164, sizeof(SC_OxTop)},
  { 166, 179, sizeof(BankerInfo)},
  { 187, 193, sizeof(SC_OxBankerInfo)},
  { 194, 203, sizeof(BankerList)},
  { 207, 214, sizeof(SC_OxBankerList)},
  { 216, 222, sizeof(SC_OxForBankerFlag)},
  { 223, 229, sizeof(SC_OxBetCoin)},
  { 230, 237, sizeof(SC_OxPlayerList)},
  { 239, 251, sizeof(EveryAreaInfo)},
  { 258, 264, sizeof(SC_OxEveryArea)},
  { 265, 273, sizeof(CS_OxApplyForBanker)},
  { 276, 282, sizeof(CS_OxLeaveForBanker)},
  { 283, 289, sizeof(CS_OxCurBankerLeave)},
  { 290, 297, sizeof(SC_OxSatusAndDownTime)},
  { 299, 308, sizeof(Oxplayer_info)},
  { 312, 318, sizeof(SC_OxPlayerConnection)},
  { 319, 326, sizeof(Player_bet_info)},
  { 328, 336, sizeof(CardResult)},
  { 339, 354, sizeof(SC_OxTableInfo)},
  { 364, 370, sizeof(CS_OxPlayerConnectGame)},
  { 371, 377, sizeof(SC_CardResult)},
  { 378, 384, sizeof(SC_OxResult)},
  { 385, 391, sizeof(SC_OxBankerLeaveFlag)},
  { 392, 398, sizeof(CS_OxLeaveGame)},
  { 399, 406, sizeof(chip_info)},
  { 408, 416, sizeof(SC_Ox_config_info)},
  { 419, 426, sizeof(CardCompareResult)},
  { 428, 434, sizeof(SC_CardCompareResult)},
  { 435, 440, sizeof(CS_OxGetBetCfg)},
  { 440, 446, sizeof(SC_OxGetBetCfg)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&_SC_OxStart_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CS_OxCallBanker_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_SC_OxCallBanker_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_SC_OxAddScoreStatus_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CS_OxAddScore_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_SC_OxAddScore_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_Cards_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_SC_OxDealCard_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CS_OxOpenCards_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_SC_OxOpenCards_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_OxPlayerConclude_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_SC_OxEnd_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CS_OxRecord_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_RecordResult_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_SC_OxRecord_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CS_OxTop_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_PlayerTopInfo_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_SC_OxTop_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_BankerInfo_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_SC_OxBankerInfo_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_BankerList_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_SC_OxBankerList_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_SC_OxForBankerFlag_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_SC_OxBetCoin_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_SC_OxPlayerList_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_EveryAreaInfo_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_SC_OxEveryArea_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CS_OxApplyForBanker_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CS_OxLeaveForBanker_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CS_OxCurBankerLeave_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_SC_OxSatusAndDownTime_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_Oxplayer_info_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_SC_OxPlayerConnection_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_Player_bet_info_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CardResult_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_SC_OxTableInfo_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CS_OxPlayerConnectGame_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_SC_CardResult_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_SC_OxResult_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_SC_OxBankerLeaveFlag_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CS_OxLeaveGame_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_chip_info_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_SC_Ox_config_info_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CardCompareResult_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_SC_CardCompareResult_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CS_OxGetBetCfg_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_SC_OxGetBetCfg_default_instance_),
};

namespace {

void protobuf_AssignDescriptors() {
  AddDescriptors();
  ::google::protobuf::MessageFactory* factory = NULL;
  AssignDescriptors(
      "public_ox.proto", schemas, file_default_instances, TableStruct::offsets, factory,
      file_level_metadata, file_level_enum_descriptors, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 47);
}

}  // namespace

void TableStruct::Shutdown() {
  _SC_OxStart_default_instance_.Shutdown();
  delete file_level_metadata[0].reflection;
  _CS_OxCallBanker_default_instance_.Shutdown();
  delete file_level_metadata[1].reflection;
  _SC_OxCallBanker_default_instance_.Shutdown();
  delete file_level_metadata[2].reflection;
  _SC_OxAddScoreStatus_default_instance_.Shutdown();
  delete file_level_metadata[3].reflection;
  _CS_OxAddScore_default_instance_.Shutdown();
  delete file_level_metadata[4].reflection;
  _SC_OxAddScore_default_instance_.Shutdown();
  delete file_level_metadata[5].reflection;
  _Cards_default_instance_.Shutdown();
  delete file_level_metadata[6].reflection;
  _SC_OxDealCard_default_instance_.Shutdown();
  delete file_level_metadata[7].reflection;
  _CS_OxOpenCards_default_instance_.Shutdown();
  delete file_level_metadata[8].reflection;
  _SC_OxOpenCards_default_instance_.Shutdown();
  delete file_level_metadata[9].reflection;
  _OxPlayerConclude_default_instance_.Shutdown();
  delete file_level_metadata[10].reflection;
  _SC_OxEnd_default_instance_.Shutdown();
  delete file_level_metadata[11].reflection;
  _CS_OxRecord_default_instance_.Shutdown();
  delete file_level_metadata[12].reflection;
  _RecordResult_default_instance_.Shutdown();
  delete file_level_metadata[13].reflection;
  _SC_OxRecord_default_instance_.Shutdown();
  delete file_level_metadata[14].reflection;
  _CS_OxTop_default_instance_.Shutdown();
  delete file_level_metadata[15].reflection;
  _PlayerTopInfo_default_instance_.Shutdown();
  delete file_level_metadata[16].reflection;
  _SC_OxTop_default_instance_.Shutdown();
  delete file_level_metadata[17].reflection;
  _BankerInfo_default_instance_.Shutdown();
  delete file_level_metadata[18].reflection;
  _SC_OxBankerInfo_default_instance_.Shutdown();
  delete file_level_metadata[19].reflection;
  _BankerList_default_instance_.Shutdown();
  delete file_level_metadata[20].reflection;
  _SC_OxBankerList_default_instance_.Shutdown();
  delete file_level_metadata[21].reflection;
  _SC_OxForBankerFlag_default_instance_.Shutdown();
  delete file_level_metadata[22].reflection;
  _SC_OxBetCoin_default_instance_.Shutdown();
  delete file_level_metadata[23].reflection;
  _SC_OxPlayerList_default_instance_.Shutdown();
  delete file_level_metadata[24].reflection;
  _EveryAreaInfo_default_instance_.Shutdown();
  delete file_level_metadata[25].reflection;
  _SC_OxEveryArea_default_instance_.Shutdown();
  delete file_level_metadata[26].reflection;
  _CS_OxApplyForBanker_default_instance_.Shutdown();
  delete file_level_metadata[27].reflection;
  _CS_OxLeaveForBanker_default_instance_.Shutdown();
  delete file_level_metadata[28].reflection;
  _CS_OxCurBankerLeave_default_instance_.Shutdown();
  delete file_level_metadata[29].reflection;
  _SC_OxSatusAndDownTime_default_instance_.Shutdown();
  delete file_level_metadata[30].reflection;
  _Oxplayer_info_default_instance_.Shutdown();
  delete file_level_metadata[31].reflection;
  _SC_OxPlayerConnection_default_instance_.Shutdown();
  delete file_level_metadata[32].reflection;
  _Player_bet_info_default_instance_.Shutdown();
  delete file_level_metadata[33].reflection;
  _CardResult_default_instance_.Shutdown();
  delete file_level_metadata[34].reflection;
  _SC_OxTableInfo_default_instance_.Shutdown();
  delete file_level_metadata[35].reflection;
  _CS_OxPlayerConnectGame_default_instance_.Shutdown();
  delete file_level_metadata[36].reflection;
  _SC_CardResult_default_instance_.Shutdown();
  delete file_level_metadata[37].reflection;
  _SC_OxResult_default_instance_.Shutdown();
  delete file_level_metadata[38].reflection;
  _SC_OxBankerLeaveFlag_default_instance_.Shutdown();
  delete file_level_metadata[39].reflection;
  _CS_OxLeaveGame_default_instance_.Shutdown();
  delete file_level_metadata[40].reflection;
  _chip_info_default_instance_.Shutdown();
  delete file_level_metadata[41].reflection;
  _SC_Ox_config_info_default_instance_.Shutdown();
  delete file_level_metadata[42].reflection;
  _CardCompareResult_default_instance_.Shutdown();
  delete file_level_metadata[43].reflection;
  _SC_CardCompareResult_default_instance_.Shutdown();
  delete file_level_metadata[44].reflection;
  _CS_OxGetBetCfg_default_instance_.Shutdown();
  delete file_level_metadata[45].reflection;
  _SC_OxGetBetCfg_default_instance_.Shutdown();
  delete file_level_metadata[46].reflection;
}

void TableStruct::InitDefaultsImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::internal::InitProtobufDefaults();
  _SC_OxStart_default_instance_.DefaultConstruct();
  _CS_OxCallBanker_default_instance_.DefaultConstruct();
  _SC_OxCallBanker_default_instance_.DefaultConstruct();
  _SC_OxAddScoreStatus_default_instance_.DefaultConstruct();
  _CS_OxAddScore_default_instance_.DefaultConstruct();
  _SC_OxAddScore_default_instance_.DefaultConstruct();
  _Cards_default_instance_.DefaultConstruct();
  _SC_OxDealCard_default_instance_.DefaultConstruct();
  _CS_OxOpenCards_default_instance_.DefaultConstruct();
  _SC_OxOpenCards_default_instance_.DefaultConstruct();
  _OxPlayerConclude_default_instance_.DefaultConstruct();
  _SC_OxEnd_default_instance_.DefaultConstruct();
  _CS_OxRecord_default_instance_.DefaultConstruct();
  _RecordResult_default_instance_.DefaultConstruct();
  _SC_OxRecord_default_instance_.DefaultConstruct();
  _CS_OxTop_default_instance_.DefaultConstruct();
  _PlayerTopInfo_default_instance_.DefaultConstruct();
  _SC_OxTop_default_instance_.DefaultConstruct();
  _BankerInfo_default_instance_.DefaultConstruct();
  _SC_OxBankerInfo_default_instance_.DefaultConstruct();
  _BankerList_default_instance_.DefaultConstruct();
  _SC_OxBankerList_default_instance_.DefaultConstruct();
  _SC_OxForBankerFlag_default_instance_.DefaultConstruct();
  _SC_OxBetCoin_default_instance_.DefaultConstruct();
  _SC_OxPlayerList_default_instance_.DefaultConstruct();
  _EveryAreaInfo_default_instance_.DefaultConstruct();
  _SC_OxEveryArea_default_instance_.DefaultConstruct();
  _CS_OxApplyForBanker_default_instance_.DefaultConstruct();
  _CS_OxLeaveForBanker_default_instance_.DefaultConstruct();
  _CS_OxCurBankerLeave_default_instance_.DefaultConstruct();
  _SC_OxSatusAndDownTime_default_instance_.DefaultConstruct();
  _Oxplayer_info_default_instance_.DefaultConstruct();
  _SC_OxPlayerConnection_default_instance_.DefaultConstruct();
  _Player_bet_info_default_instance_.DefaultConstruct();
  _CardResult_default_instance_.DefaultConstruct();
  _SC_OxTableInfo_default_instance_.DefaultConstruct();
  _CS_OxPlayerConnectGame_default_instance_.DefaultConstruct();
  _SC_CardResult_default_instance_.DefaultConstruct();
  _SC_OxResult_default_instance_.DefaultConstruct();
  _SC_OxBankerLeaveFlag_default_instance_.DefaultConstruct();
  _CS_OxLeaveGame_default_instance_.DefaultConstruct();
  _chip_info_default_instance_.DefaultConstruct();
  _SC_Ox_config_info_default_instance_.DefaultConstruct();
  _CardCompareResult_default_instance_.DefaultConstruct();
  _SC_CardCompareResult_default_instance_.DefaultConstruct();
  _CS_OxGetBetCfg_default_instance_.DefaultConstruct();
  _SC_OxGetBetCfg_default_instance_.DefaultConstruct();
  _SC_OxBankerInfo_default_instance_.get_mutable()->pb_banker_info_ = const_cast< ::BankerInfo*>(
      ::BankerInfo::internal_default_instance());
  _SC_OxEveryArea_default_instance_.get_mutable()->pb_areainfo_ = const_cast< ::EveryAreaInfo*>(
      ::EveryAreaInfo::internal_default_instance());
  _SC_OxTableInfo_default_instance_.get_mutable()->pb_curbanker_ = const_cast< ::BankerInfo*>(
      ::BankerInfo::internal_default_instance());
  _SC_OxTableInfo_default_instance_.get_mutable()->pb_areainfo_ = const_cast< ::EveryAreaInfo*>(
      ::EveryAreaInfo::internal_default_instance());
  _SC_OxTableInfo_default_instance_.get_mutable()->pb_conclude_ = const_cast< ::OxPlayerConclude*>(
      ::OxPlayerConclude::internal_default_instance());
  _SC_OxResult_default_instance_.get_mutable()->pb_player_result_ = const_cast< ::OxPlayerConclude*>(
      ::OxPlayerConclude::internal_default_instance());
}

void InitDefaults() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &TableStruct::InitDefaultsImpl);
}
void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] = {
      "\n\017public_ox.proto\"5\n\nSC_OxStart\022\024\n\014cur_c"
      "hair_id\030\001 \001(\005\"\021\n\005MsgID\022\010\n\002ID\020\322\214\001\"E\n\017CS_O"
      "xCallBanker\022\023\n\013call_banker\030\001 \001(\010\"\035\n\005MsgI"
      "D\022\010\n\002ID\020\323\214\001\022\n\n\006Target\020\002\"f\n\017SC_OxCallBank"
      "er\022\024\n\014cur_chair_id\030\001 \001(\005\022\025\n\rcall_chair_i"
      "d\030\002 \001(\005\022\023\n\013call_banker\030\003 \001(\010\"\021\n\005MsgID\022\010\n"
      "\002ID\020\324\214\001\"T\n\023SC_OxAddScoreStatus\022\027\n\017banker"
      "_chair_id\030\001 \001(\005\022\021\n\tmax_score\030\002 \001(\003\"\021\n\005Ms"
      "gID\022\010\n\002ID\020\325\214\001\"_\n\rCS_OxAddScore\022\014\n\004guid\030\001"
      " \001(\005\022\022\n\nscore_area\030\002 \001(\005\022\r\n\005score\030\003 \001(\003\""
      "\035\n\005MsgID\022\010\n\002ID\020\326\214\001\022\n\n\006Target\020\002\"\224\001\n\rSC_Ox"
      "AddScore\022\032\n\022add_score_chair_id\030\001 \001(\005\022\022\n\n"
      "score_area\030\002 \001(\005\022\r\n\005score\030\003 \001(\003\022\"\n\032playe"
      "r_bet_this_area_money\030\004 \001(\003\022\r\n\005money\030\005 \001"
      "(\003\"\021\n\005MsgID\022\010\n\002ID\020\327\214\001\")\n\005Cards\022\022\n\nscore_"
      "area\030\001 \001(\005\022\014\n\004card\030\002 \003(\005\"<\n\rSC_OxDealCar"
      "d\022\030\n\010pb_cards\030\001 \003(\0132\006.Cards\"\021\n\005MsgID\022\010\n\002"
      "ID\020\330\214\001\"/\n\016CS_OxOpenCards\"\035\n\005MsgID\022\010\n\002ID\020"
      "\331\214\001\022\n\n\006Target\020\002\":\n\016SC_OxOpenCards\022\025\n\rope"
      "n_chair_id\030\002 \001(\005\"\021\n\005MsgID\022\010\n\002ID\020\332\214\001\"\271\001\n\020"
      "OxPlayerConclude\022\020\n\010chair_id\030\001 \001(\005\022\021\n\tpa"
      "y_score\030\002 \001(\003\022\022\n\nearn_score\030\003 \001(\003\022\022\n\nsys"
      "tem_tax\030\004 \001(\005\022\024\n\014banker_score\030\005 \001(\003\022\034\n\024a"
      "ll_win_or_lose_flag\030\006 \001(\005\022\r\n\005money\030\007 \001(\003"
      "\022\025\n\rtax_show_flag\030\010 \001(\005\"_\n\010SC_OxEnd\022&\n\013p"
      "b_conclude\030\001 \003(\0132\021.OxPlayerConclude\022\030\n\010p"
      "b_cards\030\002 \003(\0132\006.Cards\"\021\n\005MsgID\022\010\n\002ID\020\333\214\001"
      "\",\n\013CS_OxRecord\"\035\n\005MsgID\022\010\n\002ID\020\334\214\001\022\n\n\006Ta"
      "rget\020\002\"\036\n\014RecordResult\022\016\n\006result\030\001 \003(\010\"H"
      "\n\013SC_OxRecord\022&\n\017pb_recordresult\030\001 \003(\0132\r"
      ".RecordResult\"\021\n\005MsgID\022\010\n\002ID\020\335\214\001\")\n\010CS_O"
      "xTop\"\035\n\005MsgID\022\010\n\002ID\020\336\214\001\022\n\n\006Target\020\002\"g\n\rP"
      "layerTopInfo\022\014\n\004guid\030\001 \001(\005\022\017\n\007head_id\030\002 "
      "\001(\005\022\020\n\010nickname\030\003 \001(\t\022\r\n\005money\030\004 \001(\003\022\026\n\013"
      "header_icon\030\005 \001(\005:\0010\"\\\n\010SC_OxTop\022\021\n\tcoun"
      "t_all\030\001 \001(\005\022*\n\022pb_player_top_info\030\002 \003(\0132"
      "\016.PlayerTopInfo\"\021\n\005MsgID\022\010\n\002ID\020\337\214\001\"\245\001\n\nB"
      "ankerInfo\022\014\n\004guid\030\001 \001(\005\022\020\n\010nickname\030\002 \001("
      "\t\022\r\n\005money\030\003 \001(\003\022\023\n\013bankertimes\030\004 \001(\005\022\021\n"
      "\tmax_score\030\005 \001(\003\022\024\n\014banker_score\030\006 \001(\003\022\022"
      "\n\nleft_score\030\007 \001(\003\022\026\n\013header_icon\030\010 \001(\005:"
      "\0010\"I\n\017SC_OxBankerInfo\022#\n\016pb_banker_info\030"
      "\001 \001(\0132\013.BankerInfo\"\021\n\005MsgID\022\010\n\002ID\020\340\214\001\"S\n"
      "\nBankerList\022\014\n\004guid\030\001 \001(\005\022\020\n\010nickname\030\002 "
      "\001(\t\022\r\n\005money\030\003 \001(\003\022\026\n\013header_icon\030\004 \001(\005:"
      "\0010\"c\n\017SC_OxBankerList\022\030\n\020banker_num_tota"
      "l\030\001 \001(\005\022#\n\016pb_banker_list\030\002 \003(\0132\013.Banker"
      "List\"\021\n\005MsgID\022\010\n\002ID\020\341\214\001\"7\n\022SC_OxForBanke"
      "rFlag\022\016\n\006result\030\001 \001(\005\"\021\n\005MsgID\022\010\n\002ID\020\342\214\001"
      "\"1\n\014SC_OxBetCoin\022\016\n\006result\030\001 \001(\005\"\021\n\005MsgI"
      "D\022\010\n\002ID\020\343\214\001\"k\n\017SC_OxPlayerList\022\030\n\020top_pl"
      "ayer_total\030\001 \001(\005\022+\n\023pb_player_info_list\030"
      "\002 \003(\0132\016.PlayerTopInfo\"\021\n\005MsgID\022\010\n\002ID\020\344\214\001"
      "\"\277\001\n\rEveryAreaInfo\022\025\n\rmax_bet_score\030\001 \001("
      "\003\022\026\n\016bet_tian_total\030\002 \001(\003\022\024\n\014bet_di_tota"
      "l\030\003 \001(\003\022\026\n\016bet_xuan_total\030\004 \001(\003\022\027\n\017bet_h"
      "uang_total\030\005 \001(\003\022\026\n\016left_money_bet\030\006 \001(\003"
      "\022 \n\030total_all_area_bet_money\030\007 \001(\003\"H\n\016SC"
      "_OxEveryArea\022#\n\013pb_AreaInfo\030\001 \001(\0132\016.Ever"
      "yAreaInfo\"\021\n\005MsgID\022\010\n\002ID\020\345\214\001\"c\n\023CS_OxApp"
      "lyForBanker\022\014\n\004guid\030\001 \001(\005\022\020\n\010nickname\030\002 "
      "\001(\t\022\r\n\005money\030\003 \001(\003\"\035\n\005MsgID\022\010\n\002ID\020\346\214\001\022\n\n"
      "\006Target\020\002\"B\n\023CS_OxLeaveForBanker\022\014\n\004guid"
      "\030\001 \001(\005\"\035\n\005MsgID\022\010\n\002ID\020\347\214\001\022\n\n\006Target\020\002\"B\n"
      "\023CS_OxCurBankerLeave\022\014\n\004guid\030\001 \001(\005\"\035\n\005Ms"
      "gID\022\010\n\002ID\020\350\214\001\022\n\n\006Target\020\002\"S\n\025SC_OxSatusA"
      "ndDownTime\022\016\n\006status\030\001 \001(\005\022\027\n\017count_down"
      "_time\030\002 \001(\005\"\021\n\005MsgID\022\010\n\002ID\020\351\214\001\"V\n\rOxplay"
      "er_info\022\014\n\004guid\030\001 \001(\005\022\020\n\010nickname\030\002 \001(\t\022"
      "\r\n\005money\030\003 \001(\003\022\026\n\013header_icon\030\004 \001(\005:\0010\"R"
      "\n\025SC_OxPlayerConnection\022&\n\016pb_player_inf"
      "o\030\001 \003(\0132\016.Oxplayer_info\"\021\n\005MsgID\022\010\n\002ID\020\352"
      "\214\001\"8\n\017Player_bet_info\022\022\n\nwhich_area\030\001 \001("
      "\005\022\021\n\tbet_money\030\002 \001(\003\"G\n\nCardResult\022\022\n\nsc"
      "ore_area\030\001 \001(\005\022\021\n\tcard_type\030\002 \001(\005\022\022\n\ncar"
      "d_times\030\003 \001(\005\"\373\002\n\016SC_OxTableInfo\022\016\n\006stat"
      "us\030\001 \001(\005\022\027\n\017count_down_time\030\002 \001(\005\022!\n\014pb_"
      "curBanker\030\003 \001(\0132\013.BankerInfo\022+\n\023pb_playe"
      "r_info_list\030\004 \003(\0132\016.PlayerTopInfo\022#\n\016pb_"
      "banker_list\030\005 \003(\0132\013.BankerList\022#\n\013pb_Are"
      "aInfo\030\006 \001(\0132\016.EveryAreaInfo\0221\n\027pb_player"
      "_area_bet_info\030\007 \003(\0132\020.Player_bet_info\022\030"
      "\n\010pb_cards\030\010 \003(\0132\006.Cards\022\036\n\tpb_result\030\t "
      "\003(\0132\013.CardResult\022&\n\013pb_conclude\030\n \001(\0132\021."
      "OxPlayerConclude\"\021\n\005MsgID\022\010\n\002ID\020\353\214\001\"9\n\026C"
      "S_OxPlayerConnectGame\022\014\n\004guid\030\001 \001(\005\"\021\n\005M"
      "sgID\022\010\n\002ID\020\354\214\001\"B\n\rSC_CardResult\022\036\n\tpb_re"
      "sult\030\001 \003(\0132\013.CardResult\"\021\n\005MsgID\022\010\n\002ID\020\355"
      "\214\001\"M\n\013SC_OxResult\022+\n\020pb_player_result\030\001 "
      "\001(\0132\021.OxPlayerConclude\"\021\n\005MsgID\022\010\n\002ID\020\356\214"
      "\001\"9\n\024SC_OxBankerLeaveFlag\022\016\n\006result\030\001 \001("
      "\005\"\021\n\005MsgID\022\010\n\002ID\020\357\214\001\"1\n\016CS_OxLeaveGame\022\014"
      "\n\004guid\030\001 \001(\005\"\021\n\005MsgID\022\010\n\002ID\020\360\214\001\"3\n\tchip_"
      "info\022\022\n\nchip_index\030\001 \001(\005\022\022\n\nchip_money\030\002"
      " \001(\005\"{\n\021SC_Ox_config_info\022\024\n\014banker_limi"
      "t\030\001 \001(\005\022 \n\014pb_info_chip\030\002 \003(\0132\n.chip_inf"
      "o\022\033\n\023bet_min_limit_money\030\003 \001(\005\"\021\n\005MsgID\022"
      "\010\n\002ID\020\361\214\001\"2\n\021CardCompareResult\022\r\n\005area_\030"
      "\001 \001(\005\022\016\n\006result\030\002 \001(\010\"W\n\024SC_CardCompareR"
      "esult\022,\n\020pb_CompareResult\030\001 \003(\0132\022.CardCo"
      "mpareResult\"\021\n\005MsgID\022\010\n\002ID\020\362\214\001\"#\n\016CS_OxG"
      "etBetCfg\"\021\n\005MsgID\022\010\n\002ID\020\363\214\001\"1\n\016SC_OxGetB"
      "etCfg\022\014\n\004bets\030\001 \003(\005\"\021\n\005MsgID\022\010\n\002ID\020\364\214\001*\344"
      "\001\n\014OX_CARD_TYPE\022\026\n\022OX_CARD_TYPE_ERROR\020\000\022"
      "\030\n\024OX_CARD_TYPE_OX_NONE\020d\022\027\n\023OX_CARD_TYP"
      "E_OX_ONE\020e\022\027\n\023OX_CARD_TYPE_OX_TWO\020f\022\032\n\026O"
      "X_CARD_TYPE_FOUR_KING\020g\022\032\n\026OX_CARD_TYPE_"
      "FIVE_KING\020h\022\033\n\027OX_CARD_TYPE_FOUR_SAMES\020i"
      "\022\033\n\027OX_CARD_TYPE_FIVE_SAMLL\020j*V\n\rOX_SCOR"
      "E_AREA\022\017\n\013OX_AREA_ONE\020\001\022\017\n\013OX_AREA_TWO\020\002"
      "\022\021\n\rOX_AREA_THREE\020\003\022\020\n\014OX_AREA_FOUR\020\004*]\n"
      "\rBanker_Result\022\025\n\021APPLYFORBANKER_OK\020\000\022\031\n"
      "\025APPLYFORBANKER_FAILED\020\001\022\032\n\026FORBIDAPPLYB"
      "ANKER_FLAG\020\002*X\n\nBet_Result\022\n\n\006BET_OK\020\000\022\013"
      "\n\007BET_MAX\020\001\022\017\n\013MONEY_ERROR\020\002\022\017\n\013MONEY_LI"
      "MIT\020\003\022\017\n\013OTHER_ERROR\020\004*H\n\022BankerLeave_Re"
      "sult\022\026\n\022LEAVELFORBANKER_OK\020\000\022\032\n\026LEAVELFO"
      "RBANKER_FAILED\020\001"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 4696);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "public_ox.proto", &protobuf_RegisterTypes);
  ::google::protobuf::internal::OnShutdown(&TableStruct::Shutdown);
}

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;

}  // namespace protobuf_public_5fox_2eproto

const ::google::protobuf::EnumDescriptor* SC_OxStart_MsgID_descriptor() {
  protobuf_public_5fox_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_public_5fox_2eproto::file_level_enum_descriptors[0];
}
bool SC_OxStart_MsgID_IsValid(int value) {
  switch (value) {
    case 18002:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const SC_OxStart_MsgID SC_OxStart::ID;
const SC_OxStart_MsgID SC_OxStart::MsgID_MIN;
const SC_OxStart_MsgID SC_OxStart::MsgID_MAX;
const int SC_OxStart::MsgID_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* CS_OxCallBanker_MsgID_descriptor() {
  protobuf_public_5fox_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_public_5fox_2eproto::file_level_enum_descriptors[1];
}
bool CS_OxCallBanker_MsgID_IsValid(int value) {
  switch (value) {
    case 2:
    case 18003:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const CS_OxCallBanker_MsgID CS_OxCallBanker::ID;
const CS_OxCallBanker_MsgID CS_OxCallBanker::Target;
const CS_OxCallBanker_MsgID CS_OxCallBanker::MsgID_MIN;
const CS_OxCallBanker_MsgID CS_OxCallBanker::MsgID_MAX;
const int CS_OxCallBanker::MsgID_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* SC_OxCallBanker_MsgID_descriptor() {
  protobuf_public_5fox_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_public_5fox_2eproto::file_level_enum_descriptors[2];
}
bool SC_OxCallBanker_MsgID_IsValid(int value) {
  switch (value) {
    case 18004:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const SC_OxCallBanker_MsgID SC_OxCallBanker::ID;
const SC_OxCallBanker_MsgID SC_OxCallBanker::MsgID_MIN;
const SC_OxCallBanker_MsgID SC_OxCallBanker::MsgID_MAX;
const int SC_OxCallBanker::MsgID_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* SC_OxAddScoreStatus_MsgID_descriptor() {
  protobuf_public_5fox_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_public_5fox_2eproto::file_level_enum_descriptors[3];
}
bool SC_OxAddScoreStatus_MsgID_IsValid(int value) {
  switch (value) {
    case 18005:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const SC_OxAddScoreStatus_MsgID SC_OxAddScoreStatus::ID;
const SC_OxAddScoreStatus_MsgID SC_OxAddScoreStatus::MsgID_MIN;
const SC_OxAddScoreStatus_MsgID SC_OxAddScoreStatus::MsgID_MAX;
const int SC_OxAddScoreStatus::MsgID_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* CS_OxAddScore_MsgID_descriptor() {
  protobuf_public_5fox_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_public_5fox_2eproto::file_level_enum_descriptors[4];
}
bool CS_OxAddScore_MsgID_IsValid(int value) {
  switch (value) {
    case 2:
    case 18006:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const CS_OxAddScore_MsgID CS_OxAddScore::ID;
const CS_OxAddScore_MsgID CS_OxAddScore::Target;
const CS_OxAddScore_MsgID CS_OxAddScore::MsgID_MIN;
const CS_OxAddScore_MsgID CS_OxAddScore::MsgID_MAX;
const int CS_OxAddScore::MsgID_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* SC_OxAddScore_MsgID_descriptor() {
  protobuf_public_5fox_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_public_5fox_2eproto::file_level_enum_descriptors[5];
}
bool SC_OxAddScore_MsgID_IsValid(int value) {
  switch (value) {
    case 18007:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const SC_OxAddScore_MsgID SC_OxAddScore::ID;
const SC_OxAddScore_MsgID SC_OxAddScore::MsgID_MIN;
const SC_OxAddScore_MsgID SC_OxAddScore::MsgID_MAX;
const int SC_OxAddScore::MsgID_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* SC_OxDealCard_MsgID_descriptor() {
  protobuf_public_5fox_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_public_5fox_2eproto::file_level_enum_descriptors[6];
}
bool SC_OxDealCard_MsgID_IsValid(int value) {
  switch (value) {
    case 18008:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const SC_OxDealCard_MsgID SC_OxDealCard::ID;
const SC_OxDealCard_MsgID SC_OxDealCard::MsgID_MIN;
const SC_OxDealCard_MsgID SC_OxDealCard::MsgID_MAX;
const int SC_OxDealCard::MsgID_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* CS_OxOpenCards_MsgID_descriptor() {
  protobuf_public_5fox_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_public_5fox_2eproto::file_level_enum_descriptors[7];
}
bool CS_OxOpenCards_MsgID_IsValid(int value) {
  switch (value) {
    case 2:
    case 18009:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const CS_OxOpenCards_MsgID CS_OxOpenCards::ID;
const CS_OxOpenCards_MsgID CS_OxOpenCards::Target;
const CS_OxOpenCards_MsgID CS_OxOpenCards::MsgID_MIN;
const CS_OxOpenCards_MsgID CS_OxOpenCards::MsgID_MAX;
const int CS_OxOpenCards::MsgID_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* SC_OxOpenCards_MsgID_descriptor() {
  protobuf_public_5fox_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_public_5fox_2eproto::file_level_enum_descriptors[8];
}
bool SC_OxOpenCards_MsgID_IsValid(int value) {
  switch (value) {
    case 18010:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const SC_OxOpenCards_MsgID SC_OxOpenCards::ID;
const SC_OxOpenCards_MsgID SC_OxOpenCards::MsgID_MIN;
const SC_OxOpenCards_MsgID SC_OxOpenCards::MsgID_MAX;
const int SC_OxOpenCards::MsgID_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* SC_OxEnd_MsgID_descriptor() {
  protobuf_public_5fox_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_public_5fox_2eproto::file_level_enum_descriptors[9];
}
bool SC_OxEnd_MsgID_IsValid(int value) {
  switch (value) {
    case 18011:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const SC_OxEnd_MsgID SC_OxEnd::ID;
const SC_OxEnd_MsgID SC_OxEnd::MsgID_MIN;
const SC_OxEnd_MsgID SC_OxEnd::MsgID_MAX;
const int SC_OxEnd::MsgID_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* CS_OxRecord_MsgID_descriptor() {
  protobuf_public_5fox_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_public_5fox_2eproto::file_level_enum_descriptors[10];
}
bool CS_OxRecord_MsgID_IsValid(int value) {
  switch (value) {
    case 2:
    case 18012:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const CS_OxRecord_MsgID CS_OxRecord::ID;
const CS_OxRecord_MsgID CS_OxRecord::Target;
const CS_OxRecord_MsgID CS_OxRecord::MsgID_MIN;
const CS_OxRecord_MsgID CS_OxRecord::MsgID_MAX;
const int CS_OxRecord::MsgID_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* SC_OxRecord_MsgID_descriptor() {
  protobuf_public_5fox_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_public_5fox_2eproto::file_level_enum_descriptors[11];
}
bool SC_OxRecord_MsgID_IsValid(int value) {
  switch (value) {
    case 18013:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const SC_OxRecord_MsgID SC_OxRecord::ID;
const SC_OxRecord_MsgID SC_OxRecord::MsgID_MIN;
const SC_OxRecord_MsgID SC_OxRecord::MsgID_MAX;
const int SC_OxRecord::MsgID_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* CS_OxTop_MsgID_descriptor() {
  protobuf_public_5fox_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_public_5fox_2eproto::file_level_enum_descriptors[12];
}
bool CS_OxTop_MsgID_IsValid(int value) {
  switch (value) {
    case 2:
    case 18014:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const CS_OxTop_MsgID CS_OxTop::ID;
const CS_OxTop_MsgID CS_OxTop::Target;
const CS_OxTop_MsgID CS_OxTop::MsgID_MIN;
const CS_OxTop_MsgID CS_OxTop::MsgID_MAX;
const int CS_OxTop::MsgID_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* SC_OxTop_MsgID_descriptor() {
  protobuf_public_5fox_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_public_5fox_2eproto::file_level_enum_descriptors[13];
}
bool SC_OxTop_MsgID_IsValid(int value) {
  switch (value) {
    case 18015:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const SC_OxTop_MsgID SC_OxTop::ID;
const SC_OxTop_MsgID SC_OxTop::MsgID_MIN;
const SC_OxTop_MsgID SC_OxTop::MsgID_MAX;
const int SC_OxTop::MsgID_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* SC_OxBankerInfo_MsgID_descriptor() {
  protobuf_public_5fox_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_public_5fox_2eproto::file_level_enum_descriptors[14];
}
bool SC_OxBankerInfo_MsgID_IsValid(int value) {
  switch (value) {
    case 18016:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const SC_OxBankerInfo_MsgID SC_OxBankerInfo::ID;
const SC_OxBankerInfo_MsgID SC_OxBankerInfo::MsgID_MIN;
const SC_OxBankerInfo_MsgID SC_OxBankerInfo::MsgID_MAX;
const int SC_OxBankerInfo::MsgID_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* SC_OxBankerList_MsgID_descriptor() {
  protobuf_public_5fox_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_public_5fox_2eproto::file_level_enum_descriptors[15];
}
bool SC_OxBankerList_MsgID_IsValid(int value) {
  switch (value) {
    case 18017:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const SC_OxBankerList_MsgID SC_OxBankerList::ID;
const SC_OxBankerList_MsgID SC_OxBankerList::MsgID_MIN;
const SC_OxBankerList_MsgID SC_OxBankerList::MsgID_MAX;
const int SC_OxBankerList::MsgID_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* SC_OxForBankerFlag_MsgID_descriptor() {
  protobuf_public_5fox_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_public_5fox_2eproto::file_level_enum_descriptors[16];
}
bool SC_OxForBankerFlag_MsgID_IsValid(int value) {
  switch (value) {
    case 18018:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const SC_OxForBankerFlag_MsgID SC_OxForBankerFlag::ID;
const SC_OxForBankerFlag_MsgID SC_OxForBankerFlag::MsgID_MIN;
const SC_OxForBankerFlag_MsgID SC_OxForBankerFlag::MsgID_MAX;
const int SC_OxForBankerFlag::MsgID_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* SC_OxBetCoin_MsgID_descriptor() {
  protobuf_public_5fox_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_public_5fox_2eproto::file_level_enum_descriptors[17];
}
bool SC_OxBetCoin_MsgID_IsValid(int value) {
  switch (value) {
    case 18019:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const SC_OxBetCoin_MsgID SC_OxBetCoin::ID;
const SC_OxBetCoin_MsgID SC_OxBetCoin::MsgID_MIN;
const SC_OxBetCoin_MsgID SC_OxBetCoin::MsgID_MAX;
const int SC_OxBetCoin::MsgID_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* SC_OxPlayerList_MsgID_descriptor() {
  protobuf_public_5fox_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_public_5fox_2eproto::file_level_enum_descriptors[18];
}
bool SC_OxPlayerList_MsgID_IsValid(int value) {
  switch (value) {
    case 18020:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const SC_OxPlayerList_MsgID SC_OxPlayerList::ID;
const SC_OxPlayerList_MsgID SC_OxPlayerList::MsgID_MIN;
const SC_OxPlayerList_MsgID SC_OxPlayerList::MsgID_MAX;
const int SC_OxPlayerList::MsgID_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* SC_OxEveryArea_MsgID_descriptor() {
  protobuf_public_5fox_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_public_5fox_2eproto::file_level_enum_descriptors[19];
}
bool SC_OxEveryArea_MsgID_IsValid(int value) {
  switch (value) {
    case 18021:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const SC_OxEveryArea_MsgID SC_OxEveryArea::ID;
const SC_OxEveryArea_MsgID SC_OxEveryArea::MsgID_MIN;
const SC_OxEveryArea_MsgID SC_OxEveryArea::MsgID_MAX;
const int SC_OxEveryArea::MsgID_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* CS_OxApplyForBanker_MsgID_descriptor() {
  protobuf_public_5fox_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_public_5fox_2eproto::file_level_enum_descriptors[20];
}
bool CS_OxApplyForBanker_MsgID_IsValid(int value) {
  switch (value) {
    case 2:
    case 18022:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const CS_OxApplyForBanker_MsgID CS_OxApplyForBanker::ID;
const CS_OxApplyForBanker_MsgID CS_OxApplyForBanker::Target;
const CS_OxApplyForBanker_MsgID CS_OxApplyForBanker::MsgID_MIN;
const CS_OxApplyForBanker_MsgID CS_OxApplyForBanker::MsgID_MAX;
const int CS_OxApplyForBanker::MsgID_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* CS_OxLeaveForBanker_MsgID_descriptor() {
  protobuf_public_5fox_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_public_5fox_2eproto::file_level_enum_descriptors[21];
}
bool CS_OxLeaveForBanker_MsgID_IsValid(int value) {
  switch (value) {
    case 2:
    case 18023:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const CS_OxLeaveForBanker_MsgID CS_OxLeaveForBanker::ID;
const CS_OxLeaveForBanker_MsgID CS_OxLeaveForBanker::Target;
const CS_OxLeaveForBanker_MsgID CS_OxLeaveForBanker::MsgID_MIN;
const CS_OxLeaveForBanker_MsgID CS_OxLeaveForBanker::MsgID_MAX;
const int CS_OxLeaveForBanker::MsgID_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* CS_OxCurBankerLeave_MsgID_descriptor() {
  protobuf_public_5fox_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_public_5fox_2eproto::file_level_enum_descriptors[22];
}
bool CS_OxCurBankerLeave_MsgID_IsValid(int value) {
  switch (value) {
    case 2:
    case 18024:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const CS_OxCurBankerLeave_MsgID CS_OxCurBankerLeave::ID;
const CS_OxCurBankerLeave_MsgID CS_OxCurBankerLeave::Target;
const CS_OxCurBankerLeave_MsgID CS_OxCurBankerLeave::MsgID_MIN;
const CS_OxCurBankerLeave_MsgID CS_OxCurBankerLeave::MsgID_MAX;
const int CS_OxCurBankerLeave::MsgID_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* SC_OxSatusAndDownTime_MsgID_descriptor() {
  protobuf_public_5fox_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_public_5fox_2eproto::file_level_enum_descriptors[23];
}
bool SC_OxSatusAndDownTime_MsgID_IsValid(int value) {
  switch (value) {
    case 18025:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const SC_OxSatusAndDownTime_MsgID SC_OxSatusAndDownTime::ID;
const SC_OxSatusAndDownTime_MsgID SC_OxSatusAndDownTime::MsgID_MIN;
const SC_OxSatusAndDownTime_MsgID SC_OxSatusAndDownTime::MsgID_MAX;
const int SC_OxSatusAndDownTime::MsgID_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* SC_OxPlayerConnection_MsgID_descriptor() {
  protobuf_public_5fox_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_public_5fox_2eproto::file_level_enum_descriptors[24];
}
bool SC_OxPlayerConnection_MsgID_IsValid(int value) {
  switch (value) {
    case 18026:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const SC_OxPlayerConnection_MsgID SC_OxPlayerConnection::ID;
const SC_OxPlayerConnection_MsgID SC_OxPlayerConnection::MsgID_MIN;
const SC_OxPlayerConnection_MsgID SC_OxPlayerConnection::MsgID_MAX;
const int SC_OxPlayerConnection::MsgID_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* SC_OxTableInfo_MsgID_descriptor() {
  protobuf_public_5fox_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_public_5fox_2eproto::file_level_enum_descriptors[25];
}
bool SC_OxTableInfo_MsgID_IsValid(int value) {
  switch (value) {
    case 18027:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const SC_OxTableInfo_MsgID SC_OxTableInfo::ID;
const SC_OxTableInfo_MsgID SC_OxTableInfo::MsgID_MIN;
const SC_OxTableInfo_MsgID SC_OxTableInfo::MsgID_MAX;
const int SC_OxTableInfo::MsgID_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* CS_OxPlayerConnectGame_MsgID_descriptor() {
  protobuf_public_5fox_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_public_5fox_2eproto::file_level_enum_descriptors[26];
}
bool CS_OxPlayerConnectGame_MsgID_IsValid(int value) {
  switch (value) {
    case 18028:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const CS_OxPlayerConnectGame_MsgID CS_OxPlayerConnectGame::ID;
const CS_OxPlayerConnectGame_MsgID CS_OxPlayerConnectGame::MsgID_MIN;
const CS_OxPlayerConnectGame_MsgID CS_OxPlayerConnectGame::MsgID_MAX;
const int CS_OxPlayerConnectGame::MsgID_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* SC_CardResult_MsgID_descriptor() {
  protobuf_public_5fox_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_public_5fox_2eproto::file_level_enum_descriptors[27];
}
bool SC_CardResult_MsgID_IsValid(int value) {
  switch (value) {
    case 18029:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const SC_CardResult_MsgID SC_CardResult::ID;
const SC_CardResult_MsgID SC_CardResult::MsgID_MIN;
const SC_CardResult_MsgID SC_CardResult::MsgID_MAX;
const int SC_CardResult::MsgID_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* SC_OxResult_MsgID_descriptor() {
  protobuf_public_5fox_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_public_5fox_2eproto::file_level_enum_descriptors[28];
}
bool SC_OxResult_MsgID_IsValid(int value) {
  switch (value) {
    case 18030:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const SC_OxResult_MsgID SC_OxResult::ID;
const SC_OxResult_MsgID SC_OxResult::MsgID_MIN;
const SC_OxResult_MsgID SC_OxResult::MsgID_MAX;
const int SC_OxResult::MsgID_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* SC_OxBankerLeaveFlag_MsgID_descriptor() {
  protobuf_public_5fox_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_public_5fox_2eproto::file_level_enum_descriptors[29];
}
bool SC_OxBankerLeaveFlag_MsgID_IsValid(int value) {
  switch (value) {
    case 18031:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const SC_OxBankerLeaveFlag_MsgID SC_OxBankerLeaveFlag::ID;
const SC_OxBankerLeaveFlag_MsgID SC_OxBankerLeaveFlag::MsgID_MIN;
const SC_OxBankerLeaveFlag_MsgID SC_OxBankerLeaveFlag::MsgID_MAX;
const int SC_OxBankerLeaveFlag::MsgID_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* CS_OxLeaveGame_MsgID_descriptor() {
  protobuf_public_5fox_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_public_5fox_2eproto::file_level_enum_descriptors[30];
}
bool CS_OxLeaveGame_MsgID_IsValid(int value) {
  switch (value) {
    case 18032:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const CS_OxLeaveGame_MsgID CS_OxLeaveGame::ID;
const CS_OxLeaveGame_MsgID CS_OxLeaveGame::MsgID_MIN;
const CS_OxLeaveGame_MsgID CS_OxLeaveGame::MsgID_MAX;
const int CS_OxLeaveGame::MsgID_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* SC_Ox_config_info_MsgID_descriptor() {
  protobuf_public_5fox_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_public_5fox_2eproto::file_level_enum_descriptors[31];
}
bool SC_Ox_config_info_MsgID_IsValid(int value) {
  switch (value) {
    case 18033:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const SC_Ox_config_info_MsgID SC_Ox_config_info::ID;
const SC_Ox_config_info_MsgID SC_Ox_config_info::MsgID_MIN;
const SC_Ox_config_info_MsgID SC_Ox_config_info::MsgID_MAX;
const int SC_Ox_config_info::MsgID_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* SC_CardCompareResult_MsgID_descriptor() {
  protobuf_public_5fox_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_public_5fox_2eproto::file_level_enum_descriptors[32];
}
bool SC_CardCompareResult_MsgID_IsValid(int value) {
  switch (value) {
    case 18034:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const SC_CardCompareResult_MsgID SC_CardCompareResult::ID;
const SC_CardCompareResult_MsgID SC_CardCompareResult::MsgID_MIN;
const SC_CardCompareResult_MsgID SC_CardCompareResult::MsgID_MAX;
const int SC_CardCompareResult::MsgID_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* CS_OxGetBetCfg_MsgID_descriptor() {
  protobuf_public_5fox_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_public_5fox_2eproto::file_level_enum_descriptors[33];
}
bool CS_OxGetBetCfg_MsgID_IsValid(int value) {
  switch (value) {
    case 18035:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const CS_OxGetBetCfg_MsgID CS_OxGetBetCfg::ID;
const CS_OxGetBetCfg_MsgID CS_OxGetBetCfg::MsgID_MIN;
const CS_OxGetBetCfg_MsgID CS_OxGetBetCfg::MsgID_MAX;
const int CS_OxGetBetCfg::MsgID_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* SC_OxGetBetCfg_MsgID_descriptor() {
  protobuf_public_5fox_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_public_5fox_2eproto::file_level_enum_descriptors[34];
}
bool SC_OxGetBetCfg_MsgID_IsValid(int value) {
  switch (value) {
    case 18036:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const SC_OxGetBetCfg_MsgID SC_OxGetBetCfg::ID;
const SC_OxGetBetCfg_MsgID SC_OxGetBetCfg::MsgID_MIN;
const SC_OxGetBetCfg_MsgID SC_OxGetBetCfg::MsgID_MAX;
const int SC_OxGetBetCfg::MsgID_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* OX_CARD_TYPE_descriptor() {
  protobuf_public_5fox_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_public_5fox_2eproto::file_level_enum_descriptors[35];
}
bool OX_CARD_TYPE_IsValid(int value) {
  switch (value) {
    case 0:
    case 100:
    case 101:
    case 102:
    case 103:
    case 104:
    case 105:
    case 106:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* OX_SCORE_AREA_descriptor() {
  protobuf_public_5fox_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_public_5fox_2eproto::file_level_enum_descriptors[36];
}
bool OX_SCORE_AREA_IsValid(int value) {
  switch (value) {
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* Banker_Result_descriptor() {
  protobuf_public_5fox_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_public_5fox_2eproto::file_level_enum_descriptors[37];
}
bool Banker_Result_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* Bet_Result_descriptor() {
  protobuf_public_5fox_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_public_5fox_2eproto::file_level_enum_descriptors[38];
}
bool Bet_Result_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* BankerLeave_Result_descriptor() {
  protobuf_public_5fox_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_public_5fox_2eproto::file_level_enum_descriptors[39];
}
bool BankerLeave_Result_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SC_OxStart::kCurChairIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SC_OxStart::SC_OxStart()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_public_5fox_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:SC_OxStart)
}
SC_OxStart::SC_OxStart(const SC_OxStart& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  cur_chair_id_ = from.cur_chair_id_;
  // @@protoc_insertion_point(copy_constructor:SC_OxStart)
}

void SC_OxStart::SharedCtor() {
  _cached_size_ = 0;
  cur_chair_id_ = 0;
}

SC_OxStart::~SC_OxStart() {
  // @@protoc_insertion_point(destructor:SC_OxStart)
  SharedDtor();
}

void SC_OxStart::SharedDtor() {
}

void SC_OxStart::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SC_OxStart::descriptor() {
  protobuf_public_5fox_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_public_5fox_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const SC_OxStart& SC_OxStart::default_instance() {
  protobuf_public_5fox_2eproto::InitDefaults();
  return *internal_default_instance();
}

SC_OxStart* SC_OxStart::New(::google::protobuf::Arena* arena) const {
  SC_OxStart* n = new SC_OxStart;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SC_OxStart::Clear() {
// @@protoc_insertion_point(message_clear_start:SC_OxStart)
  cur_chair_id_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool SC_OxStart::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:SC_OxStart)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 cur_chair_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_cur_chair_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &cur_chair_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:SC_OxStart)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:SC_OxStart)
  return false;
#undef DO_
}

void SC_OxStart::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:SC_OxStart)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 cur_chair_id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->cur_chair_id(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:SC_OxStart)
}

::google::protobuf::uint8* SC_OxStart::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:SC_OxStart)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 cur_chair_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->cur_chair_id(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SC_OxStart)
  return target;
}

size_t SC_OxStart::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SC_OxStart)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // optional int32 cur_chair_id = 1;
  if (has_cur_chair_id()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->cur_chair_id());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SC_OxStart::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:SC_OxStart)
  GOOGLE_DCHECK_NE(&from, this);
  const SC_OxStart* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SC_OxStart>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:SC_OxStart)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:SC_OxStart)
    MergeFrom(*source);
  }
}

void SC_OxStart::MergeFrom(const SC_OxStart& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:SC_OxStart)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_cur_chair_id()) {
    set_cur_chair_id(from.cur_chair_id());
  }
}

void SC_OxStart::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:SC_OxStart)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SC_OxStart::CopyFrom(const SC_OxStart& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SC_OxStart)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SC_OxStart::IsInitialized() const {
  return true;
}

void SC_OxStart::Swap(SC_OxStart* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SC_OxStart::InternalSwap(SC_OxStart* other) {
  std::swap(cur_chair_id_, other->cur_chair_id_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SC_OxStart::GetMetadata() const {
  protobuf_public_5fox_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_public_5fox_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SC_OxStart

// optional int32 cur_chair_id = 1;
bool SC_OxStart::has_cur_chair_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void SC_OxStart::set_has_cur_chair_id() {
  _has_bits_[0] |= 0x00000001u;
}
void SC_OxStart::clear_has_cur_chair_id() {
  _has_bits_[0] &= ~0x00000001u;
}
void SC_OxStart::clear_cur_chair_id() {
  cur_chair_id_ = 0;
  clear_has_cur_chair_id();
}
::google::protobuf::int32 SC_OxStart::cur_chair_id() const {
  // @@protoc_insertion_point(field_get:SC_OxStart.cur_chair_id)
  return cur_chair_id_;
}
void SC_OxStart::set_cur_chair_id(::google::protobuf::int32 value) {
  set_has_cur_chair_id();
  cur_chair_id_ = value;
  // @@protoc_insertion_point(field_set:SC_OxStart.cur_chair_id)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CS_OxCallBanker::kCallBankerFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CS_OxCallBanker::CS_OxCallBanker()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_public_5fox_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:CS_OxCallBanker)
}
CS_OxCallBanker::CS_OxCallBanker(const CS_OxCallBanker& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  call_banker_ = from.call_banker_;
  // @@protoc_insertion_point(copy_constructor:CS_OxCallBanker)
}

void CS_OxCallBanker::SharedCtor() {
  _cached_size_ = 0;
  call_banker_ = false;
}

CS_OxCallBanker::~CS_OxCallBanker() {
  // @@protoc_insertion_point(destructor:CS_OxCallBanker)
  SharedDtor();
}

void CS_OxCallBanker::SharedDtor() {
}

void CS_OxCallBanker::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CS_OxCallBanker::descriptor() {
  protobuf_public_5fox_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_public_5fox_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CS_OxCallBanker& CS_OxCallBanker::default_instance() {
  protobuf_public_5fox_2eproto::InitDefaults();
  return *internal_default_instance();
}

CS_OxCallBanker* CS_OxCallBanker::New(::google::protobuf::Arena* arena) const {
  CS_OxCallBanker* n = new CS_OxCallBanker;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CS_OxCallBanker::Clear() {
// @@protoc_insertion_point(message_clear_start:CS_OxCallBanker)
  call_banker_ = false;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CS_OxCallBanker::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CS_OxCallBanker)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bool call_banker = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_call_banker();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &call_banker_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CS_OxCallBanker)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CS_OxCallBanker)
  return false;
#undef DO_
}

void CS_OxCallBanker::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CS_OxCallBanker)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool call_banker = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->call_banker(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CS_OxCallBanker)
}

::google::protobuf::uint8* CS_OxCallBanker::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CS_OxCallBanker)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool call_banker = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->call_banker(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CS_OxCallBanker)
  return target;
}

size_t CS_OxCallBanker::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CS_OxCallBanker)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // optional bool call_banker = 1;
  if (has_call_banker()) {
    total_size += 1 + 1;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CS_OxCallBanker::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CS_OxCallBanker)
  GOOGLE_DCHECK_NE(&from, this);
  const CS_OxCallBanker* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CS_OxCallBanker>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CS_OxCallBanker)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CS_OxCallBanker)
    MergeFrom(*source);
  }
}

void CS_OxCallBanker::MergeFrom(const CS_OxCallBanker& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CS_OxCallBanker)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_call_banker()) {
    set_call_banker(from.call_banker());
  }
}

void CS_OxCallBanker::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CS_OxCallBanker)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CS_OxCallBanker::CopyFrom(const CS_OxCallBanker& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CS_OxCallBanker)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CS_OxCallBanker::IsInitialized() const {
  return true;
}

void CS_OxCallBanker::Swap(CS_OxCallBanker* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CS_OxCallBanker::InternalSwap(CS_OxCallBanker* other) {
  std::swap(call_banker_, other->call_banker_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CS_OxCallBanker::GetMetadata() const {
  protobuf_public_5fox_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_public_5fox_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CS_OxCallBanker

// optional bool call_banker = 1;
bool CS_OxCallBanker::has_call_banker() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CS_OxCallBanker::set_has_call_banker() {
  _has_bits_[0] |= 0x00000001u;
}
void CS_OxCallBanker::clear_has_call_banker() {
  _has_bits_[0] &= ~0x00000001u;
}
void CS_OxCallBanker::clear_call_banker() {
  call_banker_ = false;
  clear_has_call_banker();
}
bool CS_OxCallBanker::call_banker() const {
  // @@protoc_insertion_point(field_get:CS_OxCallBanker.call_banker)
  return call_banker_;
}
void CS_OxCallBanker::set_call_banker(bool value) {
  set_has_call_banker();
  call_banker_ = value;
  // @@protoc_insertion_point(field_set:CS_OxCallBanker.call_banker)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SC_OxCallBanker::kCurChairIdFieldNumber;
const int SC_OxCallBanker::kCallChairIdFieldNumber;
const int SC_OxCallBanker::kCallBankerFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SC_OxCallBanker::SC_OxCallBanker()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_public_5fox_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:SC_OxCallBanker)
}
SC_OxCallBanker::SC_OxCallBanker(const SC_OxCallBanker& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&cur_chair_id_, &from.cur_chair_id_,
    reinterpret_cast<char*>(&call_banker_) -
    reinterpret_cast<char*>(&cur_chair_id_) + sizeof(call_banker_));
  // @@protoc_insertion_point(copy_constructor:SC_OxCallBanker)
}

void SC_OxCallBanker::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&cur_chair_id_, 0, reinterpret_cast<char*>(&call_banker_) -
    reinterpret_cast<char*>(&cur_chair_id_) + sizeof(call_banker_));
}

SC_OxCallBanker::~SC_OxCallBanker() {
  // @@protoc_insertion_point(destructor:SC_OxCallBanker)
  SharedDtor();
}

void SC_OxCallBanker::SharedDtor() {
}

void SC_OxCallBanker::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SC_OxCallBanker::descriptor() {
  protobuf_public_5fox_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_public_5fox_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const SC_OxCallBanker& SC_OxCallBanker::default_instance() {
  protobuf_public_5fox_2eproto::InitDefaults();
  return *internal_default_instance();
}

SC_OxCallBanker* SC_OxCallBanker::New(::google::protobuf::Arena* arena) const {
  SC_OxCallBanker* n = new SC_OxCallBanker;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SC_OxCallBanker::Clear() {
// @@protoc_insertion_point(message_clear_start:SC_OxCallBanker)
  if (_has_bits_[0 / 32] & 7u) {
    ::memset(&cur_chair_id_, 0, reinterpret_cast<char*>(&call_banker_) -
      reinterpret_cast<char*>(&cur_chair_id_) + sizeof(call_banker_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool SC_OxCallBanker::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:SC_OxCallBanker)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 cur_chair_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_cur_chair_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &cur_chair_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 call_chair_id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_call_chair_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &call_chair_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool call_banker = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {
          set_has_call_banker();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &call_banker_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:SC_OxCallBanker)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:SC_OxCallBanker)
  return false;
#undef DO_
}

void SC_OxCallBanker::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:SC_OxCallBanker)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 cur_chair_id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->cur_chair_id(), output);
  }

  // optional int32 call_chair_id = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->call_chair_id(), output);
  }

  // optional bool call_banker = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->call_banker(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:SC_OxCallBanker)
}

::google::protobuf::uint8* SC_OxCallBanker::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:SC_OxCallBanker)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 cur_chair_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->cur_chair_id(), target);
  }

  // optional int32 call_chair_id = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->call_chair_id(), target);
  }

  // optional bool call_banker = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->call_banker(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SC_OxCallBanker)
  return target;
}

size_t SC_OxCallBanker::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SC_OxCallBanker)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 7u) {
    // optional int32 cur_chair_id = 1;
    if (has_cur_chair_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->cur_chair_id());
    }

    // optional int32 call_chair_id = 2;
    if (has_call_chair_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->call_chair_id());
    }

    // optional bool call_banker = 3;
    if (has_call_banker()) {
      total_size += 1 + 1;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SC_OxCallBanker::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:SC_OxCallBanker)
  GOOGLE_DCHECK_NE(&from, this);
  const SC_OxCallBanker* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SC_OxCallBanker>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:SC_OxCallBanker)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:SC_OxCallBanker)
    MergeFrom(*source);
  }
}

void SC_OxCallBanker::MergeFrom(const SC_OxCallBanker& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:SC_OxCallBanker)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      cur_chair_id_ = from.cur_chair_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      call_chair_id_ = from.call_chair_id_;
    }
    if (cached_has_bits & 0x00000004u) {
      call_banker_ = from.call_banker_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void SC_OxCallBanker::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:SC_OxCallBanker)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SC_OxCallBanker::CopyFrom(const SC_OxCallBanker& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SC_OxCallBanker)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SC_OxCallBanker::IsInitialized() const {
  return true;
}

void SC_OxCallBanker::Swap(SC_OxCallBanker* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SC_OxCallBanker::InternalSwap(SC_OxCallBanker* other) {
  std::swap(cur_chair_id_, other->cur_chair_id_);
  std::swap(call_chair_id_, other->call_chair_id_);
  std::swap(call_banker_, other->call_banker_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SC_OxCallBanker::GetMetadata() const {
  protobuf_public_5fox_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_public_5fox_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SC_OxCallBanker

// optional int32 cur_chair_id = 1;
bool SC_OxCallBanker::has_cur_chair_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void SC_OxCallBanker::set_has_cur_chair_id() {
  _has_bits_[0] |= 0x00000001u;
}
void SC_OxCallBanker::clear_has_cur_chair_id() {
  _has_bits_[0] &= ~0x00000001u;
}
void SC_OxCallBanker::clear_cur_chair_id() {
  cur_chair_id_ = 0;
  clear_has_cur_chair_id();
}
::google::protobuf::int32 SC_OxCallBanker::cur_chair_id() const {
  // @@protoc_insertion_point(field_get:SC_OxCallBanker.cur_chair_id)
  return cur_chair_id_;
}
void SC_OxCallBanker::set_cur_chair_id(::google::protobuf::int32 value) {
  set_has_cur_chair_id();
  cur_chair_id_ = value;
  // @@protoc_insertion_point(field_set:SC_OxCallBanker.cur_chair_id)
}

// optional int32 call_chair_id = 2;
bool SC_OxCallBanker::has_call_chair_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void SC_OxCallBanker::set_has_call_chair_id() {
  _has_bits_[0] |= 0x00000002u;
}
void SC_OxCallBanker::clear_has_call_chair_id() {
  _has_bits_[0] &= ~0x00000002u;
}
void SC_OxCallBanker::clear_call_chair_id() {
  call_chair_id_ = 0;
  clear_has_call_chair_id();
}
::google::protobuf::int32 SC_OxCallBanker::call_chair_id() const {
  // @@protoc_insertion_point(field_get:SC_OxCallBanker.call_chair_id)
  return call_chair_id_;
}
void SC_OxCallBanker::set_call_chair_id(::google::protobuf::int32 value) {
  set_has_call_chair_id();
  call_chair_id_ = value;
  // @@protoc_insertion_point(field_set:SC_OxCallBanker.call_chair_id)
}

// optional bool call_banker = 3;
bool SC_OxCallBanker::has_call_banker() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void SC_OxCallBanker::set_has_call_banker() {
  _has_bits_[0] |= 0x00000004u;
}
void SC_OxCallBanker::clear_has_call_banker() {
  _has_bits_[0] &= ~0x00000004u;
}
void SC_OxCallBanker::clear_call_banker() {
  call_banker_ = false;
  clear_has_call_banker();
}
bool SC_OxCallBanker::call_banker() const {
  // @@protoc_insertion_point(field_get:SC_OxCallBanker.call_banker)
  return call_banker_;
}
void SC_OxCallBanker::set_call_banker(bool value) {
  set_has_call_banker();
  call_banker_ = value;
  // @@protoc_insertion_point(field_set:SC_OxCallBanker.call_banker)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SC_OxAddScoreStatus::kBankerChairIdFieldNumber;
const int SC_OxAddScoreStatus::kMaxScoreFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SC_OxAddScoreStatus::SC_OxAddScoreStatus()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_public_5fox_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:SC_OxAddScoreStatus)
}
SC_OxAddScoreStatus::SC_OxAddScoreStatus(const SC_OxAddScoreStatus& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&max_score_, &from.max_score_,
    reinterpret_cast<char*>(&banker_chair_id_) -
    reinterpret_cast<char*>(&max_score_) + sizeof(banker_chair_id_));
  // @@protoc_insertion_point(copy_constructor:SC_OxAddScoreStatus)
}

void SC_OxAddScoreStatus::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&max_score_, 0, reinterpret_cast<char*>(&banker_chair_id_) -
    reinterpret_cast<char*>(&max_score_) + sizeof(banker_chair_id_));
}

SC_OxAddScoreStatus::~SC_OxAddScoreStatus() {
  // @@protoc_insertion_point(destructor:SC_OxAddScoreStatus)
  SharedDtor();
}

void SC_OxAddScoreStatus::SharedDtor() {
}

void SC_OxAddScoreStatus::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SC_OxAddScoreStatus::descriptor() {
  protobuf_public_5fox_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_public_5fox_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const SC_OxAddScoreStatus& SC_OxAddScoreStatus::default_instance() {
  protobuf_public_5fox_2eproto::InitDefaults();
  return *internal_default_instance();
}

SC_OxAddScoreStatus* SC_OxAddScoreStatus::New(::google::protobuf::Arena* arena) const {
  SC_OxAddScoreStatus* n = new SC_OxAddScoreStatus;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SC_OxAddScoreStatus::Clear() {
// @@protoc_insertion_point(message_clear_start:SC_OxAddScoreStatus)
  if (_has_bits_[0 / 32] & 3u) {
    ::memset(&max_score_, 0, reinterpret_cast<char*>(&banker_chair_id_) -
      reinterpret_cast<char*>(&max_score_) + sizeof(banker_chair_id_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool SC_OxAddScoreStatus::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:SC_OxAddScoreStatus)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 banker_chair_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_banker_chair_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &banker_chair_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 max_score = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_max_score();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &max_score_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:SC_OxAddScoreStatus)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:SC_OxAddScoreStatus)
  return false;
#undef DO_
}

void SC_OxAddScoreStatus::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:SC_OxAddScoreStatus)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 banker_chair_id = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->banker_chair_id(), output);
  }

  // optional int64 max_score = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->max_score(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:SC_OxAddScoreStatus)
}

::google::protobuf::uint8* SC_OxAddScoreStatus::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:SC_OxAddScoreStatus)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 banker_chair_id = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->banker_chair_id(), target);
  }

  // optional int64 max_score = 2;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->max_score(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SC_OxAddScoreStatus)
  return target;
}

size_t SC_OxAddScoreStatus::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SC_OxAddScoreStatus)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 3u) {
    // optional int64 max_score = 2;
    if (has_max_score()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->max_score());
    }

    // optional int32 banker_chair_id = 1;
    if (has_banker_chair_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->banker_chair_id());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SC_OxAddScoreStatus::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:SC_OxAddScoreStatus)
  GOOGLE_DCHECK_NE(&from, this);
  const SC_OxAddScoreStatus* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SC_OxAddScoreStatus>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:SC_OxAddScoreStatus)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:SC_OxAddScoreStatus)
    MergeFrom(*source);
  }
}

void SC_OxAddScoreStatus::MergeFrom(const SC_OxAddScoreStatus& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:SC_OxAddScoreStatus)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      max_score_ = from.max_score_;
    }
    if (cached_has_bits & 0x00000002u) {
      banker_chair_id_ = from.banker_chair_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void SC_OxAddScoreStatus::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:SC_OxAddScoreStatus)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SC_OxAddScoreStatus::CopyFrom(const SC_OxAddScoreStatus& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SC_OxAddScoreStatus)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SC_OxAddScoreStatus::IsInitialized() const {
  return true;
}

void SC_OxAddScoreStatus::Swap(SC_OxAddScoreStatus* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SC_OxAddScoreStatus::InternalSwap(SC_OxAddScoreStatus* other) {
  std::swap(max_score_, other->max_score_);
  std::swap(banker_chair_id_, other->banker_chair_id_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SC_OxAddScoreStatus::GetMetadata() const {
  protobuf_public_5fox_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_public_5fox_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SC_OxAddScoreStatus

// optional int32 banker_chair_id = 1;
bool SC_OxAddScoreStatus::has_banker_chair_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void SC_OxAddScoreStatus::set_has_banker_chair_id() {
  _has_bits_[0] |= 0x00000002u;
}
void SC_OxAddScoreStatus::clear_has_banker_chair_id() {
  _has_bits_[0] &= ~0x00000002u;
}
void SC_OxAddScoreStatus::clear_banker_chair_id() {
  banker_chair_id_ = 0;
  clear_has_banker_chair_id();
}
::google::protobuf::int32 SC_OxAddScoreStatus::banker_chair_id() const {
  // @@protoc_insertion_point(field_get:SC_OxAddScoreStatus.banker_chair_id)
  return banker_chair_id_;
}
void SC_OxAddScoreStatus::set_banker_chair_id(::google::protobuf::int32 value) {
  set_has_banker_chair_id();
  banker_chair_id_ = value;
  // @@protoc_insertion_point(field_set:SC_OxAddScoreStatus.banker_chair_id)
}

// optional int64 max_score = 2;
bool SC_OxAddScoreStatus::has_max_score() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void SC_OxAddScoreStatus::set_has_max_score() {
  _has_bits_[0] |= 0x00000001u;
}
void SC_OxAddScoreStatus::clear_has_max_score() {
  _has_bits_[0] &= ~0x00000001u;
}
void SC_OxAddScoreStatus::clear_max_score() {
  max_score_ = GOOGLE_LONGLONG(0);
  clear_has_max_score();
}
::google::protobuf::int64 SC_OxAddScoreStatus::max_score() const {
  // @@protoc_insertion_point(field_get:SC_OxAddScoreStatus.max_score)
  return max_score_;
}
void SC_OxAddScoreStatus::set_max_score(::google::protobuf::int64 value) {
  set_has_max_score();
  max_score_ = value;
  // @@protoc_insertion_point(field_set:SC_OxAddScoreStatus.max_score)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CS_OxAddScore::kGuidFieldNumber;
const int CS_OxAddScore::kScoreAreaFieldNumber;
const int CS_OxAddScore::kScoreFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CS_OxAddScore::CS_OxAddScore()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_public_5fox_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:CS_OxAddScore)
}
CS_OxAddScore::CS_OxAddScore(const CS_OxAddScore& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&guid_, &from.guid_,
    reinterpret_cast<char*>(&score_) -
    reinterpret_cast<char*>(&guid_) + sizeof(score_));
  // @@protoc_insertion_point(copy_constructor:CS_OxAddScore)
}

void CS_OxAddScore::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&guid_, 0, reinterpret_cast<char*>(&score_) -
    reinterpret_cast<char*>(&guid_) + sizeof(score_));
}

CS_OxAddScore::~CS_OxAddScore() {
  // @@protoc_insertion_point(destructor:CS_OxAddScore)
  SharedDtor();
}

void CS_OxAddScore::SharedDtor() {
}

void CS_OxAddScore::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CS_OxAddScore::descriptor() {
  protobuf_public_5fox_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_public_5fox_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CS_OxAddScore& CS_OxAddScore::default_instance() {
  protobuf_public_5fox_2eproto::InitDefaults();
  return *internal_default_instance();
}

CS_OxAddScore* CS_OxAddScore::New(::google::protobuf::Arena* arena) const {
  CS_OxAddScore* n = new CS_OxAddScore;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CS_OxAddScore::Clear() {
// @@protoc_insertion_point(message_clear_start:CS_OxAddScore)
  if (_has_bits_[0 / 32] & 7u) {
    ::memset(&guid_, 0, reinterpret_cast<char*>(&score_) -
      reinterpret_cast<char*>(&guid_) + sizeof(score_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CS_OxAddScore::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CS_OxAddScore)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 guid = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_guid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &guid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 score_area = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_score_area();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &score_area_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 score = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {
          set_has_score();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &score_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CS_OxAddScore)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CS_OxAddScore)
  return false;
#undef DO_
}

void CS_OxAddScore::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CS_OxAddScore)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 guid = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->guid(), output);
  }

  // optional int32 score_area = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->score_area(), output);
  }

  // optional int64 score = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->score(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CS_OxAddScore)
}

::google::protobuf::uint8* CS_OxAddScore::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CS_OxAddScore)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 guid = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->guid(), target);
  }

  // optional int32 score_area = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->score_area(), target);
  }

  // optional int64 score = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->score(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CS_OxAddScore)
  return target;
}

size_t CS_OxAddScore::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CS_OxAddScore)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 7u) {
    // optional int32 guid = 1;
    if (has_guid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->guid());
    }

    // optional int32 score_area = 2;
    if (has_score_area()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->score_area());
    }

    // optional int64 score = 3;
    if (has_score()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->score());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CS_OxAddScore::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CS_OxAddScore)
  GOOGLE_DCHECK_NE(&from, this);
  const CS_OxAddScore* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CS_OxAddScore>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CS_OxAddScore)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CS_OxAddScore)
    MergeFrom(*source);
  }
}

void CS_OxAddScore::MergeFrom(const CS_OxAddScore& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CS_OxAddScore)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      guid_ = from.guid_;
    }
    if (cached_has_bits & 0x00000002u) {
      score_area_ = from.score_area_;
    }
    if (cached_has_bits & 0x00000004u) {
      score_ = from.score_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CS_OxAddScore::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CS_OxAddScore)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CS_OxAddScore::CopyFrom(const CS_OxAddScore& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CS_OxAddScore)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CS_OxAddScore::IsInitialized() const {
  return true;
}

void CS_OxAddScore::Swap(CS_OxAddScore* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CS_OxAddScore::InternalSwap(CS_OxAddScore* other) {
  std::swap(guid_, other->guid_);
  std::swap(score_area_, other->score_area_);
  std::swap(score_, other->score_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CS_OxAddScore::GetMetadata() const {
  protobuf_public_5fox_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_public_5fox_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CS_OxAddScore

// optional int32 guid = 1;
bool CS_OxAddScore::has_guid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CS_OxAddScore::set_has_guid() {
  _has_bits_[0] |= 0x00000001u;
}
void CS_OxAddScore::clear_has_guid() {
  _has_bits_[0] &= ~0x00000001u;
}
void CS_OxAddScore::clear_guid() {
  guid_ = 0;
  clear_has_guid();
}
::google::protobuf::int32 CS_OxAddScore::guid() const {
  // @@protoc_insertion_point(field_get:CS_OxAddScore.guid)
  return guid_;
}
void CS_OxAddScore::set_guid(::google::protobuf::int32 value) {
  set_has_guid();
  guid_ = value;
  // @@protoc_insertion_point(field_set:CS_OxAddScore.guid)
}

// optional int32 score_area = 2;
bool CS_OxAddScore::has_score_area() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CS_OxAddScore::set_has_score_area() {
  _has_bits_[0] |= 0x00000002u;
}
void CS_OxAddScore::clear_has_score_area() {
  _has_bits_[0] &= ~0x00000002u;
}
void CS_OxAddScore::clear_score_area() {
  score_area_ = 0;
  clear_has_score_area();
}
::google::protobuf::int32 CS_OxAddScore::score_area() const {
  // @@protoc_insertion_point(field_get:CS_OxAddScore.score_area)
  return score_area_;
}
void CS_OxAddScore::set_score_area(::google::protobuf::int32 value) {
  set_has_score_area();
  score_area_ = value;
  // @@protoc_insertion_point(field_set:CS_OxAddScore.score_area)
}

// optional int64 score = 3;
bool CS_OxAddScore::has_score() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void CS_OxAddScore::set_has_score() {
  _has_bits_[0] |= 0x00000004u;
}
void CS_OxAddScore::clear_has_score() {
  _has_bits_[0] &= ~0x00000004u;
}
void CS_OxAddScore::clear_score() {
  score_ = GOOGLE_LONGLONG(0);
  clear_has_score();
}
::google::protobuf::int64 CS_OxAddScore::score() const {
  // @@protoc_insertion_point(field_get:CS_OxAddScore.score)
  return score_;
}
void CS_OxAddScore::set_score(::google::protobuf::int64 value) {
  set_has_score();
  score_ = value;
  // @@protoc_insertion_point(field_set:CS_OxAddScore.score)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SC_OxAddScore::kAddScoreChairIdFieldNumber;
const int SC_OxAddScore::kScoreAreaFieldNumber;
const int SC_OxAddScore::kScoreFieldNumber;
const int SC_OxAddScore::kPlayerBetThisAreaMoneyFieldNumber;
const int SC_OxAddScore::kMoneyFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SC_OxAddScore::SC_OxAddScore()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_public_5fox_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:SC_OxAddScore)
}
SC_OxAddScore::SC_OxAddScore(const SC_OxAddScore& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&add_score_chair_id_, &from.add_score_chair_id_,
    reinterpret_cast<char*>(&money_) -
    reinterpret_cast<char*>(&add_score_chair_id_) + sizeof(money_));
  // @@protoc_insertion_point(copy_constructor:SC_OxAddScore)
}

void SC_OxAddScore::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&add_score_chair_id_, 0, reinterpret_cast<char*>(&money_) -
    reinterpret_cast<char*>(&add_score_chair_id_) + sizeof(money_));
}

SC_OxAddScore::~SC_OxAddScore() {
  // @@protoc_insertion_point(destructor:SC_OxAddScore)
  SharedDtor();
}

void SC_OxAddScore::SharedDtor() {
}

void SC_OxAddScore::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SC_OxAddScore::descriptor() {
  protobuf_public_5fox_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_public_5fox_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const SC_OxAddScore& SC_OxAddScore::default_instance() {
  protobuf_public_5fox_2eproto::InitDefaults();
  return *internal_default_instance();
}

SC_OxAddScore* SC_OxAddScore::New(::google::protobuf::Arena* arena) const {
  SC_OxAddScore* n = new SC_OxAddScore;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SC_OxAddScore::Clear() {
// @@protoc_insertion_point(message_clear_start:SC_OxAddScore)
  if (_has_bits_[0 / 32] & 31u) {
    ::memset(&add_score_chair_id_, 0, reinterpret_cast<char*>(&money_) -
      reinterpret_cast<char*>(&add_score_chair_id_) + sizeof(money_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool SC_OxAddScore::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:SC_OxAddScore)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 add_score_chair_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_add_score_chair_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &add_score_chair_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 score_area = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_score_area();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &score_area_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 score = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {
          set_has_score();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &score_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 player_bet_this_area_money = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u)) {
          set_has_player_bet_this_area_money();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &player_bet_this_area_money_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 money = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u)) {
          set_has_money();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &money_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:SC_OxAddScore)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:SC_OxAddScore)
  return false;
#undef DO_
}

void SC_OxAddScore::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:SC_OxAddScore)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 add_score_chair_id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->add_score_chair_id(), output);
  }

  // optional int32 score_area = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->score_area(), output);
  }

  // optional int64 score = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->score(), output);
  }

  // optional int64 player_bet_this_area_money = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(4, this->player_bet_this_area_money(), output);
  }

  // optional int64 money = 5;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(5, this->money(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:SC_OxAddScore)
}

::google::protobuf::uint8* SC_OxAddScore::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:SC_OxAddScore)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 add_score_chair_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->add_score_chair_id(), target);
  }

  // optional int32 score_area = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->score_area(), target);
  }

  // optional int64 score = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->score(), target);
  }

  // optional int64 player_bet_this_area_money = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(4, this->player_bet_this_area_money(), target);
  }

  // optional int64 money = 5;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(5, this->money(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SC_OxAddScore)
  return target;
}

size_t SC_OxAddScore::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SC_OxAddScore)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 31u) {
    // optional int32 add_score_chair_id = 1;
    if (has_add_score_chair_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->add_score_chair_id());
    }

    // optional int32 score_area = 2;
    if (has_score_area()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->score_area());
    }

    // optional int64 score = 3;
    if (has_score()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->score());
    }

    // optional int64 player_bet_this_area_money = 4;
    if (has_player_bet_this_area_money()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->player_bet_this_area_money());
    }

    // optional int64 money = 5;
    if (has_money()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->money());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SC_OxAddScore::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:SC_OxAddScore)
  GOOGLE_DCHECK_NE(&from, this);
  const SC_OxAddScore* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SC_OxAddScore>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:SC_OxAddScore)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:SC_OxAddScore)
    MergeFrom(*source);
  }
}

void SC_OxAddScore::MergeFrom(const SC_OxAddScore& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:SC_OxAddScore)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 31u) {
    if (cached_has_bits & 0x00000001u) {
      add_score_chair_id_ = from.add_score_chair_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      score_area_ = from.score_area_;
    }
    if (cached_has_bits & 0x00000004u) {
      score_ = from.score_;
    }
    if (cached_has_bits & 0x00000008u) {
      player_bet_this_area_money_ = from.player_bet_this_area_money_;
    }
    if (cached_has_bits & 0x00000010u) {
      money_ = from.money_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void SC_OxAddScore::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:SC_OxAddScore)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SC_OxAddScore::CopyFrom(const SC_OxAddScore& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SC_OxAddScore)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SC_OxAddScore::IsInitialized() const {
  return true;
}

void SC_OxAddScore::Swap(SC_OxAddScore* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SC_OxAddScore::InternalSwap(SC_OxAddScore* other) {
  std::swap(add_score_chair_id_, other->add_score_chair_id_);
  std::swap(score_area_, other->score_area_);
  std::swap(score_, other->score_);
  std::swap(player_bet_this_area_money_, other->player_bet_this_area_money_);
  std::swap(money_, other->money_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SC_OxAddScore::GetMetadata() const {
  protobuf_public_5fox_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_public_5fox_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SC_OxAddScore

// optional int32 add_score_chair_id = 1;
bool SC_OxAddScore::has_add_score_chair_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void SC_OxAddScore::set_has_add_score_chair_id() {
  _has_bits_[0] |= 0x00000001u;
}
void SC_OxAddScore::clear_has_add_score_chair_id() {
  _has_bits_[0] &= ~0x00000001u;
}
void SC_OxAddScore::clear_add_score_chair_id() {
  add_score_chair_id_ = 0;
  clear_has_add_score_chair_id();
}
::google::protobuf::int32 SC_OxAddScore::add_score_chair_id() const {
  // @@protoc_insertion_point(field_get:SC_OxAddScore.add_score_chair_id)
  return add_score_chair_id_;
}
void SC_OxAddScore::set_add_score_chair_id(::google::protobuf::int32 value) {
  set_has_add_score_chair_id();
  add_score_chair_id_ = value;
  // @@protoc_insertion_point(field_set:SC_OxAddScore.add_score_chair_id)
}

// optional int32 score_area = 2;
bool SC_OxAddScore::has_score_area() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void SC_OxAddScore::set_has_score_area() {
  _has_bits_[0] |= 0x00000002u;
}
void SC_OxAddScore::clear_has_score_area() {
  _has_bits_[0] &= ~0x00000002u;
}
void SC_OxAddScore::clear_score_area() {
  score_area_ = 0;
  clear_has_score_area();
}
::google::protobuf::int32 SC_OxAddScore::score_area() const {
  // @@protoc_insertion_point(field_get:SC_OxAddScore.score_area)
  return score_area_;
}
void SC_OxAddScore::set_score_area(::google::protobuf::int32 value) {
  set_has_score_area();
  score_area_ = value;
  // @@protoc_insertion_point(field_set:SC_OxAddScore.score_area)
}

// optional int64 score = 3;
bool SC_OxAddScore::has_score() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void SC_OxAddScore::set_has_score() {
  _has_bits_[0] |= 0x00000004u;
}
void SC_OxAddScore::clear_has_score() {
  _has_bits_[0] &= ~0x00000004u;
}
void SC_OxAddScore::clear_score() {
  score_ = GOOGLE_LONGLONG(0);
  clear_has_score();
}
::google::protobuf::int64 SC_OxAddScore::score() const {
  // @@protoc_insertion_point(field_get:SC_OxAddScore.score)
  return score_;
}
void SC_OxAddScore::set_score(::google::protobuf::int64 value) {
  set_has_score();
  score_ = value;
  // @@protoc_insertion_point(field_set:SC_OxAddScore.score)
}

// optional int64 player_bet_this_area_money = 4;
bool SC_OxAddScore::has_player_bet_this_area_money() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void SC_OxAddScore::set_has_player_bet_this_area_money() {
  _has_bits_[0] |= 0x00000008u;
}
void SC_OxAddScore::clear_has_player_bet_this_area_money() {
  _has_bits_[0] &= ~0x00000008u;
}
void SC_OxAddScore::clear_player_bet_this_area_money() {
  player_bet_this_area_money_ = GOOGLE_LONGLONG(0);
  clear_has_player_bet_this_area_money();
}
::google::protobuf::int64 SC_OxAddScore::player_bet_this_area_money() const {
  // @@protoc_insertion_point(field_get:SC_OxAddScore.player_bet_this_area_money)
  return player_bet_this_area_money_;
}
void SC_OxAddScore::set_player_bet_this_area_money(::google::protobuf::int64 value) {
  set_has_player_bet_this_area_money();
  player_bet_this_area_money_ = value;
  // @@protoc_insertion_point(field_set:SC_OxAddScore.player_bet_this_area_money)
}

// optional int64 money = 5;
bool SC_OxAddScore::has_money() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void SC_OxAddScore::set_has_money() {
  _has_bits_[0] |= 0x00000010u;
}
void SC_OxAddScore::clear_has_money() {
  _has_bits_[0] &= ~0x00000010u;
}
void SC_OxAddScore::clear_money() {
  money_ = GOOGLE_LONGLONG(0);
  clear_has_money();
}
::google::protobuf::int64 SC_OxAddScore::money() const {
  // @@protoc_insertion_point(field_get:SC_OxAddScore.money)
  return money_;
}
void SC_OxAddScore::set_money(::google::protobuf::int64 value) {
  set_has_money();
  money_ = value;
  // @@protoc_insertion_point(field_set:SC_OxAddScore.money)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Cards::kScoreAreaFieldNumber;
const int Cards::kCardFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Cards::Cards()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_public_5fox_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cards)
}
Cards::Cards(const Cards& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      card_(from.card_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  score_area_ = from.score_area_;
  // @@protoc_insertion_point(copy_constructor:Cards)
}

void Cards::SharedCtor() {
  _cached_size_ = 0;
  score_area_ = 0;
}

Cards::~Cards() {
  // @@protoc_insertion_point(destructor:Cards)
  SharedDtor();
}

void Cards::SharedDtor() {
}

void Cards::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Cards::descriptor() {
  protobuf_public_5fox_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_public_5fox_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Cards& Cards::default_instance() {
  protobuf_public_5fox_2eproto::InitDefaults();
  return *internal_default_instance();
}

Cards* Cards::New(::google::protobuf::Arena* arena) const {
  Cards* n = new Cards;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Cards::Clear() {
// @@protoc_insertion_point(message_clear_start:Cards)
  card_.Clear();
  score_area_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool Cards::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cards)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 score_area = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_score_area();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &score_area_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated int32 card = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 16u, input, this->mutable_card())));
        } else if (static_cast< ::google::protobuf::uint8>(tag) ==
                   static_cast< ::google::protobuf::uint8>(18u)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_card())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cards)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cards)
  return false;
#undef DO_
}

void Cards::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cards)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 score_area = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->score_area(), output);
  }

  // repeated int32 card = 2;
  for (int i = 0, n = this->card_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      2, this->card(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cards)
}

::google::protobuf::uint8* Cards::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cards)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 score_area = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->score_area(), target);
  }

  // repeated int32 card = 2;
  target = ::google::protobuf::internal::WireFormatLite::
    WriteInt32ToArray(2, this->card_, target);

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cards)
  return target;
}

size_t Cards::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Cards)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // repeated int32 card = 2;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      Int32Size(this->card_);
    total_size += 1 *
                  ::google::protobuf::internal::FromIntSize(this->card_size());
    total_size += data_size;
  }

  // optional int32 score_area = 1;
  if (has_score_area()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->score_area());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Cards::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Cards)
  GOOGLE_DCHECK_NE(&from, this);
  const Cards* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Cards>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Cards)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Cards)
    MergeFrom(*source);
  }
}

void Cards::MergeFrom(const Cards& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Cards)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  card_.MergeFrom(from.card_);
  if (from.has_score_area()) {
    set_score_area(from.score_area());
  }
}

void Cards::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Cards)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Cards::CopyFrom(const Cards& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Cards)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Cards::IsInitialized() const {
  return true;
}

void Cards::Swap(Cards* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Cards::InternalSwap(Cards* other) {
  card_.InternalSwap(&other->card_);
  std::swap(score_area_, other->score_area_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Cards::GetMetadata() const {
  protobuf_public_5fox_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_public_5fox_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Cards

// optional int32 score_area = 1;
bool Cards::has_score_area() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void Cards::set_has_score_area() {
  _has_bits_[0] |= 0x00000001u;
}
void Cards::clear_has_score_area() {
  _has_bits_[0] &= ~0x00000001u;
}
void Cards::clear_score_area() {
  score_area_ = 0;
  clear_has_score_area();
}
::google::protobuf::int32 Cards::score_area() const {
  // @@protoc_insertion_point(field_get:Cards.score_area)
  return score_area_;
}
void Cards::set_score_area(::google::protobuf::int32 value) {
  set_has_score_area();
  score_area_ = value;
  // @@protoc_insertion_point(field_set:Cards.score_area)
}

// repeated int32 card = 2;
int Cards::card_size() const {
  return card_.size();
}
void Cards::clear_card() {
  card_.Clear();
}
::google::protobuf::int32 Cards::card(int index) const {
  // @@protoc_insertion_point(field_get:Cards.card)
  return card_.Get(index);
}
void Cards::set_card(int index, ::google::protobuf::int32 value) {
  card_.Set(index, value);
  // @@protoc_insertion_point(field_set:Cards.card)
}
void Cards::add_card(::google::protobuf::int32 value) {
  card_.Add(value);
  // @@protoc_insertion_point(field_add:Cards.card)
}
const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
Cards::card() const {
  // @@protoc_insertion_point(field_list:Cards.card)
  return card_;
}
::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
Cards::mutable_card() {
  // @@protoc_insertion_point(field_mutable_list:Cards.card)
  return &card_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SC_OxDealCard::kPbCardsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SC_OxDealCard::SC_OxDealCard()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_public_5fox_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:SC_OxDealCard)
}
SC_OxDealCard::SC_OxDealCard(const SC_OxDealCard& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      pb_cards_(from.pb_cards_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:SC_OxDealCard)
}

void SC_OxDealCard::SharedCtor() {
  _cached_size_ = 0;
}

SC_OxDealCard::~SC_OxDealCard() {
  // @@protoc_insertion_point(destructor:SC_OxDealCard)
  SharedDtor();
}

void SC_OxDealCard::SharedDtor() {
}

void SC_OxDealCard::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SC_OxDealCard::descriptor() {
  protobuf_public_5fox_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_public_5fox_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const SC_OxDealCard& SC_OxDealCard::default_instance() {
  protobuf_public_5fox_2eproto::InitDefaults();
  return *internal_default_instance();
}

SC_OxDealCard* SC_OxDealCard::New(::google::protobuf::Arena* arena) const {
  SC_OxDealCard* n = new SC_OxDealCard;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SC_OxDealCard::Clear() {
// @@protoc_insertion_point(message_clear_start:SC_OxDealCard)
  pb_cards_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool SC_OxDealCard::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:SC_OxDealCard)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .Cards pb_cards = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_pb_cards()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:SC_OxDealCard)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:SC_OxDealCard)
  return false;
#undef DO_
}

void SC_OxDealCard::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:SC_OxDealCard)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .Cards pb_cards = 1;
  for (unsigned int i = 0, n = this->pb_cards_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->pb_cards(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:SC_OxDealCard)
}

::google::protobuf::uint8* SC_OxDealCard::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:SC_OxDealCard)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .Cards pb_cards = 1;
  for (unsigned int i = 0, n = this->pb_cards_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, this->pb_cards(i), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SC_OxDealCard)
  return target;
}

size_t SC_OxDealCard::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SC_OxDealCard)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // repeated .Cards pb_cards = 1;
  {
    unsigned int count = this->pb_cards_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->pb_cards(i));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SC_OxDealCard::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:SC_OxDealCard)
  GOOGLE_DCHECK_NE(&from, this);
  const SC_OxDealCard* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SC_OxDealCard>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:SC_OxDealCard)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:SC_OxDealCard)
    MergeFrom(*source);
  }
}

void SC_OxDealCard::MergeFrom(const SC_OxDealCard& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:SC_OxDealCard)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  pb_cards_.MergeFrom(from.pb_cards_);
}

void SC_OxDealCard::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:SC_OxDealCard)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SC_OxDealCard::CopyFrom(const SC_OxDealCard& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SC_OxDealCard)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SC_OxDealCard::IsInitialized() const {
  return true;
}

void SC_OxDealCard::Swap(SC_OxDealCard* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SC_OxDealCard::InternalSwap(SC_OxDealCard* other) {
  pb_cards_.InternalSwap(&other->pb_cards_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SC_OxDealCard::GetMetadata() const {
  protobuf_public_5fox_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_public_5fox_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SC_OxDealCard

// repeated .Cards pb_cards = 1;
int SC_OxDealCard::pb_cards_size() const {
  return pb_cards_.size();
}
void SC_OxDealCard::clear_pb_cards() {
  pb_cards_.Clear();
}
const ::Cards& SC_OxDealCard::pb_cards(int index) const {
  // @@protoc_insertion_point(field_get:SC_OxDealCard.pb_cards)
  return pb_cards_.Get(index);
}
::Cards* SC_OxDealCard::mutable_pb_cards(int index) {
  // @@protoc_insertion_point(field_mutable:SC_OxDealCard.pb_cards)
  return pb_cards_.Mutable(index);
}
::Cards* SC_OxDealCard::add_pb_cards() {
  // @@protoc_insertion_point(field_add:SC_OxDealCard.pb_cards)
  return pb_cards_.Add();
}
::google::protobuf::RepeatedPtrField< ::Cards >*
SC_OxDealCard::mutable_pb_cards() {
  // @@protoc_insertion_point(field_mutable_list:SC_OxDealCard.pb_cards)
  return &pb_cards_;
}
const ::google::protobuf::RepeatedPtrField< ::Cards >&
SC_OxDealCard::pb_cards() const {
  // @@protoc_insertion_point(field_list:SC_OxDealCard.pb_cards)
  return pb_cards_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CS_OxOpenCards::CS_OxOpenCards()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_public_5fox_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:CS_OxOpenCards)
}
CS_OxOpenCards::CS_OxOpenCards(const CS_OxOpenCards& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:CS_OxOpenCards)
}

void CS_OxOpenCards::SharedCtor() {
  _cached_size_ = 0;
}

CS_OxOpenCards::~CS_OxOpenCards() {
  // @@protoc_insertion_point(destructor:CS_OxOpenCards)
  SharedDtor();
}

void CS_OxOpenCards::SharedDtor() {
}

void CS_OxOpenCards::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CS_OxOpenCards::descriptor() {
  protobuf_public_5fox_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_public_5fox_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CS_OxOpenCards& CS_OxOpenCards::default_instance() {
  protobuf_public_5fox_2eproto::InitDefaults();
  return *internal_default_instance();
}

CS_OxOpenCards* CS_OxOpenCards::New(::google::protobuf::Arena* arena) const {
  CS_OxOpenCards* n = new CS_OxOpenCards;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CS_OxOpenCards::Clear() {
// @@protoc_insertion_point(message_clear_start:CS_OxOpenCards)
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CS_OxOpenCards::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CS_OxOpenCards)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:CS_OxOpenCards)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CS_OxOpenCards)
  return false;
#undef DO_
}

void CS_OxOpenCards::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CS_OxOpenCards)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CS_OxOpenCards)
}

::google::protobuf::uint8* CS_OxOpenCards::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CS_OxOpenCards)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CS_OxOpenCards)
  return target;
}

size_t CS_OxOpenCards::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CS_OxOpenCards)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CS_OxOpenCards::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CS_OxOpenCards)
  GOOGLE_DCHECK_NE(&from, this);
  const CS_OxOpenCards* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CS_OxOpenCards>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CS_OxOpenCards)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CS_OxOpenCards)
    MergeFrom(*source);
  }
}

void CS_OxOpenCards::MergeFrom(const CS_OxOpenCards& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CS_OxOpenCards)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void CS_OxOpenCards::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CS_OxOpenCards)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CS_OxOpenCards::CopyFrom(const CS_OxOpenCards& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CS_OxOpenCards)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CS_OxOpenCards::IsInitialized() const {
  return true;
}

void CS_OxOpenCards::Swap(CS_OxOpenCards* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CS_OxOpenCards::InternalSwap(CS_OxOpenCards* other) {
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CS_OxOpenCards::GetMetadata() const {
  protobuf_public_5fox_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_public_5fox_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CS_OxOpenCards

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SC_OxOpenCards::kOpenChairIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SC_OxOpenCards::SC_OxOpenCards()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_public_5fox_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:SC_OxOpenCards)
}
SC_OxOpenCards::SC_OxOpenCards(const SC_OxOpenCards& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  open_chair_id_ = from.open_chair_id_;
  // @@protoc_insertion_point(copy_constructor:SC_OxOpenCards)
}

void SC_OxOpenCards::SharedCtor() {
  _cached_size_ = 0;
  open_chair_id_ = 0;
}

SC_OxOpenCards::~SC_OxOpenCards() {
  // @@protoc_insertion_point(destructor:SC_OxOpenCards)
  SharedDtor();
}

void SC_OxOpenCards::SharedDtor() {
}

void SC_OxOpenCards::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SC_OxOpenCards::descriptor() {
  protobuf_public_5fox_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_public_5fox_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const SC_OxOpenCards& SC_OxOpenCards::default_instance() {
  protobuf_public_5fox_2eproto::InitDefaults();
  return *internal_default_instance();
}

SC_OxOpenCards* SC_OxOpenCards::New(::google::protobuf::Arena* arena) const {
  SC_OxOpenCards* n = new SC_OxOpenCards;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SC_OxOpenCards::Clear() {
// @@protoc_insertion_point(message_clear_start:SC_OxOpenCards)
  open_chair_id_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool SC_OxOpenCards::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:SC_OxOpenCards)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 open_chair_id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_open_chair_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &open_chair_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:SC_OxOpenCards)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:SC_OxOpenCards)
  return false;
#undef DO_
}

void SC_OxOpenCards::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:SC_OxOpenCards)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 open_chair_id = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->open_chair_id(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:SC_OxOpenCards)
}

::google::protobuf::uint8* SC_OxOpenCards::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:SC_OxOpenCards)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 open_chair_id = 2;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->open_chair_id(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SC_OxOpenCards)
  return target;
}

size_t SC_OxOpenCards::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SC_OxOpenCards)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // optional int32 open_chair_id = 2;
  if (has_open_chair_id()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->open_chair_id());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SC_OxOpenCards::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:SC_OxOpenCards)
  GOOGLE_DCHECK_NE(&from, this);
  const SC_OxOpenCards* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SC_OxOpenCards>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:SC_OxOpenCards)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:SC_OxOpenCards)
    MergeFrom(*source);
  }
}

void SC_OxOpenCards::MergeFrom(const SC_OxOpenCards& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:SC_OxOpenCards)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_open_chair_id()) {
    set_open_chair_id(from.open_chair_id());
  }
}

void SC_OxOpenCards::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:SC_OxOpenCards)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SC_OxOpenCards::CopyFrom(const SC_OxOpenCards& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SC_OxOpenCards)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SC_OxOpenCards::IsInitialized() const {
  return true;
}

void SC_OxOpenCards::Swap(SC_OxOpenCards* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SC_OxOpenCards::InternalSwap(SC_OxOpenCards* other) {
  std::swap(open_chair_id_, other->open_chair_id_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SC_OxOpenCards::GetMetadata() const {
  protobuf_public_5fox_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_public_5fox_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SC_OxOpenCards

// optional int32 open_chair_id = 2;
bool SC_OxOpenCards::has_open_chair_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void SC_OxOpenCards::set_has_open_chair_id() {
  _has_bits_[0] |= 0x00000001u;
}
void SC_OxOpenCards::clear_has_open_chair_id() {
  _has_bits_[0] &= ~0x00000001u;
}
void SC_OxOpenCards::clear_open_chair_id() {
  open_chair_id_ = 0;
  clear_has_open_chair_id();
}
::google::protobuf::int32 SC_OxOpenCards::open_chair_id() const {
  // @@protoc_insertion_point(field_get:SC_OxOpenCards.open_chair_id)
  return open_chair_id_;
}
void SC_OxOpenCards::set_open_chair_id(::google::protobuf::int32 value) {
  set_has_open_chair_id();
  open_chair_id_ = value;
  // @@protoc_insertion_point(field_set:SC_OxOpenCards.open_chair_id)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int OxPlayerConclude::kChairIdFieldNumber;
const int OxPlayerConclude::kPayScoreFieldNumber;
const int OxPlayerConclude::kEarnScoreFieldNumber;
const int OxPlayerConclude::kSystemTaxFieldNumber;
const int OxPlayerConclude::kBankerScoreFieldNumber;
const int OxPlayerConclude::kAllWinOrLoseFlagFieldNumber;
const int OxPlayerConclude::kMoneyFieldNumber;
const int OxPlayerConclude::kTaxShowFlagFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

OxPlayerConclude::OxPlayerConclude()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_public_5fox_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:OxPlayerConclude)
}
OxPlayerConclude::OxPlayerConclude(const OxPlayerConclude& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&pay_score_, &from.pay_score_,
    reinterpret_cast<char*>(&tax_show_flag_) -
    reinterpret_cast<char*>(&pay_score_) + sizeof(tax_show_flag_));
  // @@protoc_insertion_point(copy_constructor:OxPlayerConclude)
}

void OxPlayerConclude::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&pay_score_, 0, reinterpret_cast<char*>(&tax_show_flag_) -
    reinterpret_cast<char*>(&pay_score_) + sizeof(tax_show_flag_));
}

OxPlayerConclude::~OxPlayerConclude() {
  // @@protoc_insertion_point(destructor:OxPlayerConclude)
  SharedDtor();
}

void OxPlayerConclude::SharedDtor() {
}

void OxPlayerConclude::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* OxPlayerConclude::descriptor() {
  protobuf_public_5fox_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_public_5fox_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const OxPlayerConclude& OxPlayerConclude::default_instance() {
  protobuf_public_5fox_2eproto::InitDefaults();
  return *internal_default_instance();
}

OxPlayerConclude* OxPlayerConclude::New(::google::protobuf::Arena* arena) const {
  OxPlayerConclude* n = new OxPlayerConclude;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void OxPlayerConclude::Clear() {
// @@protoc_insertion_point(message_clear_start:OxPlayerConclude)
  if (_has_bits_[0 / 32] & 255u) {
    ::memset(&pay_score_, 0, reinterpret_cast<char*>(&tax_show_flag_) -
      reinterpret_cast<char*>(&pay_score_) + sizeof(tax_show_flag_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool OxPlayerConclude::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:OxPlayerConclude)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 chair_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_chair_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &chair_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 pay_score = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_pay_score();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &pay_score_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 earn_score = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {
          set_has_earn_score();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &earn_score_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 system_tax = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u)) {
          set_has_system_tax();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &system_tax_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 banker_score = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u)) {
          set_has_banker_score();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &banker_score_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 all_win_or_lose_flag = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u)) {
          set_has_all_win_or_lose_flag();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &all_win_or_lose_flag_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 money = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u)) {
          set_has_money();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &money_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 tax_show_flag = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(64u)) {
          set_has_tax_show_flag();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &tax_show_flag_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:OxPlayerConclude)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:OxPlayerConclude)
  return false;
#undef DO_
}

void OxPlayerConclude::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:OxPlayerConclude)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 chair_id = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->chair_id(), output);
  }

  // optional int64 pay_score = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->pay_score(), output);
  }

  // optional int64 earn_score = 3;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->earn_score(), output);
  }

  // optional int32 system_tax = 4;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->system_tax(), output);
  }

  // optional int64 banker_score = 5;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(5, this->banker_score(), output);
  }

  // optional int32 all_win_or_lose_flag = 6;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->all_win_or_lose_flag(), output);
  }

  // optional int64 money = 7;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(7, this->money(), output);
  }

  // optional int32 tax_show_flag = 8;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->tax_show_flag(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:OxPlayerConclude)
}

::google::protobuf::uint8* OxPlayerConclude::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:OxPlayerConclude)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 chair_id = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->chair_id(), target);
  }

  // optional int64 pay_score = 2;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->pay_score(), target);
  }

  // optional int64 earn_score = 3;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->earn_score(), target);
  }

  // optional int32 system_tax = 4;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->system_tax(), target);
  }

  // optional int64 banker_score = 5;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(5, this->banker_score(), target);
  }

  // optional int32 all_win_or_lose_flag = 6;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->all_win_or_lose_flag(), target);
  }

  // optional int64 money = 7;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(7, this->money(), target);
  }

  // optional int32 tax_show_flag = 8;
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->tax_show_flag(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:OxPlayerConclude)
  return target;
}

size_t OxPlayerConclude::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:OxPlayerConclude)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 255u) {
    // optional int64 pay_score = 2;
    if (has_pay_score()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->pay_score());
    }

    // optional int32 chair_id = 1;
    if (has_chair_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->chair_id());
    }

    // optional int32 system_tax = 4;
    if (has_system_tax()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->system_tax());
    }

    // optional int64 earn_score = 3;
    if (has_earn_score()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->earn_score());
    }

    // optional int64 banker_score = 5;
    if (has_banker_score()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->banker_score());
    }

    // optional int64 money = 7;
    if (has_money()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->money());
    }

    // optional int32 all_win_or_lose_flag = 6;
    if (has_all_win_or_lose_flag()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->all_win_or_lose_flag());
    }

    // optional int32 tax_show_flag = 8;
    if (has_tax_show_flag()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->tax_show_flag());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void OxPlayerConclude::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:OxPlayerConclude)
  GOOGLE_DCHECK_NE(&from, this);
  const OxPlayerConclude* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const OxPlayerConclude>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:OxPlayerConclude)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:OxPlayerConclude)
    MergeFrom(*source);
  }
}

void OxPlayerConclude::MergeFrom(const OxPlayerConclude& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:OxPlayerConclude)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      pay_score_ = from.pay_score_;
    }
    if (cached_has_bits & 0x00000002u) {
      chair_id_ = from.chair_id_;
    }
    if (cached_has_bits & 0x00000004u) {
      system_tax_ = from.system_tax_;
    }
    if (cached_has_bits & 0x00000008u) {
      earn_score_ = from.earn_score_;
    }
    if (cached_has_bits & 0x00000010u) {
      banker_score_ = from.banker_score_;
    }
    if (cached_has_bits & 0x00000020u) {
      money_ = from.money_;
    }
    if (cached_has_bits & 0x00000040u) {
      all_win_or_lose_flag_ = from.all_win_or_lose_flag_;
    }
    if (cached_has_bits & 0x00000080u) {
      tax_show_flag_ = from.tax_show_flag_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void OxPlayerConclude::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:OxPlayerConclude)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void OxPlayerConclude::CopyFrom(const OxPlayerConclude& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:OxPlayerConclude)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OxPlayerConclude::IsInitialized() const {
  return true;
}

void OxPlayerConclude::Swap(OxPlayerConclude* other) {
  if (other == this) return;
  InternalSwap(other);
}
void OxPlayerConclude::InternalSwap(OxPlayerConclude* other) {
  std::swap(pay_score_, other->pay_score_);
  std::swap(chair_id_, other->chair_id_);
  std::swap(system_tax_, other->system_tax_);
  std::swap(earn_score_, other->earn_score_);
  std::swap(banker_score_, other->banker_score_);
  std::swap(money_, other->money_);
  std::swap(all_win_or_lose_flag_, other->all_win_or_lose_flag_);
  std::swap(tax_show_flag_, other->tax_show_flag_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata OxPlayerConclude::GetMetadata() const {
  protobuf_public_5fox_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_public_5fox_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// OxPlayerConclude

// optional int32 chair_id = 1;
bool OxPlayerConclude::has_chair_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void OxPlayerConclude::set_has_chair_id() {
  _has_bits_[0] |= 0x00000002u;
}
void OxPlayerConclude::clear_has_chair_id() {
  _has_bits_[0] &= ~0x00000002u;
}
void OxPlayerConclude::clear_chair_id() {
  chair_id_ = 0;
  clear_has_chair_id();
}
::google::protobuf::int32 OxPlayerConclude::chair_id() const {
  // @@protoc_insertion_point(field_get:OxPlayerConclude.chair_id)
  return chair_id_;
}
void OxPlayerConclude::set_chair_id(::google::protobuf::int32 value) {
  set_has_chair_id();
  chair_id_ = value;
  // @@protoc_insertion_point(field_set:OxPlayerConclude.chair_id)
}

// optional int64 pay_score = 2;
bool OxPlayerConclude::has_pay_score() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void OxPlayerConclude::set_has_pay_score() {
  _has_bits_[0] |= 0x00000001u;
}
void OxPlayerConclude::clear_has_pay_score() {
  _has_bits_[0] &= ~0x00000001u;
}
void OxPlayerConclude::clear_pay_score() {
  pay_score_ = GOOGLE_LONGLONG(0);
  clear_has_pay_score();
}
::google::protobuf::int64 OxPlayerConclude::pay_score() const {
  // @@protoc_insertion_point(field_get:OxPlayerConclude.pay_score)
  return pay_score_;
}
void OxPlayerConclude::set_pay_score(::google::protobuf::int64 value) {
  set_has_pay_score();
  pay_score_ = value;
  // @@protoc_insertion_point(field_set:OxPlayerConclude.pay_score)
}

// optional int64 earn_score = 3;
bool OxPlayerConclude::has_earn_score() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void OxPlayerConclude::set_has_earn_score() {
  _has_bits_[0] |= 0x00000008u;
}
void OxPlayerConclude::clear_has_earn_score() {
  _has_bits_[0] &= ~0x00000008u;
}
void OxPlayerConclude::clear_earn_score() {
  earn_score_ = GOOGLE_LONGLONG(0);
  clear_has_earn_score();
}
::google::protobuf::int64 OxPlayerConclude::earn_score() const {
  // @@protoc_insertion_point(field_get:OxPlayerConclude.earn_score)
  return earn_score_;
}
void OxPlayerConclude::set_earn_score(::google::protobuf::int64 value) {
  set_has_earn_score();
  earn_score_ = value;
  // @@protoc_insertion_point(field_set:OxPlayerConclude.earn_score)
}

// optional int32 system_tax = 4;
bool OxPlayerConclude::has_system_tax() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void OxPlayerConclude::set_has_system_tax() {
  _has_bits_[0] |= 0x00000004u;
}
void OxPlayerConclude::clear_has_system_tax() {
  _has_bits_[0] &= ~0x00000004u;
}
void OxPlayerConclude::clear_system_tax() {
  system_tax_ = 0;
  clear_has_system_tax();
}
::google::protobuf::int32 OxPlayerConclude::system_tax() const {
  // @@protoc_insertion_point(field_get:OxPlayerConclude.system_tax)
  return system_tax_;
}
void OxPlayerConclude::set_system_tax(::google::protobuf::int32 value) {
  set_has_system_tax();
  system_tax_ = value;
  // @@protoc_insertion_point(field_set:OxPlayerConclude.system_tax)
}

// optional int64 banker_score = 5;
bool OxPlayerConclude::has_banker_score() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void OxPlayerConclude::set_has_banker_score() {
  _has_bits_[0] |= 0x00000010u;
}
void OxPlayerConclude::clear_has_banker_score() {
  _has_bits_[0] &= ~0x00000010u;
}
void OxPlayerConclude::clear_banker_score() {
  banker_score_ = GOOGLE_LONGLONG(0);
  clear_has_banker_score();
}
::google::protobuf::int64 OxPlayerConclude::banker_score() const {
  // @@protoc_insertion_point(field_get:OxPlayerConclude.banker_score)
  return banker_score_;
}
void OxPlayerConclude::set_banker_score(::google::protobuf::int64 value) {
  set_has_banker_score();
  banker_score_ = value;
  // @@protoc_insertion_point(field_set:OxPlayerConclude.banker_score)
}

// optional int32 all_win_or_lose_flag = 6;
bool OxPlayerConclude::has_all_win_or_lose_flag() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void OxPlayerConclude::set_has_all_win_or_lose_flag() {
  _has_bits_[0] |= 0x00000040u;
}
void OxPlayerConclude::clear_has_all_win_or_lose_flag() {
  _has_bits_[0] &= ~0x00000040u;
}
void OxPlayerConclude::clear_all_win_or_lose_flag() {
  all_win_or_lose_flag_ = 0;
  clear_has_all_win_or_lose_flag();
}
::google::protobuf::int32 OxPlayerConclude::all_win_or_lose_flag() const {
  // @@protoc_insertion_point(field_get:OxPlayerConclude.all_win_or_lose_flag)
  return all_win_or_lose_flag_;
}
void OxPlayerConclude::set_all_win_or_lose_flag(::google::protobuf::int32 value) {
  set_has_all_win_or_lose_flag();
  all_win_or_lose_flag_ = value;
  // @@protoc_insertion_point(field_set:OxPlayerConclude.all_win_or_lose_flag)
}

// optional int64 money = 7;
bool OxPlayerConclude::has_money() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void OxPlayerConclude::set_has_money() {
  _has_bits_[0] |= 0x00000020u;
}
void OxPlayerConclude::clear_has_money() {
  _has_bits_[0] &= ~0x00000020u;
}
void OxPlayerConclude::clear_money() {
  money_ = GOOGLE_LONGLONG(0);
  clear_has_money();
}
::google::protobuf::int64 OxPlayerConclude::money() const {
  // @@protoc_insertion_point(field_get:OxPlayerConclude.money)
  return money_;
}
void OxPlayerConclude::set_money(::google::protobuf::int64 value) {
  set_has_money();
  money_ = value;
  // @@protoc_insertion_point(field_set:OxPlayerConclude.money)
}

// optional int32 tax_show_flag = 8;
bool OxPlayerConclude::has_tax_show_flag() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void OxPlayerConclude::set_has_tax_show_flag() {
  _has_bits_[0] |= 0x00000080u;
}
void OxPlayerConclude::clear_has_tax_show_flag() {
  _has_bits_[0] &= ~0x00000080u;
}
void OxPlayerConclude::clear_tax_show_flag() {
  tax_show_flag_ = 0;
  clear_has_tax_show_flag();
}
::google::protobuf::int32 OxPlayerConclude::tax_show_flag() const {
  // @@protoc_insertion_point(field_get:OxPlayerConclude.tax_show_flag)
  return tax_show_flag_;
}
void OxPlayerConclude::set_tax_show_flag(::google::protobuf::int32 value) {
  set_has_tax_show_flag();
  tax_show_flag_ = value;
  // @@protoc_insertion_point(field_set:OxPlayerConclude.tax_show_flag)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SC_OxEnd::kPbConcludeFieldNumber;
const int SC_OxEnd::kPbCardsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SC_OxEnd::SC_OxEnd()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_public_5fox_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:SC_OxEnd)
}
SC_OxEnd::SC_OxEnd(const SC_OxEnd& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      pb_conclude_(from.pb_conclude_),
      pb_cards_(from.pb_cards_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:SC_OxEnd)
}

void SC_OxEnd::SharedCtor() {
  _cached_size_ = 0;
}

SC_OxEnd::~SC_OxEnd() {
  // @@protoc_insertion_point(destructor:SC_OxEnd)
  SharedDtor();
}

void SC_OxEnd::SharedDtor() {
}

void SC_OxEnd::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SC_OxEnd::descriptor() {
  protobuf_public_5fox_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_public_5fox_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const SC_OxEnd& SC_OxEnd::default_instance() {
  protobuf_public_5fox_2eproto::InitDefaults();
  return *internal_default_instance();
}

SC_OxEnd* SC_OxEnd::New(::google::protobuf::Arena* arena) const {
  SC_OxEnd* n = new SC_OxEnd;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SC_OxEnd::Clear() {
// @@protoc_insertion_point(message_clear_start:SC_OxEnd)
  pb_conclude_.Clear();
  pb_cards_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool SC_OxEnd::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:SC_OxEnd)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .OxPlayerConclude pb_conclude = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_pb_conclude()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .Cards pb_cards = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_pb_cards()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:SC_OxEnd)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:SC_OxEnd)
  return false;
#undef DO_
}

void SC_OxEnd::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:SC_OxEnd)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .OxPlayerConclude pb_conclude = 1;
  for (unsigned int i = 0, n = this->pb_conclude_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->pb_conclude(i), output);
  }

  // repeated .Cards pb_cards = 2;
  for (unsigned int i = 0, n = this->pb_cards_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->pb_cards(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:SC_OxEnd)
}

::google::protobuf::uint8* SC_OxEnd::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:SC_OxEnd)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .OxPlayerConclude pb_conclude = 1;
  for (unsigned int i = 0, n = this->pb_conclude_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, this->pb_conclude(i), deterministic, target);
  }

  // repeated .Cards pb_cards = 2;
  for (unsigned int i = 0, n = this->pb_cards_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, this->pb_cards(i), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SC_OxEnd)
  return target;
}

size_t SC_OxEnd::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SC_OxEnd)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // repeated .OxPlayerConclude pb_conclude = 1;
  {
    unsigned int count = this->pb_conclude_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->pb_conclude(i));
    }
  }

  // repeated .Cards pb_cards = 2;
  {
    unsigned int count = this->pb_cards_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->pb_cards(i));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SC_OxEnd::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:SC_OxEnd)
  GOOGLE_DCHECK_NE(&from, this);
  const SC_OxEnd* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SC_OxEnd>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:SC_OxEnd)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:SC_OxEnd)
    MergeFrom(*source);
  }
}

void SC_OxEnd::MergeFrom(const SC_OxEnd& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:SC_OxEnd)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  pb_conclude_.MergeFrom(from.pb_conclude_);
  pb_cards_.MergeFrom(from.pb_cards_);
}

void SC_OxEnd::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:SC_OxEnd)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SC_OxEnd::CopyFrom(const SC_OxEnd& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SC_OxEnd)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SC_OxEnd::IsInitialized() const {
  return true;
}

void SC_OxEnd::Swap(SC_OxEnd* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SC_OxEnd::InternalSwap(SC_OxEnd* other) {
  pb_conclude_.InternalSwap(&other->pb_conclude_);
  pb_cards_.InternalSwap(&other->pb_cards_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SC_OxEnd::GetMetadata() const {
  protobuf_public_5fox_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_public_5fox_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SC_OxEnd

// repeated .OxPlayerConclude pb_conclude = 1;
int SC_OxEnd::pb_conclude_size() const {
  return pb_conclude_.size();
}
void SC_OxEnd::clear_pb_conclude() {
  pb_conclude_.Clear();
}
const ::OxPlayerConclude& SC_OxEnd::pb_conclude(int index) const {
  // @@protoc_insertion_point(field_get:SC_OxEnd.pb_conclude)
  return pb_conclude_.Get(index);
}
::OxPlayerConclude* SC_OxEnd::mutable_pb_conclude(int index) {
  // @@protoc_insertion_point(field_mutable:SC_OxEnd.pb_conclude)
  return pb_conclude_.Mutable(index);
}
::OxPlayerConclude* SC_OxEnd::add_pb_conclude() {
  // @@protoc_insertion_point(field_add:SC_OxEnd.pb_conclude)
  return pb_conclude_.Add();
}
::google::protobuf::RepeatedPtrField< ::OxPlayerConclude >*
SC_OxEnd::mutable_pb_conclude() {
  // @@protoc_insertion_point(field_mutable_list:SC_OxEnd.pb_conclude)
  return &pb_conclude_;
}
const ::google::protobuf::RepeatedPtrField< ::OxPlayerConclude >&
SC_OxEnd::pb_conclude() const {
  // @@protoc_insertion_point(field_list:SC_OxEnd.pb_conclude)
  return pb_conclude_;
}

// repeated .Cards pb_cards = 2;
int SC_OxEnd::pb_cards_size() const {
  return pb_cards_.size();
}
void SC_OxEnd::clear_pb_cards() {
  pb_cards_.Clear();
}
const ::Cards& SC_OxEnd::pb_cards(int index) const {
  // @@protoc_insertion_point(field_get:SC_OxEnd.pb_cards)
  return pb_cards_.Get(index);
}
::Cards* SC_OxEnd::mutable_pb_cards(int index) {
  // @@protoc_insertion_point(field_mutable:SC_OxEnd.pb_cards)
  return pb_cards_.Mutable(index);
}
::Cards* SC_OxEnd::add_pb_cards() {
  // @@protoc_insertion_point(field_add:SC_OxEnd.pb_cards)
  return pb_cards_.Add();
}
::google::protobuf::RepeatedPtrField< ::Cards >*
SC_OxEnd::mutable_pb_cards() {
  // @@protoc_insertion_point(field_mutable_list:SC_OxEnd.pb_cards)
  return &pb_cards_;
}
const ::google::protobuf::RepeatedPtrField< ::Cards >&
SC_OxEnd::pb_cards() const {
  // @@protoc_insertion_point(field_list:SC_OxEnd.pb_cards)
  return pb_cards_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CS_OxRecord::CS_OxRecord()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_public_5fox_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:CS_OxRecord)
}
CS_OxRecord::CS_OxRecord(const CS_OxRecord& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:CS_OxRecord)
}

void CS_OxRecord::SharedCtor() {
  _cached_size_ = 0;
}

CS_OxRecord::~CS_OxRecord() {
  // @@protoc_insertion_point(destructor:CS_OxRecord)
  SharedDtor();
}

void CS_OxRecord::SharedDtor() {
}

void CS_OxRecord::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CS_OxRecord::descriptor() {
  protobuf_public_5fox_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_public_5fox_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CS_OxRecord& CS_OxRecord::default_instance() {
  protobuf_public_5fox_2eproto::InitDefaults();
  return *internal_default_instance();
}

CS_OxRecord* CS_OxRecord::New(::google::protobuf::Arena* arena) const {
  CS_OxRecord* n = new CS_OxRecord;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CS_OxRecord::Clear() {
// @@protoc_insertion_point(message_clear_start:CS_OxRecord)
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CS_OxRecord::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CS_OxRecord)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:CS_OxRecord)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CS_OxRecord)
  return false;
#undef DO_
}

void CS_OxRecord::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CS_OxRecord)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CS_OxRecord)
}

::google::protobuf::uint8* CS_OxRecord::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CS_OxRecord)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CS_OxRecord)
  return target;
}

size_t CS_OxRecord::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CS_OxRecord)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CS_OxRecord::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CS_OxRecord)
  GOOGLE_DCHECK_NE(&from, this);
  const CS_OxRecord* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CS_OxRecord>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CS_OxRecord)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CS_OxRecord)
    MergeFrom(*source);
  }
}

void CS_OxRecord::MergeFrom(const CS_OxRecord& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CS_OxRecord)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void CS_OxRecord::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CS_OxRecord)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CS_OxRecord::CopyFrom(const CS_OxRecord& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CS_OxRecord)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CS_OxRecord::IsInitialized() const {
  return true;
}

void CS_OxRecord::Swap(CS_OxRecord* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CS_OxRecord::InternalSwap(CS_OxRecord* other) {
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CS_OxRecord::GetMetadata() const {
  protobuf_public_5fox_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_public_5fox_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CS_OxRecord

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int RecordResult::kResultFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RecordResult::RecordResult()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_public_5fox_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:RecordResult)
}
RecordResult::RecordResult(const RecordResult& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      result_(from.result_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:RecordResult)
}

void RecordResult::SharedCtor() {
  _cached_size_ = 0;
}

RecordResult::~RecordResult() {
  // @@protoc_insertion_point(destructor:RecordResult)
  SharedDtor();
}

void RecordResult::SharedDtor() {
}

void RecordResult::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RecordResult::descriptor() {
  protobuf_public_5fox_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_public_5fox_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const RecordResult& RecordResult::default_instance() {
  protobuf_public_5fox_2eproto::InitDefaults();
  return *internal_default_instance();
}

RecordResult* RecordResult::New(::google::protobuf::Arena* arena) const {
  RecordResult* n = new RecordResult;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void RecordResult::Clear() {
// @@protoc_insertion_point(message_clear_start:RecordResult)
  result_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool RecordResult::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:RecordResult)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated bool result = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 1, 8u, input, this->mutable_result())));
        } else if (static_cast< ::google::protobuf::uint8>(tag) ==
                   static_cast< ::google::protobuf::uint8>(10u)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, this->mutable_result())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:RecordResult)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:RecordResult)
  return false;
#undef DO_
}

void RecordResult::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:RecordResult)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated bool result = 1;
  for (int i = 0, n = this->result_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(
      1, this->result(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:RecordResult)
}

::google::protobuf::uint8* RecordResult::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:RecordResult)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated bool result = 1;
  target = ::google::protobuf::internal::WireFormatLite::
    WriteBoolToArray(1, this->result_, target);

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:RecordResult)
  return target;
}

size_t RecordResult::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:RecordResult)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // repeated bool result = 1;
  {
    unsigned int count = this->result_size();
    size_t data_size = 1UL * count;
    total_size += 1 *
                  ::google::protobuf::internal::FromIntSize(this->result_size());
    total_size += data_size;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RecordResult::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:RecordResult)
  GOOGLE_DCHECK_NE(&from, this);
  const RecordResult* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const RecordResult>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:RecordResult)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:RecordResult)
    MergeFrom(*source);
  }
}

void RecordResult::MergeFrom(const RecordResult& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:RecordResult)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  result_.MergeFrom(from.result_);
}

void RecordResult::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:RecordResult)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RecordResult::CopyFrom(const RecordResult& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:RecordResult)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RecordResult::IsInitialized() const {
  return true;
}

void RecordResult::Swap(RecordResult* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RecordResult::InternalSwap(RecordResult* other) {
  result_.InternalSwap(&other->result_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata RecordResult::GetMetadata() const {
  protobuf_public_5fox_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_public_5fox_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// RecordResult

// repeated bool result = 1;
int RecordResult::result_size() const {
  return result_.size();
}
void RecordResult::clear_result() {
  result_.Clear();
}
bool RecordResult::result(int index) const {
  // @@protoc_insertion_point(field_get:RecordResult.result)
  return result_.Get(index);
}
void RecordResult::set_result(int index, bool value) {
  result_.Set(index, value);
  // @@protoc_insertion_point(field_set:RecordResult.result)
}
void RecordResult::add_result(bool value) {
  result_.Add(value);
  // @@protoc_insertion_point(field_add:RecordResult.result)
}
const ::google::protobuf::RepeatedField< bool >&
RecordResult::result() const {
  // @@protoc_insertion_point(field_list:RecordResult.result)
  return result_;
}
::google::protobuf::RepeatedField< bool >*
RecordResult::mutable_result() {
  // @@protoc_insertion_point(field_mutable_list:RecordResult.result)
  return &result_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SC_OxRecord::kPbRecordresultFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SC_OxRecord::SC_OxRecord()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_public_5fox_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:SC_OxRecord)
}
SC_OxRecord::SC_OxRecord(const SC_OxRecord& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      pb_recordresult_(from.pb_recordresult_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:SC_OxRecord)
}

void SC_OxRecord::SharedCtor() {
  _cached_size_ = 0;
}

SC_OxRecord::~SC_OxRecord() {
  // @@protoc_insertion_point(destructor:SC_OxRecord)
  SharedDtor();
}

void SC_OxRecord::SharedDtor() {
}

void SC_OxRecord::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SC_OxRecord::descriptor() {
  protobuf_public_5fox_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_public_5fox_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const SC_OxRecord& SC_OxRecord::default_instance() {
  protobuf_public_5fox_2eproto::InitDefaults();
  return *internal_default_instance();
}

SC_OxRecord* SC_OxRecord::New(::google::protobuf::Arena* arena) const {
  SC_OxRecord* n = new SC_OxRecord;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SC_OxRecord::Clear() {
// @@protoc_insertion_point(message_clear_start:SC_OxRecord)
  pb_recordresult_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool SC_OxRecord::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:SC_OxRecord)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .RecordResult pb_recordresult = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_pb_recordresult()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:SC_OxRecord)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:SC_OxRecord)
  return false;
#undef DO_
}

void SC_OxRecord::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:SC_OxRecord)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .RecordResult pb_recordresult = 1;
  for (unsigned int i = 0, n = this->pb_recordresult_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->pb_recordresult(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:SC_OxRecord)
}

::google::protobuf::uint8* SC_OxRecord::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:SC_OxRecord)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .RecordResult pb_recordresult = 1;
  for (unsigned int i = 0, n = this->pb_recordresult_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, this->pb_recordresult(i), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SC_OxRecord)
  return target;
}

size_t SC_OxRecord::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SC_OxRecord)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // repeated .RecordResult pb_recordresult = 1;
  {
    unsigned int count = this->pb_recordresult_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->pb_recordresult(i));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SC_OxRecord::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:SC_OxRecord)
  GOOGLE_DCHECK_NE(&from, this);
  const SC_OxRecord* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SC_OxRecord>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:SC_OxRecord)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:SC_OxRecord)
    MergeFrom(*source);
  }
}

void SC_OxRecord::MergeFrom(const SC_OxRecord& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:SC_OxRecord)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  pb_recordresult_.MergeFrom(from.pb_recordresult_);
}

void SC_OxRecord::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:SC_OxRecord)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SC_OxRecord::CopyFrom(const SC_OxRecord& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SC_OxRecord)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SC_OxRecord::IsInitialized() const {
  return true;
}

void SC_OxRecord::Swap(SC_OxRecord* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SC_OxRecord::InternalSwap(SC_OxRecord* other) {
  pb_recordresult_.InternalSwap(&other->pb_recordresult_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SC_OxRecord::GetMetadata() const {
  protobuf_public_5fox_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_public_5fox_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SC_OxRecord

// repeated .RecordResult pb_recordresult = 1;
int SC_OxRecord::pb_recordresult_size() const {
  return pb_recordresult_.size();
}
void SC_OxRecord::clear_pb_recordresult() {
  pb_recordresult_.Clear();
}
const ::RecordResult& SC_OxRecord::pb_recordresult(int index) const {
  // @@protoc_insertion_point(field_get:SC_OxRecord.pb_recordresult)
  return pb_recordresult_.Get(index);
}
::RecordResult* SC_OxRecord::mutable_pb_recordresult(int index) {
  // @@protoc_insertion_point(field_mutable:SC_OxRecord.pb_recordresult)
  return pb_recordresult_.Mutable(index);
}
::RecordResult* SC_OxRecord::add_pb_recordresult() {
  // @@protoc_insertion_point(field_add:SC_OxRecord.pb_recordresult)
  return pb_recordresult_.Add();
}
::google::protobuf::RepeatedPtrField< ::RecordResult >*
SC_OxRecord::mutable_pb_recordresult() {
  // @@protoc_insertion_point(field_mutable_list:SC_OxRecord.pb_recordresult)
  return &pb_recordresult_;
}
const ::google::protobuf::RepeatedPtrField< ::RecordResult >&
SC_OxRecord::pb_recordresult() const {
  // @@protoc_insertion_point(field_list:SC_OxRecord.pb_recordresult)
  return pb_recordresult_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CS_OxTop::CS_OxTop()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_public_5fox_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:CS_OxTop)
}
CS_OxTop::CS_OxTop(const CS_OxTop& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:CS_OxTop)
}

void CS_OxTop::SharedCtor() {
  _cached_size_ = 0;
}

CS_OxTop::~CS_OxTop() {
  // @@protoc_insertion_point(destructor:CS_OxTop)
  SharedDtor();
}

void CS_OxTop::SharedDtor() {
}

void CS_OxTop::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CS_OxTop::descriptor() {
  protobuf_public_5fox_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_public_5fox_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CS_OxTop& CS_OxTop::default_instance() {
  protobuf_public_5fox_2eproto::InitDefaults();
  return *internal_default_instance();
}

CS_OxTop* CS_OxTop::New(::google::protobuf::Arena* arena) const {
  CS_OxTop* n = new CS_OxTop;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CS_OxTop::Clear() {
// @@protoc_insertion_point(message_clear_start:CS_OxTop)
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CS_OxTop::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CS_OxTop)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:CS_OxTop)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CS_OxTop)
  return false;
#undef DO_
}

void CS_OxTop::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CS_OxTop)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CS_OxTop)
}

::google::protobuf::uint8* CS_OxTop::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CS_OxTop)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CS_OxTop)
  return target;
}

size_t CS_OxTop::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CS_OxTop)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CS_OxTop::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CS_OxTop)
  GOOGLE_DCHECK_NE(&from, this);
  const CS_OxTop* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CS_OxTop>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CS_OxTop)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CS_OxTop)
    MergeFrom(*source);
  }
}

void CS_OxTop::MergeFrom(const CS_OxTop& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CS_OxTop)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void CS_OxTop::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CS_OxTop)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CS_OxTop::CopyFrom(const CS_OxTop& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CS_OxTop)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CS_OxTop::IsInitialized() const {
  return true;
}

void CS_OxTop::Swap(CS_OxTop* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CS_OxTop::InternalSwap(CS_OxTop* other) {
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CS_OxTop::GetMetadata() const {
  protobuf_public_5fox_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_public_5fox_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CS_OxTop

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PlayerTopInfo::kGuidFieldNumber;
const int PlayerTopInfo::kHeadIdFieldNumber;
const int PlayerTopInfo::kNicknameFieldNumber;
const int PlayerTopInfo::kMoneyFieldNumber;
const int PlayerTopInfo::kHeaderIconFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PlayerTopInfo::PlayerTopInfo()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_public_5fox_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:PlayerTopInfo)
}
PlayerTopInfo::PlayerTopInfo(const PlayerTopInfo& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  nickname_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_nickname()) {
    nickname_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.nickname_);
  }
  ::memcpy(&guid_, &from.guid_,
    reinterpret_cast<char*>(&header_icon_) -
    reinterpret_cast<char*>(&guid_) + sizeof(header_icon_));
  // @@protoc_insertion_point(copy_constructor:PlayerTopInfo)
}

void PlayerTopInfo::SharedCtor() {
  _cached_size_ = 0;
  nickname_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&guid_, 0, reinterpret_cast<char*>(&header_icon_) -
    reinterpret_cast<char*>(&guid_) + sizeof(header_icon_));
}

PlayerTopInfo::~PlayerTopInfo() {
  // @@protoc_insertion_point(destructor:PlayerTopInfo)
  SharedDtor();
}

void PlayerTopInfo::SharedDtor() {
  nickname_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void PlayerTopInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PlayerTopInfo::descriptor() {
  protobuf_public_5fox_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_public_5fox_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const PlayerTopInfo& PlayerTopInfo::default_instance() {
  protobuf_public_5fox_2eproto::InitDefaults();
  return *internal_default_instance();
}

PlayerTopInfo* PlayerTopInfo::New(::google::protobuf::Arena* arena) const {
  PlayerTopInfo* n = new PlayerTopInfo;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void PlayerTopInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:PlayerTopInfo)
  if (has_nickname()) {
    GOOGLE_DCHECK(!nickname_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
    (*nickname_.UnsafeRawStringPointer())->clear();
  }
  if (_has_bits_[0 / 32] & 30u) {
    ::memset(&guid_, 0, reinterpret_cast<char*>(&header_icon_) -
      reinterpret_cast<char*>(&guid_) + sizeof(header_icon_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool PlayerTopInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:PlayerTopInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 guid = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_guid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &guid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 head_id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_head_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &head_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string nickname = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_nickname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->nickname().data(), this->nickname().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "PlayerTopInfo.nickname");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 money = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u)) {
          set_has_money();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &money_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 header_icon = 5 [default = 0];
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u)) {
          set_has_header_icon();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &header_icon_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:PlayerTopInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:PlayerTopInfo)
  return false;
#undef DO_
}

void PlayerTopInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:PlayerTopInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 guid = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->guid(), output);
  }

  // optional int32 head_id = 2;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->head_id(), output);
  }

  // optional string nickname = 3;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->nickname().data(), this->nickname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "PlayerTopInfo.nickname");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->nickname(), output);
  }

  // optional int64 money = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(4, this->money(), output);
  }

  // optional int32 header_icon = 5 [default = 0];
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->header_icon(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:PlayerTopInfo)
}

::google::protobuf::uint8* PlayerTopInfo::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:PlayerTopInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 guid = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->guid(), target);
  }

  // optional int32 head_id = 2;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->head_id(), target);
  }

  // optional string nickname = 3;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->nickname().data(), this->nickname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "PlayerTopInfo.nickname");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->nickname(), target);
  }

  // optional int64 money = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(4, this->money(), target);
  }

  // optional int32 header_icon = 5 [default = 0];
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->header_icon(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:PlayerTopInfo)
  return target;
}

size_t PlayerTopInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:PlayerTopInfo)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 31u) {
    // optional string nickname = 3;
    if (has_nickname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->nickname());
    }

    // optional int32 guid = 1;
    if (has_guid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->guid());
    }

    // optional int32 head_id = 2;
    if (has_head_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->head_id());
    }

    // optional int64 money = 4;
    if (has_money()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->money());
    }

    // optional int32 header_icon = 5 [default = 0];
    if (has_header_icon()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->header_icon());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PlayerTopInfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:PlayerTopInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const PlayerTopInfo* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const PlayerTopInfo>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:PlayerTopInfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:PlayerTopInfo)
    MergeFrom(*source);
  }
}

void PlayerTopInfo::MergeFrom(const PlayerTopInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:PlayerTopInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 31u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_nickname();
      nickname_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.nickname_);
    }
    if (cached_has_bits & 0x00000002u) {
      guid_ = from.guid_;
    }
    if (cached_has_bits & 0x00000004u) {
      head_id_ = from.head_id_;
    }
    if (cached_has_bits & 0x00000008u) {
      money_ = from.money_;
    }
    if (cached_has_bits & 0x00000010u) {
      header_icon_ = from.header_icon_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void PlayerTopInfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:PlayerTopInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PlayerTopInfo::CopyFrom(const PlayerTopInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:PlayerTopInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PlayerTopInfo::IsInitialized() const {
  return true;
}

void PlayerTopInfo::Swap(PlayerTopInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PlayerTopInfo::InternalSwap(PlayerTopInfo* other) {
  nickname_.Swap(&other->nickname_);
  std::swap(guid_, other->guid_);
  std::swap(head_id_, other->head_id_);
  std::swap(money_, other->money_);
  std::swap(header_icon_, other->header_icon_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata PlayerTopInfo::GetMetadata() const {
  protobuf_public_5fox_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_public_5fox_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// PlayerTopInfo

// optional int32 guid = 1;
bool PlayerTopInfo::has_guid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void PlayerTopInfo::set_has_guid() {
  _has_bits_[0] |= 0x00000002u;
}
void PlayerTopInfo::clear_has_guid() {
  _has_bits_[0] &= ~0x00000002u;
}
void PlayerTopInfo::clear_guid() {
  guid_ = 0;
  clear_has_guid();
}
::google::protobuf::int32 PlayerTopInfo::guid() const {
  // @@protoc_insertion_point(field_get:PlayerTopInfo.guid)
  return guid_;
}
void PlayerTopInfo::set_guid(::google::protobuf::int32 value) {
  set_has_guid();
  guid_ = value;
  // @@protoc_insertion_point(field_set:PlayerTopInfo.guid)
}

// optional int32 head_id = 2;
bool PlayerTopInfo::has_head_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void PlayerTopInfo::set_has_head_id() {
  _has_bits_[0] |= 0x00000004u;
}
void PlayerTopInfo::clear_has_head_id() {
  _has_bits_[0] &= ~0x00000004u;
}
void PlayerTopInfo::clear_head_id() {
  head_id_ = 0;
  clear_has_head_id();
}
::google::protobuf::int32 PlayerTopInfo::head_id() const {
  // @@protoc_insertion_point(field_get:PlayerTopInfo.head_id)
  return head_id_;
}
void PlayerTopInfo::set_head_id(::google::protobuf::int32 value) {
  set_has_head_id();
  head_id_ = value;
  // @@protoc_insertion_point(field_set:PlayerTopInfo.head_id)
}

// optional string nickname = 3;
bool PlayerTopInfo::has_nickname() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void PlayerTopInfo::set_has_nickname() {
  _has_bits_[0] |= 0x00000001u;
}
void PlayerTopInfo::clear_has_nickname() {
  _has_bits_[0] &= ~0x00000001u;
}
void PlayerTopInfo::clear_nickname() {
  nickname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_nickname();
}
const ::std::string& PlayerTopInfo::nickname() const {
  // @@protoc_insertion_point(field_get:PlayerTopInfo.nickname)
  return nickname_.GetNoArena();
}
void PlayerTopInfo::set_nickname(const ::std::string& value) {
  set_has_nickname();
  nickname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:PlayerTopInfo.nickname)
}
#if LANG_CXX11
void PlayerTopInfo::set_nickname(::std::string&& value) {
  set_has_nickname();
  nickname_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:PlayerTopInfo.nickname)
}
#endif
void PlayerTopInfo::set_nickname(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_nickname();
  nickname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:PlayerTopInfo.nickname)
}
void PlayerTopInfo::set_nickname(const char* value, size_t size) {
  set_has_nickname();
  nickname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:PlayerTopInfo.nickname)
}
::std::string* PlayerTopInfo::mutable_nickname() {
  set_has_nickname();
  // @@protoc_insertion_point(field_mutable:PlayerTopInfo.nickname)
  return nickname_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* PlayerTopInfo::release_nickname() {
  // @@protoc_insertion_point(field_release:PlayerTopInfo.nickname)
  clear_has_nickname();
  return nickname_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void PlayerTopInfo::set_allocated_nickname(::std::string* nickname) {
  if (nickname != NULL) {
    set_has_nickname();
  } else {
    clear_has_nickname();
  }
  nickname_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), nickname);
  // @@protoc_insertion_point(field_set_allocated:PlayerTopInfo.nickname)
}

// optional int64 money = 4;
bool PlayerTopInfo::has_money() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void PlayerTopInfo::set_has_money() {
  _has_bits_[0] |= 0x00000008u;
}
void PlayerTopInfo::clear_has_money() {
  _has_bits_[0] &= ~0x00000008u;
}
void PlayerTopInfo::clear_money() {
  money_ = GOOGLE_LONGLONG(0);
  clear_has_money();
}
::google::protobuf::int64 PlayerTopInfo::money() const {
  // @@protoc_insertion_point(field_get:PlayerTopInfo.money)
  return money_;
}
void PlayerTopInfo::set_money(::google::protobuf::int64 value) {
  set_has_money();
  money_ = value;
  // @@protoc_insertion_point(field_set:PlayerTopInfo.money)
}

// optional int32 header_icon = 5 [default = 0];
bool PlayerTopInfo::has_header_icon() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void PlayerTopInfo::set_has_header_icon() {
  _has_bits_[0] |= 0x00000010u;
}
void PlayerTopInfo::clear_has_header_icon() {
  _has_bits_[0] &= ~0x00000010u;
}
void PlayerTopInfo::clear_header_icon() {
  header_icon_ = 0;
  clear_has_header_icon();
}
::google::protobuf::int32 PlayerTopInfo::header_icon() const {
  // @@protoc_insertion_point(field_get:PlayerTopInfo.header_icon)
  return header_icon_;
}
void PlayerTopInfo::set_header_icon(::google::protobuf::int32 value) {
  set_has_header_icon();
  header_icon_ = value;
  // @@protoc_insertion_point(field_set:PlayerTopInfo.header_icon)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SC_OxTop::kCountAllFieldNumber;
const int SC_OxTop::kPbPlayerTopInfoFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SC_OxTop::SC_OxTop()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_public_5fox_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:SC_OxTop)
}
SC_OxTop::SC_OxTop(const SC_OxTop& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      pb_player_top_info_(from.pb_player_top_info_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  count_all_ = from.count_all_;
  // @@protoc_insertion_point(copy_constructor:SC_OxTop)
}

void SC_OxTop::SharedCtor() {
  _cached_size_ = 0;
  count_all_ = 0;
}

SC_OxTop::~SC_OxTop() {
  // @@protoc_insertion_point(destructor:SC_OxTop)
  SharedDtor();
}

void SC_OxTop::SharedDtor() {
}

void SC_OxTop::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SC_OxTop::descriptor() {
  protobuf_public_5fox_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_public_5fox_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const SC_OxTop& SC_OxTop::default_instance() {
  protobuf_public_5fox_2eproto::InitDefaults();
  return *internal_default_instance();
}

SC_OxTop* SC_OxTop::New(::google::protobuf::Arena* arena) const {
  SC_OxTop* n = new SC_OxTop;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SC_OxTop::Clear() {
// @@protoc_insertion_point(message_clear_start:SC_OxTop)
  pb_player_top_info_.Clear();
  count_all_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool SC_OxTop::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:SC_OxTop)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 count_all = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_count_all();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &count_all_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .PlayerTopInfo pb_player_top_info = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_pb_player_top_info()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:SC_OxTop)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:SC_OxTop)
  return false;
#undef DO_
}

void SC_OxTop::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:SC_OxTop)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 count_all = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->count_all(), output);
  }

  // repeated .PlayerTopInfo pb_player_top_info = 2;
  for (unsigned int i = 0, n = this->pb_player_top_info_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->pb_player_top_info(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:SC_OxTop)
}

::google::protobuf::uint8* SC_OxTop::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:SC_OxTop)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 count_all = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->count_all(), target);
  }

  // repeated .PlayerTopInfo pb_player_top_info = 2;
  for (unsigned int i = 0, n = this->pb_player_top_info_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, this->pb_player_top_info(i), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SC_OxTop)
  return target;
}

size_t SC_OxTop::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SC_OxTop)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // repeated .PlayerTopInfo pb_player_top_info = 2;
  {
    unsigned int count = this->pb_player_top_info_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->pb_player_top_info(i));
    }
  }

  // optional int32 count_all = 1;
  if (has_count_all()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->count_all());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SC_OxTop::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:SC_OxTop)
  GOOGLE_DCHECK_NE(&from, this);
  const SC_OxTop* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SC_OxTop>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:SC_OxTop)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:SC_OxTop)
    MergeFrom(*source);
  }
}

void SC_OxTop::MergeFrom(const SC_OxTop& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:SC_OxTop)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  pb_player_top_info_.MergeFrom(from.pb_player_top_info_);
  if (from.has_count_all()) {
    set_count_all(from.count_all());
  }
}

void SC_OxTop::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:SC_OxTop)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SC_OxTop::CopyFrom(const SC_OxTop& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SC_OxTop)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SC_OxTop::IsInitialized() const {
  return true;
}

void SC_OxTop::Swap(SC_OxTop* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SC_OxTop::InternalSwap(SC_OxTop* other) {
  pb_player_top_info_.InternalSwap(&other->pb_player_top_info_);
  std::swap(count_all_, other->count_all_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SC_OxTop::GetMetadata() const {
  protobuf_public_5fox_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_public_5fox_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SC_OxTop

// optional int32 count_all = 1;
bool SC_OxTop::has_count_all() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void SC_OxTop::set_has_count_all() {
  _has_bits_[0] |= 0x00000001u;
}
void SC_OxTop::clear_has_count_all() {
  _has_bits_[0] &= ~0x00000001u;
}
void SC_OxTop::clear_count_all() {
  count_all_ = 0;
  clear_has_count_all();
}
::google::protobuf::int32 SC_OxTop::count_all() const {
  // @@protoc_insertion_point(field_get:SC_OxTop.count_all)
  return count_all_;
}
void SC_OxTop::set_count_all(::google::protobuf::int32 value) {
  set_has_count_all();
  count_all_ = value;
  // @@protoc_insertion_point(field_set:SC_OxTop.count_all)
}

// repeated .PlayerTopInfo pb_player_top_info = 2;
int SC_OxTop::pb_player_top_info_size() const {
  return pb_player_top_info_.size();
}
void SC_OxTop::clear_pb_player_top_info() {
  pb_player_top_info_.Clear();
}
const ::PlayerTopInfo& SC_OxTop::pb_player_top_info(int index) const {
  // @@protoc_insertion_point(field_get:SC_OxTop.pb_player_top_info)
  return pb_player_top_info_.Get(index);
}
::PlayerTopInfo* SC_OxTop::mutable_pb_player_top_info(int index) {
  // @@protoc_insertion_point(field_mutable:SC_OxTop.pb_player_top_info)
  return pb_player_top_info_.Mutable(index);
}
::PlayerTopInfo* SC_OxTop::add_pb_player_top_info() {
  // @@protoc_insertion_point(field_add:SC_OxTop.pb_player_top_info)
  return pb_player_top_info_.Add();
}
::google::protobuf::RepeatedPtrField< ::PlayerTopInfo >*
SC_OxTop::mutable_pb_player_top_info() {
  // @@protoc_insertion_point(field_mutable_list:SC_OxTop.pb_player_top_info)
  return &pb_player_top_info_;
}
const ::google::protobuf::RepeatedPtrField< ::PlayerTopInfo >&
SC_OxTop::pb_player_top_info() const {
  // @@protoc_insertion_point(field_list:SC_OxTop.pb_player_top_info)
  return pb_player_top_info_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int BankerInfo::kGuidFieldNumber;
const int BankerInfo::kNicknameFieldNumber;
const int BankerInfo::kMoneyFieldNumber;
const int BankerInfo::kBankertimesFieldNumber;
const int BankerInfo::kMaxScoreFieldNumber;
const int BankerInfo::kBankerScoreFieldNumber;
const int BankerInfo::kLeftScoreFieldNumber;
const int BankerInfo::kHeaderIconFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

BankerInfo::BankerInfo()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_public_5fox_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:BankerInfo)
}
BankerInfo::BankerInfo(const BankerInfo& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  nickname_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_nickname()) {
    nickname_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.nickname_);
  }
  ::memcpy(&guid_, &from.guid_,
    reinterpret_cast<char*>(&header_icon_) -
    reinterpret_cast<char*>(&guid_) + sizeof(header_icon_));
  // @@protoc_insertion_point(copy_constructor:BankerInfo)
}

void BankerInfo::SharedCtor() {
  _cached_size_ = 0;
  nickname_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&guid_, 0, reinterpret_cast<char*>(&header_icon_) -
    reinterpret_cast<char*>(&guid_) + sizeof(header_icon_));
}

BankerInfo::~BankerInfo() {
  // @@protoc_insertion_point(destructor:BankerInfo)
  SharedDtor();
}

void BankerInfo::SharedDtor() {
  nickname_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void BankerInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BankerInfo::descriptor() {
  protobuf_public_5fox_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_public_5fox_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const BankerInfo& BankerInfo::default_instance() {
  protobuf_public_5fox_2eproto::InitDefaults();
  return *internal_default_instance();
}

BankerInfo* BankerInfo::New(::google::protobuf::Arena* arena) const {
  BankerInfo* n = new BankerInfo;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void BankerInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:BankerInfo)
  if (has_nickname()) {
    GOOGLE_DCHECK(!nickname_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
    (*nickname_.UnsafeRawStringPointer())->clear();
  }
  if (_has_bits_[0 / 32] & 254u) {
    ::memset(&guid_, 0, reinterpret_cast<char*>(&header_icon_) -
      reinterpret_cast<char*>(&guid_) + sizeof(header_icon_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool BankerInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:BankerInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 guid = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_guid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &guid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string nickname = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_nickname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->nickname().data(), this->nickname().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "BankerInfo.nickname");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 money = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {
          set_has_money();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &money_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 bankertimes = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u)) {
          set_has_bankertimes();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &bankertimes_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 max_score = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u)) {
          set_has_max_score();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &max_score_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 banker_score = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u)) {
          set_has_banker_score();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &banker_score_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 left_score = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u)) {
          set_has_left_score();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &left_score_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 header_icon = 8 [default = 0];
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(64u)) {
          set_has_header_icon();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &header_icon_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:BankerInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:BankerInfo)
  return false;
#undef DO_
}

void BankerInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:BankerInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 guid = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->guid(), output);
  }

  // optional string nickname = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->nickname().data(), this->nickname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "BankerInfo.nickname");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->nickname(), output);
  }

  // optional int64 money = 3;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->money(), output);
  }

  // optional int32 bankertimes = 4;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->bankertimes(), output);
  }

  // optional int64 max_score = 5;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(5, this->max_score(), output);
  }

  // optional int64 banker_score = 6;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(6, this->banker_score(), output);
  }

  // optional int64 left_score = 7;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(7, this->left_score(), output);
  }

  // optional int32 header_icon = 8 [default = 0];
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->header_icon(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:BankerInfo)
}

::google::protobuf::uint8* BankerInfo::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:BankerInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 guid = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->guid(), target);
  }

  // optional string nickname = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->nickname().data(), this->nickname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "BankerInfo.nickname");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->nickname(), target);
  }

  // optional int64 money = 3;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->money(), target);
  }

  // optional int32 bankertimes = 4;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->bankertimes(), target);
  }

  // optional int64 max_score = 5;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(5, this->max_score(), target);
  }

  // optional int64 banker_score = 6;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(6, this->banker_score(), target);
  }

  // optional int64 left_score = 7;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(7, this->left_score(), target);
  }

  // optional int32 header_icon = 8 [default = 0];
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->header_icon(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:BankerInfo)
  return target;
}

size_t BankerInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:BankerInfo)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 255u) {
    // optional string nickname = 2;
    if (has_nickname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->nickname());
    }

    // optional int32 guid = 1;
    if (has_guid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->guid());
    }

    // optional int32 bankertimes = 4;
    if (has_bankertimes()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->bankertimes());
    }

    // optional int64 money = 3;
    if (has_money()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->money());
    }

    // optional int64 max_score = 5;
    if (has_max_score()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->max_score());
    }

    // optional int64 banker_score = 6;
    if (has_banker_score()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->banker_score());
    }

    // optional int64 left_score = 7;
    if (has_left_score()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->left_score());
    }

    // optional int32 header_icon = 8 [default = 0];
    if (has_header_icon()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->header_icon());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BankerInfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:BankerInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const BankerInfo* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const BankerInfo>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:BankerInfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:BankerInfo)
    MergeFrom(*source);
  }
}

void BankerInfo::MergeFrom(const BankerInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:BankerInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_nickname();
      nickname_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.nickname_);
    }
    if (cached_has_bits & 0x00000002u) {
      guid_ = from.guid_;
    }
    if (cached_has_bits & 0x00000004u) {
      bankertimes_ = from.bankertimes_;
    }
    if (cached_has_bits & 0x00000008u) {
      money_ = from.money_;
    }
    if (cached_has_bits & 0x00000010u) {
      max_score_ = from.max_score_;
    }
    if (cached_has_bits & 0x00000020u) {
      banker_score_ = from.banker_score_;
    }
    if (cached_has_bits & 0x00000040u) {
      left_score_ = from.left_score_;
    }
    if (cached_has_bits & 0x00000080u) {
      header_icon_ = from.header_icon_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void BankerInfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:BankerInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BankerInfo::CopyFrom(const BankerInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:BankerInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BankerInfo::IsInitialized() const {
  return true;
}

void BankerInfo::Swap(BankerInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void BankerInfo::InternalSwap(BankerInfo* other) {
  nickname_.Swap(&other->nickname_);
  std::swap(guid_, other->guid_);
  std::swap(bankertimes_, other->bankertimes_);
  std::swap(money_, other->money_);
  std::swap(max_score_, other->max_score_);
  std::swap(banker_score_, other->banker_score_);
  std::swap(left_score_, other->left_score_);
  std::swap(header_icon_, other->header_icon_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata BankerInfo::GetMetadata() const {
  protobuf_public_5fox_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_public_5fox_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// BankerInfo

// optional int32 guid = 1;
bool BankerInfo::has_guid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void BankerInfo::set_has_guid() {
  _has_bits_[0] |= 0x00000002u;
}
void BankerInfo::clear_has_guid() {
  _has_bits_[0] &= ~0x00000002u;
}
void BankerInfo::clear_guid() {
  guid_ = 0;
  clear_has_guid();
}
::google::protobuf::int32 BankerInfo::guid() const {
  // @@protoc_insertion_point(field_get:BankerInfo.guid)
  return guid_;
}
void BankerInfo::set_guid(::google::protobuf::int32 value) {
  set_has_guid();
  guid_ = value;
  // @@protoc_insertion_point(field_set:BankerInfo.guid)
}

// optional string nickname = 2;
bool BankerInfo::has_nickname() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void BankerInfo::set_has_nickname() {
  _has_bits_[0] |= 0x00000001u;
}
void BankerInfo::clear_has_nickname() {
  _has_bits_[0] &= ~0x00000001u;
}
void BankerInfo::clear_nickname() {
  nickname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_nickname();
}
const ::std::string& BankerInfo::nickname() const {
  // @@protoc_insertion_point(field_get:BankerInfo.nickname)
  return nickname_.GetNoArena();
}
void BankerInfo::set_nickname(const ::std::string& value) {
  set_has_nickname();
  nickname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:BankerInfo.nickname)
}
#if LANG_CXX11
void BankerInfo::set_nickname(::std::string&& value) {
  set_has_nickname();
  nickname_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:BankerInfo.nickname)
}
#endif
void BankerInfo::set_nickname(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_nickname();
  nickname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:BankerInfo.nickname)
}
void BankerInfo::set_nickname(const char* value, size_t size) {
  set_has_nickname();
  nickname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:BankerInfo.nickname)
}
::std::string* BankerInfo::mutable_nickname() {
  set_has_nickname();
  // @@protoc_insertion_point(field_mutable:BankerInfo.nickname)
  return nickname_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* BankerInfo::release_nickname() {
  // @@protoc_insertion_point(field_release:BankerInfo.nickname)
  clear_has_nickname();
  return nickname_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void BankerInfo::set_allocated_nickname(::std::string* nickname) {
  if (nickname != NULL) {
    set_has_nickname();
  } else {
    clear_has_nickname();
  }
  nickname_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), nickname);
  // @@protoc_insertion_point(field_set_allocated:BankerInfo.nickname)
}

// optional int64 money = 3;
bool BankerInfo::has_money() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void BankerInfo::set_has_money() {
  _has_bits_[0] |= 0x00000008u;
}
void BankerInfo::clear_has_money() {
  _has_bits_[0] &= ~0x00000008u;
}
void BankerInfo::clear_money() {
  money_ = GOOGLE_LONGLONG(0);
  clear_has_money();
}
::google::protobuf::int64 BankerInfo::money() const {
  // @@protoc_insertion_point(field_get:BankerInfo.money)
  return money_;
}
void BankerInfo::set_money(::google::protobuf::int64 value) {
  set_has_money();
  money_ = value;
  // @@protoc_insertion_point(field_set:BankerInfo.money)
}

// optional int32 bankertimes = 4;
bool BankerInfo::has_bankertimes() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void BankerInfo::set_has_bankertimes() {
  _has_bits_[0] |= 0x00000004u;
}
void BankerInfo::clear_has_bankertimes() {
  _has_bits_[0] &= ~0x00000004u;
}
void BankerInfo::clear_bankertimes() {
  bankertimes_ = 0;
  clear_has_bankertimes();
}
::google::protobuf::int32 BankerInfo::bankertimes() const {
  // @@protoc_insertion_point(field_get:BankerInfo.bankertimes)
  return bankertimes_;
}
void BankerInfo::set_bankertimes(::google::protobuf::int32 value) {
  set_has_bankertimes();
  bankertimes_ = value;
  // @@protoc_insertion_point(field_set:BankerInfo.bankertimes)
}

// optional int64 max_score = 5;
bool BankerInfo::has_max_score() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void BankerInfo::set_has_max_score() {
  _has_bits_[0] |= 0x00000010u;
}
void BankerInfo::clear_has_max_score() {
  _has_bits_[0] &= ~0x00000010u;
}
void BankerInfo::clear_max_score() {
  max_score_ = GOOGLE_LONGLONG(0);
  clear_has_max_score();
}
::google::protobuf::int64 BankerInfo::max_score() const {
  // @@protoc_insertion_point(field_get:BankerInfo.max_score)
  return max_score_;
}
void BankerInfo::set_max_score(::google::protobuf::int64 value) {
  set_has_max_score();
  max_score_ = value;
  // @@protoc_insertion_point(field_set:BankerInfo.max_score)
}

// optional int64 banker_score = 6;
bool BankerInfo::has_banker_score() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void BankerInfo::set_has_banker_score() {
  _has_bits_[0] |= 0x00000020u;
}
void BankerInfo::clear_has_banker_score() {
  _has_bits_[0] &= ~0x00000020u;
}
void BankerInfo::clear_banker_score() {
  banker_score_ = GOOGLE_LONGLONG(0);
  clear_has_banker_score();
}
::google::protobuf::int64 BankerInfo::banker_score() const {
  // @@protoc_insertion_point(field_get:BankerInfo.banker_score)
  return banker_score_;
}
void BankerInfo::set_banker_score(::google::protobuf::int64 value) {
  set_has_banker_score();
  banker_score_ = value;
  // @@protoc_insertion_point(field_set:BankerInfo.banker_score)
}

// optional int64 left_score = 7;
bool BankerInfo::has_left_score() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void BankerInfo::set_has_left_score() {
  _has_bits_[0] |= 0x00000040u;
}
void BankerInfo::clear_has_left_score() {
  _has_bits_[0] &= ~0x00000040u;
}
void BankerInfo::clear_left_score() {
  left_score_ = GOOGLE_LONGLONG(0);
  clear_has_left_score();
}
::google::protobuf::int64 BankerInfo::left_score() const {
  // @@protoc_insertion_point(field_get:BankerInfo.left_score)
  return left_score_;
}
void BankerInfo::set_left_score(::google::protobuf::int64 value) {
  set_has_left_score();
  left_score_ = value;
  // @@protoc_insertion_point(field_set:BankerInfo.left_score)
}

// optional int32 header_icon = 8 [default = 0];
bool BankerInfo::has_header_icon() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void BankerInfo::set_has_header_icon() {
  _has_bits_[0] |= 0x00000080u;
}
void BankerInfo::clear_has_header_icon() {
  _has_bits_[0] &= ~0x00000080u;
}
void BankerInfo::clear_header_icon() {
  header_icon_ = 0;
  clear_has_header_icon();
}
::google::protobuf::int32 BankerInfo::header_icon() const {
  // @@protoc_insertion_point(field_get:BankerInfo.header_icon)
  return header_icon_;
}
void BankerInfo::set_header_icon(::google::protobuf::int32 value) {
  set_has_header_icon();
  header_icon_ = value;
  // @@protoc_insertion_point(field_set:BankerInfo.header_icon)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SC_OxBankerInfo::kPbBankerInfoFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SC_OxBankerInfo::SC_OxBankerInfo()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_public_5fox_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:SC_OxBankerInfo)
}
SC_OxBankerInfo::SC_OxBankerInfo(const SC_OxBankerInfo& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_pb_banker_info()) {
    pb_banker_info_ = new ::BankerInfo(*from.pb_banker_info_);
  } else {
    pb_banker_info_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:SC_OxBankerInfo)
}

void SC_OxBankerInfo::SharedCtor() {
  _cached_size_ = 0;
  pb_banker_info_ = NULL;
}

SC_OxBankerInfo::~SC_OxBankerInfo() {
  // @@protoc_insertion_point(destructor:SC_OxBankerInfo)
  SharedDtor();
}

void SC_OxBankerInfo::SharedDtor() {
  if (this != internal_default_instance()) {
    delete pb_banker_info_;
  }
}

void SC_OxBankerInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SC_OxBankerInfo::descriptor() {
  protobuf_public_5fox_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_public_5fox_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const SC_OxBankerInfo& SC_OxBankerInfo::default_instance() {
  protobuf_public_5fox_2eproto::InitDefaults();
  return *internal_default_instance();
}

SC_OxBankerInfo* SC_OxBankerInfo::New(::google::protobuf::Arena* arena) const {
  SC_OxBankerInfo* n = new SC_OxBankerInfo;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SC_OxBankerInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:SC_OxBankerInfo)
  if (has_pb_banker_info()) {
    GOOGLE_DCHECK(pb_banker_info_ != NULL);
    pb_banker_info_->::BankerInfo::Clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool SC_OxBankerInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:SC_OxBankerInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .BankerInfo pb_banker_info = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_pb_banker_info()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:SC_OxBankerInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:SC_OxBankerInfo)
  return false;
#undef DO_
}

void SC_OxBankerInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:SC_OxBankerInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .BankerInfo pb_banker_info = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->pb_banker_info_, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:SC_OxBankerInfo)
}

::google::protobuf::uint8* SC_OxBankerInfo::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:SC_OxBankerInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .BankerInfo pb_banker_info = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->pb_banker_info_, deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SC_OxBankerInfo)
  return target;
}

size_t SC_OxBankerInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SC_OxBankerInfo)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // optional .BankerInfo pb_banker_info = 1;
  if (has_pb_banker_info()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->pb_banker_info_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SC_OxBankerInfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:SC_OxBankerInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const SC_OxBankerInfo* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SC_OxBankerInfo>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:SC_OxBankerInfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:SC_OxBankerInfo)
    MergeFrom(*source);
  }
}

void SC_OxBankerInfo::MergeFrom(const SC_OxBankerInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:SC_OxBankerInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_pb_banker_info()) {
    mutable_pb_banker_info()->::BankerInfo::MergeFrom(from.pb_banker_info());
  }
}

void SC_OxBankerInfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:SC_OxBankerInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SC_OxBankerInfo::CopyFrom(const SC_OxBankerInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SC_OxBankerInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SC_OxBankerInfo::IsInitialized() const {
  return true;
}

void SC_OxBankerInfo::Swap(SC_OxBankerInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SC_OxBankerInfo::InternalSwap(SC_OxBankerInfo* other) {
  std::swap(pb_banker_info_, other->pb_banker_info_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SC_OxBankerInfo::GetMetadata() const {
  protobuf_public_5fox_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_public_5fox_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SC_OxBankerInfo

// optional .BankerInfo pb_banker_info = 1;
bool SC_OxBankerInfo::has_pb_banker_info() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void SC_OxBankerInfo::set_has_pb_banker_info() {
  _has_bits_[0] |= 0x00000001u;
}
void SC_OxBankerInfo::clear_has_pb_banker_info() {
  _has_bits_[0] &= ~0x00000001u;
}
void SC_OxBankerInfo::clear_pb_banker_info() {
  if (pb_banker_info_ != NULL) pb_banker_info_->::BankerInfo::Clear();
  clear_has_pb_banker_info();
}
const ::BankerInfo& SC_OxBankerInfo::pb_banker_info() const {
  // @@protoc_insertion_point(field_get:SC_OxBankerInfo.pb_banker_info)
  return pb_banker_info_ != NULL ? *pb_banker_info_
                         : *::BankerInfo::internal_default_instance();
}
::BankerInfo* SC_OxBankerInfo::mutable_pb_banker_info() {
  set_has_pb_banker_info();
  if (pb_banker_info_ == NULL) {
    pb_banker_info_ = new ::BankerInfo;
  }
  // @@protoc_insertion_point(field_mutable:SC_OxBankerInfo.pb_banker_info)
  return pb_banker_info_;
}
::BankerInfo* SC_OxBankerInfo::release_pb_banker_info() {
  // @@protoc_insertion_point(field_release:SC_OxBankerInfo.pb_banker_info)
  clear_has_pb_banker_info();
  ::BankerInfo* temp = pb_banker_info_;
  pb_banker_info_ = NULL;
  return temp;
}
void SC_OxBankerInfo::set_allocated_pb_banker_info(::BankerInfo* pb_banker_info) {
  delete pb_banker_info_;
  pb_banker_info_ = pb_banker_info;
  if (pb_banker_info) {
    set_has_pb_banker_info();
  } else {
    clear_has_pb_banker_info();
  }
  // @@protoc_insertion_point(field_set_allocated:SC_OxBankerInfo.pb_banker_info)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int BankerList::kGuidFieldNumber;
const int BankerList::kNicknameFieldNumber;
const int BankerList::kMoneyFieldNumber;
const int BankerList::kHeaderIconFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

BankerList::BankerList()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_public_5fox_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:BankerList)
}
BankerList::BankerList(const BankerList& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  nickname_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_nickname()) {
    nickname_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.nickname_);
  }
  ::memcpy(&guid_, &from.guid_,
    reinterpret_cast<char*>(&money_) -
    reinterpret_cast<char*>(&guid_) + sizeof(money_));
  // @@protoc_insertion_point(copy_constructor:BankerList)
}

void BankerList::SharedCtor() {
  _cached_size_ = 0;
  nickname_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&guid_, 0, reinterpret_cast<char*>(&money_) -
    reinterpret_cast<char*>(&guid_) + sizeof(money_));
}

BankerList::~BankerList() {
  // @@protoc_insertion_point(destructor:BankerList)
  SharedDtor();
}

void BankerList::SharedDtor() {
  nickname_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void BankerList::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BankerList::descriptor() {
  protobuf_public_5fox_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_public_5fox_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const BankerList& BankerList::default_instance() {
  protobuf_public_5fox_2eproto::InitDefaults();
  return *internal_default_instance();
}

BankerList* BankerList::New(::google::protobuf::Arena* arena) const {
  BankerList* n = new BankerList;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void BankerList::Clear() {
// @@protoc_insertion_point(message_clear_start:BankerList)
  if (has_nickname()) {
    GOOGLE_DCHECK(!nickname_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
    (*nickname_.UnsafeRawStringPointer())->clear();
  }
  if (_has_bits_[0 / 32] & 14u) {
    ::memset(&guid_, 0, reinterpret_cast<char*>(&money_) -
      reinterpret_cast<char*>(&guid_) + sizeof(money_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool BankerList::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:BankerList)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 guid = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_guid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &guid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string nickname = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_nickname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->nickname().data(), this->nickname().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "BankerList.nickname");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 money = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {
          set_has_money();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &money_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 header_icon = 4 [default = 0];
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u)) {
          set_has_header_icon();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &header_icon_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:BankerList)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:BankerList)
  return false;
#undef DO_
}

void BankerList::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:BankerList)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 guid = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->guid(), output);
  }

  // optional string nickname = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->nickname().data(), this->nickname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "BankerList.nickname");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->nickname(), output);
  }

  // optional int64 money = 3;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->money(), output);
  }

  // optional int32 header_icon = 4 [default = 0];
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->header_icon(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:BankerList)
}

::google::protobuf::uint8* BankerList::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:BankerList)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 guid = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->guid(), target);
  }

  // optional string nickname = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->nickname().data(), this->nickname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "BankerList.nickname");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->nickname(), target);
  }

  // optional int64 money = 3;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->money(), target);
  }

  // optional int32 header_icon = 4 [default = 0];
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->header_icon(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:BankerList)
  return target;
}

size_t BankerList::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:BankerList)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 15u) {
    // optional string nickname = 2;
    if (has_nickname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->nickname());
    }

    // optional int32 guid = 1;
    if (has_guid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->guid());
    }

    // optional int32 header_icon = 4 [default = 0];
    if (has_header_icon()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->header_icon());
    }

    // optional int64 money = 3;
    if (has_money()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->money());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BankerList::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:BankerList)
  GOOGLE_DCHECK_NE(&from, this);
  const BankerList* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const BankerList>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:BankerList)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:BankerList)
    MergeFrom(*source);
  }
}

void BankerList::MergeFrom(const BankerList& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:BankerList)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 15u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_nickname();
      nickname_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.nickname_);
    }
    if (cached_has_bits & 0x00000002u) {
      guid_ = from.guid_;
    }
    if (cached_has_bits & 0x00000004u) {
      header_icon_ = from.header_icon_;
    }
    if (cached_has_bits & 0x00000008u) {
      money_ = from.money_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void BankerList::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:BankerList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BankerList::CopyFrom(const BankerList& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:BankerList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BankerList::IsInitialized() const {
  return true;
}

void BankerList::Swap(BankerList* other) {
  if (other == this) return;
  InternalSwap(other);
}
void BankerList::InternalSwap(BankerList* other) {
  nickname_.Swap(&other->nickname_);
  std::swap(guid_, other->guid_);
  std::swap(header_icon_, other->header_icon_);
  std::swap(money_, other->money_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata BankerList::GetMetadata() const {
  protobuf_public_5fox_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_public_5fox_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// BankerList

// optional int32 guid = 1;
bool BankerList::has_guid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void BankerList::set_has_guid() {
  _has_bits_[0] |= 0x00000002u;
}
void BankerList::clear_has_guid() {
  _has_bits_[0] &= ~0x00000002u;
}
void BankerList::clear_guid() {
  guid_ = 0;
  clear_has_guid();
}
::google::protobuf::int32 BankerList::guid() const {
  // @@protoc_insertion_point(field_get:BankerList.guid)
  return guid_;
}
void BankerList::set_guid(::google::protobuf::int32 value) {
  set_has_guid();
  guid_ = value;
  // @@protoc_insertion_point(field_set:BankerList.guid)
}

// optional string nickname = 2;
bool BankerList::has_nickname() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void BankerList::set_has_nickname() {
  _has_bits_[0] |= 0x00000001u;
}
void BankerList::clear_has_nickname() {
  _has_bits_[0] &= ~0x00000001u;
}
void BankerList::clear_nickname() {
  nickname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_nickname();
}
const ::std::string& BankerList::nickname() const {
  // @@protoc_insertion_point(field_get:BankerList.nickname)
  return nickname_.GetNoArena();
}
void BankerList::set_nickname(const ::std::string& value) {
  set_has_nickname();
  nickname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:BankerList.nickname)
}
#if LANG_CXX11
void BankerList::set_nickname(::std::string&& value) {
  set_has_nickname();
  nickname_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:BankerList.nickname)
}
#endif
void BankerList::set_nickname(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_nickname();
  nickname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:BankerList.nickname)
}
void BankerList::set_nickname(const char* value, size_t size) {
  set_has_nickname();
  nickname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:BankerList.nickname)
}
::std::string* BankerList::mutable_nickname() {
  set_has_nickname();
  // @@protoc_insertion_point(field_mutable:BankerList.nickname)
  return nickname_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* BankerList::release_nickname() {
  // @@protoc_insertion_point(field_release:BankerList.nickname)
  clear_has_nickname();
  return nickname_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void BankerList::set_allocated_nickname(::std::string* nickname) {
  if (nickname != NULL) {
    set_has_nickname();
  } else {
    clear_has_nickname();
  }
  nickname_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), nickname);
  // @@protoc_insertion_point(field_set_allocated:BankerList.nickname)
}

// optional int64 money = 3;
bool BankerList::has_money() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void BankerList::set_has_money() {
  _has_bits_[0] |= 0x00000008u;
}
void BankerList::clear_has_money() {
  _has_bits_[0] &= ~0x00000008u;
}
void BankerList::clear_money() {
  money_ = GOOGLE_LONGLONG(0);
  clear_has_money();
}
::google::protobuf::int64 BankerList::money() const {
  // @@protoc_insertion_point(field_get:BankerList.money)
  return money_;
}
void BankerList::set_money(::google::protobuf::int64 value) {
  set_has_money();
  money_ = value;
  // @@protoc_insertion_point(field_set:BankerList.money)
}

// optional int32 header_icon = 4 [default = 0];
bool BankerList::has_header_icon() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void BankerList::set_has_header_icon() {
  _has_bits_[0] |= 0x00000004u;
}
void BankerList::clear_has_header_icon() {
  _has_bits_[0] &= ~0x00000004u;
}
void BankerList::clear_header_icon() {
  header_icon_ = 0;
  clear_has_header_icon();
}
::google::protobuf::int32 BankerList::header_icon() const {
  // @@protoc_insertion_point(field_get:BankerList.header_icon)
  return header_icon_;
}
void BankerList::set_header_icon(::google::protobuf::int32 value) {
  set_has_header_icon();
  header_icon_ = value;
  // @@protoc_insertion_point(field_set:BankerList.header_icon)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SC_OxBankerList::kBankerNumTotalFieldNumber;
const int SC_OxBankerList::kPbBankerListFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SC_OxBankerList::SC_OxBankerList()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_public_5fox_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:SC_OxBankerList)
}
SC_OxBankerList::SC_OxBankerList(const SC_OxBankerList& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      pb_banker_list_(from.pb_banker_list_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  banker_num_total_ = from.banker_num_total_;
  // @@protoc_insertion_point(copy_constructor:SC_OxBankerList)
}

void SC_OxBankerList::SharedCtor() {
  _cached_size_ = 0;
  banker_num_total_ = 0;
}

SC_OxBankerList::~SC_OxBankerList() {
  // @@protoc_insertion_point(destructor:SC_OxBankerList)
  SharedDtor();
}

void SC_OxBankerList::SharedDtor() {
}

void SC_OxBankerList::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SC_OxBankerList::descriptor() {
  protobuf_public_5fox_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_public_5fox_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const SC_OxBankerList& SC_OxBankerList::default_instance() {
  protobuf_public_5fox_2eproto::InitDefaults();
  return *internal_default_instance();
}

SC_OxBankerList* SC_OxBankerList::New(::google::protobuf::Arena* arena) const {
  SC_OxBankerList* n = new SC_OxBankerList;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SC_OxBankerList::Clear() {
// @@protoc_insertion_point(message_clear_start:SC_OxBankerList)
  pb_banker_list_.Clear();
  banker_num_total_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool SC_OxBankerList::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:SC_OxBankerList)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 banker_num_total = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_banker_num_total();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &banker_num_total_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .BankerList pb_banker_list = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_pb_banker_list()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:SC_OxBankerList)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:SC_OxBankerList)
  return false;
#undef DO_
}

void SC_OxBankerList::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:SC_OxBankerList)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 banker_num_total = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->banker_num_total(), output);
  }

  // repeated .BankerList pb_banker_list = 2;
  for (unsigned int i = 0, n = this->pb_banker_list_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->pb_banker_list(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:SC_OxBankerList)
}

::google::protobuf::uint8* SC_OxBankerList::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:SC_OxBankerList)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 banker_num_total = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->banker_num_total(), target);
  }

  // repeated .BankerList pb_banker_list = 2;
  for (unsigned int i = 0, n = this->pb_banker_list_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, this->pb_banker_list(i), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SC_OxBankerList)
  return target;
}

size_t SC_OxBankerList::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SC_OxBankerList)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // repeated .BankerList pb_banker_list = 2;
  {
    unsigned int count = this->pb_banker_list_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->pb_banker_list(i));
    }
  }

  // optional int32 banker_num_total = 1;
  if (has_banker_num_total()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->banker_num_total());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SC_OxBankerList::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:SC_OxBankerList)
  GOOGLE_DCHECK_NE(&from, this);
  const SC_OxBankerList* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SC_OxBankerList>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:SC_OxBankerList)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:SC_OxBankerList)
    MergeFrom(*source);
  }
}

void SC_OxBankerList::MergeFrom(const SC_OxBankerList& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:SC_OxBankerList)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  pb_banker_list_.MergeFrom(from.pb_banker_list_);
  if (from.has_banker_num_total()) {
    set_banker_num_total(from.banker_num_total());
  }
}

void SC_OxBankerList::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:SC_OxBankerList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SC_OxBankerList::CopyFrom(const SC_OxBankerList& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SC_OxBankerList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SC_OxBankerList::IsInitialized() const {
  return true;
}

void SC_OxBankerList::Swap(SC_OxBankerList* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SC_OxBankerList::InternalSwap(SC_OxBankerList* other) {
  pb_banker_list_.InternalSwap(&other->pb_banker_list_);
  std::swap(banker_num_total_, other->banker_num_total_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SC_OxBankerList::GetMetadata() const {
  protobuf_public_5fox_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_public_5fox_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SC_OxBankerList

// optional int32 banker_num_total = 1;
bool SC_OxBankerList::has_banker_num_total() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void SC_OxBankerList::set_has_banker_num_total() {
  _has_bits_[0] |= 0x00000001u;
}
void SC_OxBankerList::clear_has_banker_num_total() {
  _has_bits_[0] &= ~0x00000001u;
}
void SC_OxBankerList::clear_banker_num_total() {
  banker_num_total_ = 0;
  clear_has_banker_num_total();
}
::google::protobuf::int32 SC_OxBankerList::banker_num_total() const {
  // @@protoc_insertion_point(field_get:SC_OxBankerList.banker_num_total)
  return banker_num_total_;
}
void SC_OxBankerList::set_banker_num_total(::google::protobuf::int32 value) {
  set_has_banker_num_total();
  banker_num_total_ = value;
  // @@protoc_insertion_point(field_set:SC_OxBankerList.banker_num_total)
}

// repeated .BankerList pb_banker_list = 2;
int SC_OxBankerList::pb_banker_list_size() const {
  return pb_banker_list_.size();
}
void SC_OxBankerList::clear_pb_banker_list() {
  pb_banker_list_.Clear();
}
const ::BankerList& SC_OxBankerList::pb_banker_list(int index) const {
  // @@protoc_insertion_point(field_get:SC_OxBankerList.pb_banker_list)
  return pb_banker_list_.Get(index);
}
::BankerList* SC_OxBankerList::mutable_pb_banker_list(int index) {
  // @@protoc_insertion_point(field_mutable:SC_OxBankerList.pb_banker_list)
  return pb_banker_list_.Mutable(index);
}
::BankerList* SC_OxBankerList::add_pb_banker_list() {
  // @@protoc_insertion_point(field_add:SC_OxBankerList.pb_banker_list)
  return pb_banker_list_.Add();
}
::google::protobuf::RepeatedPtrField< ::BankerList >*
SC_OxBankerList::mutable_pb_banker_list() {
  // @@protoc_insertion_point(field_mutable_list:SC_OxBankerList.pb_banker_list)
  return &pb_banker_list_;
}
const ::google::protobuf::RepeatedPtrField< ::BankerList >&
SC_OxBankerList::pb_banker_list() const {
  // @@protoc_insertion_point(field_list:SC_OxBankerList.pb_banker_list)
  return pb_banker_list_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SC_OxForBankerFlag::kResultFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SC_OxForBankerFlag::SC_OxForBankerFlag()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_public_5fox_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:SC_OxForBankerFlag)
}
SC_OxForBankerFlag::SC_OxForBankerFlag(const SC_OxForBankerFlag& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  result_ = from.result_;
  // @@protoc_insertion_point(copy_constructor:SC_OxForBankerFlag)
}

void SC_OxForBankerFlag::SharedCtor() {
  _cached_size_ = 0;
  result_ = 0;
}

SC_OxForBankerFlag::~SC_OxForBankerFlag() {
  // @@protoc_insertion_point(destructor:SC_OxForBankerFlag)
  SharedDtor();
}

void SC_OxForBankerFlag::SharedDtor() {
}

void SC_OxForBankerFlag::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SC_OxForBankerFlag::descriptor() {
  protobuf_public_5fox_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_public_5fox_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const SC_OxForBankerFlag& SC_OxForBankerFlag::default_instance() {
  protobuf_public_5fox_2eproto::InitDefaults();
  return *internal_default_instance();
}

SC_OxForBankerFlag* SC_OxForBankerFlag::New(::google::protobuf::Arena* arena) const {
  SC_OxForBankerFlag* n = new SC_OxForBankerFlag;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SC_OxForBankerFlag::Clear() {
// @@protoc_insertion_point(message_clear_start:SC_OxForBankerFlag)
  result_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool SC_OxForBankerFlag::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:SC_OxForBankerFlag)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 result = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_result();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &result_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:SC_OxForBankerFlag)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:SC_OxForBankerFlag)
  return false;
#undef DO_
}

void SC_OxForBankerFlag::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:SC_OxForBankerFlag)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 result = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->result(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:SC_OxForBankerFlag)
}

::google::protobuf::uint8* SC_OxForBankerFlag::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:SC_OxForBankerFlag)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 result = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->result(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SC_OxForBankerFlag)
  return target;
}

size_t SC_OxForBankerFlag::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SC_OxForBankerFlag)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // optional int32 result = 1;
  if (has_result()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->result());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SC_OxForBankerFlag::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:SC_OxForBankerFlag)
  GOOGLE_DCHECK_NE(&from, this);
  const SC_OxForBankerFlag* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SC_OxForBankerFlag>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:SC_OxForBankerFlag)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:SC_OxForBankerFlag)
    MergeFrom(*source);
  }
}

void SC_OxForBankerFlag::MergeFrom(const SC_OxForBankerFlag& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:SC_OxForBankerFlag)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_result()) {
    set_result(from.result());
  }
}

void SC_OxForBankerFlag::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:SC_OxForBankerFlag)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SC_OxForBankerFlag::CopyFrom(const SC_OxForBankerFlag& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SC_OxForBankerFlag)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SC_OxForBankerFlag::IsInitialized() const {
  return true;
}

void SC_OxForBankerFlag::Swap(SC_OxForBankerFlag* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SC_OxForBankerFlag::InternalSwap(SC_OxForBankerFlag* other) {
  std::swap(result_, other->result_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SC_OxForBankerFlag::GetMetadata() const {
  protobuf_public_5fox_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_public_5fox_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SC_OxForBankerFlag

// optional int32 result = 1;
bool SC_OxForBankerFlag::has_result() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void SC_OxForBankerFlag::set_has_result() {
  _has_bits_[0] |= 0x00000001u;
}
void SC_OxForBankerFlag::clear_has_result() {
  _has_bits_[0] &= ~0x00000001u;
}
void SC_OxForBankerFlag::clear_result() {
  result_ = 0;
  clear_has_result();
}
::google::protobuf::int32 SC_OxForBankerFlag::result() const {
  // @@protoc_insertion_point(field_get:SC_OxForBankerFlag.result)
  return result_;
}
void SC_OxForBankerFlag::set_result(::google::protobuf::int32 value) {
  set_has_result();
  result_ = value;
  // @@protoc_insertion_point(field_set:SC_OxForBankerFlag.result)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SC_OxBetCoin::kResultFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SC_OxBetCoin::SC_OxBetCoin()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_public_5fox_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:SC_OxBetCoin)
}
SC_OxBetCoin::SC_OxBetCoin(const SC_OxBetCoin& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  result_ = from.result_;
  // @@protoc_insertion_point(copy_constructor:SC_OxBetCoin)
}

void SC_OxBetCoin::SharedCtor() {
  _cached_size_ = 0;
  result_ = 0;
}

SC_OxBetCoin::~SC_OxBetCoin() {
  // @@protoc_insertion_point(destructor:SC_OxBetCoin)
  SharedDtor();
}

void SC_OxBetCoin::SharedDtor() {
}

void SC_OxBetCoin::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SC_OxBetCoin::descriptor() {
  protobuf_public_5fox_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_public_5fox_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const SC_OxBetCoin& SC_OxBetCoin::default_instance() {
  protobuf_public_5fox_2eproto::InitDefaults();
  return *internal_default_instance();
}

SC_OxBetCoin* SC_OxBetCoin::New(::google::protobuf::Arena* arena) const {
  SC_OxBetCoin* n = new SC_OxBetCoin;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SC_OxBetCoin::Clear() {
// @@protoc_insertion_point(message_clear_start:SC_OxBetCoin)
  result_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool SC_OxBetCoin::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:SC_OxBetCoin)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 result = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_result();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &result_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:SC_OxBetCoin)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:SC_OxBetCoin)
  return false;
#undef DO_
}

void SC_OxBetCoin::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:SC_OxBetCoin)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 result = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->result(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:SC_OxBetCoin)
}

::google::protobuf::uint8* SC_OxBetCoin::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:SC_OxBetCoin)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 result = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->result(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SC_OxBetCoin)
  return target;
}

size_t SC_OxBetCoin::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SC_OxBetCoin)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // optional int32 result = 1;
  if (has_result()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->result());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SC_OxBetCoin::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:SC_OxBetCoin)
  GOOGLE_DCHECK_NE(&from, this);
  const SC_OxBetCoin* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SC_OxBetCoin>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:SC_OxBetCoin)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:SC_OxBetCoin)
    MergeFrom(*source);
  }
}

void SC_OxBetCoin::MergeFrom(const SC_OxBetCoin& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:SC_OxBetCoin)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_result()) {
    set_result(from.result());
  }
}

void SC_OxBetCoin::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:SC_OxBetCoin)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SC_OxBetCoin::CopyFrom(const SC_OxBetCoin& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SC_OxBetCoin)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SC_OxBetCoin::IsInitialized() const {
  return true;
}

void SC_OxBetCoin::Swap(SC_OxBetCoin* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SC_OxBetCoin::InternalSwap(SC_OxBetCoin* other) {
  std::swap(result_, other->result_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SC_OxBetCoin::GetMetadata() const {
  protobuf_public_5fox_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_public_5fox_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SC_OxBetCoin

// optional int32 result = 1;
bool SC_OxBetCoin::has_result() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void SC_OxBetCoin::set_has_result() {
  _has_bits_[0] |= 0x00000001u;
}
void SC_OxBetCoin::clear_has_result() {
  _has_bits_[0] &= ~0x00000001u;
}
void SC_OxBetCoin::clear_result() {
  result_ = 0;
  clear_has_result();
}
::google::protobuf::int32 SC_OxBetCoin::result() const {
  // @@protoc_insertion_point(field_get:SC_OxBetCoin.result)
  return result_;
}
void SC_OxBetCoin::set_result(::google::protobuf::int32 value) {
  set_has_result();
  result_ = value;
  // @@protoc_insertion_point(field_set:SC_OxBetCoin.result)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SC_OxPlayerList::kTopPlayerTotalFieldNumber;
const int SC_OxPlayerList::kPbPlayerInfoListFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SC_OxPlayerList::SC_OxPlayerList()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_public_5fox_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:SC_OxPlayerList)
}
SC_OxPlayerList::SC_OxPlayerList(const SC_OxPlayerList& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      pb_player_info_list_(from.pb_player_info_list_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  top_player_total_ = from.top_player_total_;
  // @@protoc_insertion_point(copy_constructor:SC_OxPlayerList)
}

void SC_OxPlayerList::SharedCtor() {
  _cached_size_ = 0;
  top_player_total_ = 0;
}

SC_OxPlayerList::~SC_OxPlayerList() {
  // @@protoc_insertion_point(destructor:SC_OxPlayerList)
  SharedDtor();
}

void SC_OxPlayerList::SharedDtor() {
}

void SC_OxPlayerList::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SC_OxPlayerList::descriptor() {
  protobuf_public_5fox_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_public_5fox_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const SC_OxPlayerList& SC_OxPlayerList::default_instance() {
  protobuf_public_5fox_2eproto::InitDefaults();
  return *internal_default_instance();
}

SC_OxPlayerList* SC_OxPlayerList::New(::google::protobuf::Arena* arena) const {
  SC_OxPlayerList* n = new SC_OxPlayerList;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SC_OxPlayerList::Clear() {
// @@protoc_insertion_point(message_clear_start:SC_OxPlayerList)
  pb_player_info_list_.Clear();
  top_player_total_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool SC_OxPlayerList::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:SC_OxPlayerList)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 top_player_total = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_top_player_total();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &top_player_total_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .PlayerTopInfo pb_player_info_list = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_pb_player_info_list()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:SC_OxPlayerList)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:SC_OxPlayerList)
  return false;
#undef DO_
}

void SC_OxPlayerList::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:SC_OxPlayerList)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 top_player_total = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->top_player_total(), output);
  }

  // repeated .PlayerTopInfo pb_player_info_list = 2;
  for (unsigned int i = 0, n = this->pb_player_info_list_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->pb_player_info_list(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:SC_OxPlayerList)
}

::google::protobuf::uint8* SC_OxPlayerList::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:SC_OxPlayerList)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 top_player_total = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->top_player_total(), target);
  }

  // repeated .PlayerTopInfo pb_player_info_list = 2;
  for (unsigned int i = 0, n = this->pb_player_info_list_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, this->pb_player_info_list(i), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SC_OxPlayerList)
  return target;
}

size_t SC_OxPlayerList::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SC_OxPlayerList)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // repeated .PlayerTopInfo pb_player_info_list = 2;
  {
    unsigned int count = this->pb_player_info_list_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->pb_player_info_list(i));
    }
  }

  // optional int32 top_player_total = 1;
  if (has_top_player_total()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->top_player_total());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SC_OxPlayerList::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:SC_OxPlayerList)
  GOOGLE_DCHECK_NE(&from, this);
  const SC_OxPlayerList* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SC_OxPlayerList>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:SC_OxPlayerList)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:SC_OxPlayerList)
    MergeFrom(*source);
  }
}

void SC_OxPlayerList::MergeFrom(const SC_OxPlayerList& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:SC_OxPlayerList)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  pb_player_info_list_.MergeFrom(from.pb_player_info_list_);
  if (from.has_top_player_total()) {
    set_top_player_total(from.top_player_total());
  }
}

void SC_OxPlayerList::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:SC_OxPlayerList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SC_OxPlayerList::CopyFrom(const SC_OxPlayerList& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SC_OxPlayerList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SC_OxPlayerList::IsInitialized() const {
  return true;
}

void SC_OxPlayerList::Swap(SC_OxPlayerList* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SC_OxPlayerList::InternalSwap(SC_OxPlayerList* other) {
  pb_player_info_list_.InternalSwap(&other->pb_player_info_list_);
  std::swap(top_player_total_, other->top_player_total_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SC_OxPlayerList::GetMetadata() const {
  protobuf_public_5fox_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_public_5fox_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SC_OxPlayerList

// optional int32 top_player_total = 1;
bool SC_OxPlayerList::has_top_player_total() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void SC_OxPlayerList::set_has_top_player_total() {
  _has_bits_[0] |= 0x00000001u;
}
void SC_OxPlayerList::clear_has_top_player_total() {
  _has_bits_[0] &= ~0x00000001u;
}
void SC_OxPlayerList::clear_top_player_total() {
  top_player_total_ = 0;
  clear_has_top_player_total();
}
::google::protobuf::int32 SC_OxPlayerList::top_player_total() const {
  // @@protoc_insertion_point(field_get:SC_OxPlayerList.top_player_total)
  return top_player_total_;
}
void SC_OxPlayerList::set_top_player_total(::google::protobuf::int32 value) {
  set_has_top_player_total();
  top_player_total_ = value;
  // @@protoc_insertion_point(field_set:SC_OxPlayerList.top_player_total)
}

// repeated .PlayerTopInfo pb_player_info_list = 2;
int SC_OxPlayerList::pb_player_info_list_size() const {
  return pb_player_info_list_.size();
}
void SC_OxPlayerList::clear_pb_player_info_list() {
  pb_player_info_list_.Clear();
}
const ::PlayerTopInfo& SC_OxPlayerList::pb_player_info_list(int index) const {
  // @@protoc_insertion_point(field_get:SC_OxPlayerList.pb_player_info_list)
  return pb_player_info_list_.Get(index);
}
::PlayerTopInfo* SC_OxPlayerList::mutable_pb_player_info_list(int index) {
  // @@protoc_insertion_point(field_mutable:SC_OxPlayerList.pb_player_info_list)
  return pb_player_info_list_.Mutable(index);
}
::PlayerTopInfo* SC_OxPlayerList::add_pb_player_info_list() {
  // @@protoc_insertion_point(field_add:SC_OxPlayerList.pb_player_info_list)
  return pb_player_info_list_.Add();
}
::google::protobuf::RepeatedPtrField< ::PlayerTopInfo >*
SC_OxPlayerList::mutable_pb_player_info_list() {
  // @@protoc_insertion_point(field_mutable_list:SC_OxPlayerList.pb_player_info_list)
  return &pb_player_info_list_;
}
const ::google::protobuf::RepeatedPtrField< ::PlayerTopInfo >&
SC_OxPlayerList::pb_player_info_list() const {
  // @@protoc_insertion_point(field_list:SC_OxPlayerList.pb_player_info_list)
  return pb_player_info_list_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int EveryAreaInfo::kMaxBetScoreFieldNumber;
const int EveryAreaInfo::kBetTianTotalFieldNumber;
const int EveryAreaInfo::kBetDiTotalFieldNumber;
const int EveryAreaInfo::kBetXuanTotalFieldNumber;
const int EveryAreaInfo::kBetHuangTotalFieldNumber;
const int EveryAreaInfo::kLeftMoneyBetFieldNumber;
const int EveryAreaInfo::kTotalAllAreaBetMoneyFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

EveryAreaInfo::EveryAreaInfo()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_public_5fox_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:EveryAreaInfo)
}
EveryAreaInfo::EveryAreaInfo(const EveryAreaInfo& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&max_bet_score_, &from.max_bet_score_,
    reinterpret_cast<char*>(&total_all_area_bet_money_) -
    reinterpret_cast<char*>(&max_bet_score_) + sizeof(total_all_area_bet_money_));
  // @@protoc_insertion_point(copy_constructor:EveryAreaInfo)
}

void EveryAreaInfo::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&max_bet_score_, 0, reinterpret_cast<char*>(&total_all_area_bet_money_) -
    reinterpret_cast<char*>(&max_bet_score_) + sizeof(total_all_area_bet_money_));
}

EveryAreaInfo::~EveryAreaInfo() {
  // @@protoc_insertion_point(destructor:EveryAreaInfo)
  SharedDtor();
}

void EveryAreaInfo::SharedDtor() {
}

void EveryAreaInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* EveryAreaInfo::descriptor() {
  protobuf_public_5fox_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_public_5fox_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const EveryAreaInfo& EveryAreaInfo::default_instance() {
  protobuf_public_5fox_2eproto::InitDefaults();
  return *internal_default_instance();
}

EveryAreaInfo* EveryAreaInfo::New(::google::protobuf::Arena* arena) const {
  EveryAreaInfo* n = new EveryAreaInfo;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void EveryAreaInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:EveryAreaInfo)
  if (_has_bits_[0 / 32] & 127u) {
    ::memset(&max_bet_score_, 0, reinterpret_cast<char*>(&total_all_area_bet_money_) -
      reinterpret_cast<char*>(&max_bet_score_) + sizeof(total_all_area_bet_money_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool EveryAreaInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:EveryAreaInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 max_bet_score = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_max_bet_score();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &max_bet_score_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 bet_tian_total = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_bet_tian_total();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &bet_tian_total_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 bet_di_total = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {
          set_has_bet_di_total();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &bet_di_total_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 bet_xuan_total = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u)) {
          set_has_bet_xuan_total();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &bet_xuan_total_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 bet_huang_total = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u)) {
          set_has_bet_huang_total();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &bet_huang_total_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 left_money_bet = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u)) {
          set_has_left_money_bet();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &left_money_bet_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 total_all_area_bet_money = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u)) {
          set_has_total_all_area_bet_money();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &total_all_area_bet_money_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:EveryAreaInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:EveryAreaInfo)
  return false;
#undef DO_
}

void EveryAreaInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:EveryAreaInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int64 max_bet_score = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->max_bet_score(), output);
  }

  // optional int64 bet_tian_total = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->bet_tian_total(), output);
  }

  // optional int64 bet_di_total = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->bet_di_total(), output);
  }

  // optional int64 bet_xuan_total = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(4, this->bet_xuan_total(), output);
  }

  // optional int64 bet_huang_total = 5;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(5, this->bet_huang_total(), output);
  }

  // optional int64 left_money_bet = 6;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(6, this->left_money_bet(), output);
  }

  // optional int64 total_all_area_bet_money = 7;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(7, this->total_all_area_bet_money(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:EveryAreaInfo)
}

::google::protobuf::uint8* EveryAreaInfo::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:EveryAreaInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int64 max_bet_score = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->max_bet_score(), target);
  }

  // optional int64 bet_tian_total = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->bet_tian_total(), target);
  }

  // optional int64 bet_di_total = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->bet_di_total(), target);
  }

  // optional int64 bet_xuan_total = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(4, this->bet_xuan_total(), target);
  }

  // optional int64 bet_huang_total = 5;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(5, this->bet_huang_total(), target);
  }

  // optional int64 left_money_bet = 6;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(6, this->left_money_bet(), target);
  }

  // optional int64 total_all_area_bet_money = 7;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(7, this->total_all_area_bet_money(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:EveryAreaInfo)
  return target;
}

size_t EveryAreaInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:EveryAreaInfo)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 127u) {
    // optional int64 max_bet_score = 1;
    if (has_max_bet_score()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->max_bet_score());
    }

    // optional int64 bet_tian_total = 2;
    if (has_bet_tian_total()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->bet_tian_total());
    }

    // optional int64 bet_di_total = 3;
    if (has_bet_di_total()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->bet_di_total());
    }

    // optional int64 bet_xuan_total = 4;
    if (has_bet_xuan_total()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->bet_xuan_total());
    }

    // optional int64 bet_huang_total = 5;
    if (has_bet_huang_total()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->bet_huang_total());
    }

    // optional int64 left_money_bet = 6;
    if (has_left_money_bet()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->left_money_bet());
    }

    // optional int64 total_all_area_bet_money = 7;
    if (has_total_all_area_bet_money()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->total_all_area_bet_money());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void EveryAreaInfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:EveryAreaInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const EveryAreaInfo* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const EveryAreaInfo>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:EveryAreaInfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:EveryAreaInfo)
    MergeFrom(*source);
  }
}

void EveryAreaInfo::MergeFrom(const EveryAreaInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:EveryAreaInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 127u) {
    if (cached_has_bits & 0x00000001u) {
      max_bet_score_ = from.max_bet_score_;
    }
    if (cached_has_bits & 0x00000002u) {
      bet_tian_total_ = from.bet_tian_total_;
    }
    if (cached_has_bits & 0x00000004u) {
      bet_di_total_ = from.bet_di_total_;
    }
    if (cached_has_bits & 0x00000008u) {
      bet_xuan_total_ = from.bet_xuan_total_;
    }
    if (cached_has_bits & 0x00000010u) {
      bet_huang_total_ = from.bet_huang_total_;
    }
    if (cached_has_bits & 0x00000020u) {
      left_money_bet_ = from.left_money_bet_;
    }
    if (cached_has_bits & 0x00000040u) {
      total_all_area_bet_money_ = from.total_all_area_bet_money_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void EveryAreaInfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:EveryAreaInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EveryAreaInfo::CopyFrom(const EveryAreaInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:EveryAreaInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EveryAreaInfo::IsInitialized() const {
  return true;
}

void EveryAreaInfo::Swap(EveryAreaInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void EveryAreaInfo::InternalSwap(EveryAreaInfo* other) {
  std::swap(max_bet_score_, other->max_bet_score_);
  std::swap(bet_tian_total_, other->bet_tian_total_);
  std::swap(bet_di_total_, other->bet_di_total_);
  std::swap(bet_xuan_total_, other->bet_xuan_total_);
  std::swap(bet_huang_total_, other->bet_huang_total_);
  std::swap(left_money_bet_, other->left_money_bet_);
  std::swap(total_all_area_bet_money_, other->total_all_area_bet_money_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata EveryAreaInfo::GetMetadata() const {
  protobuf_public_5fox_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_public_5fox_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// EveryAreaInfo

// optional int64 max_bet_score = 1;
bool EveryAreaInfo::has_max_bet_score() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void EveryAreaInfo::set_has_max_bet_score() {
  _has_bits_[0] |= 0x00000001u;
}
void EveryAreaInfo::clear_has_max_bet_score() {
  _has_bits_[0] &= ~0x00000001u;
}
void EveryAreaInfo::clear_max_bet_score() {
  max_bet_score_ = GOOGLE_LONGLONG(0);
  clear_has_max_bet_score();
}
::google::protobuf::int64 EveryAreaInfo::max_bet_score() const {
  // @@protoc_insertion_point(field_get:EveryAreaInfo.max_bet_score)
  return max_bet_score_;
}
void EveryAreaInfo::set_max_bet_score(::google::protobuf::int64 value) {
  set_has_max_bet_score();
  max_bet_score_ = value;
  // @@protoc_insertion_point(field_set:EveryAreaInfo.max_bet_score)
}

// optional int64 bet_tian_total = 2;
bool EveryAreaInfo::has_bet_tian_total() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void EveryAreaInfo::set_has_bet_tian_total() {
  _has_bits_[0] |= 0x00000002u;
}
void EveryAreaInfo::clear_has_bet_tian_total() {
  _has_bits_[0] &= ~0x00000002u;
}
void EveryAreaInfo::clear_bet_tian_total() {
  bet_tian_total_ = GOOGLE_LONGLONG(0);
  clear_has_bet_tian_total();
}
::google::protobuf::int64 EveryAreaInfo::bet_tian_total() const {
  // @@protoc_insertion_point(field_get:EveryAreaInfo.bet_tian_total)
  return bet_tian_total_;
}
void EveryAreaInfo::set_bet_tian_total(::google::protobuf::int64 value) {
  set_has_bet_tian_total();
  bet_tian_total_ = value;
  // @@protoc_insertion_point(field_set:EveryAreaInfo.bet_tian_total)
}

// optional int64 bet_di_total = 3;
bool EveryAreaInfo::has_bet_di_total() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void EveryAreaInfo::set_has_bet_di_total() {
  _has_bits_[0] |= 0x00000004u;
}
void EveryAreaInfo::clear_has_bet_di_total() {
  _has_bits_[0] &= ~0x00000004u;
}
void EveryAreaInfo::clear_bet_di_total() {
  bet_di_total_ = GOOGLE_LONGLONG(0);
  clear_has_bet_di_total();
}
::google::protobuf::int64 EveryAreaInfo::bet_di_total() const {
  // @@protoc_insertion_point(field_get:EveryAreaInfo.bet_di_total)
  return bet_di_total_;
}
void EveryAreaInfo::set_bet_di_total(::google::protobuf::int64 value) {
  set_has_bet_di_total();
  bet_di_total_ = value;
  // @@protoc_insertion_point(field_set:EveryAreaInfo.bet_di_total)
}

// optional int64 bet_xuan_total = 4;
bool EveryAreaInfo::has_bet_xuan_total() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void EveryAreaInfo::set_has_bet_xuan_total() {
  _has_bits_[0] |= 0x00000008u;
}
void EveryAreaInfo::clear_has_bet_xuan_total() {
  _has_bits_[0] &= ~0x00000008u;
}
void EveryAreaInfo::clear_bet_xuan_total() {
  bet_xuan_total_ = GOOGLE_LONGLONG(0);
  clear_has_bet_xuan_total();
}
::google::protobuf::int64 EveryAreaInfo::bet_xuan_total() const {
  // @@protoc_insertion_point(field_get:EveryAreaInfo.bet_xuan_total)
  return bet_xuan_total_;
}
void EveryAreaInfo::set_bet_xuan_total(::google::protobuf::int64 value) {
  set_has_bet_xuan_total();
  bet_xuan_total_ = value;
  // @@protoc_insertion_point(field_set:EveryAreaInfo.bet_xuan_total)
}

// optional int64 bet_huang_total = 5;
bool EveryAreaInfo::has_bet_huang_total() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void EveryAreaInfo::set_has_bet_huang_total() {
  _has_bits_[0] |= 0x00000010u;
}
void EveryAreaInfo::clear_has_bet_huang_total() {
  _has_bits_[0] &= ~0x00000010u;
}
void EveryAreaInfo::clear_bet_huang_total() {
  bet_huang_total_ = GOOGLE_LONGLONG(0);
  clear_has_bet_huang_total();
}
::google::protobuf::int64 EveryAreaInfo::bet_huang_total() const {
  // @@protoc_insertion_point(field_get:EveryAreaInfo.bet_huang_total)
  return bet_huang_total_;
}
void EveryAreaInfo::set_bet_huang_total(::google::protobuf::int64 value) {
  set_has_bet_huang_total();
  bet_huang_total_ = value;
  // @@protoc_insertion_point(field_set:EveryAreaInfo.bet_huang_total)
}

// optional int64 left_money_bet = 6;
bool EveryAreaInfo::has_left_money_bet() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void EveryAreaInfo::set_has_left_money_bet() {
  _has_bits_[0] |= 0x00000020u;
}
void EveryAreaInfo::clear_has_left_money_bet() {
  _has_bits_[0] &= ~0x00000020u;
}
void EveryAreaInfo::clear_left_money_bet() {
  left_money_bet_ = GOOGLE_LONGLONG(0);
  clear_has_left_money_bet();
}
::google::protobuf::int64 EveryAreaInfo::left_money_bet() const {
  // @@protoc_insertion_point(field_get:EveryAreaInfo.left_money_bet)
  return left_money_bet_;
}
void EveryAreaInfo::set_left_money_bet(::google::protobuf::int64 value) {
  set_has_left_money_bet();
  left_money_bet_ = value;
  // @@protoc_insertion_point(field_set:EveryAreaInfo.left_money_bet)
}

// optional int64 total_all_area_bet_money = 7;
bool EveryAreaInfo::has_total_all_area_bet_money() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void EveryAreaInfo::set_has_total_all_area_bet_money() {
  _has_bits_[0] |= 0x00000040u;
}
void EveryAreaInfo::clear_has_total_all_area_bet_money() {
  _has_bits_[0] &= ~0x00000040u;
}
void EveryAreaInfo::clear_total_all_area_bet_money() {
  total_all_area_bet_money_ = GOOGLE_LONGLONG(0);
  clear_has_total_all_area_bet_money();
}
::google::protobuf::int64 EveryAreaInfo::total_all_area_bet_money() const {
  // @@protoc_insertion_point(field_get:EveryAreaInfo.total_all_area_bet_money)
  return total_all_area_bet_money_;
}
void EveryAreaInfo::set_total_all_area_bet_money(::google::protobuf::int64 value) {
  set_has_total_all_area_bet_money();
  total_all_area_bet_money_ = value;
  // @@protoc_insertion_point(field_set:EveryAreaInfo.total_all_area_bet_money)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SC_OxEveryArea::kPbAreaInfoFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SC_OxEveryArea::SC_OxEveryArea()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_public_5fox_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:SC_OxEveryArea)
}
SC_OxEveryArea::SC_OxEveryArea(const SC_OxEveryArea& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_pb_areainfo()) {
    pb_areainfo_ = new ::EveryAreaInfo(*from.pb_areainfo_);
  } else {
    pb_areainfo_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:SC_OxEveryArea)
}

void SC_OxEveryArea::SharedCtor() {
  _cached_size_ = 0;
  pb_areainfo_ = NULL;
}

SC_OxEveryArea::~SC_OxEveryArea() {
  // @@protoc_insertion_point(destructor:SC_OxEveryArea)
  SharedDtor();
}

void SC_OxEveryArea::SharedDtor() {
  if (this != internal_default_instance()) {
    delete pb_areainfo_;
  }
}

void SC_OxEveryArea::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SC_OxEveryArea::descriptor() {
  protobuf_public_5fox_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_public_5fox_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const SC_OxEveryArea& SC_OxEveryArea::default_instance() {
  protobuf_public_5fox_2eproto::InitDefaults();
  return *internal_default_instance();
}

SC_OxEveryArea* SC_OxEveryArea::New(::google::protobuf::Arena* arena) const {
  SC_OxEveryArea* n = new SC_OxEveryArea;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SC_OxEveryArea::Clear() {
// @@protoc_insertion_point(message_clear_start:SC_OxEveryArea)
  if (has_pb_areainfo()) {
    GOOGLE_DCHECK(pb_areainfo_ != NULL);
    pb_areainfo_->::EveryAreaInfo::Clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool SC_OxEveryArea::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:SC_OxEveryArea)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .EveryAreaInfo pb_AreaInfo = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_pb_areainfo()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:SC_OxEveryArea)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:SC_OxEveryArea)
  return false;
#undef DO_
}

void SC_OxEveryArea::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:SC_OxEveryArea)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .EveryAreaInfo pb_AreaInfo = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->pb_areainfo_, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:SC_OxEveryArea)
}

::google::protobuf::uint8* SC_OxEveryArea::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:SC_OxEveryArea)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .EveryAreaInfo pb_AreaInfo = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->pb_areainfo_, deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SC_OxEveryArea)
  return target;
}

size_t SC_OxEveryArea::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SC_OxEveryArea)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // optional .EveryAreaInfo pb_AreaInfo = 1;
  if (has_pb_areainfo()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->pb_areainfo_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SC_OxEveryArea::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:SC_OxEveryArea)
  GOOGLE_DCHECK_NE(&from, this);
  const SC_OxEveryArea* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SC_OxEveryArea>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:SC_OxEveryArea)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:SC_OxEveryArea)
    MergeFrom(*source);
  }
}

void SC_OxEveryArea::MergeFrom(const SC_OxEveryArea& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:SC_OxEveryArea)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_pb_areainfo()) {
    mutable_pb_areainfo()->::EveryAreaInfo::MergeFrom(from.pb_areainfo());
  }
}

void SC_OxEveryArea::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:SC_OxEveryArea)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SC_OxEveryArea::CopyFrom(const SC_OxEveryArea& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SC_OxEveryArea)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SC_OxEveryArea::IsInitialized() const {
  return true;
}

void SC_OxEveryArea::Swap(SC_OxEveryArea* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SC_OxEveryArea::InternalSwap(SC_OxEveryArea* other) {
  std::swap(pb_areainfo_, other->pb_areainfo_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SC_OxEveryArea::GetMetadata() const {
  protobuf_public_5fox_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_public_5fox_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SC_OxEveryArea

// optional .EveryAreaInfo pb_AreaInfo = 1;
bool SC_OxEveryArea::has_pb_areainfo() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void SC_OxEveryArea::set_has_pb_areainfo() {
  _has_bits_[0] |= 0x00000001u;
}
void SC_OxEveryArea::clear_has_pb_areainfo() {
  _has_bits_[0] &= ~0x00000001u;
}
void SC_OxEveryArea::clear_pb_areainfo() {
  if (pb_areainfo_ != NULL) pb_areainfo_->::EveryAreaInfo::Clear();
  clear_has_pb_areainfo();
}
const ::EveryAreaInfo& SC_OxEveryArea::pb_areainfo() const {
  // @@protoc_insertion_point(field_get:SC_OxEveryArea.pb_AreaInfo)
  return pb_areainfo_ != NULL ? *pb_areainfo_
                         : *::EveryAreaInfo::internal_default_instance();
}
::EveryAreaInfo* SC_OxEveryArea::mutable_pb_areainfo() {
  set_has_pb_areainfo();
  if (pb_areainfo_ == NULL) {
    pb_areainfo_ = new ::EveryAreaInfo;
  }
  // @@protoc_insertion_point(field_mutable:SC_OxEveryArea.pb_AreaInfo)
  return pb_areainfo_;
}
::EveryAreaInfo* SC_OxEveryArea::release_pb_areainfo() {
  // @@protoc_insertion_point(field_release:SC_OxEveryArea.pb_AreaInfo)
  clear_has_pb_areainfo();
  ::EveryAreaInfo* temp = pb_areainfo_;
  pb_areainfo_ = NULL;
  return temp;
}
void SC_OxEveryArea::set_allocated_pb_areainfo(::EveryAreaInfo* pb_areainfo) {
  delete pb_areainfo_;
  pb_areainfo_ = pb_areainfo;
  if (pb_areainfo) {
    set_has_pb_areainfo();
  } else {
    clear_has_pb_areainfo();
  }
  // @@protoc_insertion_point(field_set_allocated:SC_OxEveryArea.pb_AreaInfo)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CS_OxApplyForBanker::kGuidFieldNumber;
const int CS_OxApplyForBanker::kNicknameFieldNumber;
const int CS_OxApplyForBanker::kMoneyFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CS_OxApplyForBanker::CS_OxApplyForBanker()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_public_5fox_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:CS_OxApplyForBanker)
}
CS_OxApplyForBanker::CS_OxApplyForBanker(const CS_OxApplyForBanker& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  nickname_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_nickname()) {
    nickname_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.nickname_);
  }
  ::memcpy(&money_, &from.money_,
    reinterpret_cast<char*>(&guid_) -
    reinterpret_cast<char*>(&money_) + sizeof(guid_));
  // @@protoc_insertion_point(copy_constructor:CS_OxApplyForBanker)
}

void CS_OxApplyForBanker::SharedCtor() {
  _cached_size_ = 0;
  nickname_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&money_, 0, reinterpret_cast<char*>(&guid_) -
    reinterpret_cast<char*>(&money_) + sizeof(guid_));
}

CS_OxApplyForBanker::~CS_OxApplyForBanker() {
  // @@protoc_insertion_point(destructor:CS_OxApplyForBanker)
  SharedDtor();
}

void CS_OxApplyForBanker::SharedDtor() {
  nickname_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CS_OxApplyForBanker::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CS_OxApplyForBanker::descriptor() {
  protobuf_public_5fox_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_public_5fox_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CS_OxApplyForBanker& CS_OxApplyForBanker::default_instance() {
  protobuf_public_5fox_2eproto::InitDefaults();
  return *internal_default_instance();
}

CS_OxApplyForBanker* CS_OxApplyForBanker::New(::google::protobuf::Arena* arena) const {
  CS_OxApplyForBanker* n = new CS_OxApplyForBanker;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CS_OxApplyForBanker::Clear() {
// @@protoc_insertion_point(message_clear_start:CS_OxApplyForBanker)
  if (has_nickname()) {
    GOOGLE_DCHECK(!nickname_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
    (*nickname_.UnsafeRawStringPointer())->clear();
  }
  if (_has_bits_[0 / 32] & 6u) {
    ::memset(&money_, 0, reinterpret_cast<char*>(&guid_) -
      reinterpret_cast<char*>(&money_) + sizeof(guid_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CS_OxApplyForBanker::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CS_OxApplyForBanker)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 guid = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_guid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &guid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string nickname = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_nickname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->nickname().data(), this->nickname().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "CS_OxApplyForBanker.nickname");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 money = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {
          set_has_money();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &money_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CS_OxApplyForBanker)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CS_OxApplyForBanker)
  return false;
#undef DO_
}

void CS_OxApplyForBanker::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CS_OxApplyForBanker)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 guid = 1;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->guid(), output);
  }

  // optional string nickname = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->nickname().data(), this->nickname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "CS_OxApplyForBanker.nickname");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->nickname(), output);
  }

  // optional int64 money = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->money(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CS_OxApplyForBanker)
}

::google::protobuf::uint8* CS_OxApplyForBanker::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CS_OxApplyForBanker)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 guid = 1;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->guid(), target);
  }

  // optional string nickname = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->nickname().data(), this->nickname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "CS_OxApplyForBanker.nickname");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->nickname(), target);
  }

  // optional int64 money = 3;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->money(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CS_OxApplyForBanker)
  return target;
}

size_t CS_OxApplyForBanker::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CS_OxApplyForBanker)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 7u) {
    // optional string nickname = 2;
    if (has_nickname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->nickname());
    }

    // optional int64 money = 3;
    if (has_money()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->money());
    }

    // optional int32 guid = 1;
    if (has_guid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->guid());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CS_OxApplyForBanker::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CS_OxApplyForBanker)
  GOOGLE_DCHECK_NE(&from, this);
  const CS_OxApplyForBanker* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CS_OxApplyForBanker>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CS_OxApplyForBanker)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CS_OxApplyForBanker)
    MergeFrom(*source);
  }
}

void CS_OxApplyForBanker::MergeFrom(const CS_OxApplyForBanker& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CS_OxApplyForBanker)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_nickname();
      nickname_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.nickname_);
    }
    if (cached_has_bits & 0x00000002u) {
      money_ = from.money_;
    }
    if (cached_has_bits & 0x00000004u) {
      guid_ = from.guid_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CS_OxApplyForBanker::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CS_OxApplyForBanker)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CS_OxApplyForBanker::CopyFrom(const CS_OxApplyForBanker& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CS_OxApplyForBanker)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CS_OxApplyForBanker::IsInitialized() const {
  return true;
}

void CS_OxApplyForBanker::Swap(CS_OxApplyForBanker* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CS_OxApplyForBanker::InternalSwap(CS_OxApplyForBanker* other) {
  nickname_.Swap(&other->nickname_);
  std::swap(money_, other->money_);
  std::swap(guid_, other->guid_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CS_OxApplyForBanker::GetMetadata() const {
  protobuf_public_5fox_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_public_5fox_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CS_OxApplyForBanker

// optional int32 guid = 1;
bool CS_OxApplyForBanker::has_guid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void CS_OxApplyForBanker::set_has_guid() {
  _has_bits_[0] |= 0x00000004u;
}
void CS_OxApplyForBanker::clear_has_guid() {
  _has_bits_[0] &= ~0x00000004u;
}
void CS_OxApplyForBanker::clear_guid() {
  guid_ = 0;
  clear_has_guid();
}
::google::protobuf::int32 CS_OxApplyForBanker::guid() const {
  // @@protoc_insertion_point(field_get:CS_OxApplyForBanker.guid)
  return guid_;
}
void CS_OxApplyForBanker::set_guid(::google::protobuf::int32 value) {
  set_has_guid();
  guid_ = value;
  // @@protoc_insertion_point(field_set:CS_OxApplyForBanker.guid)
}

// optional string nickname = 2;
bool CS_OxApplyForBanker::has_nickname() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CS_OxApplyForBanker::set_has_nickname() {
  _has_bits_[0] |= 0x00000001u;
}
void CS_OxApplyForBanker::clear_has_nickname() {
  _has_bits_[0] &= ~0x00000001u;
}
void CS_OxApplyForBanker::clear_nickname() {
  nickname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_nickname();
}
const ::std::string& CS_OxApplyForBanker::nickname() const {
  // @@protoc_insertion_point(field_get:CS_OxApplyForBanker.nickname)
  return nickname_.GetNoArena();
}
void CS_OxApplyForBanker::set_nickname(const ::std::string& value) {
  set_has_nickname();
  nickname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:CS_OxApplyForBanker.nickname)
}
#if LANG_CXX11
void CS_OxApplyForBanker::set_nickname(::std::string&& value) {
  set_has_nickname();
  nickname_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:CS_OxApplyForBanker.nickname)
}
#endif
void CS_OxApplyForBanker::set_nickname(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_nickname();
  nickname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:CS_OxApplyForBanker.nickname)
}
void CS_OxApplyForBanker::set_nickname(const char* value, size_t size) {
  set_has_nickname();
  nickname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:CS_OxApplyForBanker.nickname)
}
::std::string* CS_OxApplyForBanker::mutable_nickname() {
  set_has_nickname();
  // @@protoc_insertion_point(field_mutable:CS_OxApplyForBanker.nickname)
  return nickname_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* CS_OxApplyForBanker::release_nickname() {
  // @@protoc_insertion_point(field_release:CS_OxApplyForBanker.nickname)
  clear_has_nickname();
  return nickname_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CS_OxApplyForBanker::set_allocated_nickname(::std::string* nickname) {
  if (nickname != NULL) {
    set_has_nickname();
  } else {
    clear_has_nickname();
  }
  nickname_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), nickname);
  // @@protoc_insertion_point(field_set_allocated:CS_OxApplyForBanker.nickname)
}

// optional int64 money = 3;
bool CS_OxApplyForBanker::has_money() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CS_OxApplyForBanker::set_has_money() {
  _has_bits_[0] |= 0x00000002u;
}
void CS_OxApplyForBanker::clear_has_money() {
  _has_bits_[0] &= ~0x00000002u;
}
void CS_OxApplyForBanker::clear_money() {
  money_ = GOOGLE_LONGLONG(0);
  clear_has_money();
}
::google::protobuf::int64 CS_OxApplyForBanker::money() const {
  // @@protoc_insertion_point(field_get:CS_OxApplyForBanker.money)
  return money_;
}
void CS_OxApplyForBanker::set_money(::google::protobuf::int64 value) {
  set_has_money();
  money_ = value;
  // @@protoc_insertion_point(field_set:CS_OxApplyForBanker.money)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CS_OxLeaveForBanker::kGuidFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CS_OxLeaveForBanker::CS_OxLeaveForBanker()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_public_5fox_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:CS_OxLeaveForBanker)
}
CS_OxLeaveForBanker::CS_OxLeaveForBanker(const CS_OxLeaveForBanker& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  guid_ = from.guid_;
  // @@protoc_insertion_point(copy_constructor:CS_OxLeaveForBanker)
}

void CS_OxLeaveForBanker::SharedCtor() {
  _cached_size_ = 0;
  guid_ = 0;
}

CS_OxLeaveForBanker::~CS_OxLeaveForBanker() {
  // @@protoc_insertion_point(destructor:CS_OxLeaveForBanker)
  SharedDtor();
}

void CS_OxLeaveForBanker::SharedDtor() {
}

void CS_OxLeaveForBanker::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CS_OxLeaveForBanker::descriptor() {
  protobuf_public_5fox_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_public_5fox_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CS_OxLeaveForBanker& CS_OxLeaveForBanker::default_instance() {
  protobuf_public_5fox_2eproto::InitDefaults();
  return *internal_default_instance();
}

CS_OxLeaveForBanker* CS_OxLeaveForBanker::New(::google::protobuf::Arena* arena) const {
  CS_OxLeaveForBanker* n = new CS_OxLeaveForBanker;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CS_OxLeaveForBanker::Clear() {
// @@protoc_insertion_point(message_clear_start:CS_OxLeaveForBanker)
  guid_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CS_OxLeaveForBanker::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CS_OxLeaveForBanker)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 guid = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_guid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &guid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CS_OxLeaveForBanker)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CS_OxLeaveForBanker)
  return false;
#undef DO_
}

void CS_OxLeaveForBanker::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CS_OxLeaveForBanker)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 guid = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->guid(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CS_OxLeaveForBanker)
}

::google::protobuf::uint8* CS_OxLeaveForBanker::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CS_OxLeaveForBanker)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 guid = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->guid(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CS_OxLeaveForBanker)
  return target;
}

size_t CS_OxLeaveForBanker::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CS_OxLeaveForBanker)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // optional int32 guid = 1;
  if (has_guid()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->guid());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CS_OxLeaveForBanker::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CS_OxLeaveForBanker)
  GOOGLE_DCHECK_NE(&from, this);
  const CS_OxLeaveForBanker* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CS_OxLeaveForBanker>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CS_OxLeaveForBanker)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CS_OxLeaveForBanker)
    MergeFrom(*source);
  }
}

void CS_OxLeaveForBanker::MergeFrom(const CS_OxLeaveForBanker& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CS_OxLeaveForBanker)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_guid()) {
    set_guid(from.guid());
  }
}

void CS_OxLeaveForBanker::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CS_OxLeaveForBanker)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CS_OxLeaveForBanker::CopyFrom(const CS_OxLeaveForBanker& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CS_OxLeaveForBanker)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CS_OxLeaveForBanker::IsInitialized() const {
  return true;
}

void CS_OxLeaveForBanker::Swap(CS_OxLeaveForBanker* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CS_OxLeaveForBanker::InternalSwap(CS_OxLeaveForBanker* other) {
  std::swap(guid_, other->guid_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CS_OxLeaveForBanker::GetMetadata() const {
  protobuf_public_5fox_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_public_5fox_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CS_OxLeaveForBanker

// optional int32 guid = 1;
bool CS_OxLeaveForBanker::has_guid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CS_OxLeaveForBanker::set_has_guid() {
  _has_bits_[0] |= 0x00000001u;
}
void CS_OxLeaveForBanker::clear_has_guid() {
  _has_bits_[0] &= ~0x00000001u;
}
void CS_OxLeaveForBanker::clear_guid() {
  guid_ = 0;
  clear_has_guid();
}
::google::protobuf::int32 CS_OxLeaveForBanker::guid() const {
  // @@protoc_insertion_point(field_get:CS_OxLeaveForBanker.guid)
  return guid_;
}
void CS_OxLeaveForBanker::set_guid(::google::protobuf::int32 value) {
  set_has_guid();
  guid_ = value;
  // @@protoc_insertion_point(field_set:CS_OxLeaveForBanker.guid)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CS_OxCurBankerLeave::kGuidFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CS_OxCurBankerLeave::CS_OxCurBankerLeave()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_public_5fox_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:CS_OxCurBankerLeave)
}
CS_OxCurBankerLeave::CS_OxCurBankerLeave(const CS_OxCurBankerLeave& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  guid_ = from.guid_;
  // @@protoc_insertion_point(copy_constructor:CS_OxCurBankerLeave)
}

void CS_OxCurBankerLeave::SharedCtor() {
  _cached_size_ = 0;
  guid_ = 0;
}

CS_OxCurBankerLeave::~CS_OxCurBankerLeave() {
  // @@protoc_insertion_point(destructor:CS_OxCurBankerLeave)
  SharedDtor();
}

void CS_OxCurBankerLeave::SharedDtor() {
}

void CS_OxCurBankerLeave::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CS_OxCurBankerLeave::descriptor() {
  protobuf_public_5fox_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_public_5fox_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CS_OxCurBankerLeave& CS_OxCurBankerLeave::default_instance() {
  protobuf_public_5fox_2eproto::InitDefaults();
  return *internal_default_instance();
}

CS_OxCurBankerLeave* CS_OxCurBankerLeave::New(::google::protobuf::Arena* arena) const {
  CS_OxCurBankerLeave* n = new CS_OxCurBankerLeave;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CS_OxCurBankerLeave::Clear() {
// @@protoc_insertion_point(message_clear_start:CS_OxCurBankerLeave)
  guid_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CS_OxCurBankerLeave::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CS_OxCurBankerLeave)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 guid = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_guid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &guid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CS_OxCurBankerLeave)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CS_OxCurBankerLeave)
  return false;
#undef DO_
}

void CS_OxCurBankerLeave::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CS_OxCurBankerLeave)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 guid = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->guid(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CS_OxCurBankerLeave)
}

::google::protobuf::uint8* CS_OxCurBankerLeave::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CS_OxCurBankerLeave)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 guid = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->guid(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CS_OxCurBankerLeave)
  return target;
}

size_t CS_OxCurBankerLeave::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CS_OxCurBankerLeave)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // optional int32 guid = 1;
  if (has_guid()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->guid());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CS_OxCurBankerLeave::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CS_OxCurBankerLeave)
  GOOGLE_DCHECK_NE(&from, this);
  const CS_OxCurBankerLeave* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CS_OxCurBankerLeave>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CS_OxCurBankerLeave)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CS_OxCurBankerLeave)
    MergeFrom(*source);
  }
}

void CS_OxCurBankerLeave::MergeFrom(const CS_OxCurBankerLeave& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CS_OxCurBankerLeave)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_guid()) {
    set_guid(from.guid());
  }
}

void CS_OxCurBankerLeave::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CS_OxCurBankerLeave)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CS_OxCurBankerLeave::CopyFrom(const CS_OxCurBankerLeave& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CS_OxCurBankerLeave)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CS_OxCurBankerLeave::IsInitialized() const {
  return true;
}

void CS_OxCurBankerLeave::Swap(CS_OxCurBankerLeave* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CS_OxCurBankerLeave::InternalSwap(CS_OxCurBankerLeave* other) {
  std::swap(guid_, other->guid_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CS_OxCurBankerLeave::GetMetadata() const {
  protobuf_public_5fox_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_public_5fox_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CS_OxCurBankerLeave

// optional int32 guid = 1;
bool CS_OxCurBankerLeave::has_guid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CS_OxCurBankerLeave::set_has_guid() {
  _has_bits_[0] |= 0x00000001u;
}
void CS_OxCurBankerLeave::clear_has_guid() {
  _has_bits_[0] &= ~0x00000001u;
}
void CS_OxCurBankerLeave::clear_guid() {
  guid_ = 0;
  clear_has_guid();
}
::google::protobuf::int32 CS_OxCurBankerLeave::guid() const {
  // @@protoc_insertion_point(field_get:CS_OxCurBankerLeave.guid)
  return guid_;
}
void CS_OxCurBankerLeave::set_guid(::google::protobuf::int32 value) {
  set_has_guid();
  guid_ = value;
  // @@protoc_insertion_point(field_set:CS_OxCurBankerLeave.guid)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SC_OxSatusAndDownTime::kStatusFieldNumber;
const int SC_OxSatusAndDownTime::kCountDownTimeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SC_OxSatusAndDownTime::SC_OxSatusAndDownTime()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_public_5fox_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:SC_OxSatusAndDownTime)
}
SC_OxSatusAndDownTime::SC_OxSatusAndDownTime(const SC_OxSatusAndDownTime& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&status_, &from.status_,
    reinterpret_cast<char*>(&count_down_time_) -
    reinterpret_cast<char*>(&status_) + sizeof(count_down_time_));
  // @@protoc_insertion_point(copy_constructor:SC_OxSatusAndDownTime)
}

void SC_OxSatusAndDownTime::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&status_, 0, reinterpret_cast<char*>(&count_down_time_) -
    reinterpret_cast<char*>(&status_) + sizeof(count_down_time_));
}

SC_OxSatusAndDownTime::~SC_OxSatusAndDownTime() {
  // @@protoc_insertion_point(destructor:SC_OxSatusAndDownTime)
  SharedDtor();
}

void SC_OxSatusAndDownTime::SharedDtor() {
}

void SC_OxSatusAndDownTime::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SC_OxSatusAndDownTime::descriptor() {
  protobuf_public_5fox_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_public_5fox_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const SC_OxSatusAndDownTime& SC_OxSatusAndDownTime::default_instance() {
  protobuf_public_5fox_2eproto::InitDefaults();
  return *internal_default_instance();
}

SC_OxSatusAndDownTime* SC_OxSatusAndDownTime::New(::google::protobuf::Arena* arena) const {
  SC_OxSatusAndDownTime* n = new SC_OxSatusAndDownTime;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SC_OxSatusAndDownTime::Clear() {
// @@protoc_insertion_point(message_clear_start:SC_OxSatusAndDownTime)
  if (_has_bits_[0 / 32] & 3u) {
    ::memset(&status_, 0, reinterpret_cast<char*>(&count_down_time_) -
      reinterpret_cast<char*>(&status_) + sizeof(count_down_time_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool SC_OxSatusAndDownTime::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:SC_OxSatusAndDownTime)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 status = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_status();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &status_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 count_down_time = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_count_down_time();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &count_down_time_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:SC_OxSatusAndDownTime)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:SC_OxSatusAndDownTime)
  return false;
#undef DO_
}

void SC_OxSatusAndDownTime::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:SC_OxSatusAndDownTime)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 status = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->status(), output);
  }

  // optional int32 count_down_time = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->count_down_time(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:SC_OxSatusAndDownTime)
}

::google::protobuf::uint8* SC_OxSatusAndDownTime::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:SC_OxSatusAndDownTime)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 status = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->status(), target);
  }

  // optional int32 count_down_time = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->count_down_time(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SC_OxSatusAndDownTime)
  return target;
}

size_t SC_OxSatusAndDownTime::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SC_OxSatusAndDownTime)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 3u) {
    // optional int32 status = 1;
    if (has_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->status());
    }

    // optional int32 count_down_time = 2;
    if (has_count_down_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->count_down_time());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SC_OxSatusAndDownTime::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:SC_OxSatusAndDownTime)
  GOOGLE_DCHECK_NE(&from, this);
  const SC_OxSatusAndDownTime* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SC_OxSatusAndDownTime>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:SC_OxSatusAndDownTime)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:SC_OxSatusAndDownTime)
    MergeFrom(*source);
  }
}

void SC_OxSatusAndDownTime::MergeFrom(const SC_OxSatusAndDownTime& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:SC_OxSatusAndDownTime)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      status_ = from.status_;
    }
    if (cached_has_bits & 0x00000002u) {
      count_down_time_ = from.count_down_time_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void SC_OxSatusAndDownTime::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:SC_OxSatusAndDownTime)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SC_OxSatusAndDownTime::CopyFrom(const SC_OxSatusAndDownTime& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SC_OxSatusAndDownTime)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SC_OxSatusAndDownTime::IsInitialized() const {
  return true;
}

void SC_OxSatusAndDownTime::Swap(SC_OxSatusAndDownTime* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SC_OxSatusAndDownTime::InternalSwap(SC_OxSatusAndDownTime* other) {
  std::swap(status_, other->status_);
  std::swap(count_down_time_, other->count_down_time_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SC_OxSatusAndDownTime::GetMetadata() const {
  protobuf_public_5fox_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_public_5fox_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SC_OxSatusAndDownTime

// optional int32 status = 1;
bool SC_OxSatusAndDownTime::has_status() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void SC_OxSatusAndDownTime::set_has_status() {
  _has_bits_[0] |= 0x00000001u;
}
void SC_OxSatusAndDownTime::clear_has_status() {
  _has_bits_[0] &= ~0x00000001u;
}
void SC_OxSatusAndDownTime::clear_status() {
  status_ = 0;
  clear_has_status();
}
::google::protobuf::int32 SC_OxSatusAndDownTime::status() const {
  // @@protoc_insertion_point(field_get:SC_OxSatusAndDownTime.status)
  return status_;
}
void SC_OxSatusAndDownTime::set_status(::google::protobuf::int32 value) {
  set_has_status();
  status_ = value;
  // @@protoc_insertion_point(field_set:SC_OxSatusAndDownTime.status)
}

// optional int32 count_down_time = 2;
bool SC_OxSatusAndDownTime::has_count_down_time() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void SC_OxSatusAndDownTime::set_has_count_down_time() {
  _has_bits_[0] |= 0x00000002u;
}
void SC_OxSatusAndDownTime::clear_has_count_down_time() {
  _has_bits_[0] &= ~0x00000002u;
}
void SC_OxSatusAndDownTime::clear_count_down_time() {
  count_down_time_ = 0;
  clear_has_count_down_time();
}
::google::protobuf::int32 SC_OxSatusAndDownTime::count_down_time() const {
  // @@protoc_insertion_point(field_get:SC_OxSatusAndDownTime.count_down_time)
  return count_down_time_;
}
void SC_OxSatusAndDownTime::set_count_down_time(::google::protobuf::int32 value) {
  set_has_count_down_time();
  count_down_time_ = value;
  // @@protoc_insertion_point(field_set:SC_OxSatusAndDownTime.count_down_time)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Oxplayer_info::kGuidFieldNumber;
const int Oxplayer_info::kNicknameFieldNumber;
const int Oxplayer_info::kMoneyFieldNumber;
const int Oxplayer_info::kHeaderIconFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Oxplayer_info::Oxplayer_info()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_public_5fox_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:Oxplayer_info)
}
Oxplayer_info::Oxplayer_info(const Oxplayer_info& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  nickname_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_nickname()) {
    nickname_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.nickname_);
  }
  ::memcpy(&guid_, &from.guid_,
    reinterpret_cast<char*>(&money_) -
    reinterpret_cast<char*>(&guid_) + sizeof(money_));
  // @@protoc_insertion_point(copy_constructor:Oxplayer_info)
}

void Oxplayer_info::SharedCtor() {
  _cached_size_ = 0;
  nickname_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&guid_, 0, reinterpret_cast<char*>(&money_) -
    reinterpret_cast<char*>(&guid_) + sizeof(money_));
}

Oxplayer_info::~Oxplayer_info() {
  // @@protoc_insertion_point(destructor:Oxplayer_info)
  SharedDtor();
}

void Oxplayer_info::SharedDtor() {
  nickname_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void Oxplayer_info::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Oxplayer_info::descriptor() {
  protobuf_public_5fox_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_public_5fox_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Oxplayer_info& Oxplayer_info::default_instance() {
  protobuf_public_5fox_2eproto::InitDefaults();
  return *internal_default_instance();
}

Oxplayer_info* Oxplayer_info::New(::google::protobuf::Arena* arena) const {
  Oxplayer_info* n = new Oxplayer_info;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Oxplayer_info::Clear() {
// @@protoc_insertion_point(message_clear_start:Oxplayer_info)
  if (has_nickname()) {
    GOOGLE_DCHECK(!nickname_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
    (*nickname_.UnsafeRawStringPointer())->clear();
  }
  if (_has_bits_[0 / 32] & 14u) {
    ::memset(&guid_, 0, reinterpret_cast<char*>(&money_) -
      reinterpret_cast<char*>(&guid_) + sizeof(money_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool Oxplayer_info::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Oxplayer_info)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 guid = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_guid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &guid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string nickname = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_nickname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->nickname().data(), this->nickname().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "Oxplayer_info.nickname");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 money = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {
          set_has_money();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &money_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 header_icon = 4 [default = 0];
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u)) {
          set_has_header_icon();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &header_icon_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Oxplayer_info)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Oxplayer_info)
  return false;
#undef DO_
}

void Oxplayer_info::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Oxplayer_info)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 guid = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->guid(), output);
  }

  // optional string nickname = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->nickname().data(), this->nickname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "Oxplayer_info.nickname");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->nickname(), output);
  }

  // optional int64 money = 3;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->money(), output);
  }

  // optional int32 header_icon = 4 [default = 0];
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->header_icon(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Oxplayer_info)
}

::google::protobuf::uint8* Oxplayer_info::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Oxplayer_info)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 guid = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->guid(), target);
  }

  // optional string nickname = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->nickname().data(), this->nickname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "Oxplayer_info.nickname");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->nickname(), target);
  }

  // optional int64 money = 3;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->money(), target);
  }

  // optional int32 header_icon = 4 [default = 0];
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->header_icon(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Oxplayer_info)
  return target;
}

size_t Oxplayer_info::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Oxplayer_info)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 15u) {
    // optional string nickname = 2;
    if (has_nickname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->nickname());
    }

    // optional int32 guid = 1;
    if (has_guid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->guid());
    }

    // optional int32 header_icon = 4 [default = 0];
    if (has_header_icon()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->header_icon());
    }

    // optional int64 money = 3;
    if (has_money()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->money());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Oxplayer_info::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Oxplayer_info)
  GOOGLE_DCHECK_NE(&from, this);
  const Oxplayer_info* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Oxplayer_info>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Oxplayer_info)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Oxplayer_info)
    MergeFrom(*source);
  }
}

void Oxplayer_info::MergeFrom(const Oxplayer_info& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Oxplayer_info)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 15u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_nickname();
      nickname_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.nickname_);
    }
    if (cached_has_bits & 0x00000002u) {
      guid_ = from.guid_;
    }
    if (cached_has_bits & 0x00000004u) {
      header_icon_ = from.header_icon_;
    }
    if (cached_has_bits & 0x00000008u) {
      money_ = from.money_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void Oxplayer_info::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Oxplayer_info)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Oxplayer_info::CopyFrom(const Oxplayer_info& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Oxplayer_info)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Oxplayer_info::IsInitialized() const {
  return true;
}

void Oxplayer_info::Swap(Oxplayer_info* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Oxplayer_info::InternalSwap(Oxplayer_info* other) {
  nickname_.Swap(&other->nickname_);
  std::swap(guid_, other->guid_);
  std::swap(header_icon_, other->header_icon_);
  std::swap(money_, other->money_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Oxplayer_info::GetMetadata() const {
  protobuf_public_5fox_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_public_5fox_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Oxplayer_info

// optional int32 guid = 1;
bool Oxplayer_info::has_guid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void Oxplayer_info::set_has_guid() {
  _has_bits_[0] |= 0x00000002u;
}
void Oxplayer_info::clear_has_guid() {
  _has_bits_[0] &= ~0x00000002u;
}
void Oxplayer_info::clear_guid() {
  guid_ = 0;
  clear_has_guid();
}
::google::protobuf::int32 Oxplayer_info::guid() const {
  // @@protoc_insertion_point(field_get:Oxplayer_info.guid)
  return guid_;
}
void Oxplayer_info::set_guid(::google::protobuf::int32 value) {
  set_has_guid();
  guid_ = value;
  // @@protoc_insertion_point(field_set:Oxplayer_info.guid)
}

// optional string nickname = 2;
bool Oxplayer_info::has_nickname() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void Oxplayer_info::set_has_nickname() {
  _has_bits_[0] |= 0x00000001u;
}
void Oxplayer_info::clear_has_nickname() {
  _has_bits_[0] &= ~0x00000001u;
}
void Oxplayer_info::clear_nickname() {
  nickname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_nickname();
}
const ::std::string& Oxplayer_info::nickname() const {
  // @@protoc_insertion_point(field_get:Oxplayer_info.nickname)
  return nickname_.GetNoArena();
}
void Oxplayer_info::set_nickname(const ::std::string& value) {
  set_has_nickname();
  nickname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Oxplayer_info.nickname)
}
#if LANG_CXX11
void Oxplayer_info::set_nickname(::std::string&& value) {
  set_has_nickname();
  nickname_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Oxplayer_info.nickname)
}
#endif
void Oxplayer_info::set_nickname(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_nickname();
  nickname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Oxplayer_info.nickname)
}
void Oxplayer_info::set_nickname(const char* value, size_t size) {
  set_has_nickname();
  nickname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Oxplayer_info.nickname)
}
::std::string* Oxplayer_info::mutable_nickname() {
  set_has_nickname();
  // @@protoc_insertion_point(field_mutable:Oxplayer_info.nickname)
  return nickname_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* Oxplayer_info::release_nickname() {
  // @@protoc_insertion_point(field_release:Oxplayer_info.nickname)
  clear_has_nickname();
  return nickname_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Oxplayer_info::set_allocated_nickname(::std::string* nickname) {
  if (nickname != NULL) {
    set_has_nickname();
  } else {
    clear_has_nickname();
  }
  nickname_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), nickname);
  // @@protoc_insertion_point(field_set_allocated:Oxplayer_info.nickname)
}

// optional int64 money = 3;
bool Oxplayer_info::has_money() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void Oxplayer_info::set_has_money() {
  _has_bits_[0] |= 0x00000008u;
}
void Oxplayer_info::clear_has_money() {
  _has_bits_[0] &= ~0x00000008u;
}
void Oxplayer_info::clear_money() {
  money_ = GOOGLE_LONGLONG(0);
  clear_has_money();
}
::google::protobuf::int64 Oxplayer_info::money() const {
  // @@protoc_insertion_point(field_get:Oxplayer_info.money)
  return money_;
}
void Oxplayer_info::set_money(::google::protobuf::int64 value) {
  set_has_money();
  money_ = value;
  // @@protoc_insertion_point(field_set:Oxplayer_info.money)
}

// optional int32 header_icon = 4 [default = 0];
bool Oxplayer_info::has_header_icon() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void Oxplayer_info::set_has_header_icon() {
  _has_bits_[0] |= 0x00000004u;
}
void Oxplayer_info::clear_has_header_icon() {
  _has_bits_[0] &= ~0x00000004u;
}
void Oxplayer_info::clear_header_icon() {
  header_icon_ = 0;
  clear_has_header_icon();
}
::google::protobuf::int32 Oxplayer_info::header_icon() const {
  // @@protoc_insertion_point(field_get:Oxplayer_info.header_icon)
  return header_icon_;
}
void Oxplayer_info::set_header_icon(::google::protobuf::int32 value) {
  set_has_header_icon();
  header_icon_ = value;
  // @@protoc_insertion_point(field_set:Oxplayer_info.header_icon)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SC_OxPlayerConnection::kPbPlayerInfoFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SC_OxPlayerConnection::SC_OxPlayerConnection()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_public_5fox_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:SC_OxPlayerConnection)
}
SC_OxPlayerConnection::SC_OxPlayerConnection(const SC_OxPlayerConnection& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      pb_player_info_(from.pb_player_info_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:SC_OxPlayerConnection)
}

void SC_OxPlayerConnection::SharedCtor() {
  _cached_size_ = 0;
}

SC_OxPlayerConnection::~SC_OxPlayerConnection() {
  // @@protoc_insertion_point(destructor:SC_OxPlayerConnection)
  SharedDtor();
}

void SC_OxPlayerConnection::SharedDtor() {
}

void SC_OxPlayerConnection::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SC_OxPlayerConnection::descriptor() {
  protobuf_public_5fox_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_public_5fox_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const SC_OxPlayerConnection& SC_OxPlayerConnection::default_instance() {
  protobuf_public_5fox_2eproto::InitDefaults();
  return *internal_default_instance();
}

SC_OxPlayerConnection* SC_OxPlayerConnection::New(::google::protobuf::Arena* arena) const {
  SC_OxPlayerConnection* n = new SC_OxPlayerConnection;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SC_OxPlayerConnection::Clear() {
// @@protoc_insertion_point(message_clear_start:SC_OxPlayerConnection)
  pb_player_info_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool SC_OxPlayerConnection::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:SC_OxPlayerConnection)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .Oxplayer_info pb_player_info = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_pb_player_info()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:SC_OxPlayerConnection)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:SC_OxPlayerConnection)
  return false;
#undef DO_
}

void SC_OxPlayerConnection::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:SC_OxPlayerConnection)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .Oxplayer_info pb_player_info = 1;
  for (unsigned int i = 0, n = this->pb_player_info_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->pb_player_info(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:SC_OxPlayerConnection)
}

::google::protobuf::uint8* SC_OxPlayerConnection::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:SC_OxPlayerConnection)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .Oxplayer_info pb_player_info = 1;
  for (unsigned int i = 0, n = this->pb_player_info_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, this->pb_player_info(i), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SC_OxPlayerConnection)
  return target;
}

size_t SC_OxPlayerConnection::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SC_OxPlayerConnection)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // repeated .Oxplayer_info pb_player_info = 1;
  {
    unsigned int count = this->pb_player_info_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->pb_player_info(i));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SC_OxPlayerConnection::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:SC_OxPlayerConnection)
  GOOGLE_DCHECK_NE(&from, this);
  const SC_OxPlayerConnection* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SC_OxPlayerConnection>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:SC_OxPlayerConnection)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:SC_OxPlayerConnection)
    MergeFrom(*source);
  }
}

void SC_OxPlayerConnection::MergeFrom(const SC_OxPlayerConnection& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:SC_OxPlayerConnection)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  pb_player_info_.MergeFrom(from.pb_player_info_);
}

void SC_OxPlayerConnection::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:SC_OxPlayerConnection)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SC_OxPlayerConnection::CopyFrom(const SC_OxPlayerConnection& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SC_OxPlayerConnection)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SC_OxPlayerConnection::IsInitialized() const {
  return true;
}

void SC_OxPlayerConnection::Swap(SC_OxPlayerConnection* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SC_OxPlayerConnection::InternalSwap(SC_OxPlayerConnection* other) {
  pb_player_info_.InternalSwap(&other->pb_player_info_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SC_OxPlayerConnection::GetMetadata() const {
  protobuf_public_5fox_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_public_5fox_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SC_OxPlayerConnection

// repeated .Oxplayer_info pb_player_info = 1;
int SC_OxPlayerConnection::pb_player_info_size() const {
  return pb_player_info_.size();
}
void SC_OxPlayerConnection::clear_pb_player_info() {
  pb_player_info_.Clear();
}
const ::Oxplayer_info& SC_OxPlayerConnection::pb_player_info(int index) const {
  // @@protoc_insertion_point(field_get:SC_OxPlayerConnection.pb_player_info)
  return pb_player_info_.Get(index);
}
::Oxplayer_info* SC_OxPlayerConnection::mutable_pb_player_info(int index) {
  // @@protoc_insertion_point(field_mutable:SC_OxPlayerConnection.pb_player_info)
  return pb_player_info_.Mutable(index);
}
::Oxplayer_info* SC_OxPlayerConnection::add_pb_player_info() {
  // @@protoc_insertion_point(field_add:SC_OxPlayerConnection.pb_player_info)
  return pb_player_info_.Add();
}
::google::protobuf::RepeatedPtrField< ::Oxplayer_info >*
SC_OxPlayerConnection::mutable_pb_player_info() {
  // @@protoc_insertion_point(field_mutable_list:SC_OxPlayerConnection.pb_player_info)
  return &pb_player_info_;
}
const ::google::protobuf::RepeatedPtrField< ::Oxplayer_info >&
SC_OxPlayerConnection::pb_player_info() const {
  // @@protoc_insertion_point(field_list:SC_OxPlayerConnection.pb_player_info)
  return pb_player_info_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Player_bet_info::kWhichAreaFieldNumber;
const int Player_bet_info::kBetMoneyFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Player_bet_info::Player_bet_info()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_public_5fox_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:Player_bet_info)
}
Player_bet_info::Player_bet_info(const Player_bet_info& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&bet_money_, &from.bet_money_,
    reinterpret_cast<char*>(&which_area_) -
    reinterpret_cast<char*>(&bet_money_) + sizeof(which_area_));
  // @@protoc_insertion_point(copy_constructor:Player_bet_info)
}

void Player_bet_info::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&bet_money_, 0, reinterpret_cast<char*>(&which_area_) -
    reinterpret_cast<char*>(&bet_money_) + sizeof(which_area_));
}

Player_bet_info::~Player_bet_info() {
  // @@protoc_insertion_point(destructor:Player_bet_info)
  SharedDtor();
}

void Player_bet_info::SharedDtor() {
}

void Player_bet_info::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Player_bet_info::descriptor() {
  protobuf_public_5fox_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_public_5fox_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Player_bet_info& Player_bet_info::default_instance() {
  protobuf_public_5fox_2eproto::InitDefaults();
  return *internal_default_instance();
}

Player_bet_info* Player_bet_info::New(::google::protobuf::Arena* arena) const {
  Player_bet_info* n = new Player_bet_info;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Player_bet_info::Clear() {
// @@protoc_insertion_point(message_clear_start:Player_bet_info)
  if (_has_bits_[0 / 32] & 3u) {
    ::memset(&bet_money_, 0, reinterpret_cast<char*>(&which_area_) -
      reinterpret_cast<char*>(&bet_money_) + sizeof(which_area_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool Player_bet_info::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Player_bet_info)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 which_area = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_which_area();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &which_area_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 bet_money = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_bet_money();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &bet_money_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Player_bet_info)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Player_bet_info)
  return false;
#undef DO_
}

void Player_bet_info::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Player_bet_info)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 which_area = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->which_area(), output);
  }

  // optional int64 bet_money = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->bet_money(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Player_bet_info)
}

::google::protobuf::uint8* Player_bet_info::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Player_bet_info)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 which_area = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->which_area(), target);
  }

  // optional int64 bet_money = 2;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->bet_money(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Player_bet_info)
  return target;
}

size_t Player_bet_info::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Player_bet_info)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 3u) {
    // optional int64 bet_money = 2;
    if (has_bet_money()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->bet_money());
    }

    // optional int32 which_area = 1;
    if (has_which_area()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->which_area());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Player_bet_info::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Player_bet_info)
  GOOGLE_DCHECK_NE(&from, this);
  const Player_bet_info* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Player_bet_info>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Player_bet_info)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Player_bet_info)
    MergeFrom(*source);
  }
}

void Player_bet_info::MergeFrom(const Player_bet_info& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Player_bet_info)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      bet_money_ = from.bet_money_;
    }
    if (cached_has_bits & 0x00000002u) {
      which_area_ = from.which_area_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void Player_bet_info::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Player_bet_info)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Player_bet_info::CopyFrom(const Player_bet_info& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Player_bet_info)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Player_bet_info::IsInitialized() const {
  return true;
}

void Player_bet_info::Swap(Player_bet_info* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Player_bet_info::InternalSwap(Player_bet_info* other) {
  std::swap(bet_money_, other->bet_money_);
  std::swap(which_area_, other->which_area_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Player_bet_info::GetMetadata() const {
  protobuf_public_5fox_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_public_5fox_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Player_bet_info

// optional int32 which_area = 1;
bool Player_bet_info::has_which_area() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void Player_bet_info::set_has_which_area() {
  _has_bits_[0] |= 0x00000002u;
}
void Player_bet_info::clear_has_which_area() {
  _has_bits_[0] &= ~0x00000002u;
}
void Player_bet_info::clear_which_area() {
  which_area_ = 0;
  clear_has_which_area();
}
::google::protobuf::int32 Player_bet_info::which_area() const {
  // @@protoc_insertion_point(field_get:Player_bet_info.which_area)
  return which_area_;
}
void Player_bet_info::set_which_area(::google::protobuf::int32 value) {
  set_has_which_area();
  which_area_ = value;
  // @@protoc_insertion_point(field_set:Player_bet_info.which_area)
}

// optional int64 bet_money = 2;
bool Player_bet_info::has_bet_money() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void Player_bet_info::set_has_bet_money() {
  _has_bits_[0] |= 0x00000001u;
}
void Player_bet_info::clear_has_bet_money() {
  _has_bits_[0] &= ~0x00000001u;
}
void Player_bet_info::clear_bet_money() {
  bet_money_ = GOOGLE_LONGLONG(0);
  clear_has_bet_money();
}
::google::protobuf::int64 Player_bet_info::bet_money() const {
  // @@protoc_insertion_point(field_get:Player_bet_info.bet_money)
  return bet_money_;
}
void Player_bet_info::set_bet_money(::google::protobuf::int64 value) {
  set_has_bet_money();
  bet_money_ = value;
  // @@protoc_insertion_point(field_set:Player_bet_info.bet_money)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CardResult::kScoreAreaFieldNumber;
const int CardResult::kCardTypeFieldNumber;
const int CardResult::kCardTimesFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CardResult::CardResult()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_public_5fox_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:CardResult)
}
CardResult::CardResult(const CardResult& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&score_area_, &from.score_area_,
    reinterpret_cast<char*>(&card_times_) -
    reinterpret_cast<char*>(&score_area_) + sizeof(card_times_));
  // @@protoc_insertion_point(copy_constructor:CardResult)
}

void CardResult::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&score_area_, 0, reinterpret_cast<char*>(&card_times_) -
    reinterpret_cast<char*>(&score_area_) + sizeof(card_times_));
}

CardResult::~CardResult() {
  // @@protoc_insertion_point(destructor:CardResult)
  SharedDtor();
}

void CardResult::SharedDtor() {
}

void CardResult::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CardResult::descriptor() {
  protobuf_public_5fox_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_public_5fox_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CardResult& CardResult::default_instance() {
  protobuf_public_5fox_2eproto::InitDefaults();
  return *internal_default_instance();
}

CardResult* CardResult::New(::google::protobuf::Arena* arena) const {
  CardResult* n = new CardResult;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CardResult::Clear() {
// @@protoc_insertion_point(message_clear_start:CardResult)
  if (_has_bits_[0 / 32] & 7u) {
    ::memset(&score_area_, 0, reinterpret_cast<char*>(&card_times_) -
      reinterpret_cast<char*>(&score_area_) + sizeof(card_times_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CardResult::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CardResult)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 score_area = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_score_area();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &score_area_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 card_type = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_card_type();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &card_type_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 card_times = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {
          set_has_card_times();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &card_times_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CardResult)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CardResult)
  return false;
#undef DO_
}

void CardResult::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CardResult)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 score_area = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->score_area(), output);
  }

  // optional int32 card_type = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->card_type(), output);
  }

  // optional int32 card_times = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->card_times(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CardResult)
}

::google::protobuf::uint8* CardResult::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CardResult)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 score_area = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->score_area(), target);
  }

  // optional int32 card_type = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->card_type(), target);
  }

  // optional int32 card_times = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->card_times(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CardResult)
  return target;
}

size_t CardResult::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CardResult)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 7u) {
    // optional int32 score_area = 1;
    if (has_score_area()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->score_area());
    }

    // optional int32 card_type = 2;
    if (has_card_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->card_type());
    }

    // optional int32 card_times = 3;
    if (has_card_times()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->card_times());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CardResult::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CardResult)
  GOOGLE_DCHECK_NE(&from, this);
  const CardResult* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CardResult>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CardResult)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CardResult)
    MergeFrom(*source);
  }
}

void CardResult::MergeFrom(const CardResult& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CardResult)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      score_area_ = from.score_area_;
    }
    if (cached_has_bits & 0x00000002u) {
      card_type_ = from.card_type_;
    }
    if (cached_has_bits & 0x00000004u) {
      card_times_ = from.card_times_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CardResult::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CardResult)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CardResult::CopyFrom(const CardResult& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CardResult)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CardResult::IsInitialized() const {
  return true;
}

void CardResult::Swap(CardResult* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CardResult::InternalSwap(CardResult* other) {
  std::swap(score_area_, other->score_area_);
  std::swap(card_type_, other->card_type_);
  std::swap(card_times_, other->card_times_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CardResult::GetMetadata() const {
  protobuf_public_5fox_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_public_5fox_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CardResult

// optional int32 score_area = 1;
bool CardResult::has_score_area() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CardResult::set_has_score_area() {
  _has_bits_[0] |= 0x00000001u;
}
void CardResult::clear_has_score_area() {
  _has_bits_[0] &= ~0x00000001u;
}
void CardResult::clear_score_area() {
  score_area_ = 0;
  clear_has_score_area();
}
::google::protobuf::int32 CardResult::score_area() const {
  // @@protoc_insertion_point(field_get:CardResult.score_area)
  return score_area_;
}
void CardResult::set_score_area(::google::protobuf::int32 value) {
  set_has_score_area();
  score_area_ = value;
  // @@protoc_insertion_point(field_set:CardResult.score_area)
}

// optional int32 card_type = 2;
bool CardResult::has_card_type() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CardResult::set_has_card_type() {
  _has_bits_[0] |= 0x00000002u;
}
void CardResult::clear_has_card_type() {
  _has_bits_[0] &= ~0x00000002u;
}
void CardResult::clear_card_type() {
  card_type_ = 0;
  clear_has_card_type();
}
::google::protobuf::int32 CardResult::card_type() const {
  // @@protoc_insertion_point(field_get:CardResult.card_type)
  return card_type_;
}
void CardResult::set_card_type(::google::protobuf::int32 value) {
  set_has_card_type();
  card_type_ = value;
  // @@protoc_insertion_point(field_set:CardResult.card_type)
}

// optional int32 card_times = 3;
bool CardResult::has_card_times() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void CardResult::set_has_card_times() {
  _has_bits_[0] |= 0x00000004u;
}
void CardResult::clear_has_card_times() {
  _has_bits_[0] &= ~0x00000004u;
}
void CardResult::clear_card_times() {
  card_times_ = 0;
  clear_has_card_times();
}
::google::protobuf::int32 CardResult::card_times() const {
  // @@protoc_insertion_point(field_get:CardResult.card_times)
  return card_times_;
}
void CardResult::set_card_times(::google::protobuf::int32 value) {
  set_has_card_times();
  card_times_ = value;
  // @@protoc_insertion_point(field_set:CardResult.card_times)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SC_OxTableInfo::kStatusFieldNumber;
const int SC_OxTableInfo::kCountDownTimeFieldNumber;
const int SC_OxTableInfo::kPbCurBankerFieldNumber;
const int SC_OxTableInfo::kPbPlayerInfoListFieldNumber;
const int SC_OxTableInfo::kPbBankerListFieldNumber;
const int SC_OxTableInfo::kPbAreaInfoFieldNumber;
const int SC_OxTableInfo::kPbPlayerAreaBetInfoFieldNumber;
const int SC_OxTableInfo::kPbCardsFieldNumber;
const int SC_OxTableInfo::kPbResultFieldNumber;
const int SC_OxTableInfo::kPbConcludeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SC_OxTableInfo::SC_OxTableInfo()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_public_5fox_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:SC_OxTableInfo)
}
SC_OxTableInfo::SC_OxTableInfo(const SC_OxTableInfo& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      pb_player_info_list_(from.pb_player_info_list_),
      pb_banker_list_(from.pb_banker_list_),
      pb_player_area_bet_info_(from.pb_player_area_bet_info_),
      pb_cards_(from.pb_cards_),
      pb_result_(from.pb_result_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_pb_curbanker()) {
    pb_curbanker_ = new ::BankerInfo(*from.pb_curbanker_);
  } else {
    pb_curbanker_ = NULL;
  }
  if (from.has_pb_areainfo()) {
    pb_areainfo_ = new ::EveryAreaInfo(*from.pb_areainfo_);
  } else {
    pb_areainfo_ = NULL;
  }
  if (from.has_pb_conclude()) {
    pb_conclude_ = new ::OxPlayerConclude(*from.pb_conclude_);
  } else {
    pb_conclude_ = NULL;
  }
  ::memcpy(&status_, &from.status_,
    reinterpret_cast<char*>(&count_down_time_) -
    reinterpret_cast<char*>(&status_) + sizeof(count_down_time_));
  // @@protoc_insertion_point(copy_constructor:SC_OxTableInfo)
}

void SC_OxTableInfo::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&pb_curbanker_, 0, reinterpret_cast<char*>(&count_down_time_) -
    reinterpret_cast<char*>(&pb_curbanker_) + sizeof(count_down_time_));
}

SC_OxTableInfo::~SC_OxTableInfo() {
  // @@protoc_insertion_point(destructor:SC_OxTableInfo)
  SharedDtor();
}

void SC_OxTableInfo::SharedDtor() {
  if (this != internal_default_instance()) {
    delete pb_curbanker_;
  }
  if (this != internal_default_instance()) {
    delete pb_areainfo_;
  }
  if (this != internal_default_instance()) {
    delete pb_conclude_;
  }
}

void SC_OxTableInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SC_OxTableInfo::descriptor() {
  protobuf_public_5fox_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_public_5fox_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const SC_OxTableInfo& SC_OxTableInfo::default_instance() {
  protobuf_public_5fox_2eproto::InitDefaults();
  return *internal_default_instance();
}

SC_OxTableInfo* SC_OxTableInfo::New(::google::protobuf::Arena* arena) const {
  SC_OxTableInfo* n = new SC_OxTableInfo;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SC_OxTableInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:SC_OxTableInfo)
  pb_player_info_list_.Clear();
  pb_banker_list_.Clear();
  pb_player_area_bet_info_.Clear();
  pb_cards_.Clear();
  pb_result_.Clear();
  if (_has_bits_[0 / 32] & 7u) {
    if (has_pb_curbanker()) {
      GOOGLE_DCHECK(pb_curbanker_ != NULL);
      pb_curbanker_->::BankerInfo::Clear();
    }
    if (has_pb_areainfo()) {
      GOOGLE_DCHECK(pb_areainfo_ != NULL);
      pb_areainfo_->::EveryAreaInfo::Clear();
    }
    if (has_pb_conclude()) {
      GOOGLE_DCHECK(pb_conclude_ != NULL);
      pb_conclude_->::OxPlayerConclude::Clear();
    }
  }
  if (_has_bits_[0 / 32] & 24u) {
    ::memset(&status_, 0, reinterpret_cast<char*>(&count_down_time_) -
      reinterpret_cast<char*>(&status_) + sizeof(count_down_time_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool SC_OxTableInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:SC_OxTableInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 status = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_status();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &status_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 count_down_time = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_count_down_time();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &count_down_time_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .BankerInfo pb_curBanker = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_pb_curbanker()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .PlayerTopInfo pb_player_info_list = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_pb_player_info_list()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .BankerList pb_banker_list = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_pb_banker_list()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .EveryAreaInfo pb_AreaInfo = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_pb_areainfo()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .Player_bet_info pb_player_area_bet_info = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(58u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_pb_player_area_bet_info()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .Cards pb_cards = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(66u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_pb_cards()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .CardResult pb_result = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(74u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_pb_result()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .OxPlayerConclude pb_conclude = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(82u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_pb_conclude()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:SC_OxTableInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:SC_OxTableInfo)
  return false;
#undef DO_
}

void SC_OxTableInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:SC_OxTableInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 status = 1;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->status(), output);
  }

  // optional int32 count_down_time = 2;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->count_down_time(), output);
  }

  // optional .BankerInfo pb_curBanker = 3;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *this->pb_curbanker_, output);
  }

  // repeated .PlayerTopInfo pb_player_info_list = 4;
  for (unsigned int i = 0, n = this->pb_player_info_list_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->pb_player_info_list(i), output);
  }

  // repeated .BankerList pb_banker_list = 5;
  for (unsigned int i = 0, n = this->pb_banker_list_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->pb_banker_list(i), output);
  }

  // optional .EveryAreaInfo pb_AreaInfo = 6;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, *this->pb_areainfo_, output);
  }

  // repeated .Player_bet_info pb_player_area_bet_info = 7;
  for (unsigned int i = 0, n = this->pb_player_area_bet_info_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->pb_player_area_bet_info(i), output);
  }

  // repeated .Cards pb_cards = 8;
  for (unsigned int i = 0, n = this->pb_cards_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, this->pb_cards(i), output);
  }

  // repeated .CardResult pb_result = 9;
  for (unsigned int i = 0, n = this->pb_result_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      9, this->pb_result(i), output);
  }

  // optional .OxPlayerConclude pb_conclude = 10;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      10, *this->pb_conclude_, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:SC_OxTableInfo)
}

::google::protobuf::uint8* SC_OxTableInfo::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:SC_OxTableInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 status = 1;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->status(), target);
  }

  // optional int32 count_down_time = 2;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->count_down_time(), target);
  }

  // optional .BankerInfo pb_curBanker = 3;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, *this->pb_curbanker_, deterministic, target);
  }

  // repeated .PlayerTopInfo pb_player_info_list = 4;
  for (unsigned int i = 0, n = this->pb_player_info_list_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        4, this->pb_player_info_list(i), deterministic, target);
  }

  // repeated .BankerList pb_banker_list = 5;
  for (unsigned int i = 0, n = this->pb_banker_list_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        5, this->pb_banker_list(i), deterministic, target);
  }

  // optional .EveryAreaInfo pb_AreaInfo = 6;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        6, *this->pb_areainfo_, deterministic, target);
  }

  // repeated .Player_bet_info pb_player_area_bet_info = 7;
  for (unsigned int i = 0, n = this->pb_player_area_bet_info_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        7, this->pb_player_area_bet_info(i), deterministic, target);
  }

  // repeated .Cards pb_cards = 8;
  for (unsigned int i = 0, n = this->pb_cards_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        8, this->pb_cards(i), deterministic, target);
  }

  // repeated .CardResult pb_result = 9;
  for (unsigned int i = 0, n = this->pb_result_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        9, this->pb_result(i), deterministic, target);
  }

  // optional .OxPlayerConclude pb_conclude = 10;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        10, *this->pb_conclude_, deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SC_OxTableInfo)
  return target;
}

size_t SC_OxTableInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SC_OxTableInfo)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // repeated .PlayerTopInfo pb_player_info_list = 4;
  {
    unsigned int count = this->pb_player_info_list_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->pb_player_info_list(i));
    }
  }

  // repeated .BankerList pb_banker_list = 5;
  {
    unsigned int count = this->pb_banker_list_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->pb_banker_list(i));
    }
  }

  // repeated .Player_bet_info pb_player_area_bet_info = 7;
  {
    unsigned int count = this->pb_player_area_bet_info_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->pb_player_area_bet_info(i));
    }
  }

  // repeated .Cards pb_cards = 8;
  {
    unsigned int count = this->pb_cards_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->pb_cards(i));
    }
  }

  // repeated .CardResult pb_result = 9;
  {
    unsigned int count = this->pb_result_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->pb_result(i));
    }
  }

  if (_has_bits_[0 / 32] & 31u) {
    // optional .BankerInfo pb_curBanker = 3;
    if (has_pb_curbanker()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->pb_curbanker_);
    }

    // optional .EveryAreaInfo pb_AreaInfo = 6;
    if (has_pb_areainfo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->pb_areainfo_);
    }

    // optional .OxPlayerConclude pb_conclude = 10;
    if (has_pb_conclude()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->pb_conclude_);
    }

    // optional int32 status = 1;
    if (has_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->status());
    }

    // optional int32 count_down_time = 2;
    if (has_count_down_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->count_down_time());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SC_OxTableInfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:SC_OxTableInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const SC_OxTableInfo* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SC_OxTableInfo>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:SC_OxTableInfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:SC_OxTableInfo)
    MergeFrom(*source);
  }
}

void SC_OxTableInfo::MergeFrom(const SC_OxTableInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:SC_OxTableInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  pb_player_info_list_.MergeFrom(from.pb_player_info_list_);
  pb_banker_list_.MergeFrom(from.pb_banker_list_);
  pb_player_area_bet_info_.MergeFrom(from.pb_player_area_bet_info_);
  pb_cards_.MergeFrom(from.pb_cards_);
  pb_result_.MergeFrom(from.pb_result_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 31u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_pb_curbanker()->::BankerInfo::MergeFrom(from.pb_curbanker());
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_pb_areainfo()->::EveryAreaInfo::MergeFrom(from.pb_areainfo());
    }
    if (cached_has_bits & 0x00000004u) {
      mutable_pb_conclude()->::OxPlayerConclude::MergeFrom(from.pb_conclude());
    }
    if (cached_has_bits & 0x00000008u) {
      status_ = from.status_;
    }
    if (cached_has_bits & 0x00000010u) {
      count_down_time_ = from.count_down_time_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void SC_OxTableInfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:SC_OxTableInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SC_OxTableInfo::CopyFrom(const SC_OxTableInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SC_OxTableInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SC_OxTableInfo::IsInitialized() const {
  return true;
}

void SC_OxTableInfo::Swap(SC_OxTableInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SC_OxTableInfo::InternalSwap(SC_OxTableInfo* other) {
  pb_player_info_list_.InternalSwap(&other->pb_player_info_list_);
  pb_banker_list_.InternalSwap(&other->pb_banker_list_);
  pb_player_area_bet_info_.InternalSwap(&other->pb_player_area_bet_info_);
  pb_cards_.InternalSwap(&other->pb_cards_);
  pb_result_.InternalSwap(&other->pb_result_);
  std::swap(pb_curbanker_, other->pb_curbanker_);
  std::swap(pb_areainfo_, other->pb_areainfo_);
  std::swap(pb_conclude_, other->pb_conclude_);
  std::swap(status_, other->status_);
  std::swap(count_down_time_, other->count_down_time_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SC_OxTableInfo::GetMetadata() const {
  protobuf_public_5fox_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_public_5fox_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SC_OxTableInfo

// optional int32 status = 1;
bool SC_OxTableInfo::has_status() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void SC_OxTableInfo::set_has_status() {
  _has_bits_[0] |= 0x00000008u;
}
void SC_OxTableInfo::clear_has_status() {
  _has_bits_[0] &= ~0x00000008u;
}
void SC_OxTableInfo::clear_status() {
  status_ = 0;
  clear_has_status();
}
::google::protobuf::int32 SC_OxTableInfo::status() const {
  // @@protoc_insertion_point(field_get:SC_OxTableInfo.status)
  return status_;
}
void SC_OxTableInfo::set_status(::google::protobuf::int32 value) {
  set_has_status();
  status_ = value;
  // @@protoc_insertion_point(field_set:SC_OxTableInfo.status)
}

// optional int32 count_down_time = 2;
bool SC_OxTableInfo::has_count_down_time() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void SC_OxTableInfo::set_has_count_down_time() {
  _has_bits_[0] |= 0x00000010u;
}
void SC_OxTableInfo::clear_has_count_down_time() {
  _has_bits_[0] &= ~0x00000010u;
}
void SC_OxTableInfo::clear_count_down_time() {
  count_down_time_ = 0;
  clear_has_count_down_time();
}
::google::protobuf::int32 SC_OxTableInfo::count_down_time() const {
  // @@protoc_insertion_point(field_get:SC_OxTableInfo.count_down_time)
  return count_down_time_;
}
void SC_OxTableInfo::set_count_down_time(::google::protobuf::int32 value) {
  set_has_count_down_time();
  count_down_time_ = value;
  // @@protoc_insertion_point(field_set:SC_OxTableInfo.count_down_time)
}

// optional .BankerInfo pb_curBanker = 3;
bool SC_OxTableInfo::has_pb_curbanker() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void SC_OxTableInfo::set_has_pb_curbanker() {
  _has_bits_[0] |= 0x00000001u;
}
void SC_OxTableInfo::clear_has_pb_curbanker() {
  _has_bits_[0] &= ~0x00000001u;
}
void SC_OxTableInfo::clear_pb_curbanker() {
  if (pb_curbanker_ != NULL) pb_curbanker_->::BankerInfo::Clear();
  clear_has_pb_curbanker();
}
const ::BankerInfo& SC_OxTableInfo::pb_curbanker() const {
  // @@protoc_insertion_point(field_get:SC_OxTableInfo.pb_curBanker)
  return pb_curbanker_ != NULL ? *pb_curbanker_
                         : *::BankerInfo::internal_default_instance();
}
::BankerInfo* SC_OxTableInfo::mutable_pb_curbanker() {
  set_has_pb_curbanker();
  if (pb_curbanker_ == NULL) {
    pb_curbanker_ = new ::BankerInfo;
  }
  // @@protoc_insertion_point(field_mutable:SC_OxTableInfo.pb_curBanker)
  return pb_curbanker_;
}
::BankerInfo* SC_OxTableInfo::release_pb_curbanker() {
  // @@protoc_insertion_point(field_release:SC_OxTableInfo.pb_curBanker)
  clear_has_pb_curbanker();
  ::BankerInfo* temp = pb_curbanker_;
  pb_curbanker_ = NULL;
  return temp;
}
void SC_OxTableInfo::set_allocated_pb_curbanker(::BankerInfo* pb_curbanker) {
  delete pb_curbanker_;
  pb_curbanker_ = pb_curbanker;
  if (pb_curbanker) {
    set_has_pb_curbanker();
  } else {
    clear_has_pb_curbanker();
  }
  // @@protoc_insertion_point(field_set_allocated:SC_OxTableInfo.pb_curBanker)
}

// repeated .PlayerTopInfo pb_player_info_list = 4;
int SC_OxTableInfo::pb_player_info_list_size() const {
  return pb_player_info_list_.size();
}
void SC_OxTableInfo::clear_pb_player_info_list() {
  pb_player_info_list_.Clear();
}
const ::PlayerTopInfo& SC_OxTableInfo::pb_player_info_list(int index) const {
  // @@protoc_insertion_point(field_get:SC_OxTableInfo.pb_player_info_list)
  return pb_player_info_list_.Get(index);
}
::PlayerTopInfo* SC_OxTableInfo::mutable_pb_player_info_list(int index) {
  // @@protoc_insertion_point(field_mutable:SC_OxTableInfo.pb_player_info_list)
  return pb_player_info_list_.Mutable(index);
}
::PlayerTopInfo* SC_OxTableInfo::add_pb_player_info_list() {
  // @@protoc_insertion_point(field_add:SC_OxTableInfo.pb_player_info_list)
  return pb_player_info_list_.Add();
}
::google::protobuf::RepeatedPtrField< ::PlayerTopInfo >*
SC_OxTableInfo::mutable_pb_player_info_list() {
  // @@protoc_insertion_point(field_mutable_list:SC_OxTableInfo.pb_player_info_list)
  return &pb_player_info_list_;
}
const ::google::protobuf::RepeatedPtrField< ::PlayerTopInfo >&
SC_OxTableInfo::pb_player_info_list() const {
  // @@protoc_insertion_point(field_list:SC_OxTableInfo.pb_player_info_list)
  return pb_player_info_list_;
}

// repeated .BankerList pb_banker_list = 5;
int SC_OxTableInfo::pb_banker_list_size() const {
  return pb_banker_list_.size();
}
void SC_OxTableInfo::clear_pb_banker_list() {
  pb_banker_list_.Clear();
}
const ::BankerList& SC_OxTableInfo::pb_banker_list(int index) const {
  // @@protoc_insertion_point(field_get:SC_OxTableInfo.pb_banker_list)
  return pb_banker_list_.Get(index);
}
::BankerList* SC_OxTableInfo::mutable_pb_banker_list(int index) {
  // @@protoc_insertion_point(field_mutable:SC_OxTableInfo.pb_banker_list)
  return pb_banker_list_.Mutable(index);
}
::BankerList* SC_OxTableInfo::add_pb_banker_list() {
  // @@protoc_insertion_point(field_add:SC_OxTableInfo.pb_banker_list)
  return pb_banker_list_.Add();
}
::google::protobuf::RepeatedPtrField< ::BankerList >*
SC_OxTableInfo::mutable_pb_banker_list() {
  // @@protoc_insertion_point(field_mutable_list:SC_OxTableInfo.pb_banker_list)
  return &pb_banker_list_;
}
const ::google::protobuf::RepeatedPtrField< ::BankerList >&
SC_OxTableInfo::pb_banker_list() const {
  // @@protoc_insertion_point(field_list:SC_OxTableInfo.pb_banker_list)
  return pb_banker_list_;
}

// optional .EveryAreaInfo pb_AreaInfo = 6;
bool SC_OxTableInfo::has_pb_areainfo() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void SC_OxTableInfo::set_has_pb_areainfo() {
  _has_bits_[0] |= 0x00000002u;
}
void SC_OxTableInfo::clear_has_pb_areainfo() {
  _has_bits_[0] &= ~0x00000002u;
}
void SC_OxTableInfo::clear_pb_areainfo() {
  if (pb_areainfo_ != NULL) pb_areainfo_->::EveryAreaInfo::Clear();
  clear_has_pb_areainfo();
}
const ::EveryAreaInfo& SC_OxTableInfo::pb_areainfo() const {
  // @@protoc_insertion_point(field_get:SC_OxTableInfo.pb_AreaInfo)
  return pb_areainfo_ != NULL ? *pb_areainfo_
                         : *::EveryAreaInfo::internal_default_instance();
}
::EveryAreaInfo* SC_OxTableInfo::mutable_pb_areainfo() {
  set_has_pb_areainfo();
  if (pb_areainfo_ == NULL) {
    pb_areainfo_ = new ::EveryAreaInfo;
  }
  // @@protoc_insertion_point(field_mutable:SC_OxTableInfo.pb_AreaInfo)
  return pb_areainfo_;
}
::EveryAreaInfo* SC_OxTableInfo::release_pb_areainfo() {
  // @@protoc_insertion_point(field_release:SC_OxTableInfo.pb_AreaInfo)
  clear_has_pb_areainfo();
  ::EveryAreaInfo* temp = pb_areainfo_;
  pb_areainfo_ = NULL;
  return temp;
}
void SC_OxTableInfo::set_allocated_pb_areainfo(::EveryAreaInfo* pb_areainfo) {
  delete pb_areainfo_;
  pb_areainfo_ = pb_areainfo;
  if (pb_areainfo) {
    set_has_pb_areainfo();
  } else {
    clear_has_pb_areainfo();
  }
  // @@protoc_insertion_point(field_set_allocated:SC_OxTableInfo.pb_AreaInfo)
}

// repeated .Player_bet_info pb_player_area_bet_info = 7;
int SC_OxTableInfo::pb_player_area_bet_info_size() const {
  return pb_player_area_bet_info_.size();
}
void SC_OxTableInfo::clear_pb_player_area_bet_info() {
  pb_player_area_bet_info_.Clear();
}
const ::Player_bet_info& SC_OxTableInfo::pb_player_area_bet_info(int index) const {
  // @@protoc_insertion_point(field_get:SC_OxTableInfo.pb_player_area_bet_info)
  return pb_player_area_bet_info_.Get(index);
}
::Player_bet_info* SC_OxTableInfo::mutable_pb_player_area_bet_info(int index) {
  // @@protoc_insertion_point(field_mutable:SC_OxTableInfo.pb_player_area_bet_info)
  return pb_player_area_bet_info_.Mutable(index);
}
::Player_bet_info* SC_OxTableInfo::add_pb_player_area_bet_info() {
  // @@protoc_insertion_point(field_add:SC_OxTableInfo.pb_player_area_bet_info)
  return pb_player_area_bet_info_.Add();
}
::google::protobuf::RepeatedPtrField< ::Player_bet_info >*
SC_OxTableInfo::mutable_pb_player_area_bet_info() {
  // @@protoc_insertion_point(field_mutable_list:SC_OxTableInfo.pb_player_area_bet_info)
  return &pb_player_area_bet_info_;
}
const ::google::protobuf::RepeatedPtrField< ::Player_bet_info >&
SC_OxTableInfo::pb_player_area_bet_info() const {
  // @@protoc_insertion_point(field_list:SC_OxTableInfo.pb_player_area_bet_info)
  return pb_player_area_bet_info_;
}

// repeated .Cards pb_cards = 8;
int SC_OxTableInfo::pb_cards_size() const {
  return pb_cards_.size();
}
void SC_OxTableInfo::clear_pb_cards() {
  pb_cards_.Clear();
}
const ::Cards& SC_OxTableInfo::pb_cards(int index) const {
  // @@protoc_insertion_point(field_get:SC_OxTableInfo.pb_cards)
  return pb_cards_.Get(index);
}
::Cards* SC_OxTableInfo::mutable_pb_cards(int index) {
  // @@protoc_insertion_point(field_mutable:SC_OxTableInfo.pb_cards)
  return pb_cards_.Mutable(index);
}
::Cards* SC_OxTableInfo::add_pb_cards() {
  // @@protoc_insertion_point(field_add:SC_OxTableInfo.pb_cards)
  return pb_cards_.Add();
}
::google::protobuf::RepeatedPtrField< ::Cards >*
SC_OxTableInfo::mutable_pb_cards() {
  // @@protoc_insertion_point(field_mutable_list:SC_OxTableInfo.pb_cards)
  return &pb_cards_;
}
const ::google::protobuf::RepeatedPtrField< ::Cards >&
SC_OxTableInfo::pb_cards() const {
  // @@protoc_insertion_point(field_list:SC_OxTableInfo.pb_cards)
  return pb_cards_;
}

// repeated .CardResult pb_result = 9;
int SC_OxTableInfo::pb_result_size() const {
  return pb_result_.size();
}
void SC_OxTableInfo::clear_pb_result() {
  pb_result_.Clear();
}
const ::CardResult& SC_OxTableInfo::pb_result(int index) const {
  // @@protoc_insertion_point(field_get:SC_OxTableInfo.pb_result)
  return pb_result_.Get(index);
}
::CardResult* SC_OxTableInfo::mutable_pb_result(int index) {
  // @@protoc_insertion_point(field_mutable:SC_OxTableInfo.pb_result)
  return pb_result_.Mutable(index);
}
::CardResult* SC_OxTableInfo::add_pb_result() {
  // @@protoc_insertion_point(field_add:SC_OxTableInfo.pb_result)
  return pb_result_.Add();
}
::google::protobuf::RepeatedPtrField< ::CardResult >*
SC_OxTableInfo::mutable_pb_result() {
  // @@protoc_insertion_point(field_mutable_list:SC_OxTableInfo.pb_result)
  return &pb_result_;
}
const ::google::protobuf::RepeatedPtrField< ::CardResult >&
SC_OxTableInfo::pb_result() const {
  // @@protoc_insertion_point(field_list:SC_OxTableInfo.pb_result)
  return pb_result_;
}

// optional .OxPlayerConclude pb_conclude = 10;
bool SC_OxTableInfo::has_pb_conclude() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void SC_OxTableInfo::set_has_pb_conclude() {
  _has_bits_[0] |= 0x00000004u;
}
void SC_OxTableInfo::clear_has_pb_conclude() {
  _has_bits_[0] &= ~0x00000004u;
}
void SC_OxTableInfo::clear_pb_conclude() {
  if (pb_conclude_ != NULL) pb_conclude_->::OxPlayerConclude::Clear();
  clear_has_pb_conclude();
}
const ::OxPlayerConclude& SC_OxTableInfo::pb_conclude() const {
  // @@protoc_insertion_point(field_get:SC_OxTableInfo.pb_conclude)
  return pb_conclude_ != NULL ? *pb_conclude_
                         : *::OxPlayerConclude::internal_default_instance();
}
::OxPlayerConclude* SC_OxTableInfo::mutable_pb_conclude() {
  set_has_pb_conclude();
  if (pb_conclude_ == NULL) {
    pb_conclude_ = new ::OxPlayerConclude;
  }
  // @@protoc_insertion_point(field_mutable:SC_OxTableInfo.pb_conclude)
  return pb_conclude_;
}
::OxPlayerConclude* SC_OxTableInfo::release_pb_conclude() {
  // @@protoc_insertion_point(field_release:SC_OxTableInfo.pb_conclude)
  clear_has_pb_conclude();
  ::OxPlayerConclude* temp = pb_conclude_;
  pb_conclude_ = NULL;
  return temp;
}
void SC_OxTableInfo::set_allocated_pb_conclude(::OxPlayerConclude* pb_conclude) {
  delete pb_conclude_;
  pb_conclude_ = pb_conclude;
  if (pb_conclude) {
    set_has_pb_conclude();
  } else {
    clear_has_pb_conclude();
  }
  // @@protoc_insertion_point(field_set_allocated:SC_OxTableInfo.pb_conclude)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CS_OxPlayerConnectGame::kGuidFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CS_OxPlayerConnectGame::CS_OxPlayerConnectGame()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_public_5fox_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:CS_OxPlayerConnectGame)
}
CS_OxPlayerConnectGame::CS_OxPlayerConnectGame(const CS_OxPlayerConnectGame& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  guid_ = from.guid_;
  // @@protoc_insertion_point(copy_constructor:CS_OxPlayerConnectGame)
}

void CS_OxPlayerConnectGame::SharedCtor() {
  _cached_size_ = 0;
  guid_ = 0;
}

CS_OxPlayerConnectGame::~CS_OxPlayerConnectGame() {
  // @@protoc_insertion_point(destructor:CS_OxPlayerConnectGame)
  SharedDtor();
}

void CS_OxPlayerConnectGame::SharedDtor() {
}

void CS_OxPlayerConnectGame::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CS_OxPlayerConnectGame::descriptor() {
  protobuf_public_5fox_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_public_5fox_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CS_OxPlayerConnectGame& CS_OxPlayerConnectGame::default_instance() {
  protobuf_public_5fox_2eproto::InitDefaults();
  return *internal_default_instance();
}

CS_OxPlayerConnectGame* CS_OxPlayerConnectGame::New(::google::protobuf::Arena* arena) const {
  CS_OxPlayerConnectGame* n = new CS_OxPlayerConnectGame;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CS_OxPlayerConnectGame::Clear() {
// @@protoc_insertion_point(message_clear_start:CS_OxPlayerConnectGame)
  guid_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CS_OxPlayerConnectGame::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CS_OxPlayerConnectGame)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 guid = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_guid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &guid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CS_OxPlayerConnectGame)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CS_OxPlayerConnectGame)
  return false;
#undef DO_
}

void CS_OxPlayerConnectGame::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CS_OxPlayerConnectGame)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 guid = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->guid(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CS_OxPlayerConnectGame)
}

::google::protobuf::uint8* CS_OxPlayerConnectGame::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CS_OxPlayerConnectGame)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 guid = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->guid(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CS_OxPlayerConnectGame)
  return target;
}

size_t CS_OxPlayerConnectGame::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CS_OxPlayerConnectGame)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // optional int32 guid = 1;
  if (has_guid()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->guid());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CS_OxPlayerConnectGame::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CS_OxPlayerConnectGame)
  GOOGLE_DCHECK_NE(&from, this);
  const CS_OxPlayerConnectGame* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CS_OxPlayerConnectGame>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CS_OxPlayerConnectGame)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CS_OxPlayerConnectGame)
    MergeFrom(*source);
  }
}

void CS_OxPlayerConnectGame::MergeFrom(const CS_OxPlayerConnectGame& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CS_OxPlayerConnectGame)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_guid()) {
    set_guid(from.guid());
  }
}

void CS_OxPlayerConnectGame::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CS_OxPlayerConnectGame)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CS_OxPlayerConnectGame::CopyFrom(const CS_OxPlayerConnectGame& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CS_OxPlayerConnectGame)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CS_OxPlayerConnectGame::IsInitialized() const {
  return true;
}

void CS_OxPlayerConnectGame::Swap(CS_OxPlayerConnectGame* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CS_OxPlayerConnectGame::InternalSwap(CS_OxPlayerConnectGame* other) {
  std::swap(guid_, other->guid_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CS_OxPlayerConnectGame::GetMetadata() const {
  protobuf_public_5fox_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_public_5fox_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CS_OxPlayerConnectGame

// optional int32 guid = 1;
bool CS_OxPlayerConnectGame::has_guid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CS_OxPlayerConnectGame::set_has_guid() {
  _has_bits_[0] |= 0x00000001u;
}
void CS_OxPlayerConnectGame::clear_has_guid() {
  _has_bits_[0] &= ~0x00000001u;
}
void CS_OxPlayerConnectGame::clear_guid() {
  guid_ = 0;
  clear_has_guid();
}
::google::protobuf::int32 CS_OxPlayerConnectGame::guid() const {
  // @@protoc_insertion_point(field_get:CS_OxPlayerConnectGame.guid)
  return guid_;
}
void CS_OxPlayerConnectGame::set_guid(::google::protobuf::int32 value) {
  set_has_guid();
  guid_ = value;
  // @@protoc_insertion_point(field_set:CS_OxPlayerConnectGame.guid)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SC_CardResult::kPbResultFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SC_CardResult::SC_CardResult()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_public_5fox_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:SC_CardResult)
}
SC_CardResult::SC_CardResult(const SC_CardResult& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      pb_result_(from.pb_result_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:SC_CardResult)
}

void SC_CardResult::SharedCtor() {
  _cached_size_ = 0;
}

SC_CardResult::~SC_CardResult() {
  // @@protoc_insertion_point(destructor:SC_CardResult)
  SharedDtor();
}

void SC_CardResult::SharedDtor() {
}

void SC_CardResult::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SC_CardResult::descriptor() {
  protobuf_public_5fox_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_public_5fox_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const SC_CardResult& SC_CardResult::default_instance() {
  protobuf_public_5fox_2eproto::InitDefaults();
  return *internal_default_instance();
}

SC_CardResult* SC_CardResult::New(::google::protobuf::Arena* arena) const {
  SC_CardResult* n = new SC_CardResult;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SC_CardResult::Clear() {
// @@protoc_insertion_point(message_clear_start:SC_CardResult)
  pb_result_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool SC_CardResult::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:SC_CardResult)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .CardResult pb_result = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_pb_result()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:SC_CardResult)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:SC_CardResult)
  return false;
#undef DO_
}

void SC_CardResult::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:SC_CardResult)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .CardResult pb_result = 1;
  for (unsigned int i = 0, n = this->pb_result_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->pb_result(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:SC_CardResult)
}

::google::protobuf::uint8* SC_CardResult::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:SC_CardResult)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .CardResult pb_result = 1;
  for (unsigned int i = 0, n = this->pb_result_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, this->pb_result(i), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SC_CardResult)
  return target;
}

size_t SC_CardResult::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SC_CardResult)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // repeated .CardResult pb_result = 1;
  {
    unsigned int count = this->pb_result_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->pb_result(i));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SC_CardResult::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:SC_CardResult)
  GOOGLE_DCHECK_NE(&from, this);
  const SC_CardResult* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SC_CardResult>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:SC_CardResult)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:SC_CardResult)
    MergeFrom(*source);
  }
}

void SC_CardResult::MergeFrom(const SC_CardResult& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:SC_CardResult)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  pb_result_.MergeFrom(from.pb_result_);
}

void SC_CardResult::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:SC_CardResult)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SC_CardResult::CopyFrom(const SC_CardResult& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SC_CardResult)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SC_CardResult::IsInitialized() const {
  return true;
}

void SC_CardResult::Swap(SC_CardResult* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SC_CardResult::InternalSwap(SC_CardResult* other) {
  pb_result_.InternalSwap(&other->pb_result_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SC_CardResult::GetMetadata() const {
  protobuf_public_5fox_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_public_5fox_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SC_CardResult

// repeated .CardResult pb_result = 1;
int SC_CardResult::pb_result_size() const {
  return pb_result_.size();
}
void SC_CardResult::clear_pb_result() {
  pb_result_.Clear();
}
const ::CardResult& SC_CardResult::pb_result(int index) const {
  // @@protoc_insertion_point(field_get:SC_CardResult.pb_result)
  return pb_result_.Get(index);
}
::CardResult* SC_CardResult::mutable_pb_result(int index) {
  // @@protoc_insertion_point(field_mutable:SC_CardResult.pb_result)
  return pb_result_.Mutable(index);
}
::CardResult* SC_CardResult::add_pb_result() {
  // @@protoc_insertion_point(field_add:SC_CardResult.pb_result)
  return pb_result_.Add();
}
::google::protobuf::RepeatedPtrField< ::CardResult >*
SC_CardResult::mutable_pb_result() {
  // @@protoc_insertion_point(field_mutable_list:SC_CardResult.pb_result)
  return &pb_result_;
}
const ::google::protobuf::RepeatedPtrField< ::CardResult >&
SC_CardResult::pb_result() const {
  // @@protoc_insertion_point(field_list:SC_CardResult.pb_result)
  return pb_result_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SC_OxResult::kPbPlayerResultFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SC_OxResult::SC_OxResult()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_public_5fox_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:SC_OxResult)
}
SC_OxResult::SC_OxResult(const SC_OxResult& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_pb_player_result()) {
    pb_player_result_ = new ::OxPlayerConclude(*from.pb_player_result_);
  } else {
    pb_player_result_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:SC_OxResult)
}

void SC_OxResult::SharedCtor() {
  _cached_size_ = 0;
  pb_player_result_ = NULL;
}

SC_OxResult::~SC_OxResult() {
  // @@protoc_insertion_point(destructor:SC_OxResult)
  SharedDtor();
}

void SC_OxResult::SharedDtor() {
  if (this != internal_default_instance()) {
    delete pb_player_result_;
  }
}

void SC_OxResult::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SC_OxResult::descriptor() {
  protobuf_public_5fox_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_public_5fox_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const SC_OxResult& SC_OxResult::default_instance() {
  protobuf_public_5fox_2eproto::InitDefaults();
  return *internal_default_instance();
}

SC_OxResult* SC_OxResult::New(::google::protobuf::Arena* arena) const {
  SC_OxResult* n = new SC_OxResult;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SC_OxResult::Clear() {
// @@protoc_insertion_point(message_clear_start:SC_OxResult)
  if (has_pb_player_result()) {
    GOOGLE_DCHECK(pb_player_result_ != NULL);
    pb_player_result_->::OxPlayerConclude::Clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool SC_OxResult::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:SC_OxResult)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .OxPlayerConclude pb_player_result = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_pb_player_result()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:SC_OxResult)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:SC_OxResult)
  return false;
#undef DO_
}

void SC_OxResult::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:SC_OxResult)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .OxPlayerConclude pb_player_result = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->pb_player_result_, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:SC_OxResult)
}

::google::protobuf::uint8* SC_OxResult::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:SC_OxResult)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .OxPlayerConclude pb_player_result = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->pb_player_result_, deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SC_OxResult)
  return target;
}

size_t SC_OxResult::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SC_OxResult)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // optional .OxPlayerConclude pb_player_result = 1;
  if (has_pb_player_result()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->pb_player_result_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SC_OxResult::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:SC_OxResult)
  GOOGLE_DCHECK_NE(&from, this);
  const SC_OxResult* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SC_OxResult>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:SC_OxResult)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:SC_OxResult)
    MergeFrom(*source);
  }
}

void SC_OxResult::MergeFrom(const SC_OxResult& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:SC_OxResult)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_pb_player_result()) {
    mutable_pb_player_result()->::OxPlayerConclude::MergeFrom(from.pb_player_result());
  }
}

void SC_OxResult::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:SC_OxResult)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SC_OxResult::CopyFrom(const SC_OxResult& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SC_OxResult)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SC_OxResult::IsInitialized() const {
  return true;
}

void SC_OxResult::Swap(SC_OxResult* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SC_OxResult::InternalSwap(SC_OxResult* other) {
  std::swap(pb_player_result_, other->pb_player_result_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SC_OxResult::GetMetadata() const {
  protobuf_public_5fox_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_public_5fox_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SC_OxResult

// optional .OxPlayerConclude pb_player_result = 1;
bool SC_OxResult::has_pb_player_result() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void SC_OxResult::set_has_pb_player_result() {
  _has_bits_[0] |= 0x00000001u;
}
void SC_OxResult::clear_has_pb_player_result() {
  _has_bits_[0] &= ~0x00000001u;
}
void SC_OxResult::clear_pb_player_result() {
  if (pb_player_result_ != NULL) pb_player_result_->::OxPlayerConclude::Clear();
  clear_has_pb_player_result();
}
const ::OxPlayerConclude& SC_OxResult::pb_player_result() const {
  // @@protoc_insertion_point(field_get:SC_OxResult.pb_player_result)
  return pb_player_result_ != NULL ? *pb_player_result_
                         : *::OxPlayerConclude::internal_default_instance();
}
::OxPlayerConclude* SC_OxResult::mutable_pb_player_result() {
  set_has_pb_player_result();
  if (pb_player_result_ == NULL) {
    pb_player_result_ = new ::OxPlayerConclude;
  }
  // @@protoc_insertion_point(field_mutable:SC_OxResult.pb_player_result)
  return pb_player_result_;
}
::OxPlayerConclude* SC_OxResult::release_pb_player_result() {
  // @@protoc_insertion_point(field_release:SC_OxResult.pb_player_result)
  clear_has_pb_player_result();
  ::OxPlayerConclude* temp = pb_player_result_;
  pb_player_result_ = NULL;
  return temp;
}
void SC_OxResult::set_allocated_pb_player_result(::OxPlayerConclude* pb_player_result) {
  delete pb_player_result_;
  pb_player_result_ = pb_player_result;
  if (pb_player_result) {
    set_has_pb_player_result();
  } else {
    clear_has_pb_player_result();
  }
  // @@protoc_insertion_point(field_set_allocated:SC_OxResult.pb_player_result)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SC_OxBankerLeaveFlag::kResultFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SC_OxBankerLeaveFlag::SC_OxBankerLeaveFlag()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_public_5fox_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:SC_OxBankerLeaveFlag)
}
SC_OxBankerLeaveFlag::SC_OxBankerLeaveFlag(const SC_OxBankerLeaveFlag& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  result_ = from.result_;
  // @@protoc_insertion_point(copy_constructor:SC_OxBankerLeaveFlag)
}

void SC_OxBankerLeaveFlag::SharedCtor() {
  _cached_size_ = 0;
  result_ = 0;
}

SC_OxBankerLeaveFlag::~SC_OxBankerLeaveFlag() {
  // @@protoc_insertion_point(destructor:SC_OxBankerLeaveFlag)
  SharedDtor();
}

void SC_OxBankerLeaveFlag::SharedDtor() {
}

void SC_OxBankerLeaveFlag::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SC_OxBankerLeaveFlag::descriptor() {
  protobuf_public_5fox_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_public_5fox_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const SC_OxBankerLeaveFlag& SC_OxBankerLeaveFlag::default_instance() {
  protobuf_public_5fox_2eproto::InitDefaults();
  return *internal_default_instance();
}

SC_OxBankerLeaveFlag* SC_OxBankerLeaveFlag::New(::google::protobuf::Arena* arena) const {
  SC_OxBankerLeaveFlag* n = new SC_OxBankerLeaveFlag;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SC_OxBankerLeaveFlag::Clear() {
// @@protoc_insertion_point(message_clear_start:SC_OxBankerLeaveFlag)
  result_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool SC_OxBankerLeaveFlag::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:SC_OxBankerLeaveFlag)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 result = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_result();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &result_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:SC_OxBankerLeaveFlag)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:SC_OxBankerLeaveFlag)
  return false;
#undef DO_
}

void SC_OxBankerLeaveFlag::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:SC_OxBankerLeaveFlag)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 result = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->result(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:SC_OxBankerLeaveFlag)
}

::google::protobuf::uint8* SC_OxBankerLeaveFlag::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:SC_OxBankerLeaveFlag)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 result = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->result(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SC_OxBankerLeaveFlag)
  return target;
}

size_t SC_OxBankerLeaveFlag::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SC_OxBankerLeaveFlag)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // optional int32 result = 1;
  if (has_result()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->result());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SC_OxBankerLeaveFlag::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:SC_OxBankerLeaveFlag)
  GOOGLE_DCHECK_NE(&from, this);
  const SC_OxBankerLeaveFlag* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SC_OxBankerLeaveFlag>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:SC_OxBankerLeaveFlag)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:SC_OxBankerLeaveFlag)
    MergeFrom(*source);
  }
}

void SC_OxBankerLeaveFlag::MergeFrom(const SC_OxBankerLeaveFlag& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:SC_OxBankerLeaveFlag)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_result()) {
    set_result(from.result());
  }
}

void SC_OxBankerLeaveFlag::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:SC_OxBankerLeaveFlag)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SC_OxBankerLeaveFlag::CopyFrom(const SC_OxBankerLeaveFlag& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SC_OxBankerLeaveFlag)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SC_OxBankerLeaveFlag::IsInitialized() const {
  return true;
}

void SC_OxBankerLeaveFlag::Swap(SC_OxBankerLeaveFlag* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SC_OxBankerLeaveFlag::InternalSwap(SC_OxBankerLeaveFlag* other) {
  std::swap(result_, other->result_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SC_OxBankerLeaveFlag::GetMetadata() const {
  protobuf_public_5fox_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_public_5fox_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SC_OxBankerLeaveFlag

// optional int32 result = 1;
bool SC_OxBankerLeaveFlag::has_result() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void SC_OxBankerLeaveFlag::set_has_result() {
  _has_bits_[0] |= 0x00000001u;
}
void SC_OxBankerLeaveFlag::clear_has_result() {
  _has_bits_[0] &= ~0x00000001u;
}
void SC_OxBankerLeaveFlag::clear_result() {
  result_ = 0;
  clear_has_result();
}
::google::protobuf::int32 SC_OxBankerLeaveFlag::result() const {
  // @@protoc_insertion_point(field_get:SC_OxBankerLeaveFlag.result)
  return result_;
}
void SC_OxBankerLeaveFlag::set_result(::google::protobuf::int32 value) {
  set_has_result();
  result_ = value;
  // @@protoc_insertion_point(field_set:SC_OxBankerLeaveFlag.result)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CS_OxLeaveGame::kGuidFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CS_OxLeaveGame::CS_OxLeaveGame()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_public_5fox_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:CS_OxLeaveGame)
}
CS_OxLeaveGame::CS_OxLeaveGame(const CS_OxLeaveGame& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  guid_ = from.guid_;
  // @@protoc_insertion_point(copy_constructor:CS_OxLeaveGame)
}

void CS_OxLeaveGame::SharedCtor() {
  _cached_size_ = 0;
  guid_ = 0;
}

CS_OxLeaveGame::~CS_OxLeaveGame() {
  // @@protoc_insertion_point(destructor:CS_OxLeaveGame)
  SharedDtor();
}

void CS_OxLeaveGame::SharedDtor() {
}

void CS_OxLeaveGame::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CS_OxLeaveGame::descriptor() {
  protobuf_public_5fox_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_public_5fox_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CS_OxLeaveGame& CS_OxLeaveGame::default_instance() {
  protobuf_public_5fox_2eproto::InitDefaults();
  return *internal_default_instance();
}

CS_OxLeaveGame* CS_OxLeaveGame::New(::google::protobuf::Arena* arena) const {
  CS_OxLeaveGame* n = new CS_OxLeaveGame;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CS_OxLeaveGame::Clear() {
// @@protoc_insertion_point(message_clear_start:CS_OxLeaveGame)
  guid_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CS_OxLeaveGame::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CS_OxLeaveGame)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 guid = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_guid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &guid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CS_OxLeaveGame)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CS_OxLeaveGame)
  return false;
#undef DO_
}

void CS_OxLeaveGame::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CS_OxLeaveGame)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 guid = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->guid(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CS_OxLeaveGame)
}

::google::protobuf::uint8* CS_OxLeaveGame::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CS_OxLeaveGame)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 guid = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->guid(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CS_OxLeaveGame)
  return target;
}

size_t CS_OxLeaveGame::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CS_OxLeaveGame)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // optional int32 guid = 1;
  if (has_guid()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->guid());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CS_OxLeaveGame::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CS_OxLeaveGame)
  GOOGLE_DCHECK_NE(&from, this);
  const CS_OxLeaveGame* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CS_OxLeaveGame>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CS_OxLeaveGame)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CS_OxLeaveGame)
    MergeFrom(*source);
  }
}

void CS_OxLeaveGame::MergeFrom(const CS_OxLeaveGame& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CS_OxLeaveGame)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_guid()) {
    set_guid(from.guid());
  }
}

void CS_OxLeaveGame::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CS_OxLeaveGame)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CS_OxLeaveGame::CopyFrom(const CS_OxLeaveGame& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CS_OxLeaveGame)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CS_OxLeaveGame::IsInitialized() const {
  return true;
}

void CS_OxLeaveGame::Swap(CS_OxLeaveGame* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CS_OxLeaveGame::InternalSwap(CS_OxLeaveGame* other) {
  std::swap(guid_, other->guid_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CS_OxLeaveGame::GetMetadata() const {
  protobuf_public_5fox_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_public_5fox_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CS_OxLeaveGame

// optional int32 guid = 1;
bool CS_OxLeaveGame::has_guid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CS_OxLeaveGame::set_has_guid() {
  _has_bits_[0] |= 0x00000001u;
}
void CS_OxLeaveGame::clear_has_guid() {
  _has_bits_[0] &= ~0x00000001u;
}
void CS_OxLeaveGame::clear_guid() {
  guid_ = 0;
  clear_has_guid();
}
::google::protobuf::int32 CS_OxLeaveGame::guid() const {
  // @@protoc_insertion_point(field_get:CS_OxLeaveGame.guid)
  return guid_;
}
void CS_OxLeaveGame::set_guid(::google::protobuf::int32 value) {
  set_has_guid();
  guid_ = value;
  // @@protoc_insertion_point(field_set:CS_OxLeaveGame.guid)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int chip_info::kChipIndexFieldNumber;
const int chip_info::kChipMoneyFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

chip_info::chip_info()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_public_5fox_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:chip_info)
}
chip_info::chip_info(const chip_info& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&chip_index_, &from.chip_index_,
    reinterpret_cast<char*>(&chip_money_) -
    reinterpret_cast<char*>(&chip_index_) + sizeof(chip_money_));
  // @@protoc_insertion_point(copy_constructor:chip_info)
}

void chip_info::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&chip_index_, 0, reinterpret_cast<char*>(&chip_money_) -
    reinterpret_cast<char*>(&chip_index_) + sizeof(chip_money_));
}

chip_info::~chip_info() {
  // @@protoc_insertion_point(destructor:chip_info)
  SharedDtor();
}

void chip_info::SharedDtor() {
}

void chip_info::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* chip_info::descriptor() {
  protobuf_public_5fox_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_public_5fox_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const chip_info& chip_info::default_instance() {
  protobuf_public_5fox_2eproto::InitDefaults();
  return *internal_default_instance();
}

chip_info* chip_info::New(::google::protobuf::Arena* arena) const {
  chip_info* n = new chip_info;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void chip_info::Clear() {
// @@protoc_insertion_point(message_clear_start:chip_info)
  if (_has_bits_[0 / 32] & 3u) {
    ::memset(&chip_index_, 0, reinterpret_cast<char*>(&chip_money_) -
      reinterpret_cast<char*>(&chip_index_) + sizeof(chip_money_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool chip_info::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:chip_info)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 chip_index = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_chip_index();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &chip_index_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 chip_money = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_chip_money();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &chip_money_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:chip_info)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:chip_info)
  return false;
#undef DO_
}

void chip_info::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:chip_info)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 chip_index = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->chip_index(), output);
  }

  // optional int32 chip_money = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->chip_money(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:chip_info)
}

::google::protobuf::uint8* chip_info::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:chip_info)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 chip_index = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->chip_index(), target);
  }

  // optional int32 chip_money = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->chip_money(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:chip_info)
  return target;
}

size_t chip_info::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:chip_info)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 3u) {
    // optional int32 chip_index = 1;
    if (has_chip_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->chip_index());
    }

    // optional int32 chip_money = 2;
    if (has_chip_money()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->chip_money());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void chip_info::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:chip_info)
  GOOGLE_DCHECK_NE(&from, this);
  const chip_info* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const chip_info>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:chip_info)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:chip_info)
    MergeFrom(*source);
  }
}

void chip_info::MergeFrom(const chip_info& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:chip_info)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      chip_index_ = from.chip_index_;
    }
    if (cached_has_bits & 0x00000002u) {
      chip_money_ = from.chip_money_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void chip_info::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:chip_info)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void chip_info::CopyFrom(const chip_info& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:chip_info)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool chip_info::IsInitialized() const {
  return true;
}

void chip_info::Swap(chip_info* other) {
  if (other == this) return;
  InternalSwap(other);
}
void chip_info::InternalSwap(chip_info* other) {
  std::swap(chip_index_, other->chip_index_);
  std::swap(chip_money_, other->chip_money_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata chip_info::GetMetadata() const {
  protobuf_public_5fox_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_public_5fox_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// chip_info

// optional int32 chip_index = 1;
bool chip_info::has_chip_index() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void chip_info::set_has_chip_index() {
  _has_bits_[0] |= 0x00000001u;
}
void chip_info::clear_has_chip_index() {
  _has_bits_[0] &= ~0x00000001u;
}
void chip_info::clear_chip_index() {
  chip_index_ = 0;
  clear_has_chip_index();
}
::google::protobuf::int32 chip_info::chip_index() const {
  // @@protoc_insertion_point(field_get:chip_info.chip_index)
  return chip_index_;
}
void chip_info::set_chip_index(::google::protobuf::int32 value) {
  set_has_chip_index();
  chip_index_ = value;
  // @@protoc_insertion_point(field_set:chip_info.chip_index)
}

// optional int32 chip_money = 2;
bool chip_info::has_chip_money() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void chip_info::set_has_chip_money() {
  _has_bits_[0] |= 0x00000002u;
}
void chip_info::clear_has_chip_money() {
  _has_bits_[0] &= ~0x00000002u;
}
void chip_info::clear_chip_money() {
  chip_money_ = 0;
  clear_has_chip_money();
}
::google::protobuf::int32 chip_info::chip_money() const {
  // @@protoc_insertion_point(field_get:chip_info.chip_money)
  return chip_money_;
}
void chip_info::set_chip_money(::google::protobuf::int32 value) {
  set_has_chip_money();
  chip_money_ = value;
  // @@protoc_insertion_point(field_set:chip_info.chip_money)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SC_Ox_config_info::kBankerLimitFieldNumber;
const int SC_Ox_config_info::kPbInfoChipFieldNumber;
const int SC_Ox_config_info::kBetMinLimitMoneyFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SC_Ox_config_info::SC_Ox_config_info()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_public_5fox_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:SC_Ox_config_info)
}
SC_Ox_config_info::SC_Ox_config_info(const SC_Ox_config_info& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      pb_info_chip_(from.pb_info_chip_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&banker_limit_, &from.banker_limit_,
    reinterpret_cast<char*>(&bet_min_limit_money_) -
    reinterpret_cast<char*>(&banker_limit_) + sizeof(bet_min_limit_money_));
  // @@protoc_insertion_point(copy_constructor:SC_Ox_config_info)
}

void SC_Ox_config_info::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&banker_limit_, 0, reinterpret_cast<char*>(&bet_min_limit_money_) -
    reinterpret_cast<char*>(&banker_limit_) + sizeof(bet_min_limit_money_));
}

SC_Ox_config_info::~SC_Ox_config_info() {
  // @@protoc_insertion_point(destructor:SC_Ox_config_info)
  SharedDtor();
}

void SC_Ox_config_info::SharedDtor() {
}

void SC_Ox_config_info::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SC_Ox_config_info::descriptor() {
  protobuf_public_5fox_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_public_5fox_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const SC_Ox_config_info& SC_Ox_config_info::default_instance() {
  protobuf_public_5fox_2eproto::InitDefaults();
  return *internal_default_instance();
}

SC_Ox_config_info* SC_Ox_config_info::New(::google::protobuf::Arena* arena) const {
  SC_Ox_config_info* n = new SC_Ox_config_info;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SC_Ox_config_info::Clear() {
// @@protoc_insertion_point(message_clear_start:SC_Ox_config_info)
  pb_info_chip_.Clear();
  if (_has_bits_[0 / 32] & 3u) {
    ::memset(&banker_limit_, 0, reinterpret_cast<char*>(&bet_min_limit_money_) -
      reinterpret_cast<char*>(&banker_limit_) + sizeof(bet_min_limit_money_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool SC_Ox_config_info::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:SC_Ox_config_info)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 banker_limit = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_banker_limit();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &banker_limit_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .chip_info pb_info_chip = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_pb_info_chip()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 bet_min_limit_money = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {
          set_has_bet_min_limit_money();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &bet_min_limit_money_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:SC_Ox_config_info)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:SC_Ox_config_info)
  return false;
#undef DO_
}

void SC_Ox_config_info::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:SC_Ox_config_info)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 banker_limit = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->banker_limit(), output);
  }

  // repeated .chip_info pb_info_chip = 2;
  for (unsigned int i = 0, n = this->pb_info_chip_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->pb_info_chip(i), output);
  }

  // optional int32 bet_min_limit_money = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->bet_min_limit_money(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:SC_Ox_config_info)
}

::google::protobuf::uint8* SC_Ox_config_info::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:SC_Ox_config_info)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 banker_limit = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->banker_limit(), target);
  }

  // repeated .chip_info pb_info_chip = 2;
  for (unsigned int i = 0, n = this->pb_info_chip_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, this->pb_info_chip(i), deterministic, target);
  }

  // optional int32 bet_min_limit_money = 3;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->bet_min_limit_money(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SC_Ox_config_info)
  return target;
}

size_t SC_Ox_config_info::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SC_Ox_config_info)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // repeated .chip_info pb_info_chip = 2;
  {
    unsigned int count = this->pb_info_chip_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->pb_info_chip(i));
    }
  }

  if (_has_bits_[0 / 32] & 3u) {
    // optional int32 banker_limit = 1;
    if (has_banker_limit()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->banker_limit());
    }

    // optional int32 bet_min_limit_money = 3;
    if (has_bet_min_limit_money()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->bet_min_limit_money());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SC_Ox_config_info::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:SC_Ox_config_info)
  GOOGLE_DCHECK_NE(&from, this);
  const SC_Ox_config_info* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SC_Ox_config_info>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:SC_Ox_config_info)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:SC_Ox_config_info)
    MergeFrom(*source);
  }
}

void SC_Ox_config_info::MergeFrom(const SC_Ox_config_info& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:SC_Ox_config_info)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  pb_info_chip_.MergeFrom(from.pb_info_chip_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      banker_limit_ = from.banker_limit_;
    }
    if (cached_has_bits & 0x00000002u) {
      bet_min_limit_money_ = from.bet_min_limit_money_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void SC_Ox_config_info::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:SC_Ox_config_info)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SC_Ox_config_info::CopyFrom(const SC_Ox_config_info& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SC_Ox_config_info)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SC_Ox_config_info::IsInitialized() const {
  return true;
}

void SC_Ox_config_info::Swap(SC_Ox_config_info* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SC_Ox_config_info::InternalSwap(SC_Ox_config_info* other) {
  pb_info_chip_.InternalSwap(&other->pb_info_chip_);
  std::swap(banker_limit_, other->banker_limit_);
  std::swap(bet_min_limit_money_, other->bet_min_limit_money_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SC_Ox_config_info::GetMetadata() const {
  protobuf_public_5fox_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_public_5fox_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SC_Ox_config_info

// optional int32 banker_limit = 1;
bool SC_Ox_config_info::has_banker_limit() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void SC_Ox_config_info::set_has_banker_limit() {
  _has_bits_[0] |= 0x00000001u;
}
void SC_Ox_config_info::clear_has_banker_limit() {
  _has_bits_[0] &= ~0x00000001u;
}
void SC_Ox_config_info::clear_banker_limit() {
  banker_limit_ = 0;
  clear_has_banker_limit();
}
::google::protobuf::int32 SC_Ox_config_info::banker_limit() const {
  // @@protoc_insertion_point(field_get:SC_Ox_config_info.banker_limit)
  return banker_limit_;
}
void SC_Ox_config_info::set_banker_limit(::google::protobuf::int32 value) {
  set_has_banker_limit();
  banker_limit_ = value;
  // @@protoc_insertion_point(field_set:SC_Ox_config_info.banker_limit)
}

// repeated .chip_info pb_info_chip = 2;
int SC_Ox_config_info::pb_info_chip_size() const {
  return pb_info_chip_.size();
}
void SC_Ox_config_info::clear_pb_info_chip() {
  pb_info_chip_.Clear();
}
const ::chip_info& SC_Ox_config_info::pb_info_chip(int index) const {
  // @@protoc_insertion_point(field_get:SC_Ox_config_info.pb_info_chip)
  return pb_info_chip_.Get(index);
}
::chip_info* SC_Ox_config_info::mutable_pb_info_chip(int index) {
  // @@protoc_insertion_point(field_mutable:SC_Ox_config_info.pb_info_chip)
  return pb_info_chip_.Mutable(index);
}
::chip_info* SC_Ox_config_info::add_pb_info_chip() {
  // @@protoc_insertion_point(field_add:SC_Ox_config_info.pb_info_chip)
  return pb_info_chip_.Add();
}
::google::protobuf::RepeatedPtrField< ::chip_info >*
SC_Ox_config_info::mutable_pb_info_chip() {
  // @@protoc_insertion_point(field_mutable_list:SC_Ox_config_info.pb_info_chip)
  return &pb_info_chip_;
}
const ::google::protobuf::RepeatedPtrField< ::chip_info >&
SC_Ox_config_info::pb_info_chip() const {
  // @@protoc_insertion_point(field_list:SC_Ox_config_info.pb_info_chip)
  return pb_info_chip_;
}

// optional int32 bet_min_limit_money = 3;
bool SC_Ox_config_info::has_bet_min_limit_money() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void SC_Ox_config_info::set_has_bet_min_limit_money() {
  _has_bits_[0] |= 0x00000002u;
}
void SC_Ox_config_info::clear_has_bet_min_limit_money() {
  _has_bits_[0] &= ~0x00000002u;
}
void SC_Ox_config_info::clear_bet_min_limit_money() {
  bet_min_limit_money_ = 0;
  clear_has_bet_min_limit_money();
}
::google::protobuf::int32 SC_Ox_config_info::bet_min_limit_money() const {
  // @@protoc_insertion_point(field_get:SC_Ox_config_info.bet_min_limit_money)
  return bet_min_limit_money_;
}
void SC_Ox_config_info::set_bet_min_limit_money(::google::protobuf::int32 value) {
  set_has_bet_min_limit_money();
  bet_min_limit_money_ = value;
  // @@protoc_insertion_point(field_set:SC_Ox_config_info.bet_min_limit_money)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CardCompareResult::kAreaFieldNumber;
const int CardCompareResult::kResultFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CardCompareResult::CardCompareResult()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_public_5fox_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:CardCompareResult)
}
CardCompareResult::CardCompareResult(const CardCompareResult& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&area__, &from.area__,
    reinterpret_cast<char*>(&result_) -
    reinterpret_cast<char*>(&area__) + sizeof(result_));
  // @@protoc_insertion_point(copy_constructor:CardCompareResult)
}

void CardCompareResult::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&area__, 0, reinterpret_cast<char*>(&result_) -
    reinterpret_cast<char*>(&area__) + sizeof(result_));
}

CardCompareResult::~CardCompareResult() {
  // @@protoc_insertion_point(destructor:CardCompareResult)
  SharedDtor();
}

void CardCompareResult::SharedDtor() {
}

void CardCompareResult::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CardCompareResult::descriptor() {
  protobuf_public_5fox_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_public_5fox_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CardCompareResult& CardCompareResult::default_instance() {
  protobuf_public_5fox_2eproto::InitDefaults();
  return *internal_default_instance();
}

CardCompareResult* CardCompareResult::New(::google::protobuf::Arena* arena) const {
  CardCompareResult* n = new CardCompareResult;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CardCompareResult::Clear() {
// @@protoc_insertion_point(message_clear_start:CardCompareResult)
  if (_has_bits_[0 / 32] & 3u) {
    ::memset(&area__, 0, reinterpret_cast<char*>(&result_) -
      reinterpret_cast<char*>(&area__) + sizeof(result_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CardCompareResult::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CardCompareResult)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 area_ = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_area_();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &area__)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool result = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_result();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &result_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CardCompareResult)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CardCompareResult)
  return false;
#undef DO_
}

void CardCompareResult::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CardCompareResult)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 area_ = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->area_(), output);
  }

  // optional bool result = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->result(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CardCompareResult)
}

::google::protobuf::uint8* CardCompareResult::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CardCompareResult)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 area_ = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->area_(), target);
  }

  // optional bool result = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->result(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CardCompareResult)
  return target;
}

size_t CardCompareResult::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CardCompareResult)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 3u) {
    // optional int32 area_ = 1;
    if (has_area_()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->area_());
    }

    // optional bool result = 2;
    if (has_result()) {
      total_size += 1 + 1;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CardCompareResult::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CardCompareResult)
  GOOGLE_DCHECK_NE(&from, this);
  const CardCompareResult* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CardCompareResult>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CardCompareResult)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CardCompareResult)
    MergeFrom(*source);
  }
}

void CardCompareResult::MergeFrom(const CardCompareResult& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CardCompareResult)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      area__ = from.area__;
    }
    if (cached_has_bits & 0x00000002u) {
      result_ = from.result_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CardCompareResult::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CardCompareResult)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CardCompareResult::CopyFrom(const CardCompareResult& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CardCompareResult)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CardCompareResult::IsInitialized() const {
  return true;
}

void CardCompareResult::Swap(CardCompareResult* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CardCompareResult::InternalSwap(CardCompareResult* other) {
  std::swap(area__, other->area__);
  std::swap(result_, other->result_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CardCompareResult::GetMetadata() const {
  protobuf_public_5fox_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_public_5fox_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CardCompareResult

// optional int32 area_ = 1;
bool CardCompareResult::has_area_() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CardCompareResult::set_has_area_() {
  _has_bits_[0] |= 0x00000001u;
}
void CardCompareResult::clear_has_area_() {
  _has_bits_[0] &= ~0x00000001u;
}
void CardCompareResult::clear_area_() {
  area__ = 0;
  clear_has_area_();
}
::google::protobuf::int32 CardCompareResult::area_() const {
  // @@protoc_insertion_point(field_get:CardCompareResult.area_)
  return area__;
}
void CardCompareResult::set_area_(::google::protobuf::int32 value) {
  set_has_area_();
  area__ = value;
  // @@protoc_insertion_point(field_set:CardCompareResult.area_)
}

// optional bool result = 2;
bool CardCompareResult::has_result() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CardCompareResult::set_has_result() {
  _has_bits_[0] |= 0x00000002u;
}
void CardCompareResult::clear_has_result() {
  _has_bits_[0] &= ~0x00000002u;
}
void CardCompareResult::clear_result() {
  result_ = false;
  clear_has_result();
}
bool CardCompareResult::result() const {
  // @@protoc_insertion_point(field_get:CardCompareResult.result)
  return result_;
}
void CardCompareResult::set_result(bool value) {
  set_has_result();
  result_ = value;
  // @@protoc_insertion_point(field_set:CardCompareResult.result)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SC_CardCompareResult::kPbCompareResultFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SC_CardCompareResult::SC_CardCompareResult()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_public_5fox_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:SC_CardCompareResult)
}
SC_CardCompareResult::SC_CardCompareResult(const SC_CardCompareResult& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      pb_compareresult_(from.pb_compareresult_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:SC_CardCompareResult)
}

void SC_CardCompareResult::SharedCtor() {
  _cached_size_ = 0;
}

SC_CardCompareResult::~SC_CardCompareResult() {
  // @@protoc_insertion_point(destructor:SC_CardCompareResult)
  SharedDtor();
}

void SC_CardCompareResult::SharedDtor() {
}

void SC_CardCompareResult::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SC_CardCompareResult::descriptor() {
  protobuf_public_5fox_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_public_5fox_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const SC_CardCompareResult& SC_CardCompareResult::default_instance() {
  protobuf_public_5fox_2eproto::InitDefaults();
  return *internal_default_instance();
}

SC_CardCompareResult* SC_CardCompareResult::New(::google::protobuf::Arena* arena) const {
  SC_CardCompareResult* n = new SC_CardCompareResult;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SC_CardCompareResult::Clear() {
// @@protoc_insertion_point(message_clear_start:SC_CardCompareResult)
  pb_compareresult_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool SC_CardCompareResult::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:SC_CardCompareResult)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .CardCompareResult pb_CompareResult = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_pb_compareresult()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:SC_CardCompareResult)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:SC_CardCompareResult)
  return false;
#undef DO_
}

void SC_CardCompareResult::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:SC_CardCompareResult)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .CardCompareResult pb_CompareResult = 1;
  for (unsigned int i = 0, n = this->pb_compareresult_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->pb_compareresult(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:SC_CardCompareResult)
}

::google::protobuf::uint8* SC_CardCompareResult::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:SC_CardCompareResult)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .CardCompareResult pb_CompareResult = 1;
  for (unsigned int i = 0, n = this->pb_compareresult_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, this->pb_compareresult(i), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SC_CardCompareResult)
  return target;
}

size_t SC_CardCompareResult::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SC_CardCompareResult)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // repeated .CardCompareResult pb_CompareResult = 1;
  {
    unsigned int count = this->pb_compareresult_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->pb_compareresult(i));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SC_CardCompareResult::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:SC_CardCompareResult)
  GOOGLE_DCHECK_NE(&from, this);
  const SC_CardCompareResult* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SC_CardCompareResult>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:SC_CardCompareResult)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:SC_CardCompareResult)
    MergeFrom(*source);
  }
}

void SC_CardCompareResult::MergeFrom(const SC_CardCompareResult& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:SC_CardCompareResult)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  pb_compareresult_.MergeFrom(from.pb_compareresult_);
}

void SC_CardCompareResult::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:SC_CardCompareResult)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SC_CardCompareResult::CopyFrom(const SC_CardCompareResult& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SC_CardCompareResult)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SC_CardCompareResult::IsInitialized() const {
  return true;
}

void SC_CardCompareResult::Swap(SC_CardCompareResult* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SC_CardCompareResult::InternalSwap(SC_CardCompareResult* other) {
  pb_compareresult_.InternalSwap(&other->pb_compareresult_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SC_CardCompareResult::GetMetadata() const {
  protobuf_public_5fox_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_public_5fox_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SC_CardCompareResult

// repeated .CardCompareResult pb_CompareResult = 1;
int SC_CardCompareResult::pb_compareresult_size() const {
  return pb_compareresult_.size();
}
void SC_CardCompareResult::clear_pb_compareresult() {
  pb_compareresult_.Clear();
}
const ::CardCompareResult& SC_CardCompareResult::pb_compareresult(int index) const {
  // @@protoc_insertion_point(field_get:SC_CardCompareResult.pb_CompareResult)
  return pb_compareresult_.Get(index);
}
::CardCompareResult* SC_CardCompareResult::mutable_pb_compareresult(int index) {
  // @@protoc_insertion_point(field_mutable:SC_CardCompareResult.pb_CompareResult)
  return pb_compareresult_.Mutable(index);
}
::CardCompareResult* SC_CardCompareResult::add_pb_compareresult() {
  // @@protoc_insertion_point(field_add:SC_CardCompareResult.pb_CompareResult)
  return pb_compareresult_.Add();
}
::google::protobuf::RepeatedPtrField< ::CardCompareResult >*
SC_CardCompareResult::mutable_pb_compareresult() {
  // @@protoc_insertion_point(field_mutable_list:SC_CardCompareResult.pb_CompareResult)
  return &pb_compareresult_;
}
const ::google::protobuf::RepeatedPtrField< ::CardCompareResult >&
SC_CardCompareResult::pb_compareresult() const {
  // @@protoc_insertion_point(field_list:SC_CardCompareResult.pb_CompareResult)
  return pb_compareresult_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CS_OxGetBetCfg::CS_OxGetBetCfg()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_public_5fox_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:CS_OxGetBetCfg)
}
CS_OxGetBetCfg::CS_OxGetBetCfg(const CS_OxGetBetCfg& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:CS_OxGetBetCfg)
}

void CS_OxGetBetCfg::SharedCtor() {
  _cached_size_ = 0;
}

CS_OxGetBetCfg::~CS_OxGetBetCfg() {
  // @@protoc_insertion_point(destructor:CS_OxGetBetCfg)
  SharedDtor();
}

void CS_OxGetBetCfg::SharedDtor() {
}

void CS_OxGetBetCfg::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CS_OxGetBetCfg::descriptor() {
  protobuf_public_5fox_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_public_5fox_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CS_OxGetBetCfg& CS_OxGetBetCfg::default_instance() {
  protobuf_public_5fox_2eproto::InitDefaults();
  return *internal_default_instance();
}

CS_OxGetBetCfg* CS_OxGetBetCfg::New(::google::protobuf::Arena* arena) const {
  CS_OxGetBetCfg* n = new CS_OxGetBetCfg;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CS_OxGetBetCfg::Clear() {
// @@protoc_insertion_point(message_clear_start:CS_OxGetBetCfg)
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CS_OxGetBetCfg::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CS_OxGetBetCfg)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:CS_OxGetBetCfg)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CS_OxGetBetCfg)
  return false;
#undef DO_
}

void CS_OxGetBetCfg::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CS_OxGetBetCfg)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CS_OxGetBetCfg)
}

::google::protobuf::uint8* CS_OxGetBetCfg::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CS_OxGetBetCfg)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CS_OxGetBetCfg)
  return target;
}

size_t CS_OxGetBetCfg::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CS_OxGetBetCfg)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CS_OxGetBetCfg::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CS_OxGetBetCfg)
  GOOGLE_DCHECK_NE(&from, this);
  const CS_OxGetBetCfg* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CS_OxGetBetCfg>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CS_OxGetBetCfg)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CS_OxGetBetCfg)
    MergeFrom(*source);
  }
}

void CS_OxGetBetCfg::MergeFrom(const CS_OxGetBetCfg& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CS_OxGetBetCfg)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void CS_OxGetBetCfg::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CS_OxGetBetCfg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CS_OxGetBetCfg::CopyFrom(const CS_OxGetBetCfg& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CS_OxGetBetCfg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CS_OxGetBetCfg::IsInitialized() const {
  return true;
}

void CS_OxGetBetCfg::Swap(CS_OxGetBetCfg* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CS_OxGetBetCfg::InternalSwap(CS_OxGetBetCfg* other) {
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CS_OxGetBetCfg::GetMetadata() const {
  protobuf_public_5fox_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_public_5fox_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CS_OxGetBetCfg

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SC_OxGetBetCfg::kBetsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SC_OxGetBetCfg::SC_OxGetBetCfg()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_public_5fox_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:SC_OxGetBetCfg)
}
SC_OxGetBetCfg::SC_OxGetBetCfg(const SC_OxGetBetCfg& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      bets_(from.bets_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:SC_OxGetBetCfg)
}

void SC_OxGetBetCfg::SharedCtor() {
  _cached_size_ = 0;
}

SC_OxGetBetCfg::~SC_OxGetBetCfg() {
  // @@protoc_insertion_point(destructor:SC_OxGetBetCfg)
  SharedDtor();
}

void SC_OxGetBetCfg::SharedDtor() {
}

void SC_OxGetBetCfg::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SC_OxGetBetCfg::descriptor() {
  protobuf_public_5fox_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_public_5fox_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const SC_OxGetBetCfg& SC_OxGetBetCfg::default_instance() {
  protobuf_public_5fox_2eproto::InitDefaults();
  return *internal_default_instance();
}

SC_OxGetBetCfg* SC_OxGetBetCfg::New(::google::protobuf::Arena* arena) const {
  SC_OxGetBetCfg* n = new SC_OxGetBetCfg;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SC_OxGetBetCfg::Clear() {
// @@protoc_insertion_point(message_clear_start:SC_OxGetBetCfg)
  bets_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool SC_OxGetBetCfg::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:SC_OxGetBetCfg)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated int32 bets = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 8u, input, this->mutable_bets())));
        } else if (static_cast< ::google::protobuf::uint8>(tag) ==
                   static_cast< ::google::protobuf::uint8>(10u)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_bets())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:SC_OxGetBetCfg)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:SC_OxGetBetCfg)
  return false;
#undef DO_
}

void SC_OxGetBetCfg::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:SC_OxGetBetCfg)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated int32 bets = 1;
  for (int i = 0, n = this->bets_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      1, this->bets(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:SC_OxGetBetCfg)
}

::google::protobuf::uint8* SC_OxGetBetCfg::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:SC_OxGetBetCfg)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated int32 bets = 1;
  target = ::google::protobuf::internal::WireFormatLite::
    WriteInt32ToArray(1, this->bets_, target);

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SC_OxGetBetCfg)
  return target;
}

size_t SC_OxGetBetCfg::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SC_OxGetBetCfg)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // repeated int32 bets = 1;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      Int32Size(this->bets_);
    total_size += 1 *
                  ::google::protobuf::internal::FromIntSize(this->bets_size());
    total_size += data_size;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SC_OxGetBetCfg::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:SC_OxGetBetCfg)
  GOOGLE_DCHECK_NE(&from, this);
  const SC_OxGetBetCfg* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SC_OxGetBetCfg>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:SC_OxGetBetCfg)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:SC_OxGetBetCfg)
    MergeFrom(*source);
  }
}

void SC_OxGetBetCfg::MergeFrom(const SC_OxGetBetCfg& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:SC_OxGetBetCfg)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  bets_.MergeFrom(from.bets_);
}

void SC_OxGetBetCfg::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:SC_OxGetBetCfg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SC_OxGetBetCfg::CopyFrom(const SC_OxGetBetCfg& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SC_OxGetBetCfg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SC_OxGetBetCfg::IsInitialized() const {
  return true;
}

void SC_OxGetBetCfg::Swap(SC_OxGetBetCfg* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SC_OxGetBetCfg::InternalSwap(SC_OxGetBetCfg* other) {
  bets_.InternalSwap(&other->bets_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SC_OxGetBetCfg::GetMetadata() const {
  protobuf_public_5fox_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_public_5fox_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SC_OxGetBetCfg

// repeated int32 bets = 1;
int SC_OxGetBetCfg::bets_size() const {
  return bets_.size();
}
void SC_OxGetBetCfg::clear_bets() {
  bets_.Clear();
}
::google::protobuf::int32 SC_OxGetBetCfg::bets(int index) const {
  // @@protoc_insertion_point(field_get:SC_OxGetBetCfg.bets)
  return bets_.Get(index);
}
void SC_OxGetBetCfg::set_bets(int index, ::google::protobuf::int32 value) {
  bets_.Set(index, value);
  // @@protoc_insertion_point(field_set:SC_OxGetBetCfg.bets)
}
void SC_OxGetBetCfg::add_bets(::google::protobuf::int32 value) {
  bets_.Add(value);
  // @@protoc_insertion_point(field_add:SC_OxGetBetCfg.bets)
}
const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
SC_OxGetBetCfg::bets() const {
  // @@protoc_insertion_point(field_list:SC_OxGetBetCfg.bets)
  return bets_;
}
::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
SC_OxGetBetCfg::mutable_bets() {
  // @@protoc_insertion_point(field_mutable_list:SC_OxGetBetCfg.bets)
  return &bets_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)
