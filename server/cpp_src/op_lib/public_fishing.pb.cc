// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: public_fishing.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "public_fishing.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
class CS_TreasureEndDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CS_TreasureEnd> {
} _CS_TreasureEnd_default_instance_;
class CS_ChangeCannonSetDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CS_ChangeCannonSet> {
} _CS_ChangeCannonSet_default_instance_;
class CS_NetcastDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CS_Netcast> {
} _CS_Netcast_default_instance_;
class CS_LockFishDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CS_LockFish> {
} _CS_LockFish_default_instance_;
class CS_LockSpecFishDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CS_LockSpecFish> {
} _CS_LockSpecFish_default_instance_;
class CS_FireDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CS_Fire> {
} _CS_Fire_default_instance_;
class CS_ChangeCannonDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CS_ChangeCannon> {
} _CS_ChangeCannon_default_instance_;
class CS_ChangeScoreDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CS_ChangeScore> {
} _CS_ChangeScore_default_instance_;
class CS_TimeSyncDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CS_TimeSync> {
} _CS_TimeSync_default_instance_;
class SC_FishMulDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<SC_FishMul> {
} _SC_FishMul_default_instance_;
class SC_AddBufferDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<SC_AddBuffer> {
} _SC_AddBuffer_default_instance_;
class SC_BulletSetDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<SC_BulletSet> {
} _SC_BulletSet_default_instance_;
class SC_BulletSet_ListDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<SC_BulletSet_List> {
} _SC_BulletSet_List_default_instance_;
class SC_SendDesDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<SC_SendDes> {
} _SC_SendDes_default_instance_;
class SC_LockFishDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<SC_LockFish> {
} _SC_LockFish_default_instance_;
class SC_AllowFireDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<SC_AllowFire> {
} _SC_AllowFire_default_instance_;
class SC_SwitchSceneDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<SC_SwitchScene> {
} _SC_SwitchScene_default_instance_;
class SC_KillBulletDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<SC_KillBullet> {
} _SC_KillBullet_default_instance_;
class SC_KillFishDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<SC_KillFish> {
} _SC_KillFish_default_instance_;
class SC_SendBulletDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<SC_SendBullet> {
} _SC_SendBullet_default_instance_;
class SC_Fly_Bullet_ListDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<SC_Fly_Bullet_List> {
} _SC_Fly_Bullet_List_default_instance_;
class SC_CannonSetDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<SC_CannonSet> {
} _SC_CannonSet_default_instance_;
class SC_ChangeScoreDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<SC_ChangeScore> {
} _SC_ChangeScore_default_instance_;
class SC_UserInfoDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<SC_UserInfo> {
} _SC_UserInfo_default_instance_;
class SC_SendFishDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<SC_SendFish> {
} _SC_SendFish_default_instance_;
class SC_SendFishListDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<SC_SendFishList> {
} _SC_SendFishList_default_instance_;
class SC_GameConfigDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<SC_GameConfig> {
} _SC_GameConfig_default_instance_;
class SC_TimeSyncDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<SC_TimeSync> {
} _SC_TimeSync_default_instance_;
class SC_SystemMessageDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<SC_SystemMessage> {
} _SC_SystemMessage_default_instance_;

namespace protobuf_public_5ffishing_2eproto {


namespace {

::google::protobuf::Metadata file_level_metadata[29];
const ::google::protobuf::EnumDescriptor* file_level_enum_descriptors[30];

}  // namespace

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTableField
    const TableStruct::entries[] = {
  {0, 0, 0, ::google::protobuf::internal::kInvalidMask, 0, 0},
};

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::AuxillaryParseTableField
    const TableStruct::aux[] = {
  ::google::protobuf::internal::AuxillaryParseTableField(),
};
PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTable const
    TableStruct::schema[] = {
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
};

const ::google::protobuf::uint32 TableStruct::offsets[] = {
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CS_TreasureEnd, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CS_TreasureEnd, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CS_TreasureEnd, chair_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CS_TreasureEnd, score_),
  1,
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CS_ChangeCannonSet, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CS_ChangeCannonSet, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CS_ChangeCannonSet, chair_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CS_ChangeCannonSet, add_),
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CS_Netcast, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CS_Netcast, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CS_Netcast, bullet_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CS_Netcast, data_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CS_Netcast, fish_id_),
  0,
  1,
  2,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CS_LockFish, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CS_LockFish, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CS_LockFish, chair_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CS_LockFish, lock_),
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CS_LockSpecFish, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CS_LockSpecFish, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CS_LockSpecFish, chair_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CS_LockSpecFish, fish_id_),
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CS_Fire, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CS_Fire, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CS_Fire, chair_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CS_Fire, direction_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CS_Fire, fire_time_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CS_Fire, client_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CS_Fire, pos_x_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CS_Fire, pos_y_),
  0,
  1,
  2,
  3,
  4,
  5,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CS_ChangeCannon, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CS_ChangeCannon, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CS_ChangeCannon, chair_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CS_ChangeCannon, add_),
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CS_ChangeScore, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CS_ChangeScore, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CS_ChangeScore, chair_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CS_ChangeScore, add_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CS_ChangeScore, add_all_),
  0,
  1,
  2,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CS_TimeSync, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CS_TimeSync, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CS_TimeSync, chair_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CS_TimeSync, client_tick_),
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SC_FishMul, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SC_FishMul, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SC_FishMul, fish_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SC_FishMul, mul_),
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SC_AddBuffer, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SC_AddBuffer, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SC_AddBuffer, buffer_type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SC_AddBuffer, buffer_param_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SC_AddBuffer, buffer_time_),
  0,
  1,
  2,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SC_BulletSet, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SC_BulletSet, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SC_BulletSet, mulriple_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SC_BulletSet, speed_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SC_BulletSet, max_catch_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SC_BulletSet, bullet_size_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SC_BulletSet, catch_radio_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SC_BulletSet, cannon_type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SC_BulletSet, first_),
  0,
  1,
  2,
  3,
  4,
  5,
  6,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SC_BulletSet_List, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SC_BulletSet_List, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SC_BulletSet_List, pb_bullets_),
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SC_SendDes, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SC_SendDes, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SC_SendDes, des_),
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SC_LockFish, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SC_LockFish, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SC_LockFish, chair_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SC_LockFish, lock_id_),
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SC_AllowFire, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SC_AllowFire, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SC_AllowFire, allow_fire_),
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SC_SwitchScene, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SC_SwitchScene, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SC_SwitchScene, nst_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SC_SwitchScene, switching_),
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SC_KillBullet, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SC_KillBullet, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SC_KillBullet, chair_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SC_KillBullet, bullet_id_),
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SC_KillFish, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SC_KillFish, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SC_KillFish, chair_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SC_KillFish, score_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SC_KillFish, fish_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SC_KillFish, bscoe_),
  1,
  0,
  2,
  3,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SC_SendBullet, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SC_SendBullet, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SC_SendBullet, id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SC_SendBullet, chair_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SC_SendBullet, create_tick_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SC_SendBullet, x_pos_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SC_SendBullet, y_pos_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SC_SendBullet, cannon_type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SC_SendBullet, multiply_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SC_SendBullet, score_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SC_SendBullet, direction_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SC_SendBullet, is_new_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SC_SendBullet, server_tick_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SC_SendBullet, is_double_),
  0,
  1,
  2,
  3,
  4,
  5,
  7,
  6,
  8,
  9,
  10,
  11,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SC_Fly_Bullet_List, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SC_Fly_Bullet_List, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SC_Fly_Bullet_List, pb_fly_bullets_),
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SC_CannonSet, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SC_CannonSet, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SC_CannonSet, chair_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SC_CannonSet, cannon_type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SC_CannonSet, cannon_mul_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SC_CannonSet, cannon_set_),
  0,
  1,
  2,
  3,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SC_ChangeScore, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SC_ChangeScore, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SC_ChangeScore, chair_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SC_ChangeScore, fish_score_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SC_ChangeScore, wastage_score_),
  2,
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SC_UserInfo, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SC_UserInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SC_UserInfo, chair_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SC_UserInfo, score_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SC_UserInfo, cannon_type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SC_UserInfo, cannon_mul_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SC_UserInfo, wastage_),
  1,
  0,
  2,
  4,
  3,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SC_SendFish, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SC_SendFish, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SC_SendFish, fish_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SC_SendFish, type_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SC_SendFish, path_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SC_SendFish, create_tick_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SC_SendFish, offest_x_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SC_SendFish, offest_y_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SC_SendFish, dir_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SC_SendFish, delay_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SC_SendFish, server_tick_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SC_SendFish, fish_speed_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SC_SendFish, fis_type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SC_SendFish, troop_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SC_SendFish, refersh_id_),
  0,
  1,
  2,
  3,
  4,
  5,
  6,
  7,
  8,
  9,
  10,
  11,
  12,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SC_SendFishList, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SC_SendFishList, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SC_SendFishList, pb_fishes_),
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SC_GameConfig, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SC_GameConfig, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SC_GameConfig, server_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SC_GameConfig, change_ratio_user_score_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SC_GameConfig, change_ratio_fish_score_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SC_GameConfig, exchange_once_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SC_GameConfig, fire_interval_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SC_GameConfig, max_interval_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SC_GameConfig, min_interval_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SC_GameConfig, show_gold_min_mul_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SC_GameConfig, max_bullet_count_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SC_GameConfig, max_cannon_),
  0,
  1,
  2,
  3,
  4,
  5,
  6,
  7,
  8,
  9,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SC_TimeSync, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SC_TimeSync, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SC_TimeSync, chair_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SC_TimeSync, server_tick_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SC_TimeSync, client_tick_),
  0,
  1,
  2,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SC_SystemMessage, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SC_SystemMessage, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SC_SystemMessage, wtype_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SC_SystemMessage, szstring_),
  1,
  0,
};

static const ::google::protobuf::internal::MigrationSchema schemas[] = {
  { 0, 7, sizeof(CS_TreasureEnd)},
  { 9, 16, sizeof(CS_ChangeCannonSet)},
  { 18, 26, sizeof(CS_Netcast)},
  { 29, 36, sizeof(CS_LockFish)},
  { 38, 45, sizeof(CS_LockSpecFish)},
  { 47, 58, sizeof(CS_Fire)},
  { 64, 71, sizeof(CS_ChangeCannon)},
  { 73, 81, sizeof(CS_ChangeScore)},
  { 84, 91, sizeof(CS_TimeSync)},
  { 93, 100, sizeof(SC_FishMul)},
  { 102, 110, sizeof(SC_AddBuffer)},
  { 113, 125, sizeof(SC_BulletSet)},
  { 132, 138, sizeof(SC_BulletSet_List)},
  { 139, 145, sizeof(SC_SendDes)},
  { 146, 153, sizeof(SC_LockFish)},
  { 155, 161, sizeof(SC_AllowFire)},
  { 162, 169, sizeof(SC_SwitchScene)},
  { 171, 178, sizeof(SC_KillBullet)},
  { 180, 189, sizeof(SC_KillFish)},
  { 193, 210, sizeof(SC_SendBullet)},
  { 222, 228, sizeof(SC_Fly_Bullet_List)},
  { 229, 238, sizeof(SC_CannonSet)},
  { 242, 250, sizeof(SC_ChangeScore)},
  { 253, 263, sizeof(SC_UserInfo)},
  { 268, 286, sizeof(SC_SendFish)},
  { 299, 305, sizeof(SC_SendFishList)},
  { 306, 321, sizeof(SC_GameConfig)},
  { 331, 339, sizeof(SC_TimeSync)},
  { 342, 349, sizeof(SC_SystemMessage)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&_CS_TreasureEnd_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CS_ChangeCannonSet_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CS_Netcast_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CS_LockFish_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CS_LockSpecFish_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CS_Fire_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CS_ChangeCannon_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CS_ChangeScore_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CS_TimeSync_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_SC_FishMul_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_SC_AddBuffer_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_SC_BulletSet_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_SC_BulletSet_List_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_SC_SendDes_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_SC_LockFish_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_SC_AllowFire_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_SC_SwitchScene_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_SC_KillBullet_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_SC_KillFish_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_SC_SendBullet_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_SC_Fly_Bullet_List_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_SC_CannonSet_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_SC_ChangeScore_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_SC_UserInfo_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_SC_SendFish_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_SC_SendFishList_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_SC_GameConfig_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_SC_TimeSync_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_SC_SystemMessage_default_instance_),
};

namespace {

void protobuf_AssignDescriptors() {
  AddDescriptors();
  ::google::protobuf::MessageFactory* factory = NULL;
  AssignDescriptors(
      "public_fishing.proto", schemas, file_default_instances, TableStruct::offsets, factory,
      file_level_metadata, file_level_enum_descriptors, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 29);
}

}  // namespace

void TableStruct::Shutdown() {
  _CS_TreasureEnd_default_instance_.Shutdown();
  delete file_level_metadata[0].reflection;
  _CS_ChangeCannonSet_default_instance_.Shutdown();
  delete file_level_metadata[1].reflection;
  _CS_Netcast_default_instance_.Shutdown();
  delete file_level_metadata[2].reflection;
  _CS_LockFish_default_instance_.Shutdown();
  delete file_level_metadata[3].reflection;
  _CS_LockSpecFish_default_instance_.Shutdown();
  delete file_level_metadata[4].reflection;
  _CS_Fire_default_instance_.Shutdown();
  delete file_level_metadata[5].reflection;
  _CS_ChangeCannon_default_instance_.Shutdown();
  delete file_level_metadata[6].reflection;
  _CS_ChangeScore_default_instance_.Shutdown();
  delete file_level_metadata[7].reflection;
  _CS_TimeSync_default_instance_.Shutdown();
  delete file_level_metadata[8].reflection;
  _SC_FishMul_default_instance_.Shutdown();
  delete file_level_metadata[9].reflection;
  _SC_AddBuffer_default_instance_.Shutdown();
  delete file_level_metadata[10].reflection;
  _SC_BulletSet_default_instance_.Shutdown();
  delete file_level_metadata[11].reflection;
  _SC_BulletSet_List_default_instance_.Shutdown();
  delete file_level_metadata[12].reflection;
  _SC_SendDes_default_instance_.Shutdown();
  delete file_level_metadata[13].reflection;
  _SC_LockFish_default_instance_.Shutdown();
  delete file_level_metadata[14].reflection;
  _SC_AllowFire_default_instance_.Shutdown();
  delete file_level_metadata[15].reflection;
  _SC_SwitchScene_default_instance_.Shutdown();
  delete file_level_metadata[16].reflection;
  _SC_KillBullet_default_instance_.Shutdown();
  delete file_level_metadata[17].reflection;
  _SC_KillFish_default_instance_.Shutdown();
  delete file_level_metadata[18].reflection;
  _SC_SendBullet_default_instance_.Shutdown();
  delete file_level_metadata[19].reflection;
  _SC_Fly_Bullet_List_default_instance_.Shutdown();
  delete file_level_metadata[20].reflection;
  _SC_CannonSet_default_instance_.Shutdown();
  delete file_level_metadata[21].reflection;
  _SC_ChangeScore_default_instance_.Shutdown();
  delete file_level_metadata[22].reflection;
  _SC_UserInfo_default_instance_.Shutdown();
  delete file_level_metadata[23].reflection;
  _SC_SendFish_default_instance_.Shutdown();
  delete file_level_metadata[24].reflection;
  _SC_SendFishList_default_instance_.Shutdown();
  delete file_level_metadata[25].reflection;
  _SC_GameConfig_default_instance_.Shutdown();
  delete file_level_metadata[26].reflection;
  _SC_TimeSync_default_instance_.Shutdown();
  delete file_level_metadata[27].reflection;
  _SC_SystemMessage_default_instance_.Shutdown();
  delete file_level_metadata[28].reflection;
}

void TableStruct::InitDefaultsImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::internal::InitProtobufDefaults();
  _CS_TreasureEnd_default_instance_.DefaultConstruct();
  _CS_ChangeCannonSet_default_instance_.DefaultConstruct();
  _CS_Netcast_default_instance_.DefaultConstruct();
  _CS_LockFish_default_instance_.DefaultConstruct();
  _CS_LockSpecFish_default_instance_.DefaultConstruct();
  _CS_Fire_default_instance_.DefaultConstruct();
  _CS_ChangeCannon_default_instance_.DefaultConstruct();
  _CS_ChangeScore_default_instance_.DefaultConstruct();
  _CS_TimeSync_default_instance_.DefaultConstruct();
  _SC_FishMul_default_instance_.DefaultConstruct();
  _SC_AddBuffer_default_instance_.DefaultConstruct();
  _SC_BulletSet_default_instance_.DefaultConstruct();
  _SC_BulletSet_List_default_instance_.DefaultConstruct();
  _SC_SendDes_default_instance_.DefaultConstruct();
  _SC_LockFish_default_instance_.DefaultConstruct();
  _SC_AllowFire_default_instance_.DefaultConstruct();
  _SC_SwitchScene_default_instance_.DefaultConstruct();
  _SC_KillBullet_default_instance_.DefaultConstruct();
  _SC_KillFish_default_instance_.DefaultConstruct();
  _SC_SendBullet_default_instance_.DefaultConstruct();
  _SC_Fly_Bullet_List_default_instance_.DefaultConstruct();
  _SC_CannonSet_default_instance_.DefaultConstruct();
  _SC_ChangeScore_default_instance_.DefaultConstruct();
  _SC_UserInfo_default_instance_.DefaultConstruct();
  _SC_SendFish_default_instance_.DefaultConstruct();
  _SC_SendFishList_default_instance_.DefaultConstruct();
  _SC_GameConfig_default_instance_.DefaultConstruct();
  _SC_TimeSync_default_instance_.DefaultConstruct();
  _SC_SystemMessage_default_instance_.DefaultConstruct();
}

void InitDefaults() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &TableStruct::InitDefaultsImpl);
}
void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] = {
      "\n\024public_fishing.proto\"O\n\016CS_TreasureEnd"
      "\022\020\n\010chair_id\030\001 \002(\005\022\r\n\005score\030\002 \002(\003\"\034\n\005Msg"
      "ID\022\007\n\002ID\020\340]\022\n\n\006Target\020\002\"Q\n\022CS_ChangeCann"
      "onSet\022\020\n\010chair_id\030\001 \002(\005\022\013\n\003add\030\002 \002(\005\"\034\n\005"
      "MsgID\022\007\n\002ID\020\341]\022\n\n\006Target\020\002\"\\\n\nCS_Netcast"
      "\022\021\n\tbullet_id\030\001 \002(\005\022\014\n\004data\030\002 \002(\005\022\017\n\007fis"
      "h_id\030\003 \002(\005\"\034\n\005MsgID\022\007\n\002ID\020\342]\022\n\n\006Target\020\002"
      "\"K\n\013CS_LockFish\022\020\n\010chair_id\030\001 \002(\005\022\014\n\004loc"
      "k\030\002 \002(\005\"\034\n\005MsgID\022\007\n\002ID\020\343]\022\n\n\006Target\020\002\"F\n"
      "\017CS_LockSpecFish\022\020\n\010chair_id\030\001 \002(\005\022\017\n\007fi"
      "sh_id\030\002 \002(\005\"\020\n\005MsgID\022\007\n\002ID\020\330^\"\220\001\n\007CS_Fir"
      "e\022\020\n\010chair_id\030\001 \002(\005\022\021\n\tdirection\030\002 \002(\002\022\021"
      "\n\tfire_time\030\003 \002(\r\022\021\n\tclient_id\030\004 \002(\005\022\r\n\005"
      "pos_x\030\005 \002(\002\022\r\n\005pos_y\030\006 \002(\002\"\034\n\005MsgID\022\007\n\002I"
      "D\020\344]\022\n\n\006Target\020\002\"N\n\017CS_ChangeCannon\022\020\n\010c"
      "hair_id\030\001 \002(\005\022\013\n\003add\030\002 \002(\005\"\034\n\005MsgID\022\007\n\002I"
      "D\020\345]\022\n\n\006Target\020\002\"^\n\016CS_ChangeScore\022\020\n\010ch"
      "air_id\030\001 \002(\005\022\013\n\003add\030\002 \002(\005\022\017\n\007add_all\030\003 \002"
      "(\005\"\034\n\005MsgID\022\007\n\002ID\020\346]\022\n\n\006Target\020\002\"R\n\013CS_T"
      "imeSync\022\020\n\010chair_id\030\001 \002(\005\022\023\n\013client_tick"
      "\030\002 \002(\r\"\034\n\005MsgID\022\007\n\002ID\020\347]\022\n\n\006Target\020\002\"<\n\n"
      "SC_FishMul\022\017\n\007fish_id\030\001 \002(\005\022\013\n\003mul\030\002 \002(\005"
      "\"\020\n\005MsgID\022\007\n\002ID\020\304^\"`\n\014SC_AddBuffer\022\023\n\013bu"
      "ffer_type\030\001 \002(\005\022\024\n\014buffer_param\030\002 \002(\002\022\023\n"
      "\013buffer_time\030\003 \002(\002\"\020\n\005MsgID\022\007\n\002ID\020\306^\"\242\001\n"
      "\014SC_BulletSet\022\020\n\010mulriple\030\001 \002(\005\022\r\n\005speed"
      "\030\002 \002(\005\022\021\n\tmax_catch\030\003 \002(\005\022\023\n\013bullet_size"
      "\030\004 \002(\005\022\023\n\013catch_radio\030\005 \002(\005\022\023\n\013cannon_ty"
      "pe\030\006 \002(\005\022\r\n\005first\030\007 \002(\005\"\020\n\005MsgID\022\007\n\002ID\020\307"
      "^\"H\n\021SC_BulletSet_List\022!\n\npb_bullets\030\001 \003"
      "(\0132\r.SC_BulletSet\"\020\n\005MsgID\022\007\n\002ID\020\331^\"+\n\nS"
      "C_SendDes\022\013\n\003des\030\001 \003(\t\"\020\n\005MsgID\022\007\n\002ID\020\310^"
      "\"E\n\013SC_LockFish\022\020\n\010chair_id\030\001 \002(\005\022\022\n\007loc"
      "k_id\030\002 \002(\005:\0010\"\020\n\005MsgID\022\007\n\002ID\020\311^\"4\n\014SC_Al"
      "lowFire\022\022\n\nallow_fire\030\001 \002(\005\"\020\n\005MsgID\022\007\n\002"
      "ID\020\313^\"B\n\016SC_SwitchScene\022\013\n\003nst\030\001 \002(\005\022\021\n\t"
      "switching\030\002 \002(\005\"\020\n\005MsgID\022\007\n\002ID\020\314^\"F\n\rSC_"
      "KillBullet\022\020\n\010chair_id\030\001 \002(\005\022\021\n\tbullet_i"
      "d\030\002 \002(\005\"\020\n\005MsgID\022\007\n\002ID\020\315^\"`\n\013SC_KillFish"
      "\022\020\n\010chair_id\030\001 \002(\005\022\r\n\005score\030\002 \002(\003\022\017\n\007fis"
      "h_id\030\003 \002(\005\022\r\n\005bscoe\030\004 \002(\005\"\020\n\005MsgID\022\007\n\002ID"
      "\020\316^\"\363\001\n\rSC_SendBullet\022\n\n\002id\030\001 \002(\005\022\020\n\010cha"
      "ir_id\030\002 \002(\005\022\023\n\013create_tick\030\003 \002(\r\022\r\n\005x_po"
      "s\030\004 \002(\002\022\r\n\005y_pos\030\005 \002(\002\022\023\n\013cannon_type\030\006 "
      "\002(\005\022\020\n\010multiply\030\007 \002(\005\022\r\n\005score\030\010 \002(\003\022\021\n\t"
      "direction\030\t \002(\002\022\016\n\006is_new\030\n \002(\005\022\023\n\013serve"
      "r_tick\030\013 \002(\r\022\021\n\tis_double\030\014 \002(\005\"\020\n\005MsgID"
      "\022\007\n\002ID\020\317^\"N\n\022SC_Fly_Bullet_List\022&\n\016pb_fl"
      "y_bullets\030\001 \003(\0132\016.SC_SendBullet\"\020\n\005MsgID"
      "\022\007\n\002ID\020\332^\"o\n\014SC_CannonSet\022\020\n\010chair_id\030\001 "
      "\002(\005\022\023\n\013cannon_type\030\002 \002(\005\022\022\n\ncannon_mul\030\003"
      " \002(\005\022\022\n\ncannon_set\030\004 \002(\005\"\020\n\005MsgID\022\007\n\002ID\020"
      "\320^\"_\n\016SC_ChangeScore\022\020\n\010chair_id\030\001 \002(\005\022\022"
      "\n\nfish_score\030\002 \002(\003\022\025\n\rwastage_score\030\003 \002("
      "\003\"\020\n\005MsgID\022\007\n\002ID\020\321^\"z\n\013SC_UserInfo\022\020\n\010ch"
      "air_id\030\001 \002(\005\022\r\n\005score\030\002 \002(\003\022\023\n\013cannon_ty"
      "pe\030\003 \002(\005\022\022\n\ncannon_mul\030\004 \002(\005\022\017\n\007wastage\030"
      "\005 \002(\003\"\020\n\005MsgID\022\007\n\002ID\020\322^\"\205\002\n\013SC_SendFish\022"
      "\017\n\007fish_id\030\001 \002(\005\022\017\n\007type_id\030\002 \002(\005\022\017\n\007pat"
      "h_id\030\003 \002(\005\022\023\n\013create_tick\030\004 \002(\r\022\020\n\010offes"
      "t_x\030\005 \002(\002\022\020\n\010offest_y\030\006 \002(\002\022\013\n\003dir\030\007 \002(\002"
      "\022\r\n\005delay\030\010 \002(\002\022\023\n\013server_tick\030\t \002(\r\022\022\n\n"
      "fish_speed\030\n \002(\002\022\020\n\010fis_type\030\013 \002(\005\022\r\n\005tr"
      "oop\030\014 \002(\010\022\022\n\nrefersh_id\030\r \002(\005\"\020\n\005MsgID\022\007"
      "\n\002ID\020\323^\"D\n\017SC_SendFishList\022\037\n\tpb_fishes\030"
      "\001 \003(\0132\014.SC_SendFish\"\020\n\005MsgID\022\007\n\002ID\020\324^\"\231\002"
      "\n\rSC_GameConfig\022\021\n\tserver_id\030\001 \002(\005\022\037\n\027ch"
      "ange_ratio_user_score\030\002 \002(\005\022\037\n\027change_ra"
      "tio_fish_score\030\003 \002(\005\022\025\n\rexchange_once\030\004 "
      "\002(\005\022\025\n\rfire_interval\030\005 \002(\005\022\024\n\014max_interv"
      "al\030\006 \002(\005\022\024\n\014min_interval\030\007 \002(\005\022\031\n\021show_g"
      "old_min_mul\030\010 \002(\005\022\030\n\020max_bullet_count\030\t "
      "\002(\005\022\022\n\nmax_cannon\030\n \002(\005\"\020\n\005MsgID\022\007\n\002ID\020\325"
      "^\"[\n\013SC_TimeSync\022\020\n\010chair_id\030\001 \002(\005\022\023\n\013se"
      "rver_tick\030\002 \002(\r\022\023\n\013client_tick\030\003 \002(\r\"\020\n\005"
      "MsgID\022\007\n\002ID\020\326^\"E\n\020SC_SystemMessage\022\r\n\005wT"
      "ype\030\001 \002(\005\022\020\n\010szString\030\002 \002(\t\"\020\n\005MsgID\022\007\n\002"
      "ID\020\327^*j\n\010SMT_TYPE\022\014\n\010SMT_CHAT\020\001\022\r\n\tSMT_E"
      "JECT\020\002\022\016\n\nSMT_GLOBAL\020\004\022\016\n\nSMT_PROMPT\020\010\022\022"
      "\n\016SMT_TABLE_ROLL\020\020\022\r\n\tSMT_SCORE\020 "
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 3193);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "public_fishing.proto", &protobuf_RegisterTypes);
  ::google::protobuf::internal::OnShutdown(&TableStruct::Shutdown);
}

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;

}  // namespace protobuf_public_5ffishing_2eproto

const ::google::protobuf::EnumDescriptor* CS_TreasureEnd_MsgID_descriptor() {
  protobuf_public_5ffishing_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_public_5ffishing_2eproto::file_level_enum_descriptors[0];
}
bool CS_TreasureEnd_MsgID_IsValid(int value) {
  switch (value) {
    case 2:
    case 12000:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const CS_TreasureEnd_MsgID CS_TreasureEnd::ID;
const CS_TreasureEnd_MsgID CS_TreasureEnd::Target;
const CS_TreasureEnd_MsgID CS_TreasureEnd::MsgID_MIN;
const CS_TreasureEnd_MsgID CS_TreasureEnd::MsgID_MAX;
const int CS_TreasureEnd::MsgID_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* CS_ChangeCannonSet_MsgID_descriptor() {
  protobuf_public_5ffishing_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_public_5ffishing_2eproto::file_level_enum_descriptors[1];
}
bool CS_ChangeCannonSet_MsgID_IsValid(int value) {
  switch (value) {
    case 2:
    case 12001:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const CS_ChangeCannonSet_MsgID CS_ChangeCannonSet::ID;
const CS_ChangeCannonSet_MsgID CS_ChangeCannonSet::Target;
const CS_ChangeCannonSet_MsgID CS_ChangeCannonSet::MsgID_MIN;
const CS_ChangeCannonSet_MsgID CS_ChangeCannonSet::MsgID_MAX;
const int CS_ChangeCannonSet::MsgID_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* CS_Netcast_MsgID_descriptor() {
  protobuf_public_5ffishing_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_public_5ffishing_2eproto::file_level_enum_descriptors[2];
}
bool CS_Netcast_MsgID_IsValid(int value) {
  switch (value) {
    case 2:
    case 12002:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const CS_Netcast_MsgID CS_Netcast::ID;
const CS_Netcast_MsgID CS_Netcast::Target;
const CS_Netcast_MsgID CS_Netcast::MsgID_MIN;
const CS_Netcast_MsgID CS_Netcast::MsgID_MAX;
const int CS_Netcast::MsgID_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* CS_LockFish_MsgID_descriptor() {
  protobuf_public_5ffishing_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_public_5ffishing_2eproto::file_level_enum_descriptors[3];
}
bool CS_LockFish_MsgID_IsValid(int value) {
  switch (value) {
    case 2:
    case 12003:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const CS_LockFish_MsgID CS_LockFish::ID;
const CS_LockFish_MsgID CS_LockFish::Target;
const CS_LockFish_MsgID CS_LockFish::MsgID_MIN;
const CS_LockFish_MsgID CS_LockFish::MsgID_MAX;
const int CS_LockFish::MsgID_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* CS_LockSpecFish_MsgID_descriptor() {
  protobuf_public_5ffishing_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_public_5ffishing_2eproto::file_level_enum_descriptors[4];
}
bool CS_LockSpecFish_MsgID_IsValid(int value) {
  switch (value) {
    case 12120:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const CS_LockSpecFish_MsgID CS_LockSpecFish::ID;
const CS_LockSpecFish_MsgID CS_LockSpecFish::MsgID_MIN;
const CS_LockSpecFish_MsgID CS_LockSpecFish::MsgID_MAX;
const int CS_LockSpecFish::MsgID_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* CS_Fire_MsgID_descriptor() {
  protobuf_public_5ffishing_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_public_5ffishing_2eproto::file_level_enum_descriptors[5];
}
bool CS_Fire_MsgID_IsValid(int value) {
  switch (value) {
    case 2:
    case 12004:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const CS_Fire_MsgID CS_Fire::ID;
const CS_Fire_MsgID CS_Fire::Target;
const CS_Fire_MsgID CS_Fire::MsgID_MIN;
const CS_Fire_MsgID CS_Fire::MsgID_MAX;
const int CS_Fire::MsgID_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* CS_ChangeCannon_MsgID_descriptor() {
  protobuf_public_5ffishing_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_public_5ffishing_2eproto::file_level_enum_descriptors[6];
}
bool CS_ChangeCannon_MsgID_IsValid(int value) {
  switch (value) {
    case 2:
    case 12005:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const CS_ChangeCannon_MsgID CS_ChangeCannon::ID;
const CS_ChangeCannon_MsgID CS_ChangeCannon::Target;
const CS_ChangeCannon_MsgID CS_ChangeCannon::MsgID_MIN;
const CS_ChangeCannon_MsgID CS_ChangeCannon::MsgID_MAX;
const int CS_ChangeCannon::MsgID_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* CS_ChangeScore_MsgID_descriptor() {
  protobuf_public_5ffishing_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_public_5ffishing_2eproto::file_level_enum_descriptors[7];
}
bool CS_ChangeScore_MsgID_IsValid(int value) {
  switch (value) {
    case 2:
    case 12006:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const CS_ChangeScore_MsgID CS_ChangeScore::ID;
const CS_ChangeScore_MsgID CS_ChangeScore::Target;
const CS_ChangeScore_MsgID CS_ChangeScore::MsgID_MIN;
const CS_ChangeScore_MsgID CS_ChangeScore::MsgID_MAX;
const int CS_ChangeScore::MsgID_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* CS_TimeSync_MsgID_descriptor() {
  protobuf_public_5ffishing_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_public_5ffishing_2eproto::file_level_enum_descriptors[8];
}
bool CS_TimeSync_MsgID_IsValid(int value) {
  switch (value) {
    case 2:
    case 12007:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const CS_TimeSync_MsgID CS_TimeSync::ID;
const CS_TimeSync_MsgID CS_TimeSync::Target;
const CS_TimeSync_MsgID CS_TimeSync::MsgID_MIN;
const CS_TimeSync_MsgID CS_TimeSync::MsgID_MAX;
const int CS_TimeSync::MsgID_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* SC_FishMul_MsgID_descriptor() {
  protobuf_public_5ffishing_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_public_5ffishing_2eproto::file_level_enum_descriptors[9];
}
bool SC_FishMul_MsgID_IsValid(int value) {
  switch (value) {
    case 12100:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const SC_FishMul_MsgID SC_FishMul::ID;
const SC_FishMul_MsgID SC_FishMul::MsgID_MIN;
const SC_FishMul_MsgID SC_FishMul::MsgID_MAX;
const int SC_FishMul::MsgID_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* SC_AddBuffer_MsgID_descriptor() {
  protobuf_public_5ffishing_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_public_5ffishing_2eproto::file_level_enum_descriptors[10];
}
bool SC_AddBuffer_MsgID_IsValid(int value) {
  switch (value) {
    case 12102:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const SC_AddBuffer_MsgID SC_AddBuffer::ID;
const SC_AddBuffer_MsgID SC_AddBuffer::MsgID_MIN;
const SC_AddBuffer_MsgID SC_AddBuffer::MsgID_MAX;
const int SC_AddBuffer::MsgID_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* SC_BulletSet_MsgID_descriptor() {
  protobuf_public_5ffishing_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_public_5ffishing_2eproto::file_level_enum_descriptors[11];
}
bool SC_BulletSet_MsgID_IsValid(int value) {
  switch (value) {
    case 12103:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const SC_BulletSet_MsgID SC_BulletSet::ID;
const SC_BulletSet_MsgID SC_BulletSet::MsgID_MIN;
const SC_BulletSet_MsgID SC_BulletSet::MsgID_MAX;
const int SC_BulletSet::MsgID_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* SC_BulletSet_List_MsgID_descriptor() {
  protobuf_public_5ffishing_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_public_5ffishing_2eproto::file_level_enum_descriptors[12];
}
bool SC_BulletSet_List_MsgID_IsValid(int value) {
  switch (value) {
    case 12121:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const SC_BulletSet_List_MsgID SC_BulletSet_List::ID;
const SC_BulletSet_List_MsgID SC_BulletSet_List::MsgID_MIN;
const SC_BulletSet_List_MsgID SC_BulletSet_List::MsgID_MAX;
const int SC_BulletSet_List::MsgID_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* SC_SendDes_MsgID_descriptor() {
  protobuf_public_5ffishing_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_public_5ffishing_2eproto::file_level_enum_descriptors[13];
}
bool SC_SendDes_MsgID_IsValid(int value) {
  switch (value) {
    case 12104:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const SC_SendDes_MsgID SC_SendDes::ID;
const SC_SendDes_MsgID SC_SendDes::MsgID_MIN;
const SC_SendDes_MsgID SC_SendDes::MsgID_MAX;
const int SC_SendDes::MsgID_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* SC_LockFish_MsgID_descriptor() {
  protobuf_public_5ffishing_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_public_5ffishing_2eproto::file_level_enum_descriptors[14];
}
bool SC_LockFish_MsgID_IsValid(int value) {
  switch (value) {
    case 12105:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const SC_LockFish_MsgID SC_LockFish::ID;
const SC_LockFish_MsgID SC_LockFish::MsgID_MIN;
const SC_LockFish_MsgID SC_LockFish::MsgID_MAX;
const int SC_LockFish::MsgID_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* SC_AllowFire_MsgID_descriptor() {
  protobuf_public_5ffishing_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_public_5ffishing_2eproto::file_level_enum_descriptors[15];
}
bool SC_AllowFire_MsgID_IsValid(int value) {
  switch (value) {
    case 12107:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const SC_AllowFire_MsgID SC_AllowFire::ID;
const SC_AllowFire_MsgID SC_AllowFire::MsgID_MIN;
const SC_AllowFire_MsgID SC_AllowFire::MsgID_MAX;
const int SC_AllowFire::MsgID_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* SC_SwitchScene_MsgID_descriptor() {
  protobuf_public_5ffishing_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_public_5ffishing_2eproto::file_level_enum_descriptors[16];
}
bool SC_SwitchScene_MsgID_IsValid(int value) {
  switch (value) {
    case 12108:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const SC_SwitchScene_MsgID SC_SwitchScene::ID;
const SC_SwitchScene_MsgID SC_SwitchScene::MsgID_MIN;
const SC_SwitchScene_MsgID SC_SwitchScene::MsgID_MAX;
const int SC_SwitchScene::MsgID_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* SC_KillBullet_MsgID_descriptor() {
  protobuf_public_5ffishing_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_public_5ffishing_2eproto::file_level_enum_descriptors[17];
}
bool SC_KillBullet_MsgID_IsValid(int value) {
  switch (value) {
    case 12109:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const SC_KillBullet_MsgID SC_KillBullet::ID;
const SC_KillBullet_MsgID SC_KillBullet::MsgID_MIN;
const SC_KillBullet_MsgID SC_KillBullet::MsgID_MAX;
const int SC_KillBullet::MsgID_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* SC_KillFish_MsgID_descriptor() {
  protobuf_public_5ffishing_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_public_5ffishing_2eproto::file_level_enum_descriptors[18];
}
bool SC_KillFish_MsgID_IsValid(int value) {
  switch (value) {
    case 12110:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const SC_KillFish_MsgID SC_KillFish::ID;
const SC_KillFish_MsgID SC_KillFish::MsgID_MIN;
const SC_KillFish_MsgID SC_KillFish::MsgID_MAX;
const int SC_KillFish::MsgID_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* SC_SendBullet_MsgID_descriptor() {
  protobuf_public_5ffishing_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_public_5ffishing_2eproto::file_level_enum_descriptors[19];
}
bool SC_SendBullet_MsgID_IsValid(int value) {
  switch (value) {
    case 12111:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const SC_SendBullet_MsgID SC_SendBullet::ID;
const SC_SendBullet_MsgID SC_SendBullet::MsgID_MIN;
const SC_SendBullet_MsgID SC_SendBullet::MsgID_MAX;
const int SC_SendBullet::MsgID_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* SC_Fly_Bullet_List_MsgID_descriptor() {
  protobuf_public_5ffishing_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_public_5ffishing_2eproto::file_level_enum_descriptors[20];
}
bool SC_Fly_Bullet_List_MsgID_IsValid(int value) {
  switch (value) {
    case 12122:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const SC_Fly_Bullet_List_MsgID SC_Fly_Bullet_List::ID;
const SC_Fly_Bullet_List_MsgID SC_Fly_Bullet_List::MsgID_MIN;
const SC_Fly_Bullet_List_MsgID SC_Fly_Bullet_List::MsgID_MAX;
const int SC_Fly_Bullet_List::MsgID_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* SC_CannonSet_MsgID_descriptor() {
  protobuf_public_5ffishing_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_public_5ffishing_2eproto::file_level_enum_descriptors[21];
}
bool SC_CannonSet_MsgID_IsValid(int value) {
  switch (value) {
    case 12112:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const SC_CannonSet_MsgID SC_CannonSet::ID;
const SC_CannonSet_MsgID SC_CannonSet::MsgID_MIN;
const SC_CannonSet_MsgID SC_CannonSet::MsgID_MAX;
const int SC_CannonSet::MsgID_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* SC_ChangeScore_MsgID_descriptor() {
  protobuf_public_5ffishing_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_public_5ffishing_2eproto::file_level_enum_descriptors[22];
}
bool SC_ChangeScore_MsgID_IsValid(int value) {
  switch (value) {
    case 12113:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const SC_ChangeScore_MsgID SC_ChangeScore::ID;
const SC_ChangeScore_MsgID SC_ChangeScore::MsgID_MIN;
const SC_ChangeScore_MsgID SC_ChangeScore::MsgID_MAX;
const int SC_ChangeScore::MsgID_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* SC_UserInfo_MsgID_descriptor() {
  protobuf_public_5ffishing_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_public_5ffishing_2eproto::file_level_enum_descriptors[23];
}
bool SC_UserInfo_MsgID_IsValid(int value) {
  switch (value) {
    case 12114:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const SC_UserInfo_MsgID SC_UserInfo::ID;
const SC_UserInfo_MsgID SC_UserInfo::MsgID_MIN;
const SC_UserInfo_MsgID SC_UserInfo::MsgID_MAX;
const int SC_UserInfo::MsgID_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* SC_SendFish_MsgID_descriptor() {
  protobuf_public_5ffishing_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_public_5ffishing_2eproto::file_level_enum_descriptors[24];
}
bool SC_SendFish_MsgID_IsValid(int value) {
  switch (value) {
    case 12115:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const SC_SendFish_MsgID SC_SendFish::ID;
const SC_SendFish_MsgID SC_SendFish::MsgID_MIN;
const SC_SendFish_MsgID SC_SendFish::MsgID_MAX;
const int SC_SendFish::MsgID_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* SC_SendFishList_MsgID_descriptor() {
  protobuf_public_5ffishing_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_public_5ffishing_2eproto::file_level_enum_descriptors[25];
}
bool SC_SendFishList_MsgID_IsValid(int value) {
  switch (value) {
    case 12116:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const SC_SendFishList_MsgID SC_SendFishList::ID;
const SC_SendFishList_MsgID SC_SendFishList::MsgID_MIN;
const SC_SendFishList_MsgID SC_SendFishList::MsgID_MAX;
const int SC_SendFishList::MsgID_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* SC_GameConfig_MsgID_descriptor() {
  protobuf_public_5ffishing_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_public_5ffishing_2eproto::file_level_enum_descriptors[26];
}
bool SC_GameConfig_MsgID_IsValid(int value) {
  switch (value) {
    case 12117:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const SC_GameConfig_MsgID SC_GameConfig::ID;
const SC_GameConfig_MsgID SC_GameConfig::MsgID_MIN;
const SC_GameConfig_MsgID SC_GameConfig::MsgID_MAX;
const int SC_GameConfig::MsgID_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* SC_TimeSync_MsgID_descriptor() {
  protobuf_public_5ffishing_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_public_5ffishing_2eproto::file_level_enum_descriptors[27];
}
bool SC_TimeSync_MsgID_IsValid(int value) {
  switch (value) {
    case 12118:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const SC_TimeSync_MsgID SC_TimeSync::ID;
const SC_TimeSync_MsgID SC_TimeSync::MsgID_MIN;
const SC_TimeSync_MsgID SC_TimeSync::MsgID_MAX;
const int SC_TimeSync::MsgID_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* SC_SystemMessage_MsgID_descriptor() {
  protobuf_public_5ffishing_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_public_5ffishing_2eproto::file_level_enum_descriptors[28];
}
bool SC_SystemMessage_MsgID_IsValid(int value) {
  switch (value) {
    case 12119:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const SC_SystemMessage_MsgID SC_SystemMessage::ID;
const SC_SystemMessage_MsgID SC_SystemMessage::MsgID_MIN;
const SC_SystemMessage_MsgID SC_SystemMessage::MsgID_MAX;
const int SC_SystemMessage::MsgID_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* SMT_TYPE_descriptor() {
  protobuf_public_5ffishing_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_public_5ffishing_2eproto::file_level_enum_descriptors[29];
}
bool SMT_TYPE_IsValid(int value) {
  switch (value) {
    case 1:
    case 2:
    case 4:
    case 8:
    case 16:
    case 32:
      return true;
    default:
      return false;
  }
}


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CS_TreasureEnd::kChairIdFieldNumber;
const int CS_TreasureEnd::kScoreFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CS_TreasureEnd::CS_TreasureEnd()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_public_5ffishing_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:CS_TreasureEnd)
}
CS_TreasureEnd::CS_TreasureEnd(const CS_TreasureEnd& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&score_, &from.score_,
    reinterpret_cast<char*>(&chair_id_) -
    reinterpret_cast<char*>(&score_) + sizeof(chair_id_));
  // @@protoc_insertion_point(copy_constructor:CS_TreasureEnd)
}

void CS_TreasureEnd::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&score_, 0, reinterpret_cast<char*>(&chair_id_) -
    reinterpret_cast<char*>(&score_) + sizeof(chair_id_));
}

CS_TreasureEnd::~CS_TreasureEnd() {
  // @@protoc_insertion_point(destructor:CS_TreasureEnd)
  SharedDtor();
}

void CS_TreasureEnd::SharedDtor() {
}

void CS_TreasureEnd::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CS_TreasureEnd::descriptor() {
  protobuf_public_5ffishing_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_public_5ffishing_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CS_TreasureEnd& CS_TreasureEnd::default_instance() {
  protobuf_public_5ffishing_2eproto::InitDefaults();
  return *internal_default_instance();
}

CS_TreasureEnd* CS_TreasureEnd::New(::google::protobuf::Arena* arena) const {
  CS_TreasureEnd* n = new CS_TreasureEnd;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CS_TreasureEnd::Clear() {
// @@protoc_insertion_point(message_clear_start:CS_TreasureEnd)
  if (_has_bits_[0 / 32] & 3u) {
    ::memset(&score_, 0, reinterpret_cast<char*>(&chair_id_) -
      reinterpret_cast<char*>(&score_) + sizeof(chair_id_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CS_TreasureEnd::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CS_TreasureEnd)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 chair_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_chair_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &chair_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int64 score = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_score();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &score_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CS_TreasureEnd)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CS_TreasureEnd)
  return false;
#undef DO_
}

void CS_TreasureEnd::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CS_TreasureEnd)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 chair_id = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->chair_id(), output);
  }

  // required int64 score = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->score(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CS_TreasureEnd)
}

::google::protobuf::uint8* CS_TreasureEnd::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CS_TreasureEnd)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 chair_id = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->chair_id(), target);
  }

  // required int64 score = 2;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->score(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CS_TreasureEnd)
  return target;
}

size_t CS_TreasureEnd::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:CS_TreasureEnd)
  size_t total_size = 0;

  if (has_score()) {
    // required int64 score = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->score());
  }

  if (has_chair_id()) {
    // required int32 chair_id = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->chair_id());
  }

  return total_size;
}
size_t CS_TreasureEnd::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CS_TreasureEnd)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required int64 score = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->score());

    // required int32 chair_id = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->chair_id());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CS_TreasureEnd::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CS_TreasureEnd)
  GOOGLE_DCHECK_NE(&from, this);
  const CS_TreasureEnd* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CS_TreasureEnd>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CS_TreasureEnd)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CS_TreasureEnd)
    MergeFrom(*source);
  }
}

void CS_TreasureEnd::MergeFrom(const CS_TreasureEnd& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CS_TreasureEnd)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      score_ = from.score_;
    }
    if (cached_has_bits & 0x00000002u) {
      chair_id_ = from.chair_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CS_TreasureEnd::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CS_TreasureEnd)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CS_TreasureEnd::CopyFrom(const CS_TreasureEnd& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CS_TreasureEnd)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CS_TreasureEnd::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  return true;
}

void CS_TreasureEnd::Swap(CS_TreasureEnd* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CS_TreasureEnd::InternalSwap(CS_TreasureEnd* other) {
  std::swap(score_, other->score_);
  std::swap(chair_id_, other->chair_id_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CS_TreasureEnd::GetMetadata() const {
  protobuf_public_5ffishing_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_public_5ffishing_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CS_TreasureEnd

// required int32 chair_id = 1;
bool CS_TreasureEnd::has_chair_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CS_TreasureEnd::set_has_chair_id() {
  _has_bits_[0] |= 0x00000002u;
}
void CS_TreasureEnd::clear_has_chair_id() {
  _has_bits_[0] &= ~0x00000002u;
}
void CS_TreasureEnd::clear_chair_id() {
  chair_id_ = 0;
  clear_has_chair_id();
}
::google::protobuf::int32 CS_TreasureEnd::chair_id() const {
  // @@protoc_insertion_point(field_get:CS_TreasureEnd.chair_id)
  return chair_id_;
}
void CS_TreasureEnd::set_chair_id(::google::protobuf::int32 value) {
  set_has_chair_id();
  chair_id_ = value;
  // @@protoc_insertion_point(field_set:CS_TreasureEnd.chair_id)
}

// required int64 score = 2;
bool CS_TreasureEnd::has_score() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CS_TreasureEnd::set_has_score() {
  _has_bits_[0] |= 0x00000001u;
}
void CS_TreasureEnd::clear_has_score() {
  _has_bits_[0] &= ~0x00000001u;
}
void CS_TreasureEnd::clear_score() {
  score_ = GOOGLE_LONGLONG(0);
  clear_has_score();
}
::google::protobuf::int64 CS_TreasureEnd::score() const {
  // @@protoc_insertion_point(field_get:CS_TreasureEnd.score)
  return score_;
}
void CS_TreasureEnd::set_score(::google::protobuf::int64 value) {
  set_has_score();
  score_ = value;
  // @@protoc_insertion_point(field_set:CS_TreasureEnd.score)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CS_ChangeCannonSet::kChairIdFieldNumber;
const int CS_ChangeCannonSet::kAddFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CS_ChangeCannonSet::CS_ChangeCannonSet()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_public_5ffishing_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:CS_ChangeCannonSet)
}
CS_ChangeCannonSet::CS_ChangeCannonSet(const CS_ChangeCannonSet& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&chair_id_, &from.chair_id_,
    reinterpret_cast<char*>(&add_) -
    reinterpret_cast<char*>(&chair_id_) + sizeof(add_));
  // @@protoc_insertion_point(copy_constructor:CS_ChangeCannonSet)
}

void CS_ChangeCannonSet::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&chair_id_, 0, reinterpret_cast<char*>(&add_) -
    reinterpret_cast<char*>(&chair_id_) + sizeof(add_));
}

CS_ChangeCannonSet::~CS_ChangeCannonSet() {
  // @@protoc_insertion_point(destructor:CS_ChangeCannonSet)
  SharedDtor();
}

void CS_ChangeCannonSet::SharedDtor() {
}

void CS_ChangeCannonSet::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CS_ChangeCannonSet::descriptor() {
  protobuf_public_5ffishing_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_public_5ffishing_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CS_ChangeCannonSet& CS_ChangeCannonSet::default_instance() {
  protobuf_public_5ffishing_2eproto::InitDefaults();
  return *internal_default_instance();
}

CS_ChangeCannonSet* CS_ChangeCannonSet::New(::google::protobuf::Arena* arena) const {
  CS_ChangeCannonSet* n = new CS_ChangeCannonSet;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CS_ChangeCannonSet::Clear() {
// @@protoc_insertion_point(message_clear_start:CS_ChangeCannonSet)
  if (_has_bits_[0 / 32] & 3u) {
    ::memset(&chair_id_, 0, reinterpret_cast<char*>(&add_) -
      reinterpret_cast<char*>(&chair_id_) + sizeof(add_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CS_ChangeCannonSet::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CS_ChangeCannonSet)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 chair_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_chair_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &chair_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 add = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_add();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &add_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CS_ChangeCannonSet)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CS_ChangeCannonSet)
  return false;
#undef DO_
}

void CS_ChangeCannonSet::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CS_ChangeCannonSet)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 chair_id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->chair_id(), output);
  }

  // required int32 add = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->add(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CS_ChangeCannonSet)
}

::google::protobuf::uint8* CS_ChangeCannonSet::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CS_ChangeCannonSet)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 chair_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->chair_id(), target);
  }

  // required int32 add = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->add(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CS_ChangeCannonSet)
  return target;
}

size_t CS_ChangeCannonSet::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:CS_ChangeCannonSet)
  size_t total_size = 0;

  if (has_chair_id()) {
    // required int32 chair_id = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->chair_id());
  }

  if (has_add()) {
    // required int32 add = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->add());
  }

  return total_size;
}
size_t CS_ChangeCannonSet::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CS_ChangeCannonSet)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required int32 chair_id = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->chair_id());

    // required int32 add = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->add());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CS_ChangeCannonSet::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CS_ChangeCannonSet)
  GOOGLE_DCHECK_NE(&from, this);
  const CS_ChangeCannonSet* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CS_ChangeCannonSet>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CS_ChangeCannonSet)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CS_ChangeCannonSet)
    MergeFrom(*source);
  }
}

void CS_ChangeCannonSet::MergeFrom(const CS_ChangeCannonSet& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CS_ChangeCannonSet)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      chair_id_ = from.chair_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      add_ = from.add_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CS_ChangeCannonSet::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CS_ChangeCannonSet)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CS_ChangeCannonSet::CopyFrom(const CS_ChangeCannonSet& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CS_ChangeCannonSet)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CS_ChangeCannonSet::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  return true;
}

void CS_ChangeCannonSet::Swap(CS_ChangeCannonSet* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CS_ChangeCannonSet::InternalSwap(CS_ChangeCannonSet* other) {
  std::swap(chair_id_, other->chair_id_);
  std::swap(add_, other->add_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CS_ChangeCannonSet::GetMetadata() const {
  protobuf_public_5ffishing_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_public_5ffishing_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CS_ChangeCannonSet

// required int32 chair_id = 1;
bool CS_ChangeCannonSet::has_chair_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CS_ChangeCannonSet::set_has_chair_id() {
  _has_bits_[0] |= 0x00000001u;
}
void CS_ChangeCannonSet::clear_has_chair_id() {
  _has_bits_[0] &= ~0x00000001u;
}
void CS_ChangeCannonSet::clear_chair_id() {
  chair_id_ = 0;
  clear_has_chair_id();
}
::google::protobuf::int32 CS_ChangeCannonSet::chair_id() const {
  // @@protoc_insertion_point(field_get:CS_ChangeCannonSet.chair_id)
  return chair_id_;
}
void CS_ChangeCannonSet::set_chair_id(::google::protobuf::int32 value) {
  set_has_chair_id();
  chair_id_ = value;
  // @@protoc_insertion_point(field_set:CS_ChangeCannonSet.chair_id)
}

// required int32 add = 2;
bool CS_ChangeCannonSet::has_add() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CS_ChangeCannonSet::set_has_add() {
  _has_bits_[0] |= 0x00000002u;
}
void CS_ChangeCannonSet::clear_has_add() {
  _has_bits_[0] &= ~0x00000002u;
}
void CS_ChangeCannonSet::clear_add() {
  add_ = 0;
  clear_has_add();
}
::google::protobuf::int32 CS_ChangeCannonSet::add() const {
  // @@protoc_insertion_point(field_get:CS_ChangeCannonSet.add)
  return add_;
}
void CS_ChangeCannonSet::set_add(::google::protobuf::int32 value) {
  set_has_add();
  add_ = value;
  // @@protoc_insertion_point(field_set:CS_ChangeCannonSet.add)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CS_Netcast::kBulletIdFieldNumber;
const int CS_Netcast::kDataFieldNumber;
const int CS_Netcast::kFishIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CS_Netcast::CS_Netcast()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_public_5ffishing_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:CS_Netcast)
}
CS_Netcast::CS_Netcast(const CS_Netcast& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&bullet_id_, &from.bullet_id_,
    reinterpret_cast<char*>(&fish_id_) -
    reinterpret_cast<char*>(&bullet_id_) + sizeof(fish_id_));
  // @@protoc_insertion_point(copy_constructor:CS_Netcast)
}

void CS_Netcast::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&bullet_id_, 0, reinterpret_cast<char*>(&fish_id_) -
    reinterpret_cast<char*>(&bullet_id_) + sizeof(fish_id_));
}

CS_Netcast::~CS_Netcast() {
  // @@protoc_insertion_point(destructor:CS_Netcast)
  SharedDtor();
}

void CS_Netcast::SharedDtor() {
}

void CS_Netcast::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CS_Netcast::descriptor() {
  protobuf_public_5ffishing_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_public_5ffishing_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CS_Netcast& CS_Netcast::default_instance() {
  protobuf_public_5ffishing_2eproto::InitDefaults();
  return *internal_default_instance();
}

CS_Netcast* CS_Netcast::New(::google::protobuf::Arena* arena) const {
  CS_Netcast* n = new CS_Netcast;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CS_Netcast::Clear() {
// @@protoc_insertion_point(message_clear_start:CS_Netcast)
  if (_has_bits_[0 / 32] & 7u) {
    ::memset(&bullet_id_, 0, reinterpret_cast<char*>(&fish_id_) -
      reinterpret_cast<char*>(&bullet_id_) + sizeof(fish_id_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CS_Netcast::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CS_Netcast)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 bullet_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_bullet_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &bullet_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 data = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_data();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &data_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 fish_id = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {
          set_has_fish_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &fish_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CS_Netcast)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CS_Netcast)
  return false;
#undef DO_
}

void CS_Netcast::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CS_Netcast)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 bullet_id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->bullet_id(), output);
  }

  // required int32 data = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->data(), output);
  }

  // required int32 fish_id = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->fish_id(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CS_Netcast)
}

::google::protobuf::uint8* CS_Netcast::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CS_Netcast)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 bullet_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->bullet_id(), target);
  }

  // required int32 data = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->data(), target);
  }

  // required int32 fish_id = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->fish_id(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CS_Netcast)
  return target;
}

size_t CS_Netcast::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:CS_Netcast)
  size_t total_size = 0;

  if (has_bullet_id()) {
    // required int32 bullet_id = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->bullet_id());
  }

  if (has_data()) {
    // required int32 data = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->data());
  }

  if (has_fish_id()) {
    // required int32 fish_id = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->fish_id());
  }

  return total_size;
}
size_t CS_Netcast::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CS_Netcast)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000007) ^ 0x00000007) == 0) {  // All required fields are present.
    // required int32 bullet_id = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->bullet_id());

    // required int32 data = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->data());

    // required int32 fish_id = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->fish_id());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CS_Netcast::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CS_Netcast)
  GOOGLE_DCHECK_NE(&from, this);
  const CS_Netcast* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CS_Netcast>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CS_Netcast)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CS_Netcast)
    MergeFrom(*source);
  }
}

void CS_Netcast::MergeFrom(const CS_Netcast& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CS_Netcast)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      bullet_id_ = from.bullet_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      data_ = from.data_;
    }
    if (cached_has_bits & 0x00000004u) {
      fish_id_ = from.fish_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CS_Netcast::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CS_Netcast)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CS_Netcast::CopyFrom(const CS_Netcast& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CS_Netcast)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CS_Netcast::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;
  return true;
}

void CS_Netcast::Swap(CS_Netcast* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CS_Netcast::InternalSwap(CS_Netcast* other) {
  std::swap(bullet_id_, other->bullet_id_);
  std::swap(data_, other->data_);
  std::swap(fish_id_, other->fish_id_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CS_Netcast::GetMetadata() const {
  protobuf_public_5ffishing_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_public_5ffishing_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CS_Netcast

// required int32 bullet_id = 1;
bool CS_Netcast::has_bullet_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CS_Netcast::set_has_bullet_id() {
  _has_bits_[0] |= 0x00000001u;
}
void CS_Netcast::clear_has_bullet_id() {
  _has_bits_[0] &= ~0x00000001u;
}
void CS_Netcast::clear_bullet_id() {
  bullet_id_ = 0;
  clear_has_bullet_id();
}
::google::protobuf::int32 CS_Netcast::bullet_id() const {
  // @@protoc_insertion_point(field_get:CS_Netcast.bullet_id)
  return bullet_id_;
}
void CS_Netcast::set_bullet_id(::google::protobuf::int32 value) {
  set_has_bullet_id();
  bullet_id_ = value;
  // @@protoc_insertion_point(field_set:CS_Netcast.bullet_id)
}

// required int32 data = 2;
bool CS_Netcast::has_data() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CS_Netcast::set_has_data() {
  _has_bits_[0] |= 0x00000002u;
}
void CS_Netcast::clear_has_data() {
  _has_bits_[0] &= ~0x00000002u;
}
void CS_Netcast::clear_data() {
  data_ = 0;
  clear_has_data();
}
::google::protobuf::int32 CS_Netcast::data() const {
  // @@protoc_insertion_point(field_get:CS_Netcast.data)
  return data_;
}
void CS_Netcast::set_data(::google::protobuf::int32 value) {
  set_has_data();
  data_ = value;
  // @@protoc_insertion_point(field_set:CS_Netcast.data)
}

// required int32 fish_id = 3;
bool CS_Netcast::has_fish_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void CS_Netcast::set_has_fish_id() {
  _has_bits_[0] |= 0x00000004u;
}
void CS_Netcast::clear_has_fish_id() {
  _has_bits_[0] &= ~0x00000004u;
}
void CS_Netcast::clear_fish_id() {
  fish_id_ = 0;
  clear_has_fish_id();
}
::google::protobuf::int32 CS_Netcast::fish_id() const {
  // @@protoc_insertion_point(field_get:CS_Netcast.fish_id)
  return fish_id_;
}
void CS_Netcast::set_fish_id(::google::protobuf::int32 value) {
  set_has_fish_id();
  fish_id_ = value;
  // @@protoc_insertion_point(field_set:CS_Netcast.fish_id)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CS_LockFish::kChairIdFieldNumber;
const int CS_LockFish::kLockFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CS_LockFish::CS_LockFish()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_public_5ffishing_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:CS_LockFish)
}
CS_LockFish::CS_LockFish(const CS_LockFish& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&chair_id_, &from.chair_id_,
    reinterpret_cast<char*>(&lock_) -
    reinterpret_cast<char*>(&chair_id_) + sizeof(lock_));
  // @@protoc_insertion_point(copy_constructor:CS_LockFish)
}

void CS_LockFish::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&chair_id_, 0, reinterpret_cast<char*>(&lock_) -
    reinterpret_cast<char*>(&chair_id_) + sizeof(lock_));
}

CS_LockFish::~CS_LockFish() {
  // @@protoc_insertion_point(destructor:CS_LockFish)
  SharedDtor();
}

void CS_LockFish::SharedDtor() {
}

void CS_LockFish::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CS_LockFish::descriptor() {
  protobuf_public_5ffishing_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_public_5ffishing_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CS_LockFish& CS_LockFish::default_instance() {
  protobuf_public_5ffishing_2eproto::InitDefaults();
  return *internal_default_instance();
}

CS_LockFish* CS_LockFish::New(::google::protobuf::Arena* arena) const {
  CS_LockFish* n = new CS_LockFish;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CS_LockFish::Clear() {
// @@protoc_insertion_point(message_clear_start:CS_LockFish)
  if (_has_bits_[0 / 32] & 3u) {
    ::memset(&chair_id_, 0, reinterpret_cast<char*>(&lock_) -
      reinterpret_cast<char*>(&chair_id_) + sizeof(lock_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CS_LockFish::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CS_LockFish)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 chair_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_chair_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &chair_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 lock = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_lock();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &lock_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CS_LockFish)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CS_LockFish)
  return false;
#undef DO_
}

void CS_LockFish::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CS_LockFish)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 chair_id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->chair_id(), output);
  }

  // required int32 lock = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->lock(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CS_LockFish)
}

::google::protobuf::uint8* CS_LockFish::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CS_LockFish)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 chair_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->chair_id(), target);
  }

  // required int32 lock = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->lock(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CS_LockFish)
  return target;
}

size_t CS_LockFish::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:CS_LockFish)
  size_t total_size = 0;

  if (has_chair_id()) {
    // required int32 chair_id = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->chair_id());
  }

  if (has_lock()) {
    // required int32 lock = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->lock());
  }

  return total_size;
}
size_t CS_LockFish::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CS_LockFish)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required int32 chair_id = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->chair_id());

    // required int32 lock = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->lock());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CS_LockFish::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CS_LockFish)
  GOOGLE_DCHECK_NE(&from, this);
  const CS_LockFish* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CS_LockFish>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CS_LockFish)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CS_LockFish)
    MergeFrom(*source);
  }
}

void CS_LockFish::MergeFrom(const CS_LockFish& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CS_LockFish)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      chair_id_ = from.chair_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      lock_ = from.lock_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CS_LockFish::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CS_LockFish)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CS_LockFish::CopyFrom(const CS_LockFish& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CS_LockFish)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CS_LockFish::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  return true;
}

void CS_LockFish::Swap(CS_LockFish* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CS_LockFish::InternalSwap(CS_LockFish* other) {
  std::swap(chair_id_, other->chair_id_);
  std::swap(lock_, other->lock_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CS_LockFish::GetMetadata() const {
  protobuf_public_5ffishing_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_public_5ffishing_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CS_LockFish

// required int32 chair_id = 1;
bool CS_LockFish::has_chair_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CS_LockFish::set_has_chair_id() {
  _has_bits_[0] |= 0x00000001u;
}
void CS_LockFish::clear_has_chair_id() {
  _has_bits_[0] &= ~0x00000001u;
}
void CS_LockFish::clear_chair_id() {
  chair_id_ = 0;
  clear_has_chair_id();
}
::google::protobuf::int32 CS_LockFish::chair_id() const {
  // @@protoc_insertion_point(field_get:CS_LockFish.chair_id)
  return chair_id_;
}
void CS_LockFish::set_chair_id(::google::protobuf::int32 value) {
  set_has_chair_id();
  chair_id_ = value;
  // @@protoc_insertion_point(field_set:CS_LockFish.chair_id)
}

// required int32 lock = 2;
bool CS_LockFish::has_lock() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CS_LockFish::set_has_lock() {
  _has_bits_[0] |= 0x00000002u;
}
void CS_LockFish::clear_has_lock() {
  _has_bits_[0] &= ~0x00000002u;
}
void CS_LockFish::clear_lock() {
  lock_ = 0;
  clear_has_lock();
}
::google::protobuf::int32 CS_LockFish::lock() const {
  // @@protoc_insertion_point(field_get:CS_LockFish.lock)
  return lock_;
}
void CS_LockFish::set_lock(::google::protobuf::int32 value) {
  set_has_lock();
  lock_ = value;
  // @@protoc_insertion_point(field_set:CS_LockFish.lock)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CS_LockSpecFish::kChairIdFieldNumber;
const int CS_LockSpecFish::kFishIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CS_LockSpecFish::CS_LockSpecFish()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_public_5ffishing_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:CS_LockSpecFish)
}
CS_LockSpecFish::CS_LockSpecFish(const CS_LockSpecFish& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&chair_id_, &from.chair_id_,
    reinterpret_cast<char*>(&fish_id_) -
    reinterpret_cast<char*>(&chair_id_) + sizeof(fish_id_));
  // @@protoc_insertion_point(copy_constructor:CS_LockSpecFish)
}

void CS_LockSpecFish::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&chair_id_, 0, reinterpret_cast<char*>(&fish_id_) -
    reinterpret_cast<char*>(&chair_id_) + sizeof(fish_id_));
}

CS_LockSpecFish::~CS_LockSpecFish() {
  // @@protoc_insertion_point(destructor:CS_LockSpecFish)
  SharedDtor();
}

void CS_LockSpecFish::SharedDtor() {
}

void CS_LockSpecFish::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CS_LockSpecFish::descriptor() {
  protobuf_public_5ffishing_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_public_5ffishing_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CS_LockSpecFish& CS_LockSpecFish::default_instance() {
  protobuf_public_5ffishing_2eproto::InitDefaults();
  return *internal_default_instance();
}

CS_LockSpecFish* CS_LockSpecFish::New(::google::protobuf::Arena* arena) const {
  CS_LockSpecFish* n = new CS_LockSpecFish;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CS_LockSpecFish::Clear() {
// @@protoc_insertion_point(message_clear_start:CS_LockSpecFish)
  if (_has_bits_[0 / 32] & 3u) {
    ::memset(&chair_id_, 0, reinterpret_cast<char*>(&fish_id_) -
      reinterpret_cast<char*>(&chair_id_) + sizeof(fish_id_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CS_LockSpecFish::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CS_LockSpecFish)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 chair_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_chair_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &chair_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 fish_id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_fish_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &fish_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CS_LockSpecFish)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CS_LockSpecFish)
  return false;
#undef DO_
}

void CS_LockSpecFish::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CS_LockSpecFish)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 chair_id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->chair_id(), output);
  }

  // required int32 fish_id = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->fish_id(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CS_LockSpecFish)
}

::google::protobuf::uint8* CS_LockSpecFish::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CS_LockSpecFish)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 chair_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->chair_id(), target);
  }

  // required int32 fish_id = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->fish_id(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CS_LockSpecFish)
  return target;
}

size_t CS_LockSpecFish::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:CS_LockSpecFish)
  size_t total_size = 0;

  if (has_chair_id()) {
    // required int32 chair_id = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->chair_id());
  }

  if (has_fish_id()) {
    // required int32 fish_id = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->fish_id());
  }

  return total_size;
}
size_t CS_LockSpecFish::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CS_LockSpecFish)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required int32 chair_id = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->chair_id());

    // required int32 fish_id = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->fish_id());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CS_LockSpecFish::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CS_LockSpecFish)
  GOOGLE_DCHECK_NE(&from, this);
  const CS_LockSpecFish* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CS_LockSpecFish>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CS_LockSpecFish)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CS_LockSpecFish)
    MergeFrom(*source);
  }
}

void CS_LockSpecFish::MergeFrom(const CS_LockSpecFish& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CS_LockSpecFish)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      chair_id_ = from.chair_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      fish_id_ = from.fish_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CS_LockSpecFish::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CS_LockSpecFish)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CS_LockSpecFish::CopyFrom(const CS_LockSpecFish& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CS_LockSpecFish)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CS_LockSpecFish::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  return true;
}

void CS_LockSpecFish::Swap(CS_LockSpecFish* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CS_LockSpecFish::InternalSwap(CS_LockSpecFish* other) {
  std::swap(chair_id_, other->chair_id_);
  std::swap(fish_id_, other->fish_id_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CS_LockSpecFish::GetMetadata() const {
  protobuf_public_5ffishing_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_public_5ffishing_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CS_LockSpecFish

// required int32 chair_id = 1;
bool CS_LockSpecFish::has_chair_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CS_LockSpecFish::set_has_chair_id() {
  _has_bits_[0] |= 0x00000001u;
}
void CS_LockSpecFish::clear_has_chair_id() {
  _has_bits_[0] &= ~0x00000001u;
}
void CS_LockSpecFish::clear_chair_id() {
  chair_id_ = 0;
  clear_has_chair_id();
}
::google::protobuf::int32 CS_LockSpecFish::chair_id() const {
  // @@protoc_insertion_point(field_get:CS_LockSpecFish.chair_id)
  return chair_id_;
}
void CS_LockSpecFish::set_chair_id(::google::protobuf::int32 value) {
  set_has_chair_id();
  chair_id_ = value;
  // @@protoc_insertion_point(field_set:CS_LockSpecFish.chair_id)
}

// required int32 fish_id = 2;
bool CS_LockSpecFish::has_fish_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CS_LockSpecFish::set_has_fish_id() {
  _has_bits_[0] |= 0x00000002u;
}
void CS_LockSpecFish::clear_has_fish_id() {
  _has_bits_[0] &= ~0x00000002u;
}
void CS_LockSpecFish::clear_fish_id() {
  fish_id_ = 0;
  clear_has_fish_id();
}
::google::protobuf::int32 CS_LockSpecFish::fish_id() const {
  // @@protoc_insertion_point(field_get:CS_LockSpecFish.fish_id)
  return fish_id_;
}
void CS_LockSpecFish::set_fish_id(::google::protobuf::int32 value) {
  set_has_fish_id();
  fish_id_ = value;
  // @@protoc_insertion_point(field_set:CS_LockSpecFish.fish_id)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CS_Fire::kChairIdFieldNumber;
const int CS_Fire::kDirectionFieldNumber;
const int CS_Fire::kFireTimeFieldNumber;
const int CS_Fire::kClientIdFieldNumber;
const int CS_Fire::kPosXFieldNumber;
const int CS_Fire::kPosYFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CS_Fire::CS_Fire()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_public_5ffishing_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:CS_Fire)
}
CS_Fire::CS_Fire(const CS_Fire& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&chair_id_, &from.chair_id_,
    reinterpret_cast<char*>(&pos_y_) -
    reinterpret_cast<char*>(&chair_id_) + sizeof(pos_y_));
  // @@protoc_insertion_point(copy_constructor:CS_Fire)
}

void CS_Fire::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&chair_id_, 0, reinterpret_cast<char*>(&pos_y_) -
    reinterpret_cast<char*>(&chair_id_) + sizeof(pos_y_));
}

CS_Fire::~CS_Fire() {
  // @@protoc_insertion_point(destructor:CS_Fire)
  SharedDtor();
}

void CS_Fire::SharedDtor() {
}

void CS_Fire::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CS_Fire::descriptor() {
  protobuf_public_5ffishing_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_public_5ffishing_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CS_Fire& CS_Fire::default_instance() {
  protobuf_public_5ffishing_2eproto::InitDefaults();
  return *internal_default_instance();
}

CS_Fire* CS_Fire::New(::google::protobuf::Arena* arena) const {
  CS_Fire* n = new CS_Fire;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CS_Fire::Clear() {
// @@protoc_insertion_point(message_clear_start:CS_Fire)
  if (_has_bits_[0 / 32] & 63u) {
    ::memset(&chair_id_, 0, reinterpret_cast<char*>(&pos_y_) -
      reinterpret_cast<char*>(&chair_id_) + sizeof(pos_y_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CS_Fire::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CS_Fire)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 chair_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_chair_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &chair_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required float direction = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(21u)) {
          set_has_direction();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &direction_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint32 fire_time = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {
          set_has_fire_time();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &fire_time_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 client_id = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u)) {
          set_has_client_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &client_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required float pos_x = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(45u)) {
          set_has_pos_x();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &pos_x_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required float pos_y = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(53u)) {
          set_has_pos_y();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &pos_y_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CS_Fire)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CS_Fire)
  return false;
#undef DO_
}

void CS_Fire::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CS_Fire)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 chair_id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->chair_id(), output);
  }

  // required float direction = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->direction(), output);
  }

  // required uint32 fire_time = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->fire_time(), output);
  }

  // required int32 client_id = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->client_id(), output);
  }

  // required float pos_x = 5;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(5, this->pos_x(), output);
  }

  // required float pos_y = 6;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(6, this->pos_y(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CS_Fire)
}

::google::protobuf::uint8* CS_Fire::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CS_Fire)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 chair_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->chair_id(), target);
  }

  // required float direction = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->direction(), target);
  }

  // required uint32 fire_time = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->fire_time(), target);
  }

  // required int32 client_id = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->client_id(), target);
  }

  // required float pos_x = 5;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(5, this->pos_x(), target);
  }

  // required float pos_y = 6;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(6, this->pos_y(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CS_Fire)
  return target;
}

size_t CS_Fire::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:CS_Fire)
  size_t total_size = 0;

  if (has_chair_id()) {
    // required int32 chair_id = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->chair_id());
  }

  if (has_direction()) {
    // required float direction = 2;
    total_size += 1 + 4;
  }

  if (has_fire_time()) {
    // required uint32 fire_time = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->fire_time());
  }

  if (has_client_id()) {
    // required int32 client_id = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->client_id());
  }

  if (has_pos_x()) {
    // required float pos_x = 5;
    total_size += 1 + 4;
  }

  if (has_pos_y()) {
    // required float pos_y = 6;
    total_size += 1 + 4;
  }

  return total_size;
}
size_t CS_Fire::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CS_Fire)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (((_has_bits_[0] & 0x0000003f) ^ 0x0000003f) == 0) {  // All required fields are present.
    // required int32 chair_id = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->chair_id());

    // required float direction = 2;
    total_size += 1 + 4;

    // required uint32 fire_time = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->fire_time());

    // required int32 client_id = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->client_id());

    // required float pos_x = 5;
    total_size += 1 + 4;

    // required float pos_y = 6;
    total_size += 1 + 4;

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CS_Fire::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CS_Fire)
  GOOGLE_DCHECK_NE(&from, this);
  const CS_Fire* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CS_Fire>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CS_Fire)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CS_Fire)
    MergeFrom(*source);
  }
}

void CS_Fire::MergeFrom(const CS_Fire& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CS_Fire)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 63u) {
    if (cached_has_bits & 0x00000001u) {
      chair_id_ = from.chair_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      direction_ = from.direction_;
    }
    if (cached_has_bits & 0x00000004u) {
      fire_time_ = from.fire_time_;
    }
    if (cached_has_bits & 0x00000008u) {
      client_id_ = from.client_id_;
    }
    if (cached_has_bits & 0x00000010u) {
      pos_x_ = from.pos_x_;
    }
    if (cached_has_bits & 0x00000020u) {
      pos_y_ = from.pos_y_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CS_Fire::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CS_Fire)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CS_Fire::CopyFrom(const CS_Fire& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CS_Fire)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CS_Fire::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000003f) != 0x0000003f) return false;
  return true;
}

void CS_Fire::Swap(CS_Fire* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CS_Fire::InternalSwap(CS_Fire* other) {
  std::swap(chair_id_, other->chair_id_);
  std::swap(direction_, other->direction_);
  std::swap(fire_time_, other->fire_time_);
  std::swap(client_id_, other->client_id_);
  std::swap(pos_x_, other->pos_x_);
  std::swap(pos_y_, other->pos_y_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CS_Fire::GetMetadata() const {
  protobuf_public_5ffishing_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_public_5ffishing_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CS_Fire

// required int32 chair_id = 1;
bool CS_Fire::has_chair_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CS_Fire::set_has_chair_id() {
  _has_bits_[0] |= 0x00000001u;
}
void CS_Fire::clear_has_chair_id() {
  _has_bits_[0] &= ~0x00000001u;
}
void CS_Fire::clear_chair_id() {
  chair_id_ = 0;
  clear_has_chair_id();
}
::google::protobuf::int32 CS_Fire::chair_id() const {
  // @@protoc_insertion_point(field_get:CS_Fire.chair_id)
  return chair_id_;
}
void CS_Fire::set_chair_id(::google::protobuf::int32 value) {
  set_has_chair_id();
  chair_id_ = value;
  // @@protoc_insertion_point(field_set:CS_Fire.chair_id)
}

// required float direction = 2;
bool CS_Fire::has_direction() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CS_Fire::set_has_direction() {
  _has_bits_[0] |= 0x00000002u;
}
void CS_Fire::clear_has_direction() {
  _has_bits_[0] &= ~0x00000002u;
}
void CS_Fire::clear_direction() {
  direction_ = 0;
  clear_has_direction();
}
float CS_Fire::direction() const {
  // @@protoc_insertion_point(field_get:CS_Fire.direction)
  return direction_;
}
void CS_Fire::set_direction(float value) {
  set_has_direction();
  direction_ = value;
  // @@protoc_insertion_point(field_set:CS_Fire.direction)
}

// required uint32 fire_time = 3;
bool CS_Fire::has_fire_time() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void CS_Fire::set_has_fire_time() {
  _has_bits_[0] |= 0x00000004u;
}
void CS_Fire::clear_has_fire_time() {
  _has_bits_[0] &= ~0x00000004u;
}
void CS_Fire::clear_fire_time() {
  fire_time_ = 0u;
  clear_has_fire_time();
}
::google::protobuf::uint32 CS_Fire::fire_time() const {
  // @@protoc_insertion_point(field_get:CS_Fire.fire_time)
  return fire_time_;
}
void CS_Fire::set_fire_time(::google::protobuf::uint32 value) {
  set_has_fire_time();
  fire_time_ = value;
  // @@protoc_insertion_point(field_set:CS_Fire.fire_time)
}

// required int32 client_id = 4;
bool CS_Fire::has_client_id() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void CS_Fire::set_has_client_id() {
  _has_bits_[0] |= 0x00000008u;
}
void CS_Fire::clear_has_client_id() {
  _has_bits_[0] &= ~0x00000008u;
}
void CS_Fire::clear_client_id() {
  client_id_ = 0;
  clear_has_client_id();
}
::google::protobuf::int32 CS_Fire::client_id() const {
  // @@protoc_insertion_point(field_get:CS_Fire.client_id)
  return client_id_;
}
void CS_Fire::set_client_id(::google::protobuf::int32 value) {
  set_has_client_id();
  client_id_ = value;
  // @@protoc_insertion_point(field_set:CS_Fire.client_id)
}

// required float pos_x = 5;
bool CS_Fire::has_pos_x() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void CS_Fire::set_has_pos_x() {
  _has_bits_[0] |= 0x00000010u;
}
void CS_Fire::clear_has_pos_x() {
  _has_bits_[0] &= ~0x00000010u;
}
void CS_Fire::clear_pos_x() {
  pos_x_ = 0;
  clear_has_pos_x();
}
float CS_Fire::pos_x() const {
  // @@protoc_insertion_point(field_get:CS_Fire.pos_x)
  return pos_x_;
}
void CS_Fire::set_pos_x(float value) {
  set_has_pos_x();
  pos_x_ = value;
  // @@protoc_insertion_point(field_set:CS_Fire.pos_x)
}

// required float pos_y = 6;
bool CS_Fire::has_pos_y() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void CS_Fire::set_has_pos_y() {
  _has_bits_[0] |= 0x00000020u;
}
void CS_Fire::clear_has_pos_y() {
  _has_bits_[0] &= ~0x00000020u;
}
void CS_Fire::clear_pos_y() {
  pos_y_ = 0;
  clear_has_pos_y();
}
float CS_Fire::pos_y() const {
  // @@protoc_insertion_point(field_get:CS_Fire.pos_y)
  return pos_y_;
}
void CS_Fire::set_pos_y(float value) {
  set_has_pos_y();
  pos_y_ = value;
  // @@protoc_insertion_point(field_set:CS_Fire.pos_y)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CS_ChangeCannon::kChairIdFieldNumber;
const int CS_ChangeCannon::kAddFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CS_ChangeCannon::CS_ChangeCannon()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_public_5ffishing_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:CS_ChangeCannon)
}
CS_ChangeCannon::CS_ChangeCannon(const CS_ChangeCannon& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&chair_id_, &from.chair_id_,
    reinterpret_cast<char*>(&add_) -
    reinterpret_cast<char*>(&chair_id_) + sizeof(add_));
  // @@protoc_insertion_point(copy_constructor:CS_ChangeCannon)
}

void CS_ChangeCannon::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&chair_id_, 0, reinterpret_cast<char*>(&add_) -
    reinterpret_cast<char*>(&chair_id_) + sizeof(add_));
}

CS_ChangeCannon::~CS_ChangeCannon() {
  // @@protoc_insertion_point(destructor:CS_ChangeCannon)
  SharedDtor();
}

void CS_ChangeCannon::SharedDtor() {
}

void CS_ChangeCannon::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CS_ChangeCannon::descriptor() {
  protobuf_public_5ffishing_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_public_5ffishing_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CS_ChangeCannon& CS_ChangeCannon::default_instance() {
  protobuf_public_5ffishing_2eproto::InitDefaults();
  return *internal_default_instance();
}

CS_ChangeCannon* CS_ChangeCannon::New(::google::protobuf::Arena* arena) const {
  CS_ChangeCannon* n = new CS_ChangeCannon;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CS_ChangeCannon::Clear() {
// @@protoc_insertion_point(message_clear_start:CS_ChangeCannon)
  if (_has_bits_[0 / 32] & 3u) {
    ::memset(&chair_id_, 0, reinterpret_cast<char*>(&add_) -
      reinterpret_cast<char*>(&chair_id_) + sizeof(add_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CS_ChangeCannon::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CS_ChangeCannon)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 chair_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_chair_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &chair_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 add = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_add();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &add_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CS_ChangeCannon)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CS_ChangeCannon)
  return false;
#undef DO_
}

void CS_ChangeCannon::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CS_ChangeCannon)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 chair_id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->chair_id(), output);
  }

  // required int32 add = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->add(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CS_ChangeCannon)
}

::google::protobuf::uint8* CS_ChangeCannon::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CS_ChangeCannon)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 chair_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->chair_id(), target);
  }

  // required int32 add = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->add(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CS_ChangeCannon)
  return target;
}

size_t CS_ChangeCannon::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:CS_ChangeCannon)
  size_t total_size = 0;

  if (has_chair_id()) {
    // required int32 chair_id = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->chair_id());
  }

  if (has_add()) {
    // required int32 add = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->add());
  }

  return total_size;
}
size_t CS_ChangeCannon::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CS_ChangeCannon)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required int32 chair_id = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->chair_id());

    // required int32 add = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->add());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CS_ChangeCannon::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CS_ChangeCannon)
  GOOGLE_DCHECK_NE(&from, this);
  const CS_ChangeCannon* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CS_ChangeCannon>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CS_ChangeCannon)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CS_ChangeCannon)
    MergeFrom(*source);
  }
}

void CS_ChangeCannon::MergeFrom(const CS_ChangeCannon& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CS_ChangeCannon)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      chair_id_ = from.chair_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      add_ = from.add_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CS_ChangeCannon::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CS_ChangeCannon)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CS_ChangeCannon::CopyFrom(const CS_ChangeCannon& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CS_ChangeCannon)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CS_ChangeCannon::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  return true;
}

void CS_ChangeCannon::Swap(CS_ChangeCannon* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CS_ChangeCannon::InternalSwap(CS_ChangeCannon* other) {
  std::swap(chair_id_, other->chair_id_);
  std::swap(add_, other->add_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CS_ChangeCannon::GetMetadata() const {
  protobuf_public_5ffishing_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_public_5ffishing_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CS_ChangeCannon

// required int32 chair_id = 1;
bool CS_ChangeCannon::has_chair_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CS_ChangeCannon::set_has_chair_id() {
  _has_bits_[0] |= 0x00000001u;
}
void CS_ChangeCannon::clear_has_chair_id() {
  _has_bits_[0] &= ~0x00000001u;
}
void CS_ChangeCannon::clear_chair_id() {
  chair_id_ = 0;
  clear_has_chair_id();
}
::google::protobuf::int32 CS_ChangeCannon::chair_id() const {
  // @@protoc_insertion_point(field_get:CS_ChangeCannon.chair_id)
  return chair_id_;
}
void CS_ChangeCannon::set_chair_id(::google::protobuf::int32 value) {
  set_has_chair_id();
  chair_id_ = value;
  // @@protoc_insertion_point(field_set:CS_ChangeCannon.chair_id)
}

// required int32 add = 2;
bool CS_ChangeCannon::has_add() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CS_ChangeCannon::set_has_add() {
  _has_bits_[0] |= 0x00000002u;
}
void CS_ChangeCannon::clear_has_add() {
  _has_bits_[0] &= ~0x00000002u;
}
void CS_ChangeCannon::clear_add() {
  add_ = 0;
  clear_has_add();
}
::google::protobuf::int32 CS_ChangeCannon::add() const {
  // @@protoc_insertion_point(field_get:CS_ChangeCannon.add)
  return add_;
}
void CS_ChangeCannon::set_add(::google::protobuf::int32 value) {
  set_has_add();
  add_ = value;
  // @@protoc_insertion_point(field_set:CS_ChangeCannon.add)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CS_ChangeScore::kChairIdFieldNumber;
const int CS_ChangeScore::kAddFieldNumber;
const int CS_ChangeScore::kAddAllFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CS_ChangeScore::CS_ChangeScore()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_public_5ffishing_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:CS_ChangeScore)
}
CS_ChangeScore::CS_ChangeScore(const CS_ChangeScore& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&chair_id_, &from.chair_id_,
    reinterpret_cast<char*>(&add_all_) -
    reinterpret_cast<char*>(&chair_id_) + sizeof(add_all_));
  // @@protoc_insertion_point(copy_constructor:CS_ChangeScore)
}

void CS_ChangeScore::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&chair_id_, 0, reinterpret_cast<char*>(&add_all_) -
    reinterpret_cast<char*>(&chair_id_) + sizeof(add_all_));
}

CS_ChangeScore::~CS_ChangeScore() {
  // @@protoc_insertion_point(destructor:CS_ChangeScore)
  SharedDtor();
}

void CS_ChangeScore::SharedDtor() {
}

void CS_ChangeScore::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CS_ChangeScore::descriptor() {
  protobuf_public_5ffishing_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_public_5ffishing_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CS_ChangeScore& CS_ChangeScore::default_instance() {
  protobuf_public_5ffishing_2eproto::InitDefaults();
  return *internal_default_instance();
}

CS_ChangeScore* CS_ChangeScore::New(::google::protobuf::Arena* arena) const {
  CS_ChangeScore* n = new CS_ChangeScore;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CS_ChangeScore::Clear() {
// @@protoc_insertion_point(message_clear_start:CS_ChangeScore)
  if (_has_bits_[0 / 32] & 7u) {
    ::memset(&chair_id_, 0, reinterpret_cast<char*>(&add_all_) -
      reinterpret_cast<char*>(&chair_id_) + sizeof(add_all_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CS_ChangeScore::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CS_ChangeScore)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 chair_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_chair_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &chair_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 add = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_add();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &add_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 add_all = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {
          set_has_add_all();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &add_all_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CS_ChangeScore)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CS_ChangeScore)
  return false;
#undef DO_
}

void CS_ChangeScore::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CS_ChangeScore)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 chair_id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->chair_id(), output);
  }

  // required int32 add = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->add(), output);
  }

  // required int32 add_all = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->add_all(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CS_ChangeScore)
}

::google::protobuf::uint8* CS_ChangeScore::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CS_ChangeScore)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 chair_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->chair_id(), target);
  }

  // required int32 add = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->add(), target);
  }

  // required int32 add_all = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->add_all(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CS_ChangeScore)
  return target;
}

size_t CS_ChangeScore::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:CS_ChangeScore)
  size_t total_size = 0;

  if (has_chair_id()) {
    // required int32 chair_id = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->chair_id());
  }

  if (has_add()) {
    // required int32 add = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->add());
  }

  if (has_add_all()) {
    // required int32 add_all = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->add_all());
  }

  return total_size;
}
size_t CS_ChangeScore::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CS_ChangeScore)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000007) ^ 0x00000007) == 0) {  // All required fields are present.
    // required int32 chair_id = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->chair_id());

    // required int32 add = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->add());

    // required int32 add_all = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->add_all());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CS_ChangeScore::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CS_ChangeScore)
  GOOGLE_DCHECK_NE(&from, this);
  const CS_ChangeScore* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CS_ChangeScore>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CS_ChangeScore)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CS_ChangeScore)
    MergeFrom(*source);
  }
}

void CS_ChangeScore::MergeFrom(const CS_ChangeScore& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CS_ChangeScore)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      chair_id_ = from.chair_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      add_ = from.add_;
    }
    if (cached_has_bits & 0x00000004u) {
      add_all_ = from.add_all_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CS_ChangeScore::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CS_ChangeScore)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CS_ChangeScore::CopyFrom(const CS_ChangeScore& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CS_ChangeScore)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CS_ChangeScore::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;
  return true;
}

void CS_ChangeScore::Swap(CS_ChangeScore* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CS_ChangeScore::InternalSwap(CS_ChangeScore* other) {
  std::swap(chair_id_, other->chair_id_);
  std::swap(add_, other->add_);
  std::swap(add_all_, other->add_all_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CS_ChangeScore::GetMetadata() const {
  protobuf_public_5ffishing_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_public_5ffishing_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CS_ChangeScore

// required int32 chair_id = 1;
bool CS_ChangeScore::has_chair_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CS_ChangeScore::set_has_chair_id() {
  _has_bits_[0] |= 0x00000001u;
}
void CS_ChangeScore::clear_has_chair_id() {
  _has_bits_[0] &= ~0x00000001u;
}
void CS_ChangeScore::clear_chair_id() {
  chair_id_ = 0;
  clear_has_chair_id();
}
::google::protobuf::int32 CS_ChangeScore::chair_id() const {
  // @@protoc_insertion_point(field_get:CS_ChangeScore.chair_id)
  return chair_id_;
}
void CS_ChangeScore::set_chair_id(::google::protobuf::int32 value) {
  set_has_chair_id();
  chair_id_ = value;
  // @@protoc_insertion_point(field_set:CS_ChangeScore.chair_id)
}

// required int32 add = 2;
bool CS_ChangeScore::has_add() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CS_ChangeScore::set_has_add() {
  _has_bits_[0] |= 0x00000002u;
}
void CS_ChangeScore::clear_has_add() {
  _has_bits_[0] &= ~0x00000002u;
}
void CS_ChangeScore::clear_add() {
  add_ = 0;
  clear_has_add();
}
::google::protobuf::int32 CS_ChangeScore::add() const {
  // @@protoc_insertion_point(field_get:CS_ChangeScore.add)
  return add_;
}
void CS_ChangeScore::set_add(::google::protobuf::int32 value) {
  set_has_add();
  add_ = value;
  // @@protoc_insertion_point(field_set:CS_ChangeScore.add)
}

// required int32 add_all = 3;
bool CS_ChangeScore::has_add_all() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void CS_ChangeScore::set_has_add_all() {
  _has_bits_[0] |= 0x00000004u;
}
void CS_ChangeScore::clear_has_add_all() {
  _has_bits_[0] &= ~0x00000004u;
}
void CS_ChangeScore::clear_add_all() {
  add_all_ = 0;
  clear_has_add_all();
}
::google::protobuf::int32 CS_ChangeScore::add_all() const {
  // @@protoc_insertion_point(field_get:CS_ChangeScore.add_all)
  return add_all_;
}
void CS_ChangeScore::set_add_all(::google::protobuf::int32 value) {
  set_has_add_all();
  add_all_ = value;
  // @@protoc_insertion_point(field_set:CS_ChangeScore.add_all)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CS_TimeSync::kChairIdFieldNumber;
const int CS_TimeSync::kClientTickFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CS_TimeSync::CS_TimeSync()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_public_5ffishing_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:CS_TimeSync)
}
CS_TimeSync::CS_TimeSync(const CS_TimeSync& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&chair_id_, &from.chair_id_,
    reinterpret_cast<char*>(&client_tick_) -
    reinterpret_cast<char*>(&chair_id_) + sizeof(client_tick_));
  // @@protoc_insertion_point(copy_constructor:CS_TimeSync)
}

void CS_TimeSync::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&chair_id_, 0, reinterpret_cast<char*>(&client_tick_) -
    reinterpret_cast<char*>(&chair_id_) + sizeof(client_tick_));
}

CS_TimeSync::~CS_TimeSync() {
  // @@protoc_insertion_point(destructor:CS_TimeSync)
  SharedDtor();
}

void CS_TimeSync::SharedDtor() {
}

void CS_TimeSync::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CS_TimeSync::descriptor() {
  protobuf_public_5ffishing_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_public_5ffishing_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CS_TimeSync& CS_TimeSync::default_instance() {
  protobuf_public_5ffishing_2eproto::InitDefaults();
  return *internal_default_instance();
}

CS_TimeSync* CS_TimeSync::New(::google::protobuf::Arena* arena) const {
  CS_TimeSync* n = new CS_TimeSync;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CS_TimeSync::Clear() {
// @@protoc_insertion_point(message_clear_start:CS_TimeSync)
  if (_has_bits_[0 / 32] & 3u) {
    ::memset(&chair_id_, 0, reinterpret_cast<char*>(&client_tick_) -
      reinterpret_cast<char*>(&chair_id_) + sizeof(client_tick_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CS_TimeSync::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CS_TimeSync)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 chair_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_chair_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &chair_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint32 client_tick = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_client_tick();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &client_tick_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CS_TimeSync)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CS_TimeSync)
  return false;
#undef DO_
}

void CS_TimeSync::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CS_TimeSync)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 chair_id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->chair_id(), output);
  }

  // required uint32 client_tick = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->client_tick(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CS_TimeSync)
}

::google::protobuf::uint8* CS_TimeSync::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CS_TimeSync)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 chair_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->chair_id(), target);
  }

  // required uint32 client_tick = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->client_tick(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CS_TimeSync)
  return target;
}

size_t CS_TimeSync::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:CS_TimeSync)
  size_t total_size = 0;

  if (has_chair_id()) {
    // required int32 chair_id = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->chair_id());
  }

  if (has_client_tick()) {
    // required uint32 client_tick = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->client_tick());
  }

  return total_size;
}
size_t CS_TimeSync::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CS_TimeSync)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required int32 chair_id = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->chair_id());

    // required uint32 client_tick = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->client_tick());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CS_TimeSync::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CS_TimeSync)
  GOOGLE_DCHECK_NE(&from, this);
  const CS_TimeSync* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CS_TimeSync>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CS_TimeSync)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CS_TimeSync)
    MergeFrom(*source);
  }
}

void CS_TimeSync::MergeFrom(const CS_TimeSync& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CS_TimeSync)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      chair_id_ = from.chair_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      client_tick_ = from.client_tick_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CS_TimeSync::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CS_TimeSync)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CS_TimeSync::CopyFrom(const CS_TimeSync& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CS_TimeSync)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CS_TimeSync::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  return true;
}

void CS_TimeSync::Swap(CS_TimeSync* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CS_TimeSync::InternalSwap(CS_TimeSync* other) {
  std::swap(chair_id_, other->chair_id_);
  std::swap(client_tick_, other->client_tick_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CS_TimeSync::GetMetadata() const {
  protobuf_public_5ffishing_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_public_5ffishing_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CS_TimeSync

// required int32 chair_id = 1;
bool CS_TimeSync::has_chair_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CS_TimeSync::set_has_chair_id() {
  _has_bits_[0] |= 0x00000001u;
}
void CS_TimeSync::clear_has_chair_id() {
  _has_bits_[0] &= ~0x00000001u;
}
void CS_TimeSync::clear_chair_id() {
  chair_id_ = 0;
  clear_has_chair_id();
}
::google::protobuf::int32 CS_TimeSync::chair_id() const {
  // @@protoc_insertion_point(field_get:CS_TimeSync.chair_id)
  return chair_id_;
}
void CS_TimeSync::set_chair_id(::google::protobuf::int32 value) {
  set_has_chair_id();
  chair_id_ = value;
  // @@protoc_insertion_point(field_set:CS_TimeSync.chair_id)
}

// required uint32 client_tick = 2;
bool CS_TimeSync::has_client_tick() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CS_TimeSync::set_has_client_tick() {
  _has_bits_[0] |= 0x00000002u;
}
void CS_TimeSync::clear_has_client_tick() {
  _has_bits_[0] &= ~0x00000002u;
}
void CS_TimeSync::clear_client_tick() {
  client_tick_ = 0u;
  clear_has_client_tick();
}
::google::protobuf::uint32 CS_TimeSync::client_tick() const {
  // @@protoc_insertion_point(field_get:CS_TimeSync.client_tick)
  return client_tick_;
}
void CS_TimeSync::set_client_tick(::google::protobuf::uint32 value) {
  set_has_client_tick();
  client_tick_ = value;
  // @@protoc_insertion_point(field_set:CS_TimeSync.client_tick)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SC_FishMul::kFishIdFieldNumber;
const int SC_FishMul::kMulFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SC_FishMul::SC_FishMul()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_public_5ffishing_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:SC_FishMul)
}
SC_FishMul::SC_FishMul(const SC_FishMul& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&fish_id_, &from.fish_id_,
    reinterpret_cast<char*>(&mul_) -
    reinterpret_cast<char*>(&fish_id_) + sizeof(mul_));
  // @@protoc_insertion_point(copy_constructor:SC_FishMul)
}

void SC_FishMul::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&fish_id_, 0, reinterpret_cast<char*>(&mul_) -
    reinterpret_cast<char*>(&fish_id_) + sizeof(mul_));
}

SC_FishMul::~SC_FishMul() {
  // @@protoc_insertion_point(destructor:SC_FishMul)
  SharedDtor();
}

void SC_FishMul::SharedDtor() {
}

void SC_FishMul::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SC_FishMul::descriptor() {
  protobuf_public_5ffishing_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_public_5ffishing_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const SC_FishMul& SC_FishMul::default_instance() {
  protobuf_public_5ffishing_2eproto::InitDefaults();
  return *internal_default_instance();
}

SC_FishMul* SC_FishMul::New(::google::protobuf::Arena* arena) const {
  SC_FishMul* n = new SC_FishMul;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SC_FishMul::Clear() {
// @@protoc_insertion_point(message_clear_start:SC_FishMul)
  if (_has_bits_[0 / 32] & 3u) {
    ::memset(&fish_id_, 0, reinterpret_cast<char*>(&mul_) -
      reinterpret_cast<char*>(&fish_id_) + sizeof(mul_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool SC_FishMul::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:SC_FishMul)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 fish_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_fish_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &fish_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 mul = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_mul();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &mul_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:SC_FishMul)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:SC_FishMul)
  return false;
#undef DO_
}

void SC_FishMul::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:SC_FishMul)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 fish_id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->fish_id(), output);
  }

  // required int32 mul = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->mul(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:SC_FishMul)
}

::google::protobuf::uint8* SC_FishMul::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:SC_FishMul)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 fish_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->fish_id(), target);
  }

  // required int32 mul = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->mul(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SC_FishMul)
  return target;
}

size_t SC_FishMul::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:SC_FishMul)
  size_t total_size = 0;

  if (has_fish_id()) {
    // required int32 fish_id = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->fish_id());
  }

  if (has_mul()) {
    // required int32 mul = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->mul());
  }

  return total_size;
}
size_t SC_FishMul::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SC_FishMul)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required int32 fish_id = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->fish_id());

    // required int32 mul = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->mul());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SC_FishMul::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:SC_FishMul)
  GOOGLE_DCHECK_NE(&from, this);
  const SC_FishMul* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SC_FishMul>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:SC_FishMul)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:SC_FishMul)
    MergeFrom(*source);
  }
}

void SC_FishMul::MergeFrom(const SC_FishMul& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:SC_FishMul)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      fish_id_ = from.fish_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      mul_ = from.mul_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void SC_FishMul::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:SC_FishMul)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SC_FishMul::CopyFrom(const SC_FishMul& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SC_FishMul)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SC_FishMul::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  return true;
}

void SC_FishMul::Swap(SC_FishMul* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SC_FishMul::InternalSwap(SC_FishMul* other) {
  std::swap(fish_id_, other->fish_id_);
  std::swap(mul_, other->mul_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SC_FishMul::GetMetadata() const {
  protobuf_public_5ffishing_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_public_5ffishing_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SC_FishMul

// required int32 fish_id = 1;
bool SC_FishMul::has_fish_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void SC_FishMul::set_has_fish_id() {
  _has_bits_[0] |= 0x00000001u;
}
void SC_FishMul::clear_has_fish_id() {
  _has_bits_[0] &= ~0x00000001u;
}
void SC_FishMul::clear_fish_id() {
  fish_id_ = 0;
  clear_has_fish_id();
}
::google::protobuf::int32 SC_FishMul::fish_id() const {
  // @@protoc_insertion_point(field_get:SC_FishMul.fish_id)
  return fish_id_;
}
void SC_FishMul::set_fish_id(::google::protobuf::int32 value) {
  set_has_fish_id();
  fish_id_ = value;
  // @@protoc_insertion_point(field_set:SC_FishMul.fish_id)
}

// required int32 mul = 2;
bool SC_FishMul::has_mul() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void SC_FishMul::set_has_mul() {
  _has_bits_[0] |= 0x00000002u;
}
void SC_FishMul::clear_has_mul() {
  _has_bits_[0] &= ~0x00000002u;
}
void SC_FishMul::clear_mul() {
  mul_ = 0;
  clear_has_mul();
}
::google::protobuf::int32 SC_FishMul::mul() const {
  // @@protoc_insertion_point(field_get:SC_FishMul.mul)
  return mul_;
}
void SC_FishMul::set_mul(::google::protobuf::int32 value) {
  set_has_mul();
  mul_ = value;
  // @@protoc_insertion_point(field_set:SC_FishMul.mul)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SC_AddBuffer::kBufferTypeFieldNumber;
const int SC_AddBuffer::kBufferParamFieldNumber;
const int SC_AddBuffer::kBufferTimeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SC_AddBuffer::SC_AddBuffer()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_public_5ffishing_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:SC_AddBuffer)
}
SC_AddBuffer::SC_AddBuffer(const SC_AddBuffer& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&buffer_type_, &from.buffer_type_,
    reinterpret_cast<char*>(&buffer_time_) -
    reinterpret_cast<char*>(&buffer_type_) + sizeof(buffer_time_));
  // @@protoc_insertion_point(copy_constructor:SC_AddBuffer)
}

void SC_AddBuffer::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&buffer_type_, 0, reinterpret_cast<char*>(&buffer_time_) -
    reinterpret_cast<char*>(&buffer_type_) + sizeof(buffer_time_));
}

SC_AddBuffer::~SC_AddBuffer() {
  // @@protoc_insertion_point(destructor:SC_AddBuffer)
  SharedDtor();
}

void SC_AddBuffer::SharedDtor() {
}

void SC_AddBuffer::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SC_AddBuffer::descriptor() {
  protobuf_public_5ffishing_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_public_5ffishing_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const SC_AddBuffer& SC_AddBuffer::default_instance() {
  protobuf_public_5ffishing_2eproto::InitDefaults();
  return *internal_default_instance();
}

SC_AddBuffer* SC_AddBuffer::New(::google::protobuf::Arena* arena) const {
  SC_AddBuffer* n = new SC_AddBuffer;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SC_AddBuffer::Clear() {
// @@protoc_insertion_point(message_clear_start:SC_AddBuffer)
  if (_has_bits_[0 / 32] & 7u) {
    ::memset(&buffer_type_, 0, reinterpret_cast<char*>(&buffer_time_) -
      reinterpret_cast<char*>(&buffer_type_) + sizeof(buffer_time_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool SC_AddBuffer::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:SC_AddBuffer)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 buffer_type = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_buffer_type();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &buffer_type_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required float buffer_param = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(21u)) {
          set_has_buffer_param();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &buffer_param_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required float buffer_time = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(29u)) {
          set_has_buffer_time();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &buffer_time_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:SC_AddBuffer)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:SC_AddBuffer)
  return false;
#undef DO_
}

void SC_AddBuffer::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:SC_AddBuffer)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 buffer_type = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->buffer_type(), output);
  }

  // required float buffer_param = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->buffer_param(), output);
  }

  // required float buffer_time = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->buffer_time(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:SC_AddBuffer)
}

::google::protobuf::uint8* SC_AddBuffer::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:SC_AddBuffer)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 buffer_type = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->buffer_type(), target);
  }

  // required float buffer_param = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->buffer_param(), target);
  }

  // required float buffer_time = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->buffer_time(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SC_AddBuffer)
  return target;
}

size_t SC_AddBuffer::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:SC_AddBuffer)
  size_t total_size = 0;

  if (has_buffer_type()) {
    // required int32 buffer_type = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->buffer_type());
  }

  if (has_buffer_param()) {
    // required float buffer_param = 2;
    total_size += 1 + 4;
  }

  if (has_buffer_time()) {
    // required float buffer_time = 3;
    total_size += 1 + 4;
  }

  return total_size;
}
size_t SC_AddBuffer::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SC_AddBuffer)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000007) ^ 0x00000007) == 0) {  // All required fields are present.
    // required int32 buffer_type = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->buffer_type());

    // required float buffer_param = 2;
    total_size += 1 + 4;

    // required float buffer_time = 3;
    total_size += 1 + 4;

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SC_AddBuffer::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:SC_AddBuffer)
  GOOGLE_DCHECK_NE(&from, this);
  const SC_AddBuffer* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SC_AddBuffer>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:SC_AddBuffer)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:SC_AddBuffer)
    MergeFrom(*source);
  }
}

void SC_AddBuffer::MergeFrom(const SC_AddBuffer& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:SC_AddBuffer)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      buffer_type_ = from.buffer_type_;
    }
    if (cached_has_bits & 0x00000002u) {
      buffer_param_ = from.buffer_param_;
    }
    if (cached_has_bits & 0x00000004u) {
      buffer_time_ = from.buffer_time_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void SC_AddBuffer::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:SC_AddBuffer)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SC_AddBuffer::CopyFrom(const SC_AddBuffer& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SC_AddBuffer)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SC_AddBuffer::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;
  return true;
}

void SC_AddBuffer::Swap(SC_AddBuffer* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SC_AddBuffer::InternalSwap(SC_AddBuffer* other) {
  std::swap(buffer_type_, other->buffer_type_);
  std::swap(buffer_param_, other->buffer_param_);
  std::swap(buffer_time_, other->buffer_time_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SC_AddBuffer::GetMetadata() const {
  protobuf_public_5ffishing_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_public_5ffishing_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SC_AddBuffer

// required int32 buffer_type = 1;
bool SC_AddBuffer::has_buffer_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void SC_AddBuffer::set_has_buffer_type() {
  _has_bits_[0] |= 0x00000001u;
}
void SC_AddBuffer::clear_has_buffer_type() {
  _has_bits_[0] &= ~0x00000001u;
}
void SC_AddBuffer::clear_buffer_type() {
  buffer_type_ = 0;
  clear_has_buffer_type();
}
::google::protobuf::int32 SC_AddBuffer::buffer_type() const {
  // @@protoc_insertion_point(field_get:SC_AddBuffer.buffer_type)
  return buffer_type_;
}
void SC_AddBuffer::set_buffer_type(::google::protobuf::int32 value) {
  set_has_buffer_type();
  buffer_type_ = value;
  // @@protoc_insertion_point(field_set:SC_AddBuffer.buffer_type)
}

// required float buffer_param = 2;
bool SC_AddBuffer::has_buffer_param() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void SC_AddBuffer::set_has_buffer_param() {
  _has_bits_[0] |= 0x00000002u;
}
void SC_AddBuffer::clear_has_buffer_param() {
  _has_bits_[0] &= ~0x00000002u;
}
void SC_AddBuffer::clear_buffer_param() {
  buffer_param_ = 0;
  clear_has_buffer_param();
}
float SC_AddBuffer::buffer_param() const {
  // @@protoc_insertion_point(field_get:SC_AddBuffer.buffer_param)
  return buffer_param_;
}
void SC_AddBuffer::set_buffer_param(float value) {
  set_has_buffer_param();
  buffer_param_ = value;
  // @@protoc_insertion_point(field_set:SC_AddBuffer.buffer_param)
}

// required float buffer_time = 3;
bool SC_AddBuffer::has_buffer_time() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void SC_AddBuffer::set_has_buffer_time() {
  _has_bits_[0] |= 0x00000004u;
}
void SC_AddBuffer::clear_has_buffer_time() {
  _has_bits_[0] &= ~0x00000004u;
}
void SC_AddBuffer::clear_buffer_time() {
  buffer_time_ = 0;
  clear_has_buffer_time();
}
float SC_AddBuffer::buffer_time() const {
  // @@protoc_insertion_point(field_get:SC_AddBuffer.buffer_time)
  return buffer_time_;
}
void SC_AddBuffer::set_buffer_time(float value) {
  set_has_buffer_time();
  buffer_time_ = value;
  // @@protoc_insertion_point(field_set:SC_AddBuffer.buffer_time)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SC_BulletSet::kMulripleFieldNumber;
const int SC_BulletSet::kSpeedFieldNumber;
const int SC_BulletSet::kMaxCatchFieldNumber;
const int SC_BulletSet::kBulletSizeFieldNumber;
const int SC_BulletSet::kCatchRadioFieldNumber;
const int SC_BulletSet::kCannonTypeFieldNumber;
const int SC_BulletSet::kFirstFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SC_BulletSet::SC_BulletSet()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_public_5ffishing_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:SC_BulletSet)
}
SC_BulletSet::SC_BulletSet(const SC_BulletSet& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&mulriple_, &from.mulriple_,
    reinterpret_cast<char*>(&first_) -
    reinterpret_cast<char*>(&mulriple_) + sizeof(first_));
  // @@protoc_insertion_point(copy_constructor:SC_BulletSet)
}

void SC_BulletSet::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&mulriple_, 0, reinterpret_cast<char*>(&first_) -
    reinterpret_cast<char*>(&mulriple_) + sizeof(first_));
}

SC_BulletSet::~SC_BulletSet() {
  // @@protoc_insertion_point(destructor:SC_BulletSet)
  SharedDtor();
}

void SC_BulletSet::SharedDtor() {
}

void SC_BulletSet::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SC_BulletSet::descriptor() {
  protobuf_public_5ffishing_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_public_5ffishing_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const SC_BulletSet& SC_BulletSet::default_instance() {
  protobuf_public_5ffishing_2eproto::InitDefaults();
  return *internal_default_instance();
}

SC_BulletSet* SC_BulletSet::New(::google::protobuf::Arena* arena) const {
  SC_BulletSet* n = new SC_BulletSet;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SC_BulletSet::Clear() {
// @@protoc_insertion_point(message_clear_start:SC_BulletSet)
  if (_has_bits_[0 / 32] & 127u) {
    ::memset(&mulriple_, 0, reinterpret_cast<char*>(&first_) -
      reinterpret_cast<char*>(&mulriple_) + sizeof(first_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool SC_BulletSet::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:SC_BulletSet)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 mulriple = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_mulriple();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &mulriple_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 speed = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_speed();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &speed_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 max_catch = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {
          set_has_max_catch();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &max_catch_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 bullet_size = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u)) {
          set_has_bullet_size();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &bullet_size_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 catch_radio = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u)) {
          set_has_catch_radio();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &catch_radio_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 cannon_type = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u)) {
          set_has_cannon_type();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &cannon_type_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 first = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u)) {
          set_has_first();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &first_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:SC_BulletSet)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:SC_BulletSet)
  return false;
#undef DO_
}

void SC_BulletSet::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:SC_BulletSet)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 mulriple = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->mulriple(), output);
  }

  // required int32 speed = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->speed(), output);
  }

  // required int32 max_catch = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->max_catch(), output);
  }

  // required int32 bullet_size = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->bullet_size(), output);
  }

  // required int32 catch_radio = 5;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->catch_radio(), output);
  }

  // required int32 cannon_type = 6;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->cannon_type(), output);
  }

  // required int32 first = 7;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->first(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:SC_BulletSet)
}

::google::protobuf::uint8* SC_BulletSet::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:SC_BulletSet)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 mulriple = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->mulriple(), target);
  }

  // required int32 speed = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->speed(), target);
  }

  // required int32 max_catch = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->max_catch(), target);
  }

  // required int32 bullet_size = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->bullet_size(), target);
  }

  // required int32 catch_radio = 5;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->catch_radio(), target);
  }

  // required int32 cannon_type = 6;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->cannon_type(), target);
  }

  // required int32 first = 7;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->first(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SC_BulletSet)
  return target;
}

size_t SC_BulletSet::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:SC_BulletSet)
  size_t total_size = 0;

  if (has_mulriple()) {
    // required int32 mulriple = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->mulriple());
  }

  if (has_speed()) {
    // required int32 speed = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->speed());
  }

  if (has_max_catch()) {
    // required int32 max_catch = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->max_catch());
  }

  if (has_bullet_size()) {
    // required int32 bullet_size = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->bullet_size());
  }

  if (has_catch_radio()) {
    // required int32 catch_radio = 5;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->catch_radio());
  }

  if (has_cannon_type()) {
    // required int32 cannon_type = 6;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->cannon_type());
  }

  if (has_first()) {
    // required int32 first = 7;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->first());
  }

  return total_size;
}
size_t SC_BulletSet::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SC_BulletSet)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (((_has_bits_[0] & 0x0000007f) ^ 0x0000007f) == 0) {  // All required fields are present.
    // required int32 mulriple = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->mulriple());

    // required int32 speed = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->speed());

    // required int32 max_catch = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->max_catch());

    // required int32 bullet_size = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->bullet_size());

    // required int32 catch_radio = 5;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->catch_radio());

    // required int32 cannon_type = 6;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->cannon_type());

    // required int32 first = 7;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->first());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SC_BulletSet::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:SC_BulletSet)
  GOOGLE_DCHECK_NE(&from, this);
  const SC_BulletSet* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SC_BulletSet>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:SC_BulletSet)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:SC_BulletSet)
    MergeFrom(*source);
  }
}

void SC_BulletSet::MergeFrom(const SC_BulletSet& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:SC_BulletSet)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 127u) {
    if (cached_has_bits & 0x00000001u) {
      mulriple_ = from.mulriple_;
    }
    if (cached_has_bits & 0x00000002u) {
      speed_ = from.speed_;
    }
    if (cached_has_bits & 0x00000004u) {
      max_catch_ = from.max_catch_;
    }
    if (cached_has_bits & 0x00000008u) {
      bullet_size_ = from.bullet_size_;
    }
    if (cached_has_bits & 0x00000010u) {
      catch_radio_ = from.catch_radio_;
    }
    if (cached_has_bits & 0x00000020u) {
      cannon_type_ = from.cannon_type_;
    }
    if (cached_has_bits & 0x00000040u) {
      first_ = from.first_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void SC_BulletSet::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:SC_BulletSet)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SC_BulletSet::CopyFrom(const SC_BulletSet& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SC_BulletSet)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SC_BulletSet::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000007f) != 0x0000007f) return false;
  return true;
}

void SC_BulletSet::Swap(SC_BulletSet* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SC_BulletSet::InternalSwap(SC_BulletSet* other) {
  std::swap(mulriple_, other->mulriple_);
  std::swap(speed_, other->speed_);
  std::swap(max_catch_, other->max_catch_);
  std::swap(bullet_size_, other->bullet_size_);
  std::swap(catch_radio_, other->catch_radio_);
  std::swap(cannon_type_, other->cannon_type_);
  std::swap(first_, other->first_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SC_BulletSet::GetMetadata() const {
  protobuf_public_5ffishing_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_public_5ffishing_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SC_BulletSet

// required int32 mulriple = 1;
bool SC_BulletSet::has_mulriple() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void SC_BulletSet::set_has_mulriple() {
  _has_bits_[0] |= 0x00000001u;
}
void SC_BulletSet::clear_has_mulriple() {
  _has_bits_[0] &= ~0x00000001u;
}
void SC_BulletSet::clear_mulriple() {
  mulriple_ = 0;
  clear_has_mulriple();
}
::google::protobuf::int32 SC_BulletSet::mulriple() const {
  // @@protoc_insertion_point(field_get:SC_BulletSet.mulriple)
  return mulriple_;
}
void SC_BulletSet::set_mulriple(::google::protobuf::int32 value) {
  set_has_mulriple();
  mulriple_ = value;
  // @@protoc_insertion_point(field_set:SC_BulletSet.mulriple)
}

// required int32 speed = 2;
bool SC_BulletSet::has_speed() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void SC_BulletSet::set_has_speed() {
  _has_bits_[0] |= 0x00000002u;
}
void SC_BulletSet::clear_has_speed() {
  _has_bits_[0] &= ~0x00000002u;
}
void SC_BulletSet::clear_speed() {
  speed_ = 0;
  clear_has_speed();
}
::google::protobuf::int32 SC_BulletSet::speed() const {
  // @@protoc_insertion_point(field_get:SC_BulletSet.speed)
  return speed_;
}
void SC_BulletSet::set_speed(::google::protobuf::int32 value) {
  set_has_speed();
  speed_ = value;
  // @@protoc_insertion_point(field_set:SC_BulletSet.speed)
}

// required int32 max_catch = 3;
bool SC_BulletSet::has_max_catch() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void SC_BulletSet::set_has_max_catch() {
  _has_bits_[0] |= 0x00000004u;
}
void SC_BulletSet::clear_has_max_catch() {
  _has_bits_[0] &= ~0x00000004u;
}
void SC_BulletSet::clear_max_catch() {
  max_catch_ = 0;
  clear_has_max_catch();
}
::google::protobuf::int32 SC_BulletSet::max_catch() const {
  // @@protoc_insertion_point(field_get:SC_BulletSet.max_catch)
  return max_catch_;
}
void SC_BulletSet::set_max_catch(::google::protobuf::int32 value) {
  set_has_max_catch();
  max_catch_ = value;
  // @@protoc_insertion_point(field_set:SC_BulletSet.max_catch)
}

// required int32 bullet_size = 4;
bool SC_BulletSet::has_bullet_size() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void SC_BulletSet::set_has_bullet_size() {
  _has_bits_[0] |= 0x00000008u;
}
void SC_BulletSet::clear_has_bullet_size() {
  _has_bits_[0] &= ~0x00000008u;
}
void SC_BulletSet::clear_bullet_size() {
  bullet_size_ = 0;
  clear_has_bullet_size();
}
::google::protobuf::int32 SC_BulletSet::bullet_size() const {
  // @@protoc_insertion_point(field_get:SC_BulletSet.bullet_size)
  return bullet_size_;
}
void SC_BulletSet::set_bullet_size(::google::protobuf::int32 value) {
  set_has_bullet_size();
  bullet_size_ = value;
  // @@protoc_insertion_point(field_set:SC_BulletSet.bullet_size)
}

// required int32 catch_radio = 5;
bool SC_BulletSet::has_catch_radio() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void SC_BulletSet::set_has_catch_radio() {
  _has_bits_[0] |= 0x00000010u;
}
void SC_BulletSet::clear_has_catch_radio() {
  _has_bits_[0] &= ~0x00000010u;
}
void SC_BulletSet::clear_catch_radio() {
  catch_radio_ = 0;
  clear_has_catch_radio();
}
::google::protobuf::int32 SC_BulletSet::catch_radio() const {
  // @@protoc_insertion_point(field_get:SC_BulletSet.catch_radio)
  return catch_radio_;
}
void SC_BulletSet::set_catch_radio(::google::protobuf::int32 value) {
  set_has_catch_radio();
  catch_radio_ = value;
  // @@protoc_insertion_point(field_set:SC_BulletSet.catch_radio)
}

// required int32 cannon_type = 6;
bool SC_BulletSet::has_cannon_type() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void SC_BulletSet::set_has_cannon_type() {
  _has_bits_[0] |= 0x00000020u;
}
void SC_BulletSet::clear_has_cannon_type() {
  _has_bits_[0] &= ~0x00000020u;
}
void SC_BulletSet::clear_cannon_type() {
  cannon_type_ = 0;
  clear_has_cannon_type();
}
::google::protobuf::int32 SC_BulletSet::cannon_type() const {
  // @@protoc_insertion_point(field_get:SC_BulletSet.cannon_type)
  return cannon_type_;
}
void SC_BulletSet::set_cannon_type(::google::protobuf::int32 value) {
  set_has_cannon_type();
  cannon_type_ = value;
  // @@protoc_insertion_point(field_set:SC_BulletSet.cannon_type)
}

// required int32 first = 7;
bool SC_BulletSet::has_first() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void SC_BulletSet::set_has_first() {
  _has_bits_[0] |= 0x00000040u;
}
void SC_BulletSet::clear_has_first() {
  _has_bits_[0] &= ~0x00000040u;
}
void SC_BulletSet::clear_first() {
  first_ = 0;
  clear_has_first();
}
::google::protobuf::int32 SC_BulletSet::first() const {
  // @@protoc_insertion_point(field_get:SC_BulletSet.first)
  return first_;
}
void SC_BulletSet::set_first(::google::protobuf::int32 value) {
  set_has_first();
  first_ = value;
  // @@protoc_insertion_point(field_set:SC_BulletSet.first)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SC_BulletSet_List::kPbBulletsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SC_BulletSet_List::SC_BulletSet_List()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_public_5ffishing_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:SC_BulletSet_List)
}
SC_BulletSet_List::SC_BulletSet_List(const SC_BulletSet_List& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      pb_bullets_(from.pb_bullets_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:SC_BulletSet_List)
}

void SC_BulletSet_List::SharedCtor() {
  _cached_size_ = 0;
}

SC_BulletSet_List::~SC_BulletSet_List() {
  // @@protoc_insertion_point(destructor:SC_BulletSet_List)
  SharedDtor();
}

void SC_BulletSet_List::SharedDtor() {
}

void SC_BulletSet_List::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SC_BulletSet_List::descriptor() {
  protobuf_public_5ffishing_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_public_5ffishing_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const SC_BulletSet_List& SC_BulletSet_List::default_instance() {
  protobuf_public_5ffishing_2eproto::InitDefaults();
  return *internal_default_instance();
}

SC_BulletSet_List* SC_BulletSet_List::New(::google::protobuf::Arena* arena) const {
  SC_BulletSet_List* n = new SC_BulletSet_List;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SC_BulletSet_List::Clear() {
// @@protoc_insertion_point(message_clear_start:SC_BulletSet_List)
  pb_bullets_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool SC_BulletSet_List::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:SC_BulletSet_List)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .SC_BulletSet pb_bullets = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_pb_bullets()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:SC_BulletSet_List)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:SC_BulletSet_List)
  return false;
#undef DO_
}

void SC_BulletSet_List::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:SC_BulletSet_List)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .SC_BulletSet pb_bullets = 1;
  for (unsigned int i = 0, n = this->pb_bullets_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->pb_bullets(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:SC_BulletSet_List)
}

::google::protobuf::uint8* SC_BulletSet_List::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:SC_BulletSet_List)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .SC_BulletSet pb_bullets = 1;
  for (unsigned int i = 0, n = this->pb_bullets_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, this->pb_bullets(i), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SC_BulletSet_List)
  return target;
}

size_t SC_BulletSet_List::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SC_BulletSet_List)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // repeated .SC_BulletSet pb_bullets = 1;
  {
    unsigned int count = this->pb_bullets_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->pb_bullets(i));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SC_BulletSet_List::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:SC_BulletSet_List)
  GOOGLE_DCHECK_NE(&from, this);
  const SC_BulletSet_List* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SC_BulletSet_List>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:SC_BulletSet_List)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:SC_BulletSet_List)
    MergeFrom(*source);
  }
}

void SC_BulletSet_List::MergeFrom(const SC_BulletSet_List& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:SC_BulletSet_List)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  pb_bullets_.MergeFrom(from.pb_bullets_);
}

void SC_BulletSet_List::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:SC_BulletSet_List)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SC_BulletSet_List::CopyFrom(const SC_BulletSet_List& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SC_BulletSet_List)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SC_BulletSet_List::IsInitialized() const {
  if (!::google::protobuf::internal::AllAreInitialized(this->pb_bullets())) return false;
  return true;
}

void SC_BulletSet_List::Swap(SC_BulletSet_List* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SC_BulletSet_List::InternalSwap(SC_BulletSet_List* other) {
  pb_bullets_.InternalSwap(&other->pb_bullets_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SC_BulletSet_List::GetMetadata() const {
  protobuf_public_5ffishing_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_public_5ffishing_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SC_BulletSet_List

// repeated .SC_BulletSet pb_bullets = 1;
int SC_BulletSet_List::pb_bullets_size() const {
  return pb_bullets_.size();
}
void SC_BulletSet_List::clear_pb_bullets() {
  pb_bullets_.Clear();
}
const ::SC_BulletSet& SC_BulletSet_List::pb_bullets(int index) const {
  // @@protoc_insertion_point(field_get:SC_BulletSet_List.pb_bullets)
  return pb_bullets_.Get(index);
}
::SC_BulletSet* SC_BulletSet_List::mutable_pb_bullets(int index) {
  // @@protoc_insertion_point(field_mutable:SC_BulletSet_List.pb_bullets)
  return pb_bullets_.Mutable(index);
}
::SC_BulletSet* SC_BulletSet_List::add_pb_bullets() {
  // @@protoc_insertion_point(field_add:SC_BulletSet_List.pb_bullets)
  return pb_bullets_.Add();
}
::google::protobuf::RepeatedPtrField< ::SC_BulletSet >*
SC_BulletSet_List::mutable_pb_bullets() {
  // @@protoc_insertion_point(field_mutable_list:SC_BulletSet_List.pb_bullets)
  return &pb_bullets_;
}
const ::google::protobuf::RepeatedPtrField< ::SC_BulletSet >&
SC_BulletSet_List::pb_bullets() const {
  // @@protoc_insertion_point(field_list:SC_BulletSet_List.pb_bullets)
  return pb_bullets_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SC_SendDes::kDesFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SC_SendDes::SC_SendDes()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_public_5ffishing_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:SC_SendDes)
}
SC_SendDes::SC_SendDes(const SC_SendDes& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      des_(from.des_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:SC_SendDes)
}

void SC_SendDes::SharedCtor() {
  _cached_size_ = 0;
}

SC_SendDes::~SC_SendDes() {
  // @@protoc_insertion_point(destructor:SC_SendDes)
  SharedDtor();
}

void SC_SendDes::SharedDtor() {
}

void SC_SendDes::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SC_SendDes::descriptor() {
  protobuf_public_5ffishing_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_public_5ffishing_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const SC_SendDes& SC_SendDes::default_instance() {
  protobuf_public_5ffishing_2eproto::InitDefaults();
  return *internal_default_instance();
}

SC_SendDes* SC_SendDes::New(::google::protobuf::Arena* arena) const {
  SC_SendDes* n = new SC_SendDes;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SC_SendDes::Clear() {
// @@protoc_insertion_point(message_clear_start:SC_SendDes)
  des_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool SC_SendDes::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:SC_SendDes)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated string des = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_des()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->des(this->des_size() - 1).data(),
            this->des(this->des_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "SC_SendDes.des");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:SC_SendDes)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:SC_SendDes)
  return false;
#undef DO_
}

void SC_SendDes::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:SC_SendDes)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated string des = 1;
  for (int i = 0, n = this->des_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->des(i).data(), this->des(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "SC_SendDes.des");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->des(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:SC_SendDes)
}

::google::protobuf::uint8* SC_SendDes::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:SC_SendDes)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated string des = 1;
  for (int i = 0, n = this->des_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->des(i).data(), this->des(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "SC_SendDes.des");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(1, this->des(i), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SC_SendDes)
  return target;
}

size_t SC_SendDes::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SC_SendDes)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // repeated string des = 1;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->des_size());
  for (int i = 0, n = this->des_size(); i < n; i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->des(i));
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SC_SendDes::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:SC_SendDes)
  GOOGLE_DCHECK_NE(&from, this);
  const SC_SendDes* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SC_SendDes>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:SC_SendDes)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:SC_SendDes)
    MergeFrom(*source);
  }
}

void SC_SendDes::MergeFrom(const SC_SendDes& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:SC_SendDes)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  des_.MergeFrom(from.des_);
}

void SC_SendDes::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:SC_SendDes)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SC_SendDes::CopyFrom(const SC_SendDes& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SC_SendDes)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SC_SendDes::IsInitialized() const {
  return true;
}

void SC_SendDes::Swap(SC_SendDes* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SC_SendDes::InternalSwap(SC_SendDes* other) {
  des_.InternalSwap(&other->des_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SC_SendDes::GetMetadata() const {
  protobuf_public_5ffishing_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_public_5ffishing_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SC_SendDes

// repeated string des = 1;
int SC_SendDes::des_size() const {
  return des_.size();
}
void SC_SendDes::clear_des() {
  des_.Clear();
}
const ::std::string& SC_SendDes::des(int index) const {
  // @@protoc_insertion_point(field_get:SC_SendDes.des)
  return des_.Get(index);
}
::std::string* SC_SendDes::mutable_des(int index) {
  // @@protoc_insertion_point(field_mutable:SC_SendDes.des)
  return des_.Mutable(index);
}
void SC_SendDes::set_des(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:SC_SendDes.des)
  des_.Mutable(index)->assign(value);
}
#if LANG_CXX11
void SC_SendDes::set_des(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:SC_SendDes.des)
  des_.Mutable(index)->assign(std::move(value));
}
#endif
void SC_SendDes::set_des(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  des_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:SC_SendDes.des)
}
void SC_SendDes::set_des(int index, const char* value, size_t size) {
  des_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:SC_SendDes.des)
}
::std::string* SC_SendDes::add_des() {
  // @@protoc_insertion_point(field_add_mutable:SC_SendDes.des)
  return des_.Add();
}
void SC_SendDes::add_des(const ::std::string& value) {
  des_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:SC_SendDes.des)
}
#if LANG_CXX11
void SC_SendDes::add_des(::std::string&& value) {
  des_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:SC_SendDes.des)
}
#endif
void SC_SendDes::add_des(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  des_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:SC_SendDes.des)
}
void SC_SendDes::add_des(const char* value, size_t size) {
  des_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:SC_SendDes.des)
}
const ::google::protobuf::RepeatedPtrField< ::std::string>&
SC_SendDes::des() const {
  // @@protoc_insertion_point(field_list:SC_SendDes.des)
  return des_;
}
::google::protobuf::RepeatedPtrField< ::std::string>*
SC_SendDes::mutable_des() {
  // @@protoc_insertion_point(field_mutable_list:SC_SendDes.des)
  return &des_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SC_LockFish::kChairIdFieldNumber;
const int SC_LockFish::kLockIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SC_LockFish::SC_LockFish()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_public_5ffishing_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:SC_LockFish)
}
SC_LockFish::SC_LockFish(const SC_LockFish& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&chair_id_, &from.chair_id_,
    reinterpret_cast<char*>(&lock_id_) -
    reinterpret_cast<char*>(&chair_id_) + sizeof(lock_id_));
  // @@protoc_insertion_point(copy_constructor:SC_LockFish)
}

void SC_LockFish::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&chair_id_, 0, reinterpret_cast<char*>(&lock_id_) -
    reinterpret_cast<char*>(&chair_id_) + sizeof(lock_id_));
}

SC_LockFish::~SC_LockFish() {
  // @@protoc_insertion_point(destructor:SC_LockFish)
  SharedDtor();
}

void SC_LockFish::SharedDtor() {
}

void SC_LockFish::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SC_LockFish::descriptor() {
  protobuf_public_5ffishing_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_public_5ffishing_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const SC_LockFish& SC_LockFish::default_instance() {
  protobuf_public_5ffishing_2eproto::InitDefaults();
  return *internal_default_instance();
}

SC_LockFish* SC_LockFish::New(::google::protobuf::Arena* arena) const {
  SC_LockFish* n = new SC_LockFish;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SC_LockFish::Clear() {
// @@protoc_insertion_point(message_clear_start:SC_LockFish)
  if (_has_bits_[0 / 32] & 3u) {
    ::memset(&chair_id_, 0, reinterpret_cast<char*>(&lock_id_) -
      reinterpret_cast<char*>(&chair_id_) + sizeof(lock_id_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool SC_LockFish::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:SC_LockFish)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 chair_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_chair_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &chair_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 lock_id = 2 [default = 0];
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_lock_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &lock_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:SC_LockFish)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:SC_LockFish)
  return false;
#undef DO_
}

void SC_LockFish::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:SC_LockFish)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 chair_id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->chair_id(), output);
  }

  // required int32 lock_id = 2 [default = 0];
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->lock_id(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:SC_LockFish)
}

::google::protobuf::uint8* SC_LockFish::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:SC_LockFish)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 chair_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->chair_id(), target);
  }

  // required int32 lock_id = 2 [default = 0];
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->lock_id(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SC_LockFish)
  return target;
}

size_t SC_LockFish::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:SC_LockFish)
  size_t total_size = 0;

  if (has_chair_id()) {
    // required int32 chair_id = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->chair_id());
  }

  if (has_lock_id()) {
    // required int32 lock_id = 2 [default = 0];
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->lock_id());
  }

  return total_size;
}
size_t SC_LockFish::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SC_LockFish)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required int32 chair_id = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->chair_id());

    // required int32 lock_id = 2 [default = 0];
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->lock_id());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SC_LockFish::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:SC_LockFish)
  GOOGLE_DCHECK_NE(&from, this);
  const SC_LockFish* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SC_LockFish>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:SC_LockFish)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:SC_LockFish)
    MergeFrom(*source);
  }
}

void SC_LockFish::MergeFrom(const SC_LockFish& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:SC_LockFish)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      chair_id_ = from.chair_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      lock_id_ = from.lock_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void SC_LockFish::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:SC_LockFish)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SC_LockFish::CopyFrom(const SC_LockFish& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SC_LockFish)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SC_LockFish::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  return true;
}

void SC_LockFish::Swap(SC_LockFish* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SC_LockFish::InternalSwap(SC_LockFish* other) {
  std::swap(chair_id_, other->chair_id_);
  std::swap(lock_id_, other->lock_id_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SC_LockFish::GetMetadata() const {
  protobuf_public_5ffishing_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_public_5ffishing_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SC_LockFish

// required int32 chair_id = 1;
bool SC_LockFish::has_chair_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void SC_LockFish::set_has_chair_id() {
  _has_bits_[0] |= 0x00000001u;
}
void SC_LockFish::clear_has_chair_id() {
  _has_bits_[0] &= ~0x00000001u;
}
void SC_LockFish::clear_chair_id() {
  chair_id_ = 0;
  clear_has_chair_id();
}
::google::protobuf::int32 SC_LockFish::chair_id() const {
  // @@protoc_insertion_point(field_get:SC_LockFish.chair_id)
  return chair_id_;
}
void SC_LockFish::set_chair_id(::google::protobuf::int32 value) {
  set_has_chair_id();
  chair_id_ = value;
  // @@protoc_insertion_point(field_set:SC_LockFish.chair_id)
}

// required int32 lock_id = 2 [default = 0];
bool SC_LockFish::has_lock_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void SC_LockFish::set_has_lock_id() {
  _has_bits_[0] |= 0x00000002u;
}
void SC_LockFish::clear_has_lock_id() {
  _has_bits_[0] &= ~0x00000002u;
}
void SC_LockFish::clear_lock_id() {
  lock_id_ = 0;
  clear_has_lock_id();
}
::google::protobuf::int32 SC_LockFish::lock_id() const {
  // @@protoc_insertion_point(field_get:SC_LockFish.lock_id)
  return lock_id_;
}
void SC_LockFish::set_lock_id(::google::protobuf::int32 value) {
  set_has_lock_id();
  lock_id_ = value;
  // @@protoc_insertion_point(field_set:SC_LockFish.lock_id)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SC_AllowFire::kAllowFireFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SC_AllowFire::SC_AllowFire()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_public_5ffishing_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:SC_AllowFire)
}
SC_AllowFire::SC_AllowFire(const SC_AllowFire& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  allow_fire_ = from.allow_fire_;
  // @@protoc_insertion_point(copy_constructor:SC_AllowFire)
}

void SC_AllowFire::SharedCtor() {
  _cached_size_ = 0;
  allow_fire_ = 0;
}

SC_AllowFire::~SC_AllowFire() {
  // @@protoc_insertion_point(destructor:SC_AllowFire)
  SharedDtor();
}

void SC_AllowFire::SharedDtor() {
}

void SC_AllowFire::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SC_AllowFire::descriptor() {
  protobuf_public_5ffishing_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_public_5ffishing_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const SC_AllowFire& SC_AllowFire::default_instance() {
  protobuf_public_5ffishing_2eproto::InitDefaults();
  return *internal_default_instance();
}

SC_AllowFire* SC_AllowFire::New(::google::protobuf::Arena* arena) const {
  SC_AllowFire* n = new SC_AllowFire;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SC_AllowFire::Clear() {
// @@protoc_insertion_point(message_clear_start:SC_AllowFire)
  allow_fire_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool SC_AllowFire::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:SC_AllowFire)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 allow_fire = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_allow_fire();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &allow_fire_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:SC_AllowFire)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:SC_AllowFire)
  return false;
#undef DO_
}

void SC_AllowFire::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:SC_AllowFire)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 allow_fire = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->allow_fire(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:SC_AllowFire)
}

::google::protobuf::uint8* SC_AllowFire::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:SC_AllowFire)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 allow_fire = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->allow_fire(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SC_AllowFire)
  return target;
}

size_t SC_AllowFire::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SC_AllowFire)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // required int32 allow_fire = 1;
  if (has_allow_fire()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->allow_fire());
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SC_AllowFire::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:SC_AllowFire)
  GOOGLE_DCHECK_NE(&from, this);
  const SC_AllowFire* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SC_AllowFire>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:SC_AllowFire)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:SC_AllowFire)
    MergeFrom(*source);
  }
}

void SC_AllowFire::MergeFrom(const SC_AllowFire& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:SC_AllowFire)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_allow_fire()) {
    set_allow_fire(from.allow_fire());
  }
}

void SC_AllowFire::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:SC_AllowFire)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SC_AllowFire::CopyFrom(const SC_AllowFire& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SC_AllowFire)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SC_AllowFire::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  return true;
}

void SC_AllowFire::Swap(SC_AllowFire* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SC_AllowFire::InternalSwap(SC_AllowFire* other) {
  std::swap(allow_fire_, other->allow_fire_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SC_AllowFire::GetMetadata() const {
  protobuf_public_5ffishing_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_public_5ffishing_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SC_AllowFire

// required int32 allow_fire = 1;
bool SC_AllowFire::has_allow_fire() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void SC_AllowFire::set_has_allow_fire() {
  _has_bits_[0] |= 0x00000001u;
}
void SC_AllowFire::clear_has_allow_fire() {
  _has_bits_[0] &= ~0x00000001u;
}
void SC_AllowFire::clear_allow_fire() {
  allow_fire_ = 0;
  clear_has_allow_fire();
}
::google::protobuf::int32 SC_AllowFire::allow_fire() const {
  // @@protoc_insertion_point(field_get:SC_AllowFire.allow_fire)
  return allow_fire_;
}
void SC_AllowFire::set_allow_fire(::google::protobuf::int32 value) {
  set_has_allow_fire();
  allow_fire_ = value;
  // @@protoc_insertion_point(field_set:SC_AllowFire.allow_fire)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SC_SwitchScene::kNstFieldNumber;
const int SC_SwitchScene::kSwitchingFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SC_SwitchScene::SC_SwitchScene()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_public_5ffishing_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:SC_SwitchScene)
}
SC_SwitchScene::SC_SwitchScene(const SC_SwitchScene& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&nst_, &from.nst_,
    reinterpret_cast<char*>(&switching_) -
    reinterpret_cast<char*>(&nst_) + sizeof(switching_));
  // @@protoc_insertion_point(copy_constructor:SC_SwitchScene)
}

void SC_SwitchScene::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&nst_, 0, reinterpret_cast<char*>(&switching_) -
    reinterpret_cast<char*>(&nst_) + sizeof(switching_));
}

SC_SwitchScene::~SC_SwitchScene() {
  // @@protoc_insertion_point(destructor:SC_SwitchScene)
  SharedDtor();
}

void SC_SwitchScene::SharedDtor() {
}

void SC_SwitchScene::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SC_SwitchScene::descriptor() {
  protobuf_public_5ffishing_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_public_5ffishing_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const SC_SwitchScene& SC_SwitchScene::default_instance() {
  protobuf_public_5ffishing_2eproto::InitDefaults();
  return *internal_default_instance();
}

SC_SwitchScene* SC_SwitchScene::New(::google::protobuf::Arena* arena) const {
  SC_SwitchScene* n = new SC_SwitchScene;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SC_SwitchScene::Clear() {
// @@protoc_insertion_point(message_clear_start:SC_SwitchScene)
  if (_has_bits_[0 / 32] & 3u) {
    ::memset(&nst_, 0, reinterpret_cast<char*>(&switching_) -
      reinterpret_cast<char*>(&nst_) + sizeof(switching_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool SC_SwitchScene::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:SC_SwitchScene)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 nst = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_nst();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &nst_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 switching = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_switching();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &switching_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:SC_SwitchScene)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:SC_SwitchScene)
  return false;
#undef DO_
}

void SC_SwitchScene::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:SC_SwitchScene)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 nst = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->nst(), output);
  }

  // required int32 switching = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->switching(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:SC_SwitchScene)
}

::google::protobuf::uint8* SC_SwitchScene::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:SC_SwitchScene)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 nst = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->nst(), target);
  }

  // required int32 switching = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->switching(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SC_SwitchScene)
  return target;
}

size_t SC_SwitchScene::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:SC_SwitchScene)
  size_t total_size = 0;

  if (has_nst()) {
    // required int32 nst = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->nst());
  }

  if (has_switching()) {
    // required int32 switching = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->switching());
  }

  return total_size;
}
size_t SC_SwitchScene::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SC_SwitchScene)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required int32 nst = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->nst());

    // required int32 switching = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->switching());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SC_SwitchScene::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:SC_SwitchScene)
  GOOGLE_DCHECK_NE(&from, this);
  const SC_SwitchScene* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SC_SwitchScene>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:SC_SwitchScene)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:SC_SwitchScene)
    MergeFrom(*source);
  }
}

void SC_SwitchScene::MergeFrom(const SC_SwitchScene& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:SC_SwitchScene)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      nst_ = from.nst_;
    }
    if (cached_has_bits & 0x00000002u) {
      switching_ = from.switching_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void SC_SwitchScene::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:SC_SwitchScene)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SC_SwitchScene::CopyFrom(const SC_SwitchScene& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SC_SwitchScene)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SC_SwitchScene::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  return true;
}

void SC_SwitchScene::Swap(SC_SwitchScene* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SC_SwitchScene::InternalSwap(SC_SwitchScene* other) {
  std::swap(nst_, other->nst_);
  std::swap(switching_, other->switching_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SC_SwitchScene::GetMetadata() const {
  protobuf_public_5ffishing_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_public_5ffishing_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SC_SwitchScene

// required int32 nst = 1;
bool SC_SwitchScene::has_nst() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void SC_SwitchScene::set_has_nst() {
  _has_bits_[0] |= 0x00000001u;
}
void SC_SwitchScene::clear_has_nst() {
  _has_bits_[0] &= ~0x00000001u;
}
void SC_SwitchScene::clear_nst() {
  nst_ = 0;
  clear_has_nst();
}
::google::protobuf::int32 SC_SwitchScene::nst() const {
  // @@protoc_insertion_point(field_get:SC_SwitchScene.nst)
  return nst_;
}
void SC_SwitchScene::set_nst(::google::protobuf::int32 value) {
  set_has_nst();
  nst_ = value;
  // @@protoc_insertion_point(field_set:SC_SwitchScene.nst)
}

// required int32 switching = 2;
bool SC_SwitchScene::has_switching() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void SC_SwitchScene::set_has_switching() {
  _has_bits_[0] |= 0x00000002u;
}
void SC_SwitchScene::clear_has_switching() {
  _has_bits_[0] &= ~0x00000002u;
}
void SC_SwitchScene::clear_switching() {
  switching_ = 0;
  clear_has_switching();
}
::google::protobuf::int32 SC_SwitchScene::switching() const {
  // @@protoc_insertion_point(field_get:SC_SwitchScene.switching)
  return switching_;
}
void SC_SwitchScene::set_switching(::google::protobuf::int32 value) {
  set_has_switching();
  switching_ = value;
  // @@protoc_insertion_point(field_set:SC_SwitchScene.switching)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SC_KillBullet::kChairIdFieldNumber;
const int SC_KillBullet::kBulletIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SC_KillBullet::SC_KillBullet()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_public_5ffishing_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:SC_KillBullet)
}
SC_KillBullet::SC_KillBullet(const SC_KillBullet& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&chair_id_, &from.chair_id_,
    reinterpret_cast<char*>(&bullet_id_) -
    reinterpret_cast<char*>(&chair_id_) + sizeof(bullet_id_));
  // @@protoc_insertion_point(copy_constructor:SC_KillBullet)
}

void SC_KillBullet::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&chair_id_, 0, reinterpret_cast<char*>(&bullet_id_) -
    reinterpret_cast<char*>(&chair_id_) + sizeof(bullet_id_));
}

SC_KillBullet::~SC_KillBullet() {
  // @@protoc_insertion_point(destructor:SC_KillBullet)
  SharedDtor();
}

void SC_KillBullet::SharedDtor() {
}

void SC_KillBullet::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SC_KillBullet::descriptor() {
  protobuf_public_5ffishing_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_public_5ffishing_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const SC_KillBullet& SC_KillBullet::default_instance() {
  protobuf_public_5ffishing_2eproto::InitDefaults();
  return *internal_default_instance();
}

SC_KillBullet* SC_KillBullet::New(::google::protobuf::Arena* arena) const {
  SC_KillBullet* n = new SC_KillBullet;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SC_KillBullet::Clear() {
// @@protoc_insertion_point(message_clear_start:SC_KillBullet)
  if (_has_bits_[0 / 32] & 3u) {
    ::memset(&chair_id_, 0, reinterpret_cast<char*>(&bullet_id_) -
      reinterpret_cast<char*>(&chair_id_) + sizeof(bullet_id_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool SC_KillBullet::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:SC_KillBullet)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 chair_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_chair_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &chair_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 bullet_id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_bullet_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &bullet_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:SC_KillBullet)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:SC_KillBullet)
  return false;
#undef DO_
}

void SC_KillBullet::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:SC_KillBullet)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 chair_id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->chair_id(), output);
  }

  // required int32 bullet_id = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->bullet_id(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:SC_KillBullet)
}

::google::protobuf::uint8* SC_KillBullet::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:SC_KillBullet)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 chair_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->chair_id(), target);
  }

  // required int32 bullet_id = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->bullet_id(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SC_KillBullet)
  return target;
}

size_t SC_KillBullet::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:SC_KillBullet)
  size_t total_size = 0;

  if (has_chair_id()) {
    // required int32 chair_id = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->chair_id());
  }

  if (has_bullet_id()) {
    // required int32 bullet_id = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->bullet_id());
  }

  return total_size;
}
size_t SC_KillBullet::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SC_KillBullet)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required int32 chair_id = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->chair_id());

    // required int32 bullet_id = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->bullet_id());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SC_KillBullet::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:SC_KillBullet)
  GOOGLE_DCHECK_NE(&from, this);
  const SC_KillBullet* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SC_KillBullet>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:SC_KillBullet)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:SC_KillBullet)
    MergeFrom(*source);
  }
}

void SC_KillBullet::MergeFrom(const SC_KillBullet& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:SC_KillBullet)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      chair_id_ = from.chair_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      bullet_id_ = from.bullet_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void SC_KillBullet::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:SC_KillBullet)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SC_KillBullet::CopyFrom(const SC_KillBullet& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SC_KillBullet)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SC_KillBullet::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  return true;
}

void SC_KillBullet::Swap(SC_KillBullet* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SC_KillBullet::InternalSwap(SC_KillBullet* other) {
  std::swap(chair_id_, other->chair_id_);
  std::swap(bullet_id_, other->bullet_id_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SC_KillBullet::GetMetadata() const {
  protobuf_public_5ffishing_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_public_5ffishing_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SC_KillBullet

// required int32 chair_id = 1;
bool SC_KillBullet::has_chair_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void SC_KillBullet::set_has_chair_id() {
  _has_bits_[0] |= 0x00000001u;
}
void SC_KillBullet::clear_has_chair_id() {
  _has_bits_[0] &= ~0x00000001u;
}
void SC_KillBullet::clear_chair_id() {
  chair_id_ = 0;
  clear_has_chair_id();
}
::google::protobuf::int32 SC_KillBullet::chair_id() const {
  // @@protoc_insertion_point(field_get:SC_KillBullet.chair_id)
  return chair_id_;
}
void SC_KillBullet::set_chair_id(::google::protobuf::int32 value) {
  set_has_chair_id();
  chair_id_ = value;
  // @@protoc_insertion_point(field_set:SC_KillBullet.chair_id)
}

// required int32 bullet_id = 2;
bool SC_KillBullet::has_bullet_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void SC_KillBullet::set_has_bullet_id() {
  _has_bits_[0] |= 0x00000002u;
}
void SC_KillBullet::clear_has_bullet_id() {
  _has_bits_[0] &= ~0x00000002u;
}
void SC_KillBullet::clear_bullet_id() {
  bullet_id_ = 0;
  clear_has_bullet_id();
}
::google::protobuf::int32 SC_KillBullet::bullet_id() const {
  // @@protoc_insertion_point(field_get:SC_KillBullet.bullet_id)
  return bullet_id_;
}
void SC_KillBullet::set_bullet_id(::google::protobuf::int32 value) {
  set_has_bullet_id();
  bullet_id_ = value;
  // @@protoc_insertion_point(field_set:SC_KillBullet.bullet_id)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SC_KillFish::kChairIdFieldNumber;
const int SC_KillFish::kScoreFieldNumber;
const int SC_KillFish::kFishIdFieldNumber;
const int SC_KillFish::kBscoeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SC_KillFish::SC_KillFish()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_public_5ffishing_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:SC_KillFish)
}
SC_KillFish::SC_KillFish(const SC_KillFish& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&score_, &from.score_,
    reinterpret_cast<char*>(&bscoe_) -
    reinterpret_cast<char*>(&score_) + sizeof(bscoe_));
  // @@protoc_insertion_point(copy_constructor:SC_KillFish)
}

void SC_KillFish::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&score_, 0, reinterpret_cast<char*>(&bscoe_) -
    reinterpret_cast<char*>(&score_) + sizeof(bscoe_));
}

SC_KillFish::~SC_KillFish() {
  // @@protoc_insertion_point(destructor:SC_KillFish)
  SharedDtor();
}

void SC_KillFish::SharedDtor() {
}

void SC_KillFish::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SC_KillFish::descriptor() {
  protobuf_public_5ffishing_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_public_5ffishing_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const SC_KillFish& SC_KillFish::default_instance() {
  protobuf_public_5ffishing_2eproto::InitDefaults();
  return *internal_default_instance();
}

SC_KillFish* SC_KillFish::New(::google::protobuf::Arena* arena) const {
  SC_KillFish* n = new SC_KillFish;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SC_KillFish::Clear() {
// @@protoc_insertion_point(message_clear_start:SC_KillFish)
  if (_has_bits_[0 / 32] & 15u) {
    ::memset(&score_, 0, reinterpret_cast<char*>(&bscoe_) -
      reinterpret_cast<char*>(&score_) + sizeof(bscoe_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool SC_KillFish::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:SC_KillFish)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 chair_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_chair_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &chair_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int64 score = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_score();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &score_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 fish_id = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {
          set_has_fish_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &fish_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 bscoe = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u)) {
          set_has_bscoe();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &bscoe_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:SC_KillFish)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:SC_KillFish)
  return false;
#undef DO_
}

void SC_KillFish::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:SC_KillFish)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 chair_id = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->chair_id(), output);
  }

  // required int64 score = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->score(), output);
  }

  // required int32 fish_id = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->fish_id(), output);
  }

  // required int32 bscoe = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->bscoe(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:SC_KillFish)
}

::google::protobuf::uint8* SC_KillFish::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:SC_KillFish)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 chair_id = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->chair_id(), target);
  }

  // required int64 score = 2;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->score(), target);
  }

  // required int32 fish_id = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->fish_id(), target);
  }

  // required int32 bscoe = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->bscoe(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SC_KillFish)
  return target;
}

size_t SC_KillFish::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:SC_KillFish)
  size_t total_size = 0;

  if (has_score()) {
    // required int64 score = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->score());
  }

  if (has_chair_id()) {
    // required int32 chair_id = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->chair_id());
  }

  if (has_fish_id()) {
    // required int32 fish_id = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->fish_id());
  }

  if (has_bscoe()) {
    // required int32 bscoe = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->bscoe());
  }

  return total_size;
}
size_t SC_KillFish::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SC_KillFish)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (((_has_bits_[0] & 0x0000000f) ^ 0x0000000f) == 0) {  // All required fields are present.
    // required int64 score = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->score());

    // required int32 chair_id = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->chair_id());

    // required int32 fish_id = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->fish_id());

    // required int32 bscoe = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->bscoe());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SC_KillFish::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:SC_KillFish)
  GOOGLE_DCHECK_NE(&from, this);
  const SC_KillFish* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SC_KillFish>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:SC_KillFish)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:SC_KillFish)
    MergeFrom(*source);
  }
}

void SC_KillFish::MergeFrom(const SC_KillFish& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:SC_KillFish)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 15u) {
    if (cached_has_bits & 0x00000001u) {
      score_ = from.score_;
    }
    if (cached_has_bits & 0x00000002u) {
      chair_id_ = from.chair_id_;
    }
    if (cached_has_bits & 0x00000004u) {
      fish_id_ = from.fish_id_;
    }
    if (cached_has_bits & 0x00000008u) {
      bscoe_ = from.bscoe_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void SC_KillFish::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:SC_KillFish)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SC_KillFish::CopyFrom(const SC_KillFish& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SC_KillFish)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SC_KillFish::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;
  return true;
}

void SC_KillFish::Swap(SC_KillFish* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SC_KillFish::InternalSwap(SC_KillFish* other) {
  std::swap(score_, other->score_);
  std::swap(chair_id_, other->chair_id_);
  std::swap(fish_id_, other->fish_id_);
  std::swap(bscoe_, other->bscoe_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SC_KillFish::GetMetadata() const {
  protobuf_public_5ffishing_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_public_5ffishing_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SC_KillFish

// required int32 chair_id = 1;
bool SC_KillFish::has_chair_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void SC_KillFish::set_has_chair_id() {
  _has_bits_[0] |= 0x00000002u;
}
void SC_KillFish::clear_has_chair_id() {
  _has_bits_[0] &= ~0x00000002u;
}
void SC_KillFish::clear_chair_id() {
  chair_id_ = 0;
  clear_has_chair_id();
}
::google::protobuf::int32 SC_KillFish::chair_id() const {
  // @@protoc_insertion_point(field_get:SC_KillFish.chair_id)
  return chair_id_;
}
void SC_KillFish::set_chair_id(::google::protobuf::int32 value) {
  set_has_chair_id();
  chair_id_ = value;
  // @@protoc_insertion_point(field_set:SC_KillFish.chair_id)
}

// required int64 score = 2;
bool SC_KillFish::has_score() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void SC_KillFish::set_has_score() {
  _has_bits_[0] |= 0x00000001u;
}
void SC_KillFish::clear_has_score() {
  _has_bits_[0] &= ~0x00000001u;
}
void SC_KillFish::clear_score() {
  score_ = GOOGLE_LONGLONG(0);
  clear_has_score();
}
::google::protobuf::int64 SC_KillFish::score() const {
  // @@protoc_insertion_point(field_get:SC_KillFish.score)
  return score_;
}
void SC_KillFish::set_score(::google::protobuf::int64 value) {
  set_has_score();
  score_ = value;
  // @@protoc_insertion_point(field_set:SC_KillFish.score)
}

// required int32 fish_id = 3;
bool SC_KillFish::has_fish_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void SC_KillFish::set_has_fish_id() {
  _has_bits_[0] |= 0x00000004u;
}
void SC_KillFish::clear_has_fish_id() {
  _has_bits_[0] &= ~0x00000004u;
}
void SC_KillFish::clear_fish_id() {
  fish_id_ = 0;
  clear_has_fish_id();
}
::google::protobuf::int32 SC_KillFish::fish_id() const {
  // @@protoc_insertion_point(field_get:SC_KillFish.fish_id)
  return fish_id_;
}
void SC_KillFish::set_fish_id(::google::protobuf::int32 value) {
  set_has_fish_id();
  fish_id_ = value;
  // @@protoc_insertion_point(field_set:SC_KillFish.fish_id)
}

// required int32 bscoe = 4;
bool SC_KillFish::has_bscoe() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void SC_KillFish::set_has_bscoe() {
  _has_bits_[0] |= 0x00000008u;
}
void SC_KillFish::clear_has_bscoe() {
  _has_bits_[0] &= ~0x00000008u;
}
void SC_KillFish::clear_bscoe() {
  bscoe_ = 0;
  clear_has_bscoe();
}
::google::protobuf::int32 SC_KillFish::bscoe() const {
  // @@protoc_insertion_point(field_get:SC_KillFish.bscoe)
  return bscoe_;
}
void SC_KillFish::set_bscoe(::google::protobuf::int32 value) {
  set_has_bscoe();
  bscoe_ = value;
  // @@protoc_insertion_point(field_set:SC_KillFish.bscoe)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SC_SendBullet::kIdFieldNumber;
const int SC_SendBullet::kChairIdFieldNumber;
const int SC_SendBullet::kCreateTickFieldNumber;
const int SC_SendBullet::kXPosFieldNumber;
const int SC_SendBullet::kYPosFieldNumber;
const int SC_SendBullet::kCannonTypeFieldNumber;
const int SC_SendBullet::kMultiplyFieldNumber;
const int SC_SendBullet::kScoreFieldNumber;
const int SC_SendBullet::kDirectionFieldNumber;
const int SC_SendBullet::kIsNewFieldNumber;
const int SC_SendBullet::kServerTickFieldNumber;
const int SC_SendBullet::kIsDoubleFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SC_SendBullet::SC_SendBullet()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_public_5ffishing_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:SC_SendBullet)
}
SC_SendBullet::SC_SendBullet(const SC_SendBullet& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&id_, &from.id_,
    reinterpret_cast<char*>(&is_double_) -
    reinterpret_cast<char*>(&id_) + sizeof(is_double_));
  // @@protoc_insertion_point(copy_constructor:SC_SendBullet)
}

void SC_SendBullet::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&id_, 0, reinterpret_cast<char*>(&is_double_) -
    reinterpret_cast<char*>(&id_) + sizeof(is_double_));
}

SC_SendBullet::~SC_SendBullet() {
  // @@protoc_insertion_point(destructor:SC_SendBullet)
  SharedDtor();
}

void SC_SendBullet::SharedDtor() {
}

void SC_SendBullet::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SC_SendBullet::descriptor() {
  protobuf_public_5ffishing_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_public_5ffishing_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const SC_SendBullet& SC_SendBullet::default_instance() {
  protobuf_public_5ffishing_2eproto::InitDefaults();
  return *internal_default_instance();
}

SC_SendBullet* SC_SendBullet::New(::google::protobuf::Arena* arena) const {
  SC_SendBullet* n = new SC_SendBullet;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SC_SendBullet::Clear() {
// @@protoc_insertion_point(message_clear_start:SC_SendBullet)
  if (_has_bits_[0 / 32] & 255u) {
    ::memset(&id_, 0, reinterpret_cast<char*>(&multiply_) -
      reinterpret_cast<char*>(&id_) + sizeof(multiply_));
  }
  if (_has_bits_[8 / 32] & 3840u) {
    ::memset(&direction_, 0, reinterpret_cast<char*>(&is_double_) -
      reinterpret_cast<char*>(&direction_) + sizeof(is_double_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool SC_SendBullet::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:SC_SendBullet)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 chair_id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_chair_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &chair_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint32 create_tick = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {
          set_has_create_tick();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &create_tick_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required float x_pos = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(37u)) {
          set_has_x_pos();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &x_pos_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required float y_pos = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(45u)) {
          set_has_y_pos();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &y_pos_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 cannon_type = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u)) {
          set_has_cannon_type();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &cannon_type_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 multiply = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u)) {
          set_has_multiply();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &multiply_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int64 score = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(64u)) {
          set_has_score();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &score_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required float direction = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(77u)) {
          set_has_direction();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &direction_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 is_new = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(80u)) {
          set_has_is_new();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &is_new_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint32 server_tick = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(88u)) {
          set_has_server_tick();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &server_tick_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 is_double = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(96u)) {
          set_has_is_double();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &is_double_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:SC_SendBullet)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:SC_SendBullet)
  return false;
#undef DO_
}

void SC_SendBullet::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:SC_SendBullet)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  // required int32 chair_id = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->chair_id(), output);
  }

  // required uint32 create_tick = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->create_tick(), output);
  }

  // required float x_pos = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(4, this->x_pos(), output);
  }

  // required float y_pos = 5;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(5, this->y_pos(), output);
  }

  // required int32 cannon_type = 6;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->cannon_type(), output);
  }

  // required int32 multiply = 7;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->multiply(), output);
  }

  // required int64 score = 8;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(8, this->score(), output);
  }

  // required float direction = 9;
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(9, this->direction(), output);
  }

  // required int32 is_new = 10;
  if (cached_has_bits & 0x00000200u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->is_new(), output);
  }

  // required uint32 server_tick = 11;
  if (cached_has_bits & 0x00000400u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(11, this->server_tick(), output);
  }

  // required int32 is_double = 12;
  if (cached_has_bits & 0x00000800u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(12, this->is_double(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:SC_SendBullet)
}

::google::protobuf::uint8* SC_SendBullet::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:SC_SendBullet)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }

  // required int32 chair_id = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->chair_id(), target);
  }

  // required uint32 create_tick = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->create_tick(), target);
  }

  // required float x_pos = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(4, this->x_pos(), target);
  }

  // required float y_pos = 5;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(5, this->y_pos(), target);
  }

  // required int32 cannon_type = 6;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->cannon_type(), target);
  }

  // required int32 multiply = 7;
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->multiply(), target);
  }

  // required int64 score = 8;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(8, this->score(), target);
  }

  // required float direction = 9;
  if (cached_has_bits & 0x00000100u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(9, this->direction(), target);
  }

  // required int32 is_new = 10;
  if (cached_has_bits & 0x00000200u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(10, this->is_new(), target);
  }

  // required uint32 server_tick = 11;
  if (cached_has_bits & 0x00000400u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(11, this->server_tick(), target);
  }

  // required int32 is_double = 12;
  if (cached_has_bits & 0x00000800u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(12, this->is_double(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SC_SendBullet)
  return target;
}

size_t SC_SendBullet::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:SC_SendBullet)
  size_t total_size = 0;

  if (has_id()) {
    // required int32 id = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->id());
  }

  if (has_chair_id()) {
    // required int32 chair_id = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->chair_id());
  }

  if (has_create_tick()) {
    // required uint32 create_tick = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->create_tick());
  }

  if (has_x_pos()) {
    // required float x_pos = 4;
    total_size += 1 + 4;
  }

  if (has_y_pos()) {
    // required float y_pos = 5;
    total_size += 1 + 4;
  }

  if (has_cannon_type()) {
    // required int32 cannon_type = 6;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->cannon_type());
  }

  if (has_score()) {
    // required int64 score = 8;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->score());
  }

  if (has_multiply()) {
    // required int32 multiply = 7;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->multiply());
  }

  if (has_direction()) {
    // required float direction = 9;
    total_size += 1 + 4;
  }

  if (has_is_new()) {
    // required int32 is_new = 10;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->is_new());
  }

  if (has_server_tick()) {
    // required uint32 server_tick = 11;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->server_tick());
  }

  if (has_is_double()) {
    // required int32 is_double = 12;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->is_double());
  }

  return total_size;
}
size_t SC_SendBullet::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SC_SendBullet)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000fff) ^ 0x00000fff) == 0) {  // All required fields are present.
    // required int32 id = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->id());

    // required int32 chair_id = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->chair_id());

    // required uint32 create_tick = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->create_tick());

    // required float x_pos = 4;
    total_size += 1 + 4;

    // required float y_pos = 5;
    total_size += 1 + 4;

    // required int32 cannon_type = 6;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->cannon_type());

    // required int64 score = 8;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->score());

    // required int32 multiply = 7;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->multiply());

    // required float direction = 9;
    total_size += 1 + 4;

    // required int32 is_new = 10;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->is_new());

    // required uint32 server_tick = 11;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->server_tick());

    // required int32 is_double = 12;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->is_double());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SC_SendBullet::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:SC_SendBullet)
  GOOGLE_DCHECK_NE(&from, this);
  const SC_SendBullet* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SC_SendBullet>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:SC_SendBullet)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:SC_SendBullet)
    MergeFrom(*source);
  }
}

void SC_SendBullet::MergeFrom(const SC_SendBullet& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:SC_SendBullet)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      id_ = from.id_;
    }
    if (cached_has_bits & 0x00000002u) {
      chair_id_ = from.chair_id_;
    }
    if (cached_has_bits & 0x00000004u) {
      create_tick_ = from.create_tick_;
    }
    if (cached_has_bits & 0x00000008u) {
      x_pos_ = from.x_pos_;
    }
    if (cached_has_bits & 0x00000010u) {
      y_pos_ = from.y_pos_;
    }
    if (cached_has_bits & 0x00000020u) {
      cannon_type_ = from.cannon_type_;
    }
    if (cached_has_bits & 0x00000040u) {
      score_ = from.score_;
    }
    if (cached_has_bits & 0x00000080u) {
      multiply_ = from.multiply_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 3840u) {
    if (cached_has_bits & 0x00000100u) {
      direction_ = from.direction_;
    }
    if (cached_has_bits & 0x00000200u) {
      is_new_ = from.is_new_;
    }
    if (cached_has_bits & 0x00000400u) {
      server_tick_ = from.server_tick_;
    }
    if (cached_has_bits & 0x00000800u) {
      is_double_ = from.is_double_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void SC_SendBullet::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:SC_SendBullet)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SC_SendBullet::CopyFrom(const SC_SendBullet& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SC_SendBullet)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SC_SendBullet::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000fff) != 0x00000fff) return false;
  return true;
}

void SC_SendBullet::Swap(SC_SendBullet* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SC_SendBullet::InternalSwap(SC_SendBullet* other) {
  std::swap(id_, other->id_);
  std::swap(chair_id_, other->chair_id_);
  std::swap(create_tick_, other->create_tick_);
  std::swap(x_pos_, other->x_pos_);
  std::swap(y_pos_, other->y_pos_);
  std::swap(cannon_type_, other->cannon_type_);
  std::swap(score_, other->score_);
  std::swap(multiply_, other->multiply_);
  std::swap(direction_, other->direction_);
  std::swap(is_new_, other->is_new_);
  std::swap(server_tick_, other->server_tick_);
  std::swap(is_double_, other->is_double_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SC_SendBullet::GetMetadata() const {
  protobuf_public_5ffishing_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_public_5ffishing_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SC_SendBullet

// required int32 id = 1;
bool SC_SendBullet::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void SC_SendBullet::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
void SC_SendBullet::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
void SC_SendBullet::clear_id() {
  id_ = 0;
  clear_has_id();
}
::google::protobuf::int32 SC_SendBullet::id() const {
  // @@protoc_insertion_point(field_get:SC_SendBullet.id)
  return id_;
}
void SC_SendBullet::set_id(::google::protobuf::int32 value) {
  set_has_id();
  id_ = value;
  // @@protoc_insertion_point(field_set:SC_SendBullet.id)
}

// required int32 chair_id = 2;
bool SC_SendBullet::has_chair_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void SC_SendBullet::set_has_chair_id() {
  _has_bits_[0] |= 0x00000002u;
}
void SC_SendBullet::clear_has_chair_id() {
  _has_bits_[0] &= ~0x00000002u;
}
void SC_SendBullet::clear_chair_id() {
  chair_id_ = 0;
  clear_has_chair_id();
}
::google::protobuf::int32 SC_SendBullet::chair_id() const {
  // @@protoc_insertion_point(field_get:SC_SendBullet.chair_id)
  return chair_id_;
}
void SC_SendBullet::set_chair_id(::google::protobuf::int32 value) {
  set_has_chair_id();
  chair_id_ = value;
  // @@protoc_insertion_point(field_set:SC_SendBullet.chair_id)
}

// required uint32 create_tick = 3;
bool SC_SendBullet::has_create_tick() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void SC_SendBullet::set_has_create_tick() {
  _has_bits_[0] |= 0x00000004u;
}
void SC_SendBullet::clear_has_create_tick() {
  _has_bits_[0] &= ~0x00000004u;
}
void SC_SendBullet::clear_create_tick() {
  create_tick_ = 0u;
  clear_has_create_tick();
}
::google::protobuf::uint32 SC_SendBullet::create_tick() const {
  // @@protoc_insertion_point(field_get:SC_SendBullet.create_tick)
  return create_tick_;
}
void SC_SendBullet::set_create_tick(::google::protobuf::uint32 value) {
  set_has_create_tick();
  create_tick_ = value;
  // @@protoc_insertion_point(field_set:SC_SendBullet.create_tick)
}

// required float x_pos = 4;
bool SC_SendBullet::has_x_pos() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void SC_SendBullet::set_has_x_pos() {
  _has_bits_[0] |= 0x00000008u;
}
void SC_SendBullet::clear_has_x_pos() {
  _has_bits_[0] &= ~0x00000008u;
}
void SC_SendBullet::clear_x_pos() {
  x_pos_ = 0;
  clear_has_x_pos();
}
float SC_SendBullet::x_pos() const {
  // @@protoc_insertion_point(field_get:SC_SendBullet.x_pos)
  return x_pos_;
}
void SC_SendBullet::set_x_pos(float value) {
  set_has_x_pos();
  x_pos_ = value;
  // @@protoc_insertion_point(field_set:SC_SendBullet.x_pos)
}

// required float y_pos = 5;
bool SC_SendBullet::has_y_pos() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void SC_SendBullet::set_has_y_pos() {
  _has_bits_[0] |= 0x00000010u;
}
void SC_SendBullet::clear_has_y_pos() {
  _has_bits_[0] &= ~0x00000010u;
}
void SC_SendBullet::clear_y_pos() {
  y_pos_ = 0;
  clear_has_y_pos();
}
float SC_SendBullet::y_pos() const {
  // @@protoc_insertion_point(field_get:SC_SendBullet.y_pos)
  return y_pos_;
}
void SC_SendBullet::set_y_pos(float value) {
  set_has_y_pos();
  y_pos_ = value;
  // @@protoc_insertion_point(field_set:SC_SendBullet.y_pos)
}

// required int32 cannon_type = 6;
bool SC_SendBullet::has_cannon_type() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void SC_SendBullet::set_has_cannon_type() {
  _has_bits_[0] |= 0x00000020u;
}
void SC_SendBullet::clear_has_cannon_type() {
  _has_bits_[0] &= ~0x00000020u;
}
void SC_SendBullet::clear_cannon_type() {
  cannon_type_ = 0;
  clear_has_cannon_type();
}
::google::protobuf::int32 SC_SendBullet::cannon_type() const {
  // @@protoc_insertion_point(field_get:SC_SendBullet.cannon_type)
  return cannon_type_;
}
void SC_SendBullet::set_cannon_type(::google::protobuf::int32 value) {
  set_has_cannon_type();
  cannon_type_ = value;
  // @@protoc_insertion_point(field_set:SC_SendBullet.cannon_type)
}

// required int32 multiply = 7;
bool SC_SendBullet::has_multiply() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void SC_SendBullet::set_has_multiply() {
  _has_bits_[0] |= 0x00000080u;
}
void SC_SendBullet::clear_has_multiply() {
  _has_bits_[0] &= ~0x00000080u;
}
void SC_SendBullet::clear_multiply() {
  multiply_ = 0;
  clear_has_multiply();
}
::google::protobuf::int32 SC_SendBullet::multiply() const {
  // @@protoc_insertion_point(field_get:SC_SendBullet.multiply)
  return multiply_;
}
void SC_SendBullet::set_multiply(::google::protobuf::int32 value) {
  set_has_multiply();
  multiply_ = value;
  // @@protoc_insertion_point(field_set:SC_SendBullet.multiply)
}

// required int64 score = 8;
bool SC_SendBullet::has_score() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void SC_SendBullet::set_has_score() {
  _has_bits_[0] |= 0x00000040u;
}
void SC_SendBullet::clear_has_score() {
  _has_bits_[0] &= ~0x00000040u;
}
void SC_SendBullet::clear_score() {
  score_ = GOOGLE_LONGLONG(0);
  clear_has_score();
}
::google::protobuf::int64 SC_SendBullet::score() const {
  // @@protoc_insertion_point(field_get:SC_SendBullet.score)
  return score_;
}
void SC_SendBullet::set_score(::google::protobuf::int64 value) {
  set_has_score();
  score_ = value;
  // @@protoc_insertion_point(field_set:SC_SendBullet.score)
}

// required float direction = 9;
bool SC_SendBullet::has_direction() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
void SC_SendBullet::set_has_direction() {
  _has_bits_[0] |= 0x00000100u;
}
void SC_SendBullet::clear_has_direction() {
  _has_bits_[0] &= ~0x00000100u;
}
void SC_SendBullet::clear_direction() {
  direction_ = 0;
  clear_has_direction();
}
float SC_SendBullet::direction() const {
  // @@protoc_insertion_point(field_get:SC_SendBullet.direction)
  return direction_;
}
void SC_SendBullet::set_direction(float value) {
  set_has_direction();
  direction_ = value;
  // @@protoc_insertion_point(field_set:SC_SendBullet.direction)
}

// required int32 is_new = 10;
bool SC_SendBullet::has_is_new() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
void SC_SendBullet::set_has_is_new() {
  _has_bits_[0] |= 0x00000200u;
}
void SC_SendBullet::clear_has_is_new() {
  _has_bits_[0] &= ~0x00000200u;
}
void SC_SendBullet::clear_is_new() {
  is_new_ = 0;
  clear_has_is_new();
}
::google::protobuf::int32 SC_SendBullet::is_new() const {
  // @@protoc_insertion_point(field_get:SC_SendBullet.is_new)
  return is_new_;
}
void SC_SendBullet::set_is_new(::google::protobuf::int32 value) {
  set_has_is_new();
  is_new_ = value;
  // @@protoc_insertion_point(field_set:SC_SendBullet.is_new)
}

// required uint32 server_tick = 11;
bool SC_SendBullet::has_server_tick() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
void SC_SendBullet::set_has_server_tick() {
  _has_bits_[0] |= 0x00000400u;
}
void SC_SendBullet::clear_has_server_tick() {
  _has_bits_[0] &= ~0x00000400u;
}
void SC_SendBullet::clear_server_tick() {
  server_tick_ = 0u;
  clear_has_server_tick();
}
::google::protobuf::uint32 SC_SendBullet::server_tick() const {
  // @@protoc_insertion_point(field_get:SC_SendBullet.server_tick)
  return server_tick_;
}
void SC_SendBullet::set_server_tick(::google::protobuf::uint32 value) {
  set_has_server_tick();
  server_tick_ = value;
  // @@protoc_insertion_point(field_set:SC_SendBullet.server_tick)
}

// required int32 is_double = 12;
bool SC_SendBullet::has_is_double() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
void SC_SendBullet::set_has_is_double() {
  _has_bits_[0] |= 0x00000800u;
}
void SC_SendBullet::clear_has_is_double() {
  _has_bits_[0] &= ~0x00000800u;
}
void SC_SendBullet::clear_is_double() {
  is_double_ = 0;
  clear_has_is_double();
}
::google::protobuf::int32 SC_SendBullet::is_double() const {
  // @@protoc_insertion_point(field_get:SC_SendBullet.is_double)
  return is_double_;
}
void SC_SendBullet::set_is_double(::google::protobuf::int32 value) {
  set_has_is_double();
  is_double_ = value;
  // @@protoc_insertion_point(field_set:SC_SendBullet.is_double)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SC_Fly_Bullet_List::kPbFlyBulletsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SC_Fly_Bullet_List::SC_Fly_Bullet_List()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_public_5ffishing_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:SC_Fly_Bullet_List)
}
SC_Fly_Bullet_List::SC_Fly_Bullet_List(const SC_Fly_Bullet_List& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      pb_fly_bullets_(from.pb_fly_bullets_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:SC_Fly_Bullet_List)
}

void SC_Fly_Bullet_List::SharedCtor() {
  _cached_size_ = 0;
}

SC_Fly_Bullet_List::~SC_Fly_Bullet_List() {
  // @@protoc_insertion_point(destructor:SC_Fly_Bullet_List)
  SharedDtor();
}

void SC_Fly_Bullet_List::SharedDtor() {
}

void SC_Fly_Bullet_List::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SC_Fly_Bullet_List::descriptor() {
  protobuf_public_5ffishing_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_public_5ffishing_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const SC_Fly_Bullet_List& SC_Fly_Bullet_List::default_instance() {
  protobuf_public_5ffishing_2eproto::InitDefaults();
  return *internal_default_instance();
}

SC_Fly_Bullet_List* SC_Fly_Bullet_List::New(::google::protobuf::Arena* arena) const {
  SC_Fly_Bullet_List* n = new SC_Fly_Bullet_List;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SC_Fly_Bullet_List::Clear() {
// @@protoc_insertion_point(message_clear_start:SC_Fly_Bullet_List)
  pb_fly_bullets_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool SC_Fly_Bullet_List::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:SC_Fly_Bullet_List)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .SC_SendBullet pb_fly_bullets = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_pb_fly_bullets()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:SC_Fly_Bullet_List)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:SC_Fly_Bullet_List)
  return false;
#undef DO_
}

void SC_Fly_Bullet_List::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:SC_Fly_Bullet_List)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .SC_SendBullet pb_fly_bullets = 1;
  for (unsigned int i = 0, n = this->pb_fly_bullets_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->pb_fly_bullets(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:SC_Fly_Bullet_List)
}

::google::protobuf::uint8* SC_Fly_Bullet_List::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:SC_Fly_Bullet_List)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .SC_SendBullet pb_fly_bullets = 1;
  for (unsigned int i = 0, n = this->pb_fly_bullets_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, this->pb_fly_bullets(i), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SC_Fly_Bullet_List)
  return target;
}

size_t SC_Fly_Bullet_List::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SC_Fly_Bullet_List)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // repeated .SC_SendBullet pb_fly_bullets = 1;
  {
    unsigned int count = this->pb_fly_bullets_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->pb_fly_bullets(i));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SC_Fly_Bullet_List::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:SC_Fly_Bullet_List)
  GOOGLE_DCHECK_NE(&from, this);
  const SC_Fly_Bullet_List* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SC_Fly_Bullet_List>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:SC_Fly_Bullet_List)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:SC_Fly_Bullet_List)
    MergeFrom(*source);
  }
}

void SC_Fly_Bullet_List::MergeFrom(const SC_Fly_Bullet_List& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:SC_Fly_Bullet_List)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  pb_fly_bullets_.MergeFrom(from.pb_fly_bullets_);
}

void SC_Fly_Bullet_List::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:SC_Fly_Bullet_List)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SC_Fly_Bullet_List::CopyFrom(const SC_Fly_Bullet_List& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SC_Fly_Bullet_List)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SC_Fly_Bullet_List::IsInitialized() const {
  if (!::google::protobuf::internal::AllAreInitialized(this->pb_fly_bullets())) return false;
  return true;
}

void SC_Fly_Bullet_List::Swap(SC_Fly_Bullet_List* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SC_Fly_Bullet_List::InternalSwap(SC_Fly_Bullet_List* other) {
  pb_fly_bullets_.InternalSwap(&other->pb_fly_bullets_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SC_Fly_Bullet_List::GetMetadata() const {
  protobuf_public_5ffishing_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_public_5ffishing_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SC_Fly_Bullet_List

// repeated .SC_SendBullet pb_fly_bullets = 1;
int SC_Fly_Bullet_List::pb_fly_bullets_size() const {
  return pb_fly_bullets_.size();
}
void SC_Fly_Bullet_List::clear_pb_fly_bullets() {
  pb_fly_bullets_.Clear();
}
const ::SC_SendBullet& SC_Fly_Bullet_List::pb_fly_bullets(int index) const {
  // @@protoc_insertion_point(field_get:SC_Fly_Bullet_List.pb_fly_bullets)
  return pb_fly_bullets_.Get(index);
}
::SC_SendBullet* SC_Fly_Bullet_List::mutable_pb_fly_bullets(int index) {
  // @@protoc_insertion_point(field_mutable:SC_Fly_Bullet_List.pb_fly_bullets)
  return pb_fly_bullets_.Mutable(index);
}
::SC_SendBullet* SC_Fly_Bullet_List::add_pb_fly_bullets() {
  // @@protoc_insertion_point(field_add:SC_Fly_Bullet_List.pb_fly_bullets)
  return pb_fly_bullets_.Add();
}
::google::protobuf::RepeatedPtrField< ::SC_SendBullet >*
SC_Fly_Bullet_List::mutable_pb_fly_bullets() {
  // @@protoc_insertion_point(field_mutable_list:SC_Fly_Bullet_List.pb_fly_bullets)
  return &pb_fly_bullets_;
}
const ::google::protobuf::RepeatedPtrField< ::SC_SendBullet >&
SC_Fly_Bullet_List::pb_fly_bullets() const {
  // @@protoc_insertion_point(field_list:SC_Fly_Bullet_List.pb_fly_bullets)
  return pb_fly_bullets_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SC_CannonSet::kChairIdFieldNumber;
const int SC_CannonSet::kCannonTypeFieldNumber;
const int SC_CannonSet::kCannonMulFieldNumber;
const int SC_CannonSet::kCannonSetFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SC_CannonSet::SC_CannonSet()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_public_5ffishing_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:SC_CannonSet)
}
SC_CannonSet::SC_CannonSet(const SC_CannonSet& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&chair_id_, &from.chair_id_,
    reinterpret_cast<char*>(&cannon_set_) -
    reinterpret_cast<char*>(&chair_id_) + sizeof(cannon_set_));
  // @@protoc_insertion_point(copy_constructor:SC_CannonSet)
}

void SC_CannonSet::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&chair_id_, 0, reinterpret_cast<char*>(&cannon_set_) -
    reinterpret_cast<char*>(&chair_id_) + sizeof(cannon_set_));
}

SC_CannonSet::~SC_CannonSet() {
  // @@protoc_insertion_point(destructor:SC_CannonSet)
  SharedDtor();
}

void SC_CannonSet::SharedDtor() {
}

void SC_CannonSet::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SC_CannonSet::descriptor() {
  protobuf_public_5ffishing_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_public_5ffishing_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const SC_CannonSet& SC_CannonSet::default_instance() {
  protobuf_public_5ffishing_2eproto::InitDefaults();
  return *internal_default_instance();
}

SC_CannonSet* SC_CannonSet::New(::google::protobuf::Arena* arena) const {
  SC_CannonSet* n = new SC_CannonSet;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SC_CannonSet::Clear() {
// @@protoc_insertion_point(message_clear_start:SC_CannonSet)
  if (_has_bits_[0 / 32] & 15u) {
    ::memset(&chair_id_, 0, reinterpret_cast<char*>(&cannon_set_) -
      reinterpret_cast<char*>(&chair_id_) + sizeof(cannon_set_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool SC_CannonSet::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:SC_CannonSet)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 chair_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_chair_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &chair_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 cannon_type = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_cannon_type();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &cannon_type_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 cannon_mul = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {
          set_has_cannon_mul();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &cannon_mul_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 cannon_set = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u)) {
          set_has_cannon_set();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &cannon_set_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:SC_CannonSet)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:SC_CannonSet)
  return false;
#undef DO_
}

void SC_CannonSet::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:SC_CannonSet)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 chair_id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->chair_id(), output);
  }

  // required int32 cannon_type = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->cannon_type(), output);
  }

  // required int32 cannon_mul = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->cannon_mul(), output);
  }

  // required int32 cannon_set = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->cannon_set(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:SC_CannonSet)
}

::google::protobuf::uint8* SC_CannonSet::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:SC_CannonSet)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 chair_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->chair_id(), target);
  }

  // required int32 cannon_type = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->cannon_type(), target);
  }

  // required int32 cannon_mul = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->cannon_mul(), target);
  }

  // required int32 cannon_set = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->cannon_set(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SC_CannonSet)
  return target;
}

size_t SC_CannonSet::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:SC_CannonSet)
  size_t total_size = 0;

  if (has_chair_id()) {
    // required int32 chair_id = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->chair_id());
  }

  if (has_cannon_type()) {
    // required int32 cannon_type = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->cannon_type());
  }

  if (has_cannon_mul()) {
    // required int32 cannon_mul = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->cannon_mul());
  }

  if (has_cannon_set()) {
    // required int32 cannon_set = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->cannon_set());
  }

  return total_size;
}
size_t SC_CannonSet::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SC_CannonSet)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (((_has_bits_[0] & 0x0000000f) ^ 0x0000000f) == 0) {  // All required fields are present.
    // required int32 chair_id = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->chair_id());

    // required int32 cannon_type = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->cannon_type());

    // required int32 cannon_mul = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->cannon_mul());

    // required int32 cannon_set = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->cannon_set());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SC_CannonSet::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:SC_CannonSet)
  GOOGLE_DCHECK_NE(&from, this);
  const SC_CannonSet* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SC_CannonSet>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:SC_CannonSet)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:SC_CannonSet)
    MergeFrom(*source);
  }
}

void SC_CannonSet::MergeFrom(const SC_CannonSet& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:SC_CannonSet)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 15u) {
    if (cached_has_bits & 0x00000001u) {
      chair_id_ = from.chair_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      cannon_type_ = from.cannon_type_;
    }
    if (cached_has_bits & 0x00000004u) {
      cannon_mul_ = from.cannon_mul_;
    }
    if (cached_has_bits & 0x00000008u) {
      cannon_set_ = from.cannon_set_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void SC_CannonSet::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:SC_CannonSet)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SC_CannonSet::CopyFrom(const SC_CannonSet& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SC_CannonSet)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SC_CannonSet::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;
  return true;
}

void SC_CannonSet::Swap(SC_CannonSet* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SC_CannonSet::InternalSwap(SC_CannonSet* other) {
  std::swap(chair_id_, other->chair_id_);
  std::swap(cannon_type_, other->cannon_type_);
  std::swap(cannon_mul_, other->cannon_mul_);
  std::swap(cannon_set_, other->cannon_set_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SC_CannonSet::GetMetadata() const {
  protobuf_public_5ffishing_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_public_5ffishing_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SC_CannonSet

// required int32 chair_id = 1;
bool SC_CannonSet::has_chair_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void SC_CannonSet::set_has_chair_id() {
  _has_bits_[0] |= 0x00000001u;
}
void SC_CannonSet::clear_has_chair_id() {
  _has_bits_[0] &= ~0x00000001u;
}
void SC_CannonSet::clear_chair_id() {
  chair_id_ = 0;
  clear_has_chair_id();
}
::google::protobuf::int32 SC_CannonSet::chair_id() const {
  // @@protoc_insertion_point(field_get:SC_CannonSet.chair_id)
  return chair_id_;
}
void SC_CannonSet::set_chair_id(::google::protobuf::int32 value) {
  set_has_chair_id();
  chair_id_ = value;
  // @@protoc_insertion_point(field_set:SC_CannonSet.chair_id)
}

// required int32 cannon_type = 2;
bool SC_CannonSet::has_cannon_type() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void SC_CannonSet::set_has_cannon_type() {
  _has_bits_[0] |= 0x00000002u;
}
void SC_CannonSet::clear_has_cannon_type() {
  _has_bits_[0] &= ~0x00000002u;
}
void SC_CannonSet::clear_cannon_type() {
  cannon_type_ = 0;
  clear_has_cannon_type();
}
::google::protobuf::int32 SC_CannonSet::cannon_type() const {
  // @@protoc_insertion_point(field_get:SC_CannonSet.cannon_type)
  return cannon_type_;
}
void SC_CannonSet::set_cannon_type(::google::protobuf::int32 value) {
  set_has_cannon_type();
  cannon_type_ = value;
  // @@protoc_insertion_point(field_set:SC_CannonSet.cannon_type)
}

// required int32 cannon_mul = 3;
bool SC_CannonSet::has_cannon_mul() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void SC_CannonSet::set_has_cannon_mul() {
  _has_bits_[0] |= 0x00000004u;
}
void SC_CannonSet::clear_has_cannon_mul() {
  _has_bits_[0] &= ~0x00000004u;
}
void SC_CannonSet::clear_cannon_mul() {
  cannon_mul_ = 0;
  clear_has_cannon_mul();
}
::google::protobuf::int32 SC_CannonSet::cannon_mul() const {
  // @@protoc_insertion_point(field_get:SC_CannonSet.cannon_mul)
  return cannon_mul_;
}
void SC_CannonSet::set_cannon_mul(::google::protobuf::int32 value) {
  set_has_cannon_mul();
  cannon_mul_ = value;
  // @@protoc_insertion_point(field_set:SC_CannonSet.cannon_mul)
}

// required int32 cannon_set = 4;
bool SC_CannonSet::has_cannon_set() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void SC_CannonSet::set_has_cannon_set() {
  _has_bits_[0] |= 0x00000008u;
}
void SC_CannonSet::clear_has_cannon_set() {
  _has_bits_[0] &= ~0x00000008u;
}
void SC_CannonSet::clear_cannon_set() {
  cannon_set_ = 0;
  clear_has_cannon_set();
}
::google::protobuf::int32 SC_CannonSet::cannon_set() const {
  // @@protoc_insertion_point(field_get:SC_CannonSet.cannon_set)
  return cannon_set_;
}
void SC_CannonSet::set_cannon_set(::google::protobuf::int32 value) {
  set_has_cannon_set();
  cannon_set_ = value;
  // @@protoc_insertion_point(field_set:SC_CannonSet.cannon_set)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SC_ChangeScore::kChairIdFieldNumber;
const int SC_ChangeScore::kFishScoreFieldNumber;
const int SC_ChangeScore::kWastageScoreFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SC_ChangeScore::SC_ChangeScore()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_public_5ffishing_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:SC_ChangeScore)
}
SC_ChangeScore::SC_ChangeScore(const SC_ChangeScore& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&fish_score_, &from.fish_score_,
    reinterpret_cast<char*>(&chair_id_) -
    reinterpret_cast<char*>(&fish_score_) + sizeof(chair_id_));
  // @@protoc_insertion_point(copy_constructor:SC_ChangeScore)
}

void SC_ChangeScore::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&fish_score_, 0, reinterpret_cast<char*>(&chair_id_) -
    reinterpret_cast<char*>(&fish_score_) + sizeof(chair_id_));
}

SC_ChangeScore::~SC_ChangeScore() {
  // @@protoc_insertion_point(destructor:SC_ChangeScore)
  SharedDtor();
}

void SC_ChangeScore::SharedDtor() {
}

void SC_ChangeScore::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SC_ChangeScore::descriptor() {
  protobuf_public_5ffishing_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_public_5ffishing_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const SC_ChangeScore& SC_ChangeScore::default_instance() {
  protobuf_public_5ffishing_2eproto::InitDefaults();
  return *internal_default_instance();
}

SC_ChangeScore* SC_ChangeScore::New(::google::protobuf::Arena* arena) const {
  SC_ChangeScore* n = new SC_ChangeScore;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SC_ChangeScore::Clear() {
// @@protoc_insertion_point(message_clear_start:SC_ChangeScore)
  if (_has_bits_[0 / 32] & 7u) {
    ::memset(&fish_score_, 0, reinterpret_cast<char*>(&chair_id_) -
      reinterpret_cast<char*>(&fish_score_) + sizeof(chair_id_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool SC_ChangeScore::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:SC_ChangeScore)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 chair_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_chair_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &chair_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int64 fish_score = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_fish_score();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &fish_score_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int64 wastage_score = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {
          set_has_wastage_score();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &wastage_score_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:SC_ChangeScore)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:SC_ChangeScore)
  return false;
#undef DO_
}

void SC_ChangeScore::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:SC_ChangeScore)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 chair_id = 1;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->chair_id(), output);
  }

  // required int64 fish_score = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->fish_score(), output);
  }

  // required int64 wastage_score = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->wastage_score(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:SC_ChangeScore)
}

::google::protobuf::uint8* SC_ChangeScore::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:SC_ChangeScore)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 chair_id = 1;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->chair_id(), target);
  }

  // required int64 fish_score = 2;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->fish_score(), target);
  }

  // required int64 wastage_score = 3;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->wastage_score(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SC_ChangeScore)
  return target;
}

size_t SC_ChangeScore::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:SC_ChangeScore)
  size_t total_size = 0;

  if (has_fish_score()) {
    // required int64 fish_score = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->fish_score());
  }

  if (has_wastage_score()) {
    // required int64 wastage_score = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->wastage_score());
  }

  if (has_chair_id()) {
    // required int32 chair_id = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->chair_id());
  }

  return total_size;
}
size_t SC_ChangeScore::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SC_ChangeScore)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000007) ^ 0x00000007) == 0) {  // All required fields are present.
    // required int64 fish_score = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->fish_score());

    // required int64 wastage_score = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->wastage_score());

    // required int32 chair_id = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->chair_id());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SC_ChangeScore::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:SC_ChangeScore)
  GOOGLE_DCHECK_NE(&from, this);
  const SC_ChangeScore* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SC_ChangeScore>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:SC_ChangeScore)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:SC_ChangeScore)
    MergeFrom(*source);
  }
}

void SC_ChangeScore::MergeFrom(const SC_ChangeScore& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:SC_ChangeScore)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      fish_score_ = from.fish_score_;
    }
    if (cached_has_bits & 0x00000002u) {
      wastage_score_ = from.wastage_score_;
    }
    if (cached_has_bits & 0x00000004u) {
      chair_id_ = from.chair_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void SC_ChangeScore::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:SC_ChangeScore)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SC_ChangeScore::CopyFrom(const SC_ChangeScore& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SC_ChangeScore)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SC_ChangeScore::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;
  return true;
}

void SC_ChangeScore::Swap(SC_ChangeScore* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SC_ChangeScore::InternalSwap(SC_ChangeScore* other) {
  std::swap(fish_score_, other->fish_score_);
  std::swap(wastage_score_, other->wastage_score_);
  std::swap(chair_id_, other->chair_id_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SC_ChangeScore::GetMetadata() const {
  protobuf_public_5ffishing_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_public_5ffishing_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SC_ChangeScore

// required int32 chair_id = 1;
bool SC_ChangeScore::has_chair_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void SC_ChangeScore::set_has_chair_id() {
  _has_bits_[0] |= 0x00000004u;
}
void SC_ChangeScore::clear_has_chair_id() {
  _has_bits_[0] &= ~0x00000004u;
}
void SC_ChangeScore::clear_chair_id() {
  chair_id_ = 0;
  clear_has_chair_id();
}
::google::protobuf::int32 SC_ChangeScore::chair_id() const {
  // @@protoc_insertion_point(field_get:SC_ChangeScore.chair_id)
  return chair_id_;
}
void SC_ChangeScore::set_chair_id(::google::protobuf::int32 value) {
  set_has_chair_id();
  chair_id_ = value;
  // @@protoc_insertion_point(field_set:SC_ChangeScore.chair_id)
}

// required int64 fish_score = 2;
bool SC_ChangeScore::has_fish_score() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void SC_ChangeScore::set_has_fish_score() {
  _has_bits_[0] |= 0x00000001u;
}
void SC_ChangeScore::clear_has_fish_score() {
  _has_bits_[0] &= ~0x00000001u;
}
void SC_ChangeScore::clear_fish_score() {
  fish_score_ = GOOGLE_LONGLONG(0);
  clear_has_fish_score();
}
::google::protobuf::int64 SC_ChangeScore::fish_score() const {
  // @@protoc_insertion_point(field_get:SC_ChangeScore.fish_score)
  return fish_score_;
}
void SC_ChangeScore::set_fish_score(::google::protobuf::int64 value) {
  set_has_fish_score();
  fish_score_ = value;
  // @@protoc_insertion_point(field_set:SC_ChangeScore.fish_score)
}

// required int64 wastage_score = 3;
bool SC_ChangeScore::has_wastage_score() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void SC_ChangeScore::set_has_wastage_score() {
  _has_bits_[0] |= 0x00000002u;
}
void SC_ChangeScore::clear_has_wastage_score() {
  _has_bits_[0] &= ~0x00000002u;
}
void SC_ChangeScore::clear_wastage_score() {
  wastage_score_ = GOOGLE_LONGLONG(0);
  clear_has_wastage_score();
}
::google::protobuf::int64 SC_ChangeScore::wastage_score() const {
  // @@protoc_insertion_point(field_get:SC_ChangeScore.wastage_score)
  return wastage_score_;
}
void SC_ChangeScore::set_wastage_score(::google::protobuf::int64 value) {
  set_has_wastage_score();
  wastage_score_ = value;
  // @@protoc_insertion_point(field_set:SC_ChangeScore.wastage_score)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SC_UserInfo::kChairIdFieldNumber;
const int SC_UserInfo::kScoreFieldNumber;
const int SC_UserInfo::kCannonTypeFieldNumber;
const int SC_UserInfo::kCannonMulFieldNumber;
const int SC_UserInfo::kWastageFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SC_UserInfo::SC_UserInfo()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_public_5ffishing_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:SC_UserInfo)
}
SC_UserInfo::SC_UserInfo(const SC_UserInfo& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&score_, &from.score_,
    reinterpret_cast<char*>(&cannon_mul_) -
    reinterpret_cast<char*>(&score_) + sizeof(cannon_mul_));
  // @@protoc_insertion_point(copy_constructor:SC_UserInfo)
}

void SC_UserInfo::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&score_, 0, reinterpret_cast<char*>(&cannon_mul_) -
    reinterpret_cast<char*>(&score_) + sizeof(cannon_mul_));
}

SC_UserInfo::~SC_UserInfo() {
  // @@protoc_insertion_point(destructor:SC_UserInfo)
  SharedDtor();
}

void SC_UserInfo::SharedDtor() {
}

void SC_UserInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SC_UserInfo::descriptor() {
  protobuf_public_5ffishing_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_public_5ffishing_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const SC_UserInfo& SC_UserInfo::default_instance() {
  protobuf_public_5ffishing_2eproto::InitDefaults();
  return *internal_default_instance();
}

SC_UserInfo* SC_UserInfo::New(::google::protobuf::Arena* arena) const {
  SC_UserInfo* n = new SC_UserInfo;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SC_UserInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:SC_UserInfo)
  if (_has_bits_[0 / 32] & 31u) {
    ::memset(&score_, 0, reinterpret_cast<char*>(&cannon_mul_) -
      reinterpret_cast<char*>(&score_) + sizeof(cannon_mul_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool SC_UserInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:SC_UserInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 chair_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_chair_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &chair_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int64 score = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_score();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &score_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 cannon_type = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {
          set_has_cannon_type();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &cannon_type_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 cannon_mul = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u)) {
          set_has_cannon_mul();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &cannon_mul_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int64 wastage = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u)) {
          set_has_wastage();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &wastage_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:SC_UserInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:SC_UserInfo)
  return false;
#undef DO_
}

void SC_UserInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:SC_UserInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 chair_id = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->chair_id(), output);
  }

  // required int64 score = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->score(), output);
  }

  // required int32 cannon_type = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->cannon_type(), output);
  }

  // required int32 cannon_mul = 4;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->cannon_mul(), output);
  }

  // required int64 wastage = 5;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(5, this->wastage(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:SC_UserInfo)
}

::google::protobuf::uint8* SC_UserInfo::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:SC_UserInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 chair_id = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->chair_id(), target);
  }

  // required int64 score = 2;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->score(), target);
  }

  // required int32 cannon_type = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->cannon_type(), target);
  }

  // required int32 cannon_mul = 4;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->cannon_mul(), target);
  }

  // required int64 wastage = 5;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(5, this->wastage(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SC_UserInfo)
  return target;
}

size_t SC_UserInfo::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:SC_UserInfo)
  size_t total_size = 0;

  if (has_score()) {
    // required int64 score = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->score());
  }

  if (has_chair_id()) {
    // required int32 chair_id = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->chair_id());
  }

  if (has_cannon_type()) {
    // required int32 cannon_type = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->cannon_type());
  }

  if (has_wastage()) {
    // required int64 wastage = 5;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->wastage());
  }

  if (has_cannon_mul()) {
    // required int32 cannon_mul = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->cannon_mul());
  }

  return total_size;
}
size_t SC_UserInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SC_UserInfo)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (((_has_bits_[0] & 0x0000001f) ^ 0x0000001f) == 0) {  // All required fields are present.
    // required int64 score = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->score());

    // required int32 chair_id = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->chair_id());

    // required int32 cannon_type = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->cannon_type());

    // required int64 wastage = 5;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->wastage());

    // required int32 cannon_mul = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->cannon_mul());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SC_UserInfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:SC_UserInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const SC_UserInfo* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SC_UserInfo>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:SC_UserInfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:SC_UserInfo)
    MergeFrom(*source);
  }
}

void SC_UserInfo::MergeFrom(const SC_UserInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:SC_UserInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 31u) {
    if (cached_has_bits & 0x00000001u) {
      score_ = from.score_;
    }
    if (cached_has_bits & 0x00000002u) {
      chair_id_ = from.chair_id_;
    }
    if (cached_has_bits & 0x00000004u) {
      cannon_type_ = from.cannon_type_;
    }
    if (cached_has_bits & 0x00000008u) {
      wastage_ = from.wastage_;
    }
    if (cached_has_bits & 0x00000010u) {
      cannon_mul_ = from.cannon_mul_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void SC_UserInfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:SC_UserInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SC_UserInfo::CopyFrom(const SC_UserInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SC_UserInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SC_UserInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000001f) != 0x0000001f) return false;
  return true;
}

void SC_UserInfo::Swap(SC_UserInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SC_UserInfo::InternalSwap(SC_UserInfo* other) {
  std::swap(score_, other->score_);
  std::swap(chair_id_, other->chair_id_);
  std::swap(cannon_type_, other->cannon_type_);
  std::swap(wastage_, other->wastage_);
  std::swap(cannon_mul_, other->cannon_mul_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SC_UserInfo::GetMetadata() const {
  protobuf_public_5ffishing_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_public_5ffishing_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SC_UserInfo

// required int32 chair_id = 1;
bool SC_UserInfo::has_chair_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void SC_UserInfo::set_has_chair_id() {
  _has_bits_[0] |= 0x00000002u;
}
void SC_UserInfo::clear_has_chair_id() {
  _has_bits_[0] &= ~0x00000002u;
}
void SC_UserInfo::clear_chair_id() {
  chair_id_ = 0;
  clear_has_chair_id();
}
::google::protobuf::int32 SC_UserInfo::chair_id() const {
  // @@protoc_insertion_point(field_get:SC_UserInfo.chair_id)
  return chair_id_;
}
void SC_UserInfo::set_chair_id(::google::protobuf::int32 value) {
  set_has_chair_id();
  chair_id_ = value;
  // @@protoc_insertion_point(field_set:SC_UserInfo.chair_id)
}

// required int64 score = 2;
bool SC_UserInfo::has_score() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void SC_UserInfo::set_has_score() {
  _has_bits_[0] |= 0x00000001u;
}
void SC_UserInfo::clear_has_score() {
  _has_bits_[0] &= ~0x00000001u;
}
void SC_UserInfo::clear_score() {
  score_ = GOOGLE_LONGLONG(0);
  clear_has_score();
}
::google::protobuf::int64 SC_UserInfo::score() const {
  // @@protoc_insertion_point(field_get:SC_UserInfo.score)
  return score_;
}
void SC_UserInfo::set_score(::google::protobuf::int64 value) {
  set_has_score();
  score_ = value;
  // @@protoc_insertion_point(field_set:SC_UserInfo.score)
}

// required int32 cannon_type = 3;
bool SC_UserInfo::has_cannon_type() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void SC_UserInfo::set_has_cannon_type() {
  _has_bits_[0] |= 0x00000004u;
}
void SC_UserInfo::clear_has_cannon_type() {
  _has_bits_[0] &= ~0x00000004u;
}
void SC_UserInfo::clear_cannon_type() {
  cannon_type_ = 0;
  clear_has_cannon_type();
}
::google::protobuf::int32 SC_UserInfo::cannon_type() const {
  // @@protoc_insertion_point(field_get:SC_UserInfo.cannon_type)
  return cannon_type_;
}
void SC_UserInfo::set_cannon_type(::google::protobuf::int32 value) {
  set_has_cannon_type();
  cannon_type_ = value;
  // @@protoc_insertion_point(field_set:SC_UserInfo.cannon_type)
}

// required int32 cannon_mul = 4;
bool SC_UserInfo::has_cannon_mul() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void SC_UserInfo::set_has_cannon_mul() {
  _has_bits_[0] |= 0x00000010u;
}
void SC_UserInfo::clear_has_cannon_mul() {
  _has_bits_[0] &= ~0x00000010u;
}
void SC_UserInfo::clear_cannon_mul() {
  cannon_mul_ = 0;
  clear_has_cannon_mul();
}
::google::protobuf::int32 SC_UserInfo::cannon_mul() const {
  // @@protoc_insertion_point(field_get:SC_UserInfo.cannon_mul)
  return cannon_mul_;
}
void SC_UserInfo::set_cannon_mul(::google::protobuf::int32 value) {
  set_has_cannon_mul();
  cannon_mul_ = value;
  // @@protoc_insertion_point(field_set:SC_UserInfo.cannon_mul)
}

// required int64 wastage = 5;
bool SC_UserInfo::has_wastage() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void SC_UserInfo::set_has_wastage() {
  _has_bits_[0] |= 0x00000008u;
}
void SC_UserInfo::clear_has_wastage() {
  _has_bits_[0] &= ~0x00000008u;
}
void SC_UserInfo::clear_wastage() {
  wastage_ = GOOGLE_LONGLONG(0);
  clear_has_wastage();
}
::google::protobuf::int64 SC_UserInfo::wastage() const {
  // @@protoc_insertion_point(field_get:SC_UserInfo.wastage)
  return wastage_;
}
void SC_UserInfo::set_wastage(::google::protobuf::int64 value) {
  set_has_wastage();
  wastage_ = value;
  // @@protoc_insertion_point(field_set:SC_UserInfo.wastage)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SC_SendFish::kFishIdFieldNumber;
const int SC_SendFish::kTypeIdFieldNumber;
const int SC_SendFish::kPathIdFieldNumber;
const int SC_SendFish::kCreateTickFieldNumber;
const int SC_SendFish::kOffestXFieldNumber;
const int SC_SendFish::kOffestYFieldNumber;
const int SC_SendFish::kDirFieldNumber;
const int SC_SendFish::kDelayFieldNumber;
const int SC_SendFish::kServerTickFieldNumber;
const int SC_SendFish::kFishSpeedFieldNumber;
const int SC_SendFish::kFisTypeFieldNumber;
const int SC_SendFish::kTroopFieldNumber;
const int SC_SendFish::kRefershIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SC_SendFish::SC_SendFish()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_public_5ffishing_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:SC_SendFish)
}
SC_SendFish::SC_SendFish(const SC_SendFish& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&fish_id_, &from.fish_id_,
    reinterpret_cast<char*>(&refersh_id_) -
    reinterpret_cast<char*>(&fish_id_) + sizeof(refersh_id_));
  // @@protoc_insertion_point(copy_constructor:SC_SendFish)
}

void SC_SendFish::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&fish_id_, 0, reinterpret_cast<char*>(&refersh_id_) -
    reinterpret_cast<char*>(&fish_id_) + sizeof(refersh_id_));
}

SC_SendFish::~SC_SendFish() {
  // @@protoc_insertion_point(destructor:SC_SendFish)
  SharedDtor();
}

void SC_SendFish::SharedDtor() {
}

void SC_SendFish::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SC_SendFish::descriptor() {
  protobuf_public_5ffishing_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_public_5ffishing_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const SC_SendFish& SC_SendFish::default_instance() {
  protobuf_public_5ffishing_2eproto::InitDefaults();
  return *internal_default_instance();
}

SC_SendFish* SC_SendFish::New(::google::protobuf::Arena* arena) const {
  SC_SendFish* n = new SC_SendFish;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SC_SendFish::Clear() {
// @@protoc_insertion_point(message_clear_start:SC_SendFish)
  if (_has_bits_[0 / 32] & 255u) {
    ::memset(&fish_id_, 0, reinterpret_cast<char*>(&delay_) -
      reinterpret_cast<char*>(&fish_id_) + sizeof(delay_));
  }
  if (_has_bits_[8 / 32] & 7936u) {
    ::memset(&server_tick_, 0, reinterpret_cast<char*>(&refersh_id_) -
      reinterpret_cast<char*>(&server_tick_) + sizeof(refersh_id_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool SC_SendFish::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:SC_SendFish)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 fish_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_fish_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &fish_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 type_id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_type_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 path_id = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {
          set_has_path_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &path_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint32 create_tick = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u)) {
          set_has_create_tick();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &create_tick_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required float offest_x = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(45u)) {
          set_has_offest_x();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &offest_x_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required float offest_y = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(53u)) {
          set_has_offest_y();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &offest_y_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required float dir = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(61u)) {
          set_has_dir();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &dir_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required float delay = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(69u)) {
          set_has_delay();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &delay_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint32 server_tick = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(72u)) {
          set_has_server_tick();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &server_tick_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required float fish_speed = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(85u)) {
          set_has_fish_speed();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &fish_speed_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 fis_type = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(88u)) {
          set_has_fis_type();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &fis_type_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required bool troop = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(96u)) {
          set_has_troop();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &troop_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 refersh_id = 13;
      case 13: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(104u)) {
          set_has_refersh_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &refersh_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:SC_SendFish)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:SC_SendFish)
  return false;
#undef DO_
}

void SC_SendFish::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:SC_SendFish)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 fish_id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->fish_id(), output);
  }

  // required int32 type_id = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->type_id(), output);
  }

  // required int32 path_id = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->path_id(), output);
  }

  // required uint32 create_tick = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->create_tick(), output);
  }

  // required float offest_x = 5;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(5, this->offest_x(), output);
  }

  // required float offest_y = 6;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(6, this->offest_y(), output);
  }

  // required float dir = 7;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(7, this->dir(), output);
  }

  // required float delay = 8;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(8, this->delay(), output);
  }

  // required uint32 server_tick = 9;
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->server_tick(), output);
  }

  // required float fish_speed = 10;
  if (cached_has_bits & 0x00000200u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(10, this->fish_speed(), output);
  }

  // required int32 fis_type = 11;
  if (cached_has_bits & 0x00000400u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(11, this->fis_type(), output);
  }

  // required bool troop = 12;
  if (cached_has_bits & 0x00000800u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(12, this->troop(), output);
  }

  // required int32 refersh_id = 13;
  if (cached_has_bits & 0x00001000u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(13, this->refersh_id(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:SC_SendFish)
}

::google::protobuf::uint8* SC_SendFish::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:SC_SendFish)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 fish_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->fish_id(), target);
  }

  // required int32 type_id = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->type_id(), target);
  }

  // required int32 path_id = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->path_id(), target);
  }

  // required uint32 create_tick = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->create_tick(), target);
  }

  // required float offest_x = 5;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(5, this->offest_x(), target);
  }

  // required float offest_y = 6;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(6, this->offest_y(), target);
  }

  // required float dir = 7;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(7, this->dir(), target);
  }

  // required float delay = 8;
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(8, this->delay(), target);
  }

  // required uint32 server_tick = 9;
  if (cached_has_bits & 0x00000100u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(9, this->server_tick(), target);
  }

  // required float fish_speed = 10;
  if (cached_has_bits & 0x00000200u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(10, this->fish_speed(), target);
  }

  // required int32 fis_type = 11;
  if (cached_has_bits & 0x00000400u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(11, this->fis_type(), target);
  }

  // required bool troop = 12;
  if (cached_has_bits & 0x00000800u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(12, this->troop(), target);
  }

  // required int32 refersh_id = 13;
  if (cached_has_bits & 0x00001000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(13, this->refersh_id(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SC_SendFish)
  return target;
}

size_t SC_SendFish::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:SC_SendFish)
  size_t total_size = 0;

  if (has_fish_id()) {
    // required int32 fish_id = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->fish_id());
  }

  if (has_type_id()) {
    // required int32 type_id = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->type_id());
  }

  if (has_path_id()) {
    // required int32 path_id = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->path_id());
  }

  if (has_create_tick()) {
    // required uint32 create_tick = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->create_tick());
  }

  if (has_offest_x()) {
    // required float offest_x = 5;
    total_size += 1 + 4;
  }

  if (has_offest_y()) {
    // required float offest_y = 6;
    total_size += 1 + 4;
  }

  if (has_dir()) {
    // required float dir = 7;
    total_size += 1 + 4;
  }

  if (has_delay()) {
    // required float delay = 8;
    total_size += 1 + 4;
  }

  if (has_server_tick()) {
    // required uint32 server_tick = 9;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->server_tick());
  }

  if (has_fish_speed()) {
    // required float fish_speed = 10;
    total_size += 1 + 4;
  }

  if (has_fis_type()) {
    // required int32 fis_type = 11;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->fis_type());
  }

  if (has_troop()) {
    // required bool troop = 12;
    total_size += 1 + 1;
  }

  if (has_refersh_id()) {
    // required int32 refersh_id = 13;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->refersh_id());
  }

  return total_size;
}
size_t SC_SendFish::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SC_SendFish)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (((_has_bits_[0] & 0x00001fff) ^ 0x00001fff) == 0) {  // All required fields are present.
    // required int32 fish_id = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->fish_id());

    // required int32 type_id = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->type_id());

    // required int32 path_id = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->path_id());

    // required uint32 create_tick = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->create_tick());

    // required float offest_x = 5;
    total_size += 1 + 4;

    // required float offest_y = 6;
    total_size += 1 + 4;

    // required float dir = 7;
    total_size += 1 + 4;

    // required float delay = 8;
    total_size += 1 + 4;

    // required uint32 server_tick = 9;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->server_tick());

    // required float fish_speed = 10;
    total_size += 1 + 4;

    // required int32 fis_type = 11;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->fis_type());

    // required bool troop = 12;
    total_size += 1 + 1;

    // required int32 refersh_id = 13;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->refersh_id());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SC_SendFish::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:SC_SendFish)
  GOOGLE_DCHECK_NE(&from, this);
  const SC_SendFish* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SC_SendFish>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:SC_SendFish)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:SC_SendFish)
    MergeFrom(*source);
  }
}

void SC_SendFish::MergeFrom(const SC_SendFish& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:SC_SendFish)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      fish_id_ = from.fish_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      type_id_ = from.type_id_;
    }
    if (cached_has_bits & 0x00000004u) {
      path_id_ = from.path_id_;
    }
    if (cached_has_bits & 0x00000008u) {
      create_tick_ = from.create_tick_;
    }
    if (cached_has_bits & 0x00000010u) {
      offest_x_ = from.offest_x_;
    }
    if (cached_has_bits & 0x00000020u) {
      offest_y_ = from.offest_y_;
    }
    if (cached_has_bits & 0x00000040u) {
      dir_ = from.dir_;
    }
    if (cached_has_bits & 0x00000080u) {
      delay_ = from.delay_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 7936u) {
    if (cached_has_bits & 0x00000100u) {
      server_tick_ = from.server_tick_;
    }
    if (cached_has_bits & 0x00000200u) {
      fish_speed_ = from.fish_speed_;
    }
    if (cached_has_bits & 0x00000400u) {
      fis_type_ = from.fis_type_;
    }
    if (cached_has_bits & 0x00000800u) {
      troop_ = from.troop_;
    }
    if (cached_has_bits & 0x00001000u) {
      refersh_id_ = from.refersh_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void SC_SendFish::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:SC_SendFish)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SC_SendFish::CopyFrom(const SC_SendFish& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SC_SendFish)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SC_SendFish::IsInitialized() const {
  if ((_has_bits_[0] & 0x00001fff) != 0x00001fff) return false;
  return true;
}

void SC_SendFish::Swap(SC_SendFish* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SC_SendFish::InternalSwap(SC_SendFish* other) {
  std::swap(fish_id_, other->fish_id_);
  std::swap(type_id_, other->type_id_);
  std::swap(path_id_, other->path_id_);
  std::swap(create_tick_, other->create_tick_);
  std::swap(offest_x_, other->offest_x_);
  std::swap(offest_y_, other->offest_y_);
  std::swap(dir_, other->dir_);
  std::swap(delay_, other->delay_);
  std::swap(server_tick_, other->server_tick_);
  std::swap(fish_speed_, other->fish_speed_);
  std::swap(fis_type_, other->fis_type_);
  std::swap(troop_, other->troop_);
  std::swap(refersh_id_, other->refersh_id_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SC_SendFish::GetMetadata() const {
  protobuf_public_5ffishing_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_public_5ffishing_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SC_SendFish

// required int32 fish_id = 1;
bool SC_SendFish::has_fish_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void SC_SendFish::set_has_fish_id() {
  _has_bits_[0] |= 0x00000001u;
}
void SC_SendFish::clear_has_fish_id() {
  _has_bits_[0] &= ~0x00000001u;
}
void SC_SendFish::clear_fish_id() {
  fish_id_ = 0;
  clear_has_fish_id();
}
::google::protobuf::int32 SC_SendFish::fish_id() const {
  // @@protoc_insertion_point(field_get:SC_SendFish.fish_id)
  return fish_id_;
}
void SC_SendFish::set_fish_id(::google::protobuf::int32 value) {
  set_has_fish_id();
  fish_id_ = value;
  // @@protoc_insertion_point(field_set:SC_SendFish.fish_id)
}

// required int32 type_id = 2;
bool SC_SendFish::has_type_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void SC_SendFish::set_has_type_id() {
  _has_bits_[0] |= 0x00000002u;
}
void SC_SendFish::clear_has_type_id() {
  _has_bits_[0] &= ~0x00000002u;
}
void SC_SendFish::clear_type_id() {
  type_id_ = 0;
  clear_has_type_id();
}
::google::protobuf::int32 SC_SendFish::type_id() const {
  // @@protoc_insertion_point(field_get:SC_SendFish.type_id)
  return type_id_;
}
void SC_SendFish::set_type_id(::google::protobuf::int32 value) {
  set_has_type_id();
  type_id_ = value;
  // @@protoc_insertion_point(field_set:SC_SendFish.type_id)
}

// required int32 path_id = 3;
bool SC_SendFish::has_path_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void SC_SendFish::set_has_path_id() {
  _has_bits_[0] |= 0x00000004u;
}
void SC_SendFish::clear_has_path_id() {
  _has_bits_[0] &= ~0x00000004u;
}
void SC_SendFish::clear_path_id() {
  path_id_ = 0;
  clear_has_path_id();
}
::google::protobuf::int32 SC_SendFish::path_id() const {
  // @@protoc_insertion_point(field_get:SC_SendFish.path_id)
  return path_id_;
}
void SC_SendFish::set_path_id(::google::protobuf::int32 value) {
  set_has_path_id();
  path_id_ = value;
  // @@protoc_insertion_point(field_set:SC_SendFish.path_id)
}

// required uint32 create_tick = 4;
bool SC_SendFish::has_create_tick() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void SC_SendFish::set_has_create_tick() {
  _has_bits_[0] |= 0x00000008u;
}
void SC_SendFish::clear_has_create_tick() {
  _has_bits_[0] &= ~0x00000008u;
}
void SC_SendFish::clear_create_tick() {
  create_tick_ = 0u;
  clear_has_create_tick();
}
::google::protobuf::uint32 SC_SendFish::create_tick() const {
  // @@protoc_insertion_point(field_get:SC_SendFish.create_tick)
  return create_tick_;
}
void SC_SendFish::set_create_tick(::google::protobuf::uint32 value) {
  set_has_create_tick();
  create_tick_ = value;
  // @@protoc_insertion_point(field_set:SC_SendFish.create_tick)
}

// required float offest_x = 5;
bool SC_SendFish::has_offest_x() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void SC_SendFish::set_has_offest_x() {
  _has_bits_[0] |= 0x00000010u;
}
void SC_SendFish::clear_has_offest_x() {
  _has_bits_[0] &= ~0x00000010u;
}
void SC_SendFish::clear_offest_x() {
  offest_x_ = 0;
  clear_has_offest_x();
}
float SC_SendFish::offest_x() const {
  // @@protoc_insertion_point(field_get:SC_SendFish.offest_x)
  return offest_x_;
}
void SC_SendFish::set_offest_x(float value) {
  set_has_offest_x();
  offest_x_ = value;
  // @@protoc_insertion_point(field_set:SC_SendFish.offest_x)
}

// required float offest_y = 6;
bool SC_SendFish::has_offest_y() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void SC_SendFish::set_has_offest_y() {
  _has_bits_[0] |= 0x00000020u;
}
void SC_SendFish::clear_has_offest_y() {
  _has_bits_[0] &= ~0x00000020u;
}
void SC_SendFish::clear_offest_y() {
  offest_y_ = 0;
  clear_has_offest_y();
}
float SC_SendFish::offest_y() const {
  // @@protoc_insertion_point(field_get:SC_SendFish.offest_y)
  return offest_y_;
}
void SC_SendFish::set_offest_y(float value) {
  set_has_offest_y();
  offest_y_ = value;
  // @@protoc_insertion_point(field_set:SC_SendFish.offest_y)
}

// required float dir = 7;
bool SC_SendFish::has_dir() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void SC_SendFish::set_has_dir() {
  _has_bits_[0] |= 0x00000040u;
}
void SC_SendFish::clear_has_dir() {
  _has_bits_[0] &= ~0x00000040u;
}
void SC_SendFish::clear_dir() {
  dir_ = 0;
  clear_has_dir();
}
float SC_SendFish::dir() const {
  // @@protoc_insertion_point(field_get:SC_SendFish.dir)
  return dir_;
}
void SC_SendFish::set_dir(float value) {
  set_has_dir();
  dir_ = value;
  // @@protoc_insertion_point(field_set:SC_SendFish.dir)
}

// required float delay = 8;
bool SC_SendFish::has_delay() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void SC_SendFish::set_has_delay() {
  _has_bits_[0] |= 0x00000080u;
}
void SC_SendFish::clear_has_delay() {
  _has_bits_[0] &= ~0x00000080u;
}
void SC_SendFish::clear_delay() {
  delay_ = 0;
  clear_has_delay();
}
float SC_SendFish::delay() const {
  // @@protoc_insertion_point(field_get:SC_SendFish.delay)
  return delay_;
}
void SC_SendFish::set_delay(float value) {
  set_has_delay();
  delay_ = value;
  // @@protoc_insertion_point(field_set:SC_SendFish.delay)
}

// required uint32 server_tick = 9;
bool SC_SendFish::has_server_tick() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
void SC_SendFish::set_has_server_tick() {
  _has_bits_[0] |= 0x00000100u;
}
void SC_SendFish::clear_has_server_tick() {
  _has_bits_[0] &= ~0x00000100u;
}
void SC_SendFish::clear_server_tick() {
  server_tick_ = 0u;
  clear_has_server_tick();
}
::google::protobuf::uint32 SC_SendFish::server_tick() const {
  // @@protoc_insertion_point(field_get:SC_SendFish.server_tick)
  return server_tick_;
}
void SC_SendFish::set_server_tick(::google::protobuf::uint32 value) {
  set_has_server_tick();
  server_tick_ = value;
  // @@protoc_insertion_point(field_set:SC_SendFish.server_tick)
}

// required float fish_speed = 10;
bool SC_SendFish::has_fish_speed() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
void SC_SendFish::set_has_fish_speed() {
  _has_bits_[0] |= 0x00000200u;
}
void SC_SendFish::clear_has_fish_speed() {
  _has_bits_[0] &= ~0x00000200u;
}
void SC_SendFish::clear_fish_speed() {
  fish_speed_ = 0;
  clear_has_fish_speed();
}
float SC_SendFish::fish_speed() const {
  // @@protoc_insertion_point(field_get:SC_SendFish.fish_speed)
  return fish_speed_;
}
void SC_SendFish::set_fish_speed(float value) {
  set_has_fish_speed();
  fish_speed_ = value;
  // @@protoc_insertion_point(field_set:SC_SendFish.fish_speed)
}

// required int32 fis_type = 11;
bool SC_SendFish::has_fis_type() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
void SC_SendFish::set_has_fis_type() {
  _has_bits_[0] |= 0x00000400u;
}
void SC_SendFish::clear_has_fis_type() {
  _has_bits_[0] &= ~0x00000400u;
}
void SC_SendFish::clear_fis_type() {
  fis_type_ = 0;
  clear_has_fis_type();
}
::google::protobuf::int32 SC_SendFish::fis_type() const {
  // @@protoc_insertion_point(field_get:SC_SendFish.fis_type)
  return fis_type_;
}
void SC_SendFish::set_fis_type(::google::protobuf::int32 value) {
  set_has_fis_type();
  fis_type_ = value;
  // @@protoc_insertion_point(field_set:SC_SendFish.fis_type)
}

// required bool troop = 12;
bool SC_SendFish::has_troop() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
void SC_SendFish::set_has_troop() {
  _has_bits_[0] |= 0x00000800u;
}
void SC_SendFish::clear_has_troop() {
  _has_bits_[0] &= ~0x00000800u;
}
void SC_SendFish::clear_troop() {
  troop_ = false;
  clear_has_troop();
}
bool SC_SendFish::troop() const {
  // @@protoc_insertion_point(field_get:SC_SendFish.troop)
  return troop_;
}
void SC_SendFish::set_troop(bool value) {
  set_has_troop();
  troop_ = value;
  // @@protoc_insertion_point(field_set:SC_SendFish.troop)
}

// required int32 refersh_id = 13;
bool SC_SendFish::has_refersh_id() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
void SC_SendFish::set_has_refersh_id() {
  _has_bits_[0] |= 0x00001000u;
}
void SC_SendFish::clear_has_refersh_id() {
  _has_bits_[0] &= ~0x00001000u;
}
void SC_SendFish::clear_refersh_id() {
  refersh_id_ = 0;
  clear_has_refersh_id();
}
::google::protobuf::int32 SC_SendFish::refersh_id() const {
  // @@protoc_insertion_point(field_get:SC_SendFish.refersh_id)
  return refersh_id_;
}
void SC_SendFish::set_refersh_id(::google::protobuf::int32 value) {
  set_has_refersh_id();
  refersh_id_ = value;
  // @@protoc_insertion_point(field_set:SC_SendFish.refersh_id)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SC_SendFishList::kPbFishesFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SC_SendFishList::SC_SendFishList()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_public_5ffishing_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:SC_SendFishList)
}
SC_SendFishList::SC_SendFishList(const SC_SendFishList& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      pb_fishes_(from.pb_fishes_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:SC_SendFishList)
}

void SC_SendFishList::SharedCtor() {
  _cached_size_ = 0;
}

SC_SendFishList::~SC_SendFishList() {
  // @@protoc_insertion_point(destructor:SC_SendFishList)
  SharedDtor();
}

void SC_SendFishList::SharedDtor() {
}

void SC_SendFishList::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SC_SendFishList::descriptor() {
  protobuf_public_5ffishing_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_public_5ffishing_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const SC_SendFishList& SC_SendFishList::default_instance() {
  protobuf_public_5ffishing_2eproto::InitDefaults();
  return *internal_default_instance();
}

SC_SendFishList* SC_SendFishList::New(::google::protobuf::Arena* arena) const {
  SC_SendFishList* n = new SC_SendFishList;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SC_SendFishList::Clear() {
// @@protoc_insertion_point(message_clear_start:SC_SendFishList)
  pb_fishes_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool SC_SendFishList::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:SC_SendFishList)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .SC_SendFish pb_fishes = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_pb_fishes()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:SC_SendFishList)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:SC_SendFishList)
  return false;
#undef DO_
}

void SC_SendFishList::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:SC_SendFishList)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .SC_SendFish pb_fishes = 1;
  for (unsigned int i = 0, n = this->pb_fishes_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->pb_fishes(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:SC_SendFishList)
}

::google::protobuf::uint8* SC_SendFishList::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:SC_SendFishList)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .SC_SendFish pb_fishes = 1;
  for (unsigned int i = 0, n = this->pb_fishes_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, this->pb_fishes(i), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SC_SendFishList)
  return target;
}

size_t SC_SendFishList::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SC_SendFishList)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // repeated .SC_SendFish pb_fishes = 1;
  {
    unsigned int count = this->pb_fishes_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->pb_fishes(i));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SC_SendFishList::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:SC_SendFishList)
  GOOGLE_DCHECK_NE(&from, this);
  const SC_SendFishList* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SC_SendFishList>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:SC_SendFishList)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:SC_SendFishList)
    MergeFrom(*source);
  }
}

void SC_SendFishList::MergeFrom(const SC_SendFishList& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:SC_SendFishList)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  pb_fishes_.MergeFrom(from.pb_fishes_);
}

void SC_SendFishList::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:SC_SendFishList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SC_SendFishList::CopyFrom(const SC_SendFishList& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SC_SendFishList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SC_SendFishList::IsInitialized() const {
  if (!::google::protobuf::internal::AllAreInitialized(this->pb_fishes())) return false;
  return true;
}

void SC_SendFishList::Swap(SC_SendFishList* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SC_SendFishList::InternalSwap(SC_SendFishList* other) {
  pb_fishes_.InternalSwap(&other->pb_fishes_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SC_SendFishList::GetMetadata() const {
  protobuf_public_5ffishing_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_public_5ffishing_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SC_SendFishList

// repeated .SC_SendFish pb_fishes = 1;
int SC_SendFishList::pb_fishes_size() const {
  return pb_fishes_.size();
}
void SC_SendFishList::clear_pb_fishes() {
  pb_fishes_.Clear();
}
const ::SC_SendFish& SC_SendFishList::pb_fishes(int index) const {
  // @@protoc_insertion_point(field_get:SC_SendFishList.pb_fishes)
  return pb_fishes_.Get(index);
}
::SC_SendFish* SC_SendFishList::mutable_pb_fishes(int index) {
  // @@protoc_insertion_point(field_mutable:SC_SendFishList.pb_fishes)
  return pb_fishes_.Mutable(index);
}
::SC_SendFish* SC_SendFishList::add_pb_fishes() {
  // @@protoc_insertion_point(field_add:SC_SendFishList.pb_fishes)
  return pb_fishes_.Add();
}
::google::protobuf::RepeatedPtrField< ::SC_SendFish >*
SC_SendFishList::mutable_pb_fishes() {
  // @@protoc_insertion_point(field_mutable_list:SC_SendFishList.pb_fishes)
  return &pb_fishes_;
}
const ::google::protobuf::RepeatedPtrField< ::SC_SendFish >&
SC_SendFishList::pb_fishes() const {
  // @@protoc_insertion_point(field_list:SC_SendFishList.pb_fishes)
  return pb_fishes_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SC_GameConfig::kServerIdFieldNumber;
const int SC_GameConfig::kChangeRatioUserScoreFieldNumber;
const int SC_GameConfig::kChangeRatioFishScoreFieldNumber;
const int SC_GameConfig::kExchangeOnceFieldNumber;
const int SC_GameConfig::kFireIntervalFieldNumber;
const int SC_GameConfig::kMaxIntervalFieldNumber;
const int SC_GameConfig::kMinIntervalFieldNumber;
const int SC_GameConfig::kShowGoldMinMulFieldNumber;
const int SC_GameConfig::kMaxBulletCountFieldNumber;
const int SC_GameConfig::kMaxCannonFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SC_GameConfig::SC_GameConfig()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_public_5ffishing_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:SC_GameConfig)
}
SC_GameConfig::SC_GameConfig(const SC_GameConfig& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&server_id_, &from.server_id_,
    reinterpret_cast<char*>(&max_cannon_) -
    reinterpret_cast<char*>(&server_id_) + sizeof(max_cannon_));
  // @@protoc_insertion_point(copy_constructor:SC_GameConfig)
}

void SC_GameConfig::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&server_id_, 0, reinterpret_cast<char*>(&max_cannon_) -
    reinterpret_cast<char*>(&server_id_) + sizeof(max_cannon_));
}

SC_GameConfig::~SC_GameConfig() {
  // @@protoc_insertion_point(destructor:SC_GameConfig)
  SharedDtor();
}

void SC_GameConfig::SharedDtor() {
}

void SC_GameConfig::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SC_GameConfig::descriptor() {
  protobuf_public_5ffishing_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_public_5ffishing_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const SC_GameConfig& SC_GameConfig::default_instance() {
  protobuf_public_5ffishing_2eproto::InitDefaults();
  return *internal_default_instance();
}

SC_GameConfig* SC_GameConfig::New(::google::protobuf::Arena* arena) const {
  SC_GameConfig* n = new SC_GameConfig;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SC_GameConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:SC_GameConfig)
  if (_has_bits_[0 / 32] & 255u) {
    ::memset(&server_id_, 0, reinterpret_cast<char*>(&show_gold_min_mul_) -
      reinterpret_cast<char*>(&server_id_) + sizeof(show_gold_min_mul_));
  }
  if (_has_bits_[8 / 32] & 768u) {
    ::memset(&max_bullet_count_, 0, reinterpret_cast<char*>(&max_cannon_) -
      reinterpret_cast<char*>(&max_bullet_count_) + sizeof(max_cannon_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool SC_GameConfig::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:SC_GameConfig)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 server_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_server_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &server_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 change_ratio_user_score = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_change_ratio_user_score();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &change_ratio_user_score_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 change_ratio_fish_score = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {
          set_has_change_ratio_fish_score();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &change_ratio_fish_score_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 exchange_once = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u)) {
          set_has_exchange_once();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &exchange_once_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 fire_interval = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u)) {
          set_has_fire_interval();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &fire_interval_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 max_interval = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u)) {
          set_has_max_interval();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &max_interval_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 min_interval = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u)) {
          set_has_min_interval();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &min_interval_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 show_gold_min_mul = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(64u)) {
          set_has_show_gold_min_mul();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &show_gold_min_mul_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 max_bullet_count = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(72u)) {
          set_has_max_bullet_count();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &max_bullet_count_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 max_cannon = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(80u)) {
          set_has_max_cannon();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &max_cannon_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:SC_GameConfig)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:SC_GameConfig)
  return false;
#undef DO_
}

void SC_GameConfig::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:SC_GameConfig)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 server_id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->server_id(), output);
  }

  // required int32 change_ratio_user_score = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->change_ratio_user_score(), output);
  }

  // required int32 change_ratio_fish_score = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->change_ratio_fish_score(), output);
  }

  // required int32 exchange_once = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->exchange_once(), output);
  }

  // required int32 fire_interval = 5;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->fire_interval(), output);
  }

  // required int32 max_interval = 6;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->max_interval(), output);
  }

  // required int32 min_interval = 7;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->min_interval(), output);
  }

  // required int32 show_gold_min_mul = 8;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->show_gold_min_mul(), output);
  }

  // required int32 max_bullet_count = 9;
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->max_bullet_count(), output);
  }

  // required int32 max_cannon = 10;
  if (cached_has_bits & 0x00000200u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->max_cannon(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:SC_GameConfig)
}

::google::protobuf::uint8* SC_GameConfig::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:SC_GameConfig)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 server_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->server_id(), target);
  }

  // required int32 change_ratio_user_score = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->change_ratio_user_score(), target);
  }

  // required int32 change_ratio_fish_score = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->change_ratio_fish_score(), target);
  }

  // required int32 exchange_once = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->exchange_once(), target);
  }

  // required int32 fire_interval = 5;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->fire_interval(), target);
  }

  // required int32 max_interval = 6;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->max_interval(), target);
  }

  // required int32 min_interval = 7;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->min_interval(), target);
  }

  // required int32 show_gold_min_mul = 8;
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->show_gold_min_mul(), target);
  }

  // required int32 max_bullet_count = 9;
  if (cached_has_bits & 0x00000100u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->max_bullet_count(), target);
  }

  // required int32 max_cannon = 10;
  if (cached_has_bits & 0x00000200u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(10, this->max_cannon(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SC_GameConfig)
  return target;
}

size_t SC_GameConfig::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:SC_GameConfig)
  size_t total_size = 0;

  if (has_server_id()) {
    // required int32 server_id = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->server_id());
  }

  if (has_change_ratio_user_score()) {
    // required int32 change_ratio_user_score = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->change_ratio_user_score());
  }

  if (has_change_ratio_fish_score()) {
    // required int32 change_ratio_fish_score = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->change_ratio_fish_score());
  }

  if (has_exchange_once()) {
    // required int32 exchange_once = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->exchange_once());
  }

  if (has_fire_interval()) {
    // required int32 fire_interval = 5;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->fire_interval());
  }

  if (has_max_interval()) {
    // required int32 max_interval = 6;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->max_interval());
  }

  if (has_min_interval()) {
    // required int32 min_interval = 7;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->min_interval());
  }

  if (has_show_gold_min_mul()) {
    // required int32 show_gold_min_mul = 8;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->show_gold_min_mul());
  }

  if (has_max_bullet_count()) {
    // required int32 max_bullet_count = 9;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->max_bullet_count());
  }

  if (has_max_cannon()) {
    // required int32 max_cannon = 10;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->max_cannon());
  }

  return total_size;
}
size_t SC_GameConfig::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SC_GameConfig)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (((_has_bits_[0] & 0x000003ff) ^ 0x000003ff) == 0) {  // All required fields are present.
    // required int32 server_id = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->server_id());

    // required int32 change_ratio_user_score = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->change_ratio_user_score());

    // required int32 change_ratio_fish_score = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->change_ratio_fish_score());

    // required int32 exchange_once = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->exchange_once());

    // required int32 fire_interval = 5;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->fire_interval());

    // required int32 max_interval = 6;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->max_interval());

    // required int32 min_interval = 7;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->min_interval());

    // required int32 show_gold_min_mul = 8;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->show_gold_min_mul());

    // required int32 max_bullet_count = 9;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->max_bullet_count());

    // required int32 max_cannon = 10;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->max_cannon());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SC_GameConfig::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:SC_GameConfig)
  GOOGLE_DCHECK_NE(&from, this);
  const SC_GameConfig* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SC_GameConfig>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:SC_GameConfig)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:SC_GameConfig)
    MergeFrom(*source);
  }
}

void SC_GameConfig::MergeFrom(const SC_GameConfig& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:SC_GameConfig)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      server_id_ = from.server_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      change_ratio_user_score_ = from.change_ratio_user_score_;
    }
    if (cached_has_bits & 0x00000004u) {
      change_ratio_fish_score_ = from.change_ratio_fish_score_;
    }
    if (cached_has_bits & 0x00000008u) {
      exchange_once_ = from.exchange_once_;
    }
    if (cached_has_bits & 0x00000010u) {
      fire_interval_ = from.fire_interval_;
    }
    if (cached_has_bits & 0x00000020u) {
      max_interval_ = from.max_interval_;
    }
    if (cached_has_bits & 0x00000040u) {
      min_interval_ = from.min_interval_;
    }
    if (cached_has_bits & 0x00000080u) {
      show_gold_min_mul_ = from.show_gold_min_mul_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 768u) {
    if (cached_has_bits & 0x00000100u) {
      max_bullet_count_ = from.max_bullet_count_;
    }
    if (cached_has_bits & 0x00000200u) {
      max_cannon_ = from.max_cannon_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void SC_GameConfig::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:SC_GameConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SC_GameConfig::CopyFrom(const SC_GameConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SC_GameConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SC_GameConfig::IsInitialized() const {
  if ((_has_bits_[0] & 0x000003ff) != 0x000003ff) return false;
  return true;
}

void SC_GameConfig::Swap(SC_GameConfig* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SC_GameConfig::InternalSwap(SC_GameConfig* other) {
  std::swap(server_id_, other->server_id_);
  std::swap(change_ratio_user_score_, other->change_ratio_user_score_);
  std::swap(change_ratio_fish_score_, other->change_ratio_fish_score_);
  std::swap(exchange_once_, other->exchange_once_);
  std::swap(fire_interval_, other->fire_interval_);
  std::swap(max_interval_, other->max_interval_);
  std::swap(min_interval_, other->min_interval_);
  std::swap(show_gold_min_mul_, other->show_gold_min_mul_);
  std::swap(max_bullet_count_, other->max_bullet_count_);
  std::swap(max_cannon_, other->max_cannon_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SC_GameConfig::GetMetadata() const {
  protobuf_public_5ffishing_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_public_5ffishing_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SC_GameConfig

// required int32 server_id = 1;
bool SC_GameConfig::has_server_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void SC_GameConfig::set_has_server_id() {
  _has_bits_[0] |= 0x00000001u;
}
void SC_GameConfig::clear_has_server_id() {
  _has_bits_[0] &= ~0x00000001u;
}
void SC_GameConfig::clear_server_id() {
  server_id_ = 0;
  clear_has_server_id();
}
::google::protobuf::int32 SC_GameConfig::server_id() const {
  // @@protoc_insertion_point(field_get:SC_GameConfig.server_id)
  return server_id_;
}
void SC_GameConfig::set_server_id(::google::protobuf::int32 value) {
  set_has_server_id();
  server_id_ = value;
  // @@protoc_insertion_point(field_set:SC_GameConfig.server_id)
}

// required int32 change_ratio_user_score = 2;
bool SC_GameConfig::has_change_ratio_user_score() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void SC_GameConfig::set_has_change_ratio_user_score() {
  _has_bits_[0] |= 0x00000002u;
}
void SC_GameConfig::clear_has_change_ratio_user_score() {
  _has_bits_[0] &= ~0x00000002u;
}
void SC_GameConfig::clear_change_ratio_user_score() {
  change_ratio_user_score_ = 0;
  clear_has_change_ratio_user_score();
}
::google::protobuf::int32 SC_GameConfig::change_ratio_user_score() const {
  // @@protoc_insertion_point(field_get:SC_GameConfig.change_ratio_user_score)
  return change_ratio_user_score_;
}
void SC_GameConfig::set_change_ratio_user_score(::google::protobuf::int32 value) {
  set_has_change_ratio_user_score();
  change_ratio_user_score_ = value;
  // @@protoc_insertion_point(field_set:SC_GameConfig.change_ratio_user_score)
}

// required int32 change_ratio_fish_score = 3;
bool SC_GameConfig::has_change_ratio_fish_score() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void SC_GameConfig::set_has_change_ratio_fish_score() {
  _has_bits_[0] |= 0x00000004u;
}
void SC_GameConfig::clear_has_change_ratio_fish_score() {
  _has_bits_[0] &= ~0x00000004u;
}
void SC_GameConfig::clear_change_ratio_fish_score() {
  change_ratio_fish_score_ = 0;
  clear_has_change_ratio_fish_score();
}
::google::protobuf::int32 SC_GameConfig::change_ratio_fish_score() const {
  // @@protoc_insertion_point(field_get:SC_GameConfig.change_ratio_fish_score)
  return change_ratio_fish_score_;
}
void SC_GameConfig::set_change_ratio_fish_score(::google::protobuf::int32 value) {
  set_has_change_ratio_fish_score();
  change_ratio_fish_score_ = value;
  // @@protoc_insertion_point(field_set:SC_GameConfig.change_ratio_fish_score)
}

// required int32 exchange_once = 4;
bool SC_GameConfig::has_exchange_once() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void SC_GameConfig::set_has_exchange_once() {
  _has_bits_[0] |= 0x00000008u;
}
void SC_GameConfig::clear_has_exchange_once() {
  _has_bits_[0] &= ~0x00000008u;
}
void SC_GameConfig::clear_exchange_once() {
  exchange_once_ = 0;
  clear_has_exchange_once();
}
::google::protobuf::int32 SC_GameConfig::exchange_once() const {
  // @@protoc_insertion_point(field_get:SC_GameConfig.exchange_once)
  return exchange_once_;
}
void SC_GameConfig::set_exchange_once(::google::protobuf::int32 value) {
  set_has_exchange_once();
  exchange_once_ = value;
  // @@protoc_insertion_point(field_set:SC_GameConfig.exchange_once)
}

// required int32 fire_interval = 5;
bool SC_GameConfig::has_fire_interval() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void SC_GameConfig::set_has_fire_interval() {
  _has_bits_[0] |= 0x00000010u;
}
void SC_GameConfig::clear_has_fire_interval() {
  _has_bits_[0] &= ~0x00000010u;
}
void SC_GameConfig::clear_fire_interval() {
  fire_interval_ = 0;
  clear_has_fire_interval();
}
::google::protobuf::int32 SC_GameConfig::fire_interval() const {
  // @@protoc_insertion_point(field_get:SC_GameConfig.fire_interval)
  return fire_interval_;
}
void SC_GameConfig::set_fire_interval(::google::protobuf::int32 value) {
  set_has_fire_interval();
  fire_interval_ = value;
  // @@protoc_insertion_point(field_set:SC_GameConfig.fire_interval)
}

// required int32 max_interval = 6;
bool SC_GameConfig::has_max_interval() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void SC_GameConfig::set_has_max_interval() {
  _has_bits_[0] |= 0x00000020u;
}
void SC_GameConfig::clear_has_max_interval() {
  _has_bits_[0] &= ~0x00000020u;
}
void SC_GameConfig::clear_max_interval() {
  max_interval_ = 0;
  clear_has_max_interval();
}
::google::protobuf::int32 SC_GameConfig::max_interval() const {
  // @@protoc_insertion_point(field_get:SC_GameConfig.max_interval)
  return max_interval_;
}
void SC_GameConfig::set_max_interval(::google::protobuf::int32 value) {
  set_has_max_interval();
  max_interval_ = value;
  // @@protoc_insertion_point(field_set:SC_GameConfig.max_interval)
}

// required int32 min_interval = 7;
bool SC_GameConfig::has_min_interval() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void SC_GameConfig::set_has_min_interval() {
  _has_bits_[0] |= 0x00000040u;
}
void SC_GameConfig::clear_has_min_interval() {
  _has_bits_[0] &= ~0x00000040u;
}
void SC_GameConfig::clear_min_interval() {
  min_interval_ = 0;
  clear_has_min_interval();
}
::google::protobuf::int32 SC_GameConfig::min_interval() const {
  // @@protoc_insertion_point(field_get:SC_GameConfig.min_interval)
  return min_interval_;
}
void SC_GameConfig::set_min_interval(::google::protobuf::int32 value) {
  set_has_min_interval();
  min_interval_ = value;
  // @@protoc_insertion_point(field_set:SC_GameConfig.min_interval)
}

// required int32 show_gold_min_mul = 8;
bool SC_GameConfig::has_show_gold_min_mul() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void SC_GameConfig::set_has_show_gold_min_mul() {
  _has_bits_[0] |= 0x00000080u;
}
void SC_GameConfig::clear_has_show_gold_min_mul() {
  _has_bits_[0] &= ~0x00000080u;
}
void SC_GameConfig::clear_show_gold_min_mul() {
  show_gold_min_mul_ = 0;
  clear_has_show_gold_min_mul();
}
::google::protobuf::int32 SC_GameConfig::show_gold_min_mul() const {
  // @@protoc_insertion_point(field_get:SC_GameConfig.show_gold_min_mul)
  return show_gold_min_mul_;
}
void SC_GameConfig::set_show_gold_min_mul(::google::protobuf::int32 value) {
  set_has_show_gold_min_mul();
  show_gold_min_mul_ = value;
  // @@protoc_insertion_point(field_set:SC_GameConfig.show_gold_min_mul)
}

// required int32 max_bullet_count = 9;
bool SC_GameConfig::has_max_bullet_count() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
void SC_GameConfig::set_has_max_bullet_count() {
  _has_bits_[0] |= 0x00000100u;
}
void SC_GameConfig::clear_has_max_bullet_count() {
  _has_bits_[0] &= ~0x00000100u;
}
void SC_GameConfig::clear_max_bullet_count() {
  max_bullet_count_ = 0;
  clear_has_max_bullet_count();
}
::google::protobuf::int32 SC_GameConfig::max_bullet_count() const {
  // @@protoc_insertion_point(field_get:SC_GameConfig.max_bullet_count)
  return max_bullet_count_;
}
void SC_GameConfig::set_max_bullet_count(::google::protobuf::int32 value) {
  set_has_max_bullet_count();
  max_bullet_count_ = value;
  // @@protoc_insertion_point(field_set:SC_GameConfig.max_bullet_count)
}

// required int32 max_cannon = 10;
bool SC_GameConfig::has_max_cannon() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
void SC_GameConfig::set_has_max_cannon() {
  _has_bits_[0] |= 0x00000200u;
}
void SC_GameConfig::clear_has_max_cannon() {
  _has_bits_[0] &= ~0x00000200u;
}
void SC_GameConfig::clear_max_cannon() {
  max_cannon_ = 0;
  clear_has_max_cannon();
}
::google::protobuf::int32 SC_GameConfig::max_cannon() const {
  // @@protoc_insertion_point(field_get:SC_GameConfig.max_cannon)
  return max_cannon_;
}
void SC_GameConfig::set_max_cannon(::google::protobuf::int32 value) {
  set_has_max_cannon();
  max_cannon_ = value;
  // @@protoc_insertion_point(field_set:SC_GameConfig.max_cannon)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SC_TimeSync::kChairIdFieldNumber;
const int SC_TimeSync::kServerTickFieldNumber;
const int SC_TimeSync::kClientTickFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SC_TimeSync::SC_TimeSync()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_public_5ffishing_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:SC_TimeSync)
}
SC_TimeSync::SC_TimeSync(const SC_TimeSync& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&chair_id_, &from.chair_id_,
    reinterpret_cast<char*>(&client_tick_) -
    reinterpret_cast<char*>(&chair_id_) + sizeof(client_tick_));
  // @@protoc_insertion_point(copy_constructor:SC_TimeSync)
}

void SC_TimeSync::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&chair_id_, 0, reinterpret_cast<char*>(&client_tick_) -
    reinterpret_cast<char*>(&chair_id_) + sizeof(client_tick_));
}

SC_TimeSync::~SC_TimeSync() {
  // @@protoc_insertion_point(destructor:SC_TimeSync)
  SharedDtor();
}

void SC_TimeSync::SharedDtor() {
}

void SC_TimeSync::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SC_TimeSync::descriptor() {
  protobuf_public_5ffishing_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_public_5ffishing_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const SC_TimeSync& SC_TimeSync::default_instance() {
  protobuf_public_5ffishing_2eproto::InitDefaults();
  return *internal_default_instance();
}

SC_TimeSync* SC_TimeSync::New(::google::protobuf::Arena* arena) const {
  SC_TimeSync* n = new SC_TimeSync;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SC_TimeSync::Clear() {
// @@protoc_insertion_point(message_clear_start:SC_TimeSync)
  if (_has_bits_[0 / 32] & 7u) {
    ::memset(&chair_id_, 0, reinterpret_cast<char*>(&client_tick_) -
      reinterpret_cast<char*>(&chair_id_) + sizeof(client_tick_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool SC_TimeSync::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:SC_TimeSync)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 chair_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_chair_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &chair_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint32 server_tick = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_server_tick();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &server_tick_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint32 client_tick = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {
          set_has_client_tick();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &client_tick_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:SC_TimeSync)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:SC_TimeSync)
  return false;
#undef DO_
}

void SC_TimeSync::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:SC_TimeSync)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 chair_id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->chair_id(), output);
  }

  // required uint32 server_tick = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->server_tick(), output);
  }

  // required uint32 client_tick = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->client_tick(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:SC_TimeSync)
}

::google::protobuf::uint8* SC_TimeSync::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:SC_TimeSync)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 chair_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->chair_id(), target);
  }

  // required uint32 server_tick = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->server_tick(), target);
  }

  // required uint32 client_tick = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->client_tick(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SC_TimeSync)
  return target;
}

size_t SC_TimeSync::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:SC_TimeSync)
  size_t total_size = 0;

  if (has_chair_id()) {
    // required int32 chair_id = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->chair_id());
  }

  if (has_server_tick()) {
    // required uint32 server_tick = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->server_tick());
  }

  if (has_client_tick()) {
    // required uint32 client_tick = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->client_tick());
  }

  return total_size;
}
size_t SC_TimeSync::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SC_TimeSync)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000007) ^ 0x00000007) == 0) {  // All required fields are present.
    // required int32 chair_id = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->chair_id());

    // required uint32 server_tick = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->server_tick());

    // required uint32 client_tick = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->client_tick());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SC_TimeSync::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:SC_TimeSync)
  GOOGLE_DCHECK_NE(&from, this);
  const SC_TimeSync* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SC_TimeSync>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:SC_TimeSync)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:SC_TimeSync)
    MergeFrom(*source);
  }
}

void SC_TimeSync::MergeFrom(const SC_TimeSync& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:SC_TimeSync)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      chair_id_ = from.chair_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      server_tick_ = from.server_tick_;
    }
    if (cached_has_bits & 0x00000004u) {
      client_tick_ = from.client_tick_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void SC_TimeSync::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:SC_TimeSync)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SC_TimeSync::CopyFrom(const SC_TimeSync& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SC_TimeSync)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SC_TimeSync::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;
  return true;
}

void SC_TimeSync::Swap(SC_TimeSync* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SC_TimeSync::InternalSwap(SC_TimeSync* other) {
  std::swap(chair_id_, other->chair_id_);
  std::swap(server_tick_, other->server_tick_);
  std::swap(client_tick_, other->client_tick_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SC_TimeSync::GetMetadata() const {
  protobuf_public_5ffishing_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_public_5ffishing_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SC_TimeSync

// required int32 chair_id = 1;
bool SC_TimeSync::has_chair_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void SC_TimeSync::set_has_chair_id() {
  _has_bits_[0] |= 0x00000001u;
}
void SC_TimeSync::clear_has_chair_id() {
  _has_bits_[0] &= ~0x00000001u;
}
void SC_TimeSync::clear_chair_id() {
  chair_id_ = 0;
  clear_has_chair_id();
}
::google::protobuf::int32 SC_TimeSync::chair_id() const {
  // @@protoc_insertion_point(field_get:SC_TimeSync.chair_id)
  return chair_id_;
}
void SC_TimeSync::set_chair_id(::google::protobuf::int32 value) {
  set_has_chair_id();
  chair_id_ = value;
  // @@protoc_insertion_point(field_set:SC_TimeSync.chair_id)
}

// required uint32 server_tick = 2;
bool SC_TimeSync::has_server_tick() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void SC_TimeSync::set_has_server_tick() {
  _has_bits_[0] |= 0x00000002u;
}
void SC_TimeSync::clear_has_server_tick() {
  _has_bits_[0] &= ~0x00000002u;
}
void SC_TimeSync::clear_server_tick() {
  server_tick_ = 0u;
  clear_has_server_tick();
}
::google::protobuf::uint32 SC_TimeSync::server_tick() const {
  // @@protoc_insertion_point(field_get:SC_TimeSync.server_tick)
  return server_tick_;
}
void SC_TimeSync::set_server_tick(::google::protobuf::uint32 value) {
  set_has_server_tick();
  server_tick_ = value;
  // @@protoc_insertion_point(field_set:SC_TimeSync.server_tick)
}

// required uint32 client_tick = 3;
bool SC_TimeSync::has_client_tick() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void SC_TimeSync::set_has_client_tick() {
  _has_bits_[0] |= 0x00000004u;
}
void SC_TimeSync::clear_has_client_tick() {
  _has_bits_[0] &= ~0x00000004u;
}
void SC_TimeSync::clear_client_tick() {
  client_tick_ = 0u;
  clear_has_client_tick();
}
::google::protobuf::uint32 SC_TimeSync::client_tick() const {
  // @@protoc_insertion_point(field_get:SC_TimeSync.client_tick)
  return client_tick_;
}
void SC_TimeSync::set_client_tick(::google::protobuf::uint32 value) {
  set_has_client_tick();
  client_tick_ = value;
  // @@protoc_insertion_point(field_set:SC_TimeSync.client_tick)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SC_SystemMessage::kWTypeFieldNumber;
const int SC_SystemMessage::kSzStringFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SC_SystemMessage::SC_SystemMessage()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_public_5ffishing_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:SC_SystemMessage)
}
SC_SystemMessage::SC_SystemMessage(const SC_SystemMessage& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  szstring_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_szstring()) {
    szstring_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.szstring_);
  }
  wtype_ = from.wtype_;
  // @@protoc_insertion_point(copy_constructor:SC_SystemMessage)
}

void SC_SystemMessage::SharedCtor() {
  _cached_size_ = 0;
  szstring_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  wtype_ = 0;
}

SC_SystemMessage::~SC_SystemMessage() {
  // @@protoc_insertion_point(destructor:SC_SystemMessage)
  SharedDtor();
}

void SC_SystemMessage::SharedDtor() {
  szstring_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void SC_SystemMessage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SC_SystemMessage::descriptor() {
  protobuf_public_5ffishing_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_public_5ffishing_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const SC_SystemMessage& SC_SystemMessage::default_instance() {
  protobuf_public_5ffishing_2eproto::InitDefaults();
  return *internal_default_instance();
}

SC_SystemMessage* SC_SystemMessage::New(::google::protobuf::Arena* arena) const {
  SC_SystemMessage* n = new SC_SystemMessage;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SC_SystemMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:SC_SystemMessage)
  if (has_szstring()) {
    GOOGLE_DCHECK(!szstring_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
    (*szstring_.UnsafeRawStringPointer())->clear();
  }
  wtype_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool SC_SystemMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:SC_SystemMessage)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 wType = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_wtype();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &wtype_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required string szString = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_szstring()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->szstring().data(), this->szstring().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "SC_SystemMessage.szString");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:SC_SystemMessage)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:SC_SystemMessage)
  return false;
#undef DO_
}

void SC_SystemMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:SC_SystemMessage)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 wType = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->wtype(), output);
  }

  // required string szString = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->szstring().data(), this->szstring().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "SC_SystemMessage.szString");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->szstring(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:SC_SystemMessage)
}

::google::protobuf::uint8* SC_SystemMessage::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:SC_SystemMessage)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 wType = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->wtype(), target);
  }

  // required string szString = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->szstring().data(), this->szstring().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "SC_SystemMessage.szString");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->szstring(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SC_SystemMessage)
  return target;
}

size_t SC_SystemMessage::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:SC_SystemMessage)
  size_t total_size = 0;

  if (has_szstring()) {
    // required string szString = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->szstring());
  }

  if (has_wtype()) {
    // required int32 wType = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->wtype());
  }

  return total_size;
}
size_t SC_SystemMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SC_SystemMessage)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required string szString = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->szstring());

    // required int32 wType = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->wtype());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SC_SystemMessage::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:SC_SystemMessage)
  GOOGLE_DCHECK_NE(&from, this);
  const SC_SystemMessage* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SC_SystemMessage>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:SC_SystemMessage)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:SC_SystemMessage)
    MergeFrom(*source);
  }
}

void SC_SystemMessage::MergeFrom(const SC_SystemMessage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:SC_SystemMessage)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_szstring();
      szstring_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.szstring_);
    }
    if (cached_has_bits & 0x00000002u) {
      wtype_ = from.wtype_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void SC_SystemMessage::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:SC_SystemMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SC_SystemMessage::CopyFrom(const SC_SystemMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SC_SystemMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SC_SystemMessage::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  return true;
}

void SC_SystemMessage::Swap(SC_SystemMessage* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SC_SystemMessage::InternalSwap(SC_SystemMessage* other) {
  szstring_.Swap(&other->szstring_);
  std::swap(wtype_, other->wtype_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SC_SystemMessage::GetMetadata() const {
  protobuf_public_5ffishing_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_public_5ffishing_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SC_SystemMessage

// required int32 wType = 1;
bool SC_SystemMessage::has_wtype() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void SC_SystemMessage::set_has_wtype() {
  _has_bits_[0] |= 0x00000002u;
}
void SC_SystemMessage::clear_has_wtype() {
  _has_bits_[0] &= ~0x00000002u;
}
void SC_SystemMessage::clear_wtype() {
  wtype_ = 0;
  clear_has_wtype();
}
::google::protobuf::int32 SC_SystemMessage::wtype() const {
  // @@protoc_insertion_point(field_get:SC_SystemMessage.wType)
  return wtype_;
}
void SC_SystemMessage::set_wtype(::google::protobuf::int32 value) {
  set_has_wtype();
  wtype_ = value;
  // @@protoc_insertion_point(field_set:SC_SystemMessage.wType)
}

// required string szString = 2;
bool SC_SystemMessage::has_szstring() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void SC_SystemMessage::set_has_szstring() {
  _has_bits_[0] |= 0x00000001u;
}
void SC_SystemMessage::clear_has_szstring() {
  _has_bits_[0] &= ~0x00000001u;
}
void SC_SystemMessage::clear_szstring() {
  szstring_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_szstring();
}
const ::std::string& SC_SystemMessage::szstring() const {
  // @@protoc_insertion_point(field_get:SC_SystemMessage.szString)
  return szstring_.GetNoArena();
}
void SC_SystemMessage::set_szstring(const ::std::string& value) {
  set_has_szstring();
  szstring_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:SC_SystemMessage.szString)
}
#if LANG_CXX11
void SC_SystemMessage::set_szstring(::std::string&& value) {
  set_has_szstring();
  szstring_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:SC_SystemMessage.szString)
}
#endif
void SC_SystemMessage::set_szstring(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_szstring();
  szstring_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:SC_SystemMessage.szString)
}
void SC_SystemMessage::set_szstring(const char* value, size_t size) {
  set_has_szstring();
  szstring_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:SC_SystemMessage.szString)
}
::std::string* SC_SystemMessage::mutable_szstring() {
  set_has_szstring();
  // @@protoc_insertion_point(field_mutable:SC_SystemMessage.szString)
  return szstring_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* SC_SystemMessage::release_szstring() {
  // @@protoc_insertion_point(field_release:SC_SystemMessage.szString)
  clear_has_szstring();
  return szstring_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void SC_SystemMessage::set_allocated_szstring(::std::string* szstring) {
  if (szstring != NULL) {
    set_has_szstring();
  } else {
    clear_has_szstring();
  }
  szstring_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), szstring);
  // @@protoc_insertion_point(field_set_allocated:SC_SystemMessage.szString)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)
