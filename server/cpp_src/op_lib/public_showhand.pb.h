// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: public_showhand.proto

#ifndef PROTOBUF_public_5fshowhand_2eproto__INCLUDED
#define PROTOBUF_public_5fshowhand_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3003000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3003000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
class CS_ShowHandAddScore;
class CS_ShowHandAddScoreDefaultTypeInternal;
extern CS_ShowHandAddScoreDefaultTypeInternal _CS_ShowHandAddScore_default_instance_;
class CS_ShowHandGiveUp;
class CS_ShowHandGiveUpDefaultTypeInternal;
extern CS_ShowHandGiveUpDefaultTypeInternal _CS_ShowHandGiveUp_default_instance_;
class CS_ShowHandGiveUpEixt;
class CS_ShowHandGiveUpEixtDefaultTypeInternal;
extern CS_ShowHandGiveUpEixtDefaultTypeInternal _CS_ShowHandGiveUpEixt_default_instance_;
class CS_ShowHandMyVoteResult;
class CS_ShowHandMyVoteResultDefaultTypeInternal;
extern CS_ShowHandMyVoteResultDefaultTypeInternal _CS_ShowHandMyVoteResult_default_instance_;
class CS_ShowHandPass;
class CS_ShowHandPassDefaultTypeInternal;
extern CS_ShowHandPassDefaultTypeInternal _CS_ShowHandPass_default_instance_;
class SC_ShowHandAddScore;
class SC_ShowHandAddScoreDefaultTypeInternal;
extern SC_ShowHandAddScoreDefaultTypeInternal _SC_ShowHandAddScore_default_instance_;
class SC_ShowHandGiveUp;
class SC_ShowHandGiveUpDefaultTypeInternal;
extern SC_ShowHandGiveUpDefaultTypeInternal _SC_ShowHandGiveUp_default_instance_;
class SC_ShowHandPass;
class SC_ShowHandPassDefaultTypeInternal;
extern SC_ShowHandPassDefaultTypeInternal _SC_ShowHandPass_default_instance_;
class SC_ShowHandPlayerVoteRes;
class SC_ShowHandPlayerVoteResDefaultTypeInternal;
extern SC_ShowHandPlayerVoteResDefaultTypeInternal _SC_ShowHandPlayerVoteRes_default_instance_;
class SC_ShowHandStartVote;
class SC_ShowHandStartVoteDefaultTypeInternal;
extern SC_ShowHandStartVoteDefaultTypeInternal _SC_ShowHandStartVote_default_instance_;
class SC_ShowHand_Desk_Enter;
class SC_ShowHand_Desk_EnterDefaultTypeInternal;
extern SC_ShowHand_Desk_EnterDefaultTypeInternal _SC_ShowHand_Desk_Enter_default_instance_;
class SC_ShowHand_Desk_State;
class SC_ShowHand_Desk_StateDefaultTypeInternal;
extern SC_ShowHand_Desk_StateDefaultTypeInternal _SC_ShowHand_Desk_State_default_instance_;
class SC_ShowHand_Game_Finish;
class SC_ShowHand_Game_FinishDefaultTypeInternal;
extern SC_ShowHand_Game_FinishDefaultTypeInternal _SC_ShowHand_Game_Finish_default_instance_;
class SC_ShowHand_NextTurn;
class SC_ShowHand_NextTurnDefaultTypeInternal;
extern SC_ShowHand_NextTurnDefaultTypeInternal _SC_ShowHand_NextTurn_default_instance_;
class SC_ShowHand_Next_Round;
class SC_ShowHand_Next_RoundDefaultTypeInternal;
extern SC_ShowHand_Next_RoundDefaultTypeInternal _SC_ShowHand_Next_Round_default_instance_;
class ShowHand_Player_Info;
class ShowHand_Player_InfoDefaultTypeInternal;
extern ShowHand_Player_InfoDefaultTypeInternal _ShowHand_Player_Info_default_instance_;
class ShowHand_Reconnect_Data;
class ShowHand_Reconnect_DataDefaultTypeInternal;
extern ShowHand_Reconnect_DataDefaultTypeInternal _ShowHand_Reconnect_Data_default_instance_;

namespace protobuf_public_5fshowhand_2eproto {
// Internal implementation detail -- do not call these.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[];
  static const ::google::protobuf::uint32 offsets[];
  static void InitDefaultsImpl();
  static void Shutdown();
};
void AddDescriptors();
void InitDefaults();
}  // namespace protobuf_public_5fshowhand_2eproto

enum CS_ShowHandAddScore_MsgID {
  CS_ShowHandAddScore_MsgID_ID = 17000
};
bool CS_ShowHandAddScore_MsgID_IsValid(int value);
const CS_ShowHandAddScore_MsgID CS_ShowHandAddScore_MsgID_MsgID_MIN = CS_ShowHandAddScore_MsgID_ID;
const CS_ShowHandAddScore_MsgID CS_ShowHandAddScore_MsgID_MsgID_MAX = CS_ShowHandAddScore_MsgID_ID;
const int CS_ShowHandAddScore_MsgID_MsgID_ARRAYSIZE = CS_ShowHandAddScore_MsgID_MsgID_MAX + 1;

const ::google::protobuf::EnumDescriptor* CS_ShowHandAddScore_MsgID_descriptor();
inline const ::std::string& CS_ShowHandAddScore_MsgID_Name(CS_ShowHandAddScore_MsgID value) {
  return ::google::protobuf::internal::NameOfEnum(
    CS_ShowHandAddScore_MsgID_descriptor(), value);
}
inline bool CS_ShowHandAddScore_MsgID_Parse(
    const ::std::string& name, CS_ShowHandAddScore_MsgID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<CS_ShowHandAddScore_MsgID>(
    CS_ShowHandAddScore_MsgID_descriptor(), name, value);
}
enum CS_ShowHandGiveUp_MsgID {
  CS_ShowHandGiveUp_MsgID_ID = 17001
};
bool CS_ShowHandGiveUp_MsgID_IsValid(int value);
const CS_ShowHandGiveUp_MsgID CS_ShowHandGiveUp_MsgID_MsgID_MIN = CS_ShowHandGiveUp_MsgID_ID;
const CS_ShowHandGiveUp_MsgID CS_ShowHandGiveUp_MsgID_MsgID_MAX = CS_ShowHandGiveUp_MsgID_ID;
const int CS_ShowHandGiveUp_MsgID_MsgID_ARRAYSIZE = CS_ShowHandGiveUp_MsgID_MsgID_MAX + 1;

const ::google::protobuf::EnumDescriptor* CS_ShowHandGiveUp_MsgID_descriptor();
inline const ::std::string& CS_ShowHandGiveUp_MsgID_Name(CS_ShowHandGiveUp_MsgID value) {
  return ::google::protobuf::internal::NameOfEnum(
    CS_ShowHandGiveUp_MsgID_descriptor(), value);
}
inline bool CS_ShowHandGiveUp_MsgID_Parse(
    const ::std::string& name, CS_ShowHandGiveUp_MsgID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<CS_ShowHandGiveUp_MsgID>(
    CS_ShowHandGiveUp_MsgID_descriptor(), name, value);
}
enum CS_ShowHandPass_MsgID {
  CS_ShowHandPass_MsgID_ID = 17002
};
bool CS_ShowHandPass_MsgID_IsValid(int value);
const CS_ShowHandPass_MsgID CS_ShowHandPass_MsgID_MsgID_MIN = CS_ShowHandPass_MsgID_ID;
const CS_ShowHandPass_MsgID CS_ShowHandPass_MsgID_MsgID_MAX = CS_ShowHandPass_MsgID_ID;
const int CS_ShowHandPass_MsgID_MsgID_ARRAYSIZE = CS_ShowHandPass_MsgID_MsgID_MAX + 1;

const ::google::protobuf::EnumDescriptor* CS_ShowHandPass_MsgID_descriptor();
inline const ::std::string& CS_ShowHandPass_MsgID_Name(CS_ShowHandPass_MsgID value) {
  return ::google::protobuf::internal::NameOfEnum(
    CS_ShowHandPass_MsgID_descriptor(), value);
}
inline bool CS_ShowHandPass_MsgID_Parse(
    const ::std::string& name, CS_ShowHandPass_MsgID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<CS_ShowHandPass_MsgID>(
    CS_ShowHandPass_MsgID_descriptor(), name, value);
}
enum CS_ShowHandGiveUpEixt_MsgID {
  CS_ShowHandGiveUpEixt_MsgID_ID = 17003
};
bool CS_ShowHandGiveUpEixt_MsgID_IsValid(int value);
const CS_ShowHandGiveUpEixt_MsgID CS_ShowHandGiveUpEixt_MsgID_MsgID_MIN = CS_ShowHandGiveUpEixt_MsgID_ID;
const CS_ShowHandGiveUpEixt_MsgID CS_ShowHandGiveUpEixt_MsgID_MsgID_MAX = CS_ShowHandGiveUpEixt_MsgID_ID;
const int CS_ShowHandGiveUpEixt_MsgID_MsgID_ARRAYSIZE = CS_ShowHandGiveUpEixt_MsgID_MsgID_MAX + 1;

const ::google::protobuf::EnumDescriptor* CS_ShowHandGiveUpEixt_MsgID_descriptor();
inline const ::std::string& CS_ShowHandGiveUpEixt_MsgID_Name(CS_ShowHandGiveUpEixt_MsgID value) {
  return ::google::protobuf::internal::NameOfEnum(
    CS_ShowHandGiveUpEixt_MsgID_descriptor(), value);
}
inline bool CS_ShowHandGiveUpEixt_MsgID_Parse(
    const ::std::string& name, CS_ShowHandGiveUpEixt_MsgID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<CS_ShowHandGiveUpEixt_MsgID>(
    CS_ShowHandGiveUpEixt_MsgID_descriptor(), name, value);
}
enum CS_ShowHandMyVoteResult_MsgID {
  CS_ShowHandMyVoteResult_MsgID_ID = 17004
};
bool CS_ShowHandMyVoteResult_MsgID_IsValid(int value);
const CS_ShowHandMyVoteResult_MsgID CS_ShowHandMyVoteResult_MsgID_MsgID_MIN = CS_ShowHandMyVoteResult_MsgID_ID;
const CS_ShowHandMyVoteResult_MsgID CS_ShowHandMyVoteResult_MsgID_MsgID_MAX = CS_ShowHandMyVoteResult_MsgID_ID;
const int CS_ShowHandMyVoteResult_MsgID_MsgID_ARRAYSIZE = CS_ShowHandMyVoteResult_MsgID_MsgID_MAX + 1;

const ::google::protobuf::EnumDescriptor* CS_ShowHandMyVoteResult_MsgID_descriptor();
inline const ::std::string& CS_ShowHandMyVoteResult_MsgID_Name(CS_ShowHandMyVoteResult_MsgID value) {
  return ::google::protobuf::internal::NameOfEnum(
    CS_ShowHandMyVoteResult_MsgID_descriptor(), value);
}
inline bool CS_ShowHandMyVoteResult_MsgID_Parse(
    const ::std::string& name, CS_ShowHandMyVoteResult_MsgID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<CS_ShowHandMyVoteResult_MsgID>(
    CS_ShowHandMyVoteResult_MsgID_descriptor(), name, value);
}
enum SC_ShowHand_Desk_Enter_MsgID {
  SC_ShowHand_Desk_Enter_MsgID_ID = 17100
};
bool SC_ShowHand_Desk_Enter_MsgID_IsValid(int value);
const SC_ShowHand_Desk_Enter_MsgID SC_ShowHand_Desk_Enter_MsgID_MsgID_MIN = SC_ShowHand_Desk_Enter_MsgID_ID;
const SC_ShowHand_Desk_Enter_MsgID SC_ShowHand_Desk_Enter_MsgID_MsgID_MAX = SC_ShowHand_Desk_Enter_MsgID_ID;
const int SC_ShowHand_Desk_Enter_MsgID_MsgID_ARRAYSIZE = SC_ShowHand_Desk_Enter_MsgID_MsgID_MAX + 1;

const ::google::protobuf::EnumDescriptor* SC_ShowHand_Desk_Enter_MsgID_descriptor();
inline const ::std::string& SC_ShowHand_Desk_Enter_MsgID_Name(SC_ShowHand_Desk_Enter_MsgID value) {
  return ::google::protobuf::internal::NameOfEnum(
    SC_ShowHand_Desk_Enter_MsgID_descriptor(), value);
}
inline bool SC_ShowHand_Desk_Enter_MsgID_Parse(
    const ::std::string& name, SC_ShowHand_Desk_Enter_MsgID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<SC_ShowHand_Desk_Enter_MsgID>(
    SC_ShowHand_Desk_Enter_MsgID_descriptor(), name, value);
}
enum SC_ShowHand_Desk_State_MsgID {
  SC_ShowHand_Desk_State_MsgID_ID = 17101
};
bool SC_ShowHand_Desk_State_MsgID_IsValid(int value);
const SC_ShowHand_Desk_State_MsgID SC_ShowHand_Desk_State_MsgID_MsgID_MIN = SC_ShowHand_Desk_State_MsgID_ID;
const SC_ShowHand_Desk_State_MsgID SC_ShowHand_Desk_State_MsgID_MsgID_MAX = SC_ShowHand_Desk_State_MsgID_ID;
const int SC_ShowHand_Desk_State_MsgID_MsgID_ARRAYSIZE = SC_ShowHand_Desk_State_MsgID_MsgID_MAX + 1;

const ::google::protobuf::EnumDescriptor* SC_ShowHand_Desk_State_MsgID_descriptor();
inline const ::std::string& SC_ShowHand_Desk_State_MsgID_Name(SC_ShowHand_Desk_State_MsgID value) {
  return ::google::protobuf::internal::NameOfEnum(
    SC_ShowHand_Desk_State_MsgID_descriptor(), value);
}
inline bool SC_ShowHand_Desk_State_MsgID_Parse(
    const ::std::string& name, SC_ShowHand_Desk_State_MsgID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<SC_ShowHand_Desk_State_MsgID>(
    SC_ShowHand_Desk_State_MsgID_descriptor(), name, value);
}
enum SC_ShowHand_Game_Finish_MsgID {
  SC_ShowHand_Game_Finish_MsgID_ID = 17102
};
bool SC_ShowHand_Game_Finish_MsgID_IsValid(int value);
const SC_ShowHand_Game_Finish_MsgID SC_ShowHand_Game_Finish_MsgID_MsgID_MIN = SC_ShowHand_Game_Finish_MsgID_ID;
const SC_ShowHand_Game_Finish_MsgID SC_ShowHand_Game_Finish_MsgID_MsgID_MAX = SC_ShowHand_Game_Finish_MsgID_ID;
const int SC_ShowHand_Game_Finish_MsgID_MsgID_ARRAYSIZE = SC_ShowHand_Game_Finish_MsgID_MsgID_MAX + 1;

const ::google::protobuf::EnumDescriptor* SC_ShowHand_Game_Finish_MsgID_descriptor();
inline const ::std::string& SC_ShowHand_Game_Finish_MsgID_Name(SC_ShowHand_Game_Finish_MsgID value) {
  return ::google::protobuf::internal::NameOfEnum(
    SC_ShowHand_Game_Finish_MsgID_descriptor(), value);
}
inline bool SC_ShowHand_Game_Finish_MsgID_Parse(
    const ::std::string& name, SC_ShowHand_Game_Finish_MsgID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<SC_ShowHand_Game_Finish_MsgID>(
    SC_ShowHand_Game_Finish_MsgID_descriptor(), name, value);
}
enum SC_ShowHand_Next_Round_MsgID {
  SC_ShowHand_Next_Round_MsgID_ID = 17103
};
bool SC_ShowHand_Next_Round_MsgID_IsValid(int value);
const SC_ShowHand_Next_Round_MsgID SC_ShowHand_Next_Round_MsgID_MsgID_MIN = SC_ShowHand_Next_Round_MsgID_ID;
const SC_ShowHand_Next_Round_MsgID SC_ShowHand_Next_Round_MsgID_MsgID_MAX = SC_ShowHand_Next_Round_MsgID_ID;
const int SC_ShowHand_Next_Round_MsgID_MsgID_ARRAYSIZE = SC_ShowHand_Next_Round_MsgID_MsgID_MAX + 1;

const ::google::protobuf::EnumDescriptor* SC_ShowHand_Next_Round_MsgID_descriptor();
inline const ::std::string& SC_ShowHand_Next_Round_MsgID_Name(SC_ShowHand_Next_Round_MsgID value) {
  return ::google::protobuf::internal::NameOfEnum(
    SC_ShowHand_Next_Round_MsgID_descriptor(), value);
}
inline bool SC_ShowHand_Next_Round_MsgID_Parse(
    const ::std::string& name, SC_ShowHand_Next_Round_MsgID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<SC_ShowHand_Next_Round_MsgID>(
    SC_ShowHand_Next_Round_MsgID_descriptor(), name, value);
}
enum SC_ShowHandAddScore_MsgID {
  SC_ShowHandAddScore_MsgID_ID = 17104
};
bool SC_ShowHandAddScore_MsgID_IsValid(int value);
const SC_ShowHandAddScore_MsgID SC_ShowHandAddScore_MsgID_MsgID_MIN = SC_ShowHandAddScore_MsgID_ID;
const SC_ShowHandAddScore_MsgID SC_ShowHandAddScore_MsgID_MsgID_MAX = SC_ShowHandAddScore_MsgID_ID;
const int SC_ShowHandAddScore_MsgID_MsgID_ARRAYSIZE = SC_ShowHandAddScore_MsgID_MsgID_MAX + 1;

const ::google::protobuf::EnumDescriptor* SC_ShowHandAddScore_MsgID_descriptor();
inline const ::std::string& SC_ShowHandAddScore_MsgID_Name(SC_ShowHandAddScore_MsgID value) {
  return ::google::protobuf::internal::NameOfEnum(
    SC_ShowHandAddScore_MsgID_descriptor(), value);
}
inline bool SC_ShowHandAddScore_MsgID_Parse(
    const ::std::string& name, SC_ShowHandAddScore_MsgID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<SC_ShowHandAddScore_MsgID>(
    SC_ShowHandAddScore_MsgID_descriptor(), name, value);
}
enum SC_ShowHandGiveUp_MsgID {
  SC_ShowHandGiveUp_MsgID_ID = 17105
};
bool SC_ShowHandGiveUp_MsgID_IsValid(int value);
const SC_ShowHandGiveUp_MsgID SC_ShowHandGiveUp_MsgID_MsgID_MIN = SC_ShowHandGiveUp_MsgID_ID;
const SC_ShowHandGiveUp_MsgID SC_ShowHandGiveUp_MsgID_MsgID_MAX = SC_ShowHandGiveUp_MsgID_ID;
const int SC_ShowHandGiveUp_MsgID_MsgID_ARRAYSIZE = SC_ShowHandGiveUp_MsgID_MsgID_MAX + 1;

const ::google::protobuf::EnumDescriptor* SC_ShowHandGiveUp_MsgID_descriptor();
inline const ::std::string& SC_ShowHandGiveUp_MsgID_Name(SC_ShowHandGiveUp_MsgID value) {
  return ::google::protobuf::internal::NameOfEnum(
    SC_ShowHandGiveUp_MsgID_descriptor(), value);
}
inline bool SC_ShowHandGiveUp_MsgID_Parse(
    const ::std::string& name, SC_ShowHandGiveUp_MsgID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<SC_ShowHandGiveUp_MsgID>(
    SC_ShowHandGiveUp_MsgID_descriptor(), name, value);
}
enum SC_ShowHandPass_MsgID {
  SC_ShowHandPass_MsgID_ID = 17106
};
bool SC_ShowHandPass_MsgID_IsValid(int value);
const SC_ShowHandPass_MsgID SC_ShowHandPass_MsgID_MsgID_MIN = SC_ShowHandPass_MsgID_ID;
const SC_ShowHandPass_MsgID SC_ShowHandPass_MsgID_MsgID_MAX = SC_ShowHandPass_MsgID_ID;
const int SC_ShowHandPass_MsgID_MsgID_ARRAYSIZE = SC_ShowHandPass_MsgID_MsgID_MAX + 1;

const ::google::protobuf::EnumDescriptor* SC_ShowHandPass_MsgID_descriptor();
inline const ::std::string& SC_ShowHandPass_MsgID_Name(SC_ShowHandPass_MsgID value) {
  return ::google::protobuf::internal::NameOfEnum(
    SC_ShowHandPass_MsgID_descriptor(), value);
}
inline bool SC_ShowHandPass_MsgID_Parse(
    const ::std::string& name, SC_ShowHandPass_MsgID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<SC_ShowHandPass_MsgID>(
    SC_ShowHandPass_MsgID_descriptor(), name, value);
}
enum SC_ShowHand_NextTurn_MsgID {
  SC_ShowHand_NextTurn_MsgID_ID = 17107
};
bool SC_ShowHand_NextTurn_MsgID_IsValid(int value);
const SC_ShowHand_NextTurn_MsgID SC_ShowHand_NextTurn_MsgID_MsgID_MIN = SC_ShowHand_NextTurn_MsgID_ID;
const SC_ShowHand_NextTurn_MsgID SC_ShowHand_NextTurn_MsgID_MsgID_MAX = SC_ShowHand_NextTurn_MsgID_ID;
const int SC_ShowHand_NextTurn_MsgID_MsgID_ARRAYSIZE = SC_ShowHand_NextTurn_MsgID_MsgID_MAX + 1;

const ::google::protobuf::EnumDescriptor* SC_ShowHand_NextTurn_MsgID_descriptor();
inline const ::std::string& SC_ShowHand_NextTurn_MsgID_Name(SC_ShowHand_NextTurn_MsgID value) {
  return ::google::protobuf::internal::NameOfEnum(
    SC_ShowHand_NextTurn_MsgID_descriptor(), value);
}
inline bool SC_ShowHand_NextTurn_MsgID_Parse(
    const ::std::string& name, SC_ShowHand_NextTurn_MsgID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<SC_ShowHand_NextTurn_MsgID>(
    SC_ShowHand_NextTurn_MsgID_descriptor(), name, value);
}
enum SC_ShowHandStartVote_MsgID {
  SC_ShowHandStartVote_MsgID_ID = 17004
};
bool SC_ShowHandStartVote_MsgID_IsValid(int value);
const SC_ShowHandStartVote_MsgID SC_ShowHandStartVote_MsgID_MsgID_MIN = SC_ShowHandStartVote_MsgID_ID;
const SC_ShowHandStartVote_MsgID SC_ShowHandStartVote_MsgID_MsgID_MAX = SC_ShowHandStartVote_MsgID_ID;
const int SC_ShowHandStartVote_MsgID_MsgID_ARRAYSIZE = SC_ShowHandStartVote_MsgID_MsgID_MAX + 1;

const ::google::protobuf::EnumDescriptor* SC_ShowHandStartVote_MsgID_descriptor();
inline const ::std::string& SC_ShowHandStartVote_MsgID_Name(SC_ShowHandStartVote_MsgID value) {
  return ::google::protobuf::internal::NameOfEnum(
    SC_ShowHandStartVote_MsgID_descriptor(), value);
}
inline bool SC_ShowHandStartVote_MsgID_Parse(
    const ::std::string& name, SC_ShowHandStartVote_MsgID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<SC_ShowHandStartVote_MsgID>(
    SC_ShowHandStartVote_MsgID_descriptor(), name, value);
}
enum SC_ShowHandPlayerVoteRes_MsgID {
  SC_ShowHandPlayerVoteRes_MsgID_ID = 17004
};
bool SC_ShowHandPlayerVoteRes_MsgID_IsValid(int value);
const SC_ShowHandPlayerVoteRes_MsgID SC_ShowHandPlayerVoteRes_MsgID_MsgID_MIN = SC_ShowHandPlayerVoteRes_MsgID_ID;
const SC_ShowHandPlayerVoteRes_MsgID SC_ShowHandPlayerVoteRes_MsgID_MsgID_MAX = SC_ShowHandPlayerVoteRes_MsgID_ID;
const int SC_ShowHandPlayerVoteRes_MsgID_MsgID_ARRAYSIZE = SC_ShowHandPlayerVoteRes_MsgID_MsgID_MAX + 1;

const ::google::protobuf::EnumDescriptor* SC_ShowHandPlayerVoteRes_MsgID_descriptor();
inline const ::std::string& SC_ShowHandPlayerVoteRes_MsgID_Name(SC_ShowHandPlayerVoteRes_MsgID value) {
  return ::google::protobuf::internal::NameOfEnum(
    SC_ShowHandPlayerVoteRes_MsgID_descriptor(), value);
}
inline bool SC_ShowHandPlayerVoteRes_MsgID_Parse(
    const ::std::string& name, SC_ShowHandPlayerVoteRes_MsgID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<SC_ShowHandPlayerVoteRes_MsgID>(
    SC_ShowHandPlayerVoteRes_MsgID_descriptor(), name, value);
}
// ===================================================================

class CS_ShowHandAddScore : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:CS_ShowHandAddScore) */ {
 public:
  CS_ShowHandAddScore();
  virtual ~CS_ShowHandAddScore();

  CS_ShowHandAddScore(const CS_ShowHandAddScore& from);

  inline CS_ShowHandAddScore& operator=(const CS_ShowHandAddScore& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CS_ShowHandAddScore& default_instance();

  static inline const CS_ShowHandAddScore* internal_default_instance() {
    return reinterpret_cast<const CS_ShowHandAddScore*>(
               &_CS_ShowHandAddScore_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    0;

  void Swap(CS_ShowHandAddScore* other);

  // implements Message ----------------------------------------------

  inline CS_ShowHandAddScore* New() const PROTOBUF_FINAL { return New(NULL); }

  CS_ShowHandAddScore* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const CS_ShowHandAddScore& from);
  void MergeFrom(const CS_ShowHandAddScore& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(CS_ShowHandAddScore* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  typedef CS_ShowHandAddScore_MsgID MsgID;
  static const MsgID ID =
    CS_ShowHandAddScore_MsgID_ID;
  static inline bool MsgID_IsValid(int value) {
    return CS_ShowHandAddScore_MsgID_IsValid(value);
  }
  static const MsgID MsgID_MIN =
    CS_ShowHandAddScore_MsgID_MsgID_MIN;
  static const MsgID MsgID_MAX =
    CS_ShowHandAddScore_MsgID_MsgID_MAX;
  static const int MsgID_ARRAYSIZE =
    CS_ShowHandAddScore_MsgID_MsgID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  MsgID_descriptor() {
    return CS_ShowHandAddScore_MsgID_descriptor();
  }
  static inline const ::std::string& MsgID_Name(MsgID value) {
    return CS_ShowHandAddScore_MsgID_Name(value);
  }
  static inline bool MsgID_Parse(const ::std::string& name,
      MsgID* value) {
    return CS_ShowHandAddScore_MsgID_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional int32 target = 1;
  bool has_target() const;
  void clear_target();
  static const int kTargetFieldNumber = 1;
  ::google::protobuf::int32 target() const;
  void set_target(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:CS_ShowHandAddScore)
 private:
  void set_has_target();
  void clear_has_target();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::int32 target_;
  friend struct protobuf_public_5fshowhand_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class CS_ShowHandGiveUp : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:CS_ShowHandGiveUp) */ {
 public:
  CS_ShowHandGiveUp();
  virtual ~CS_ShowHandGiveUp();

  CS_ShowHandGiveUp(const CS_ShowHandGiveUp& from);

  inline CS_ShowHandGiveUp& operator=(const CS_ShowHandGiveUp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CS_ShowHandGiveUp& default_instance();

  static inline const CS_ShowHandGiveUp* internal_default_instance() {
    return reinterpret_cast<const CS_ShowHandGiveUp*>(
               &_CS_ShowHandGiveUp_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    1;

  void Swap(CS_ShowHandGiveUp* other);

  // implements Message ----------------------------------------------

  inline CS_ShowHandGiveUp* New() const PROTOBUF_FINAL { return New(NULL); }

  CS_ShowHandGiveUp* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const CS_ShowHandGiveUp& from);
  void MergeFrom(const CS_ShowHandGiveUp& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(CS_ShowHandGiveUp* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  typedef CS_ShowHandGiveUp_MsgID MsgID;
  static const MsgID ID =
    CS_ShowHandGiveUp_MsgID_ID;
  static inline bool MsgID_IsValid(int value) {
    return CS_ShowHandGiveUp_MsgID_IsValid(value);
  }
  static const MsgID MsgID_MIN =
    CS_ShowHandGiveUp_MsgID_MsgID_MIN;
  static const MsgID MsgID_MAX =
    CS_ShowHandGiveUp_MsgID_MsgID_MAX;
  static const int MsgID_ARRAYSIZE =
    CS_ShowHandGiveUp_MsgID_MsgID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  MsgID_descriptor() {
    return CS_ShowHandGiveUp_MsgID_descriptor();
  }
  static inline const ::std::string& MsgID_Name(MsgID value) {
    return CS_ShowHandGiveUp_MsgID_Name(value);
  }
  static inline bool MsgID_Parse(const ::std::string& name,
      MsgID* value) {
    return CS_ShowHandGiveUp_MsgID_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:CS_ShowHandGiveUp)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  friend struct protobuf_public_5fshowhand_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class CS_ShowHandPass : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:CS_ShowHandPass) */ {
 public:
  CS_ShowHandPass();
  virtual ~CS_ShowHandPass();

  CS_ShowHandPass(const CS_ShowHandPass& from);

  inline CS_ShowHandPass& operator=(const CS_ShowHandPass& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CS_ShowHandPass& default_instance();

  static inline const CS_ShowHandPass* internal_default_instance() {
    return reinterpret_cast<const CS_ShowHandPass*>(
               &_CS_ShowHandPass_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    2;

  void Swap(CS_ShowHandPass* other);

  // implements Message ----------------------------------------------

  inline CS_ShowHandPass* New() const PROTOBUF_FINAL { return New(NULL); }

  CS_ShowHandPass* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const CS_ShowHandPass& from);
  void MergeFrom(const CS_ShowHandPass& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(CS_ShowHandPass* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  typedef CS_ShowHandPass_MsgID MsgID;
  static const MsgID ID =
    CS_ShowHandPass_MsgID_ID;
  static inline bool MsgID_IsValid(int value) {
    return CS_ShowHandPass_MsgID_IsValid(value);
  }
  static const MsgID MsgID_MIN =
    CS_ShowHandPass_MsgID_MsgID_MIN;
  static const MsgID MsgID_MAX =
    CS_ShowHandPass_MsgID_MsgID_MAX;
  static const int MsgID_ARRAYSIZE =
    CS_ShowHandPass_MsgID_MsgID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  MsgID_descriptor() {
    return CS_ShowHandPass_MsgID_descriptor();
  }
  static inline const ::std::string& MsgID_Name(MsgID value) {
    return CS_ShowHandPass_MsgID_Name(value);
  }
  static inline bool MsgID_Parse(const ::std::string& name,
      MsgID* value) {
    return CS_ShowHandPass_MsgID_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:CS_ShowHandPass)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  friend struct protobuf_public_5fshowhand_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class CS_ShowHandGiveUpEixt : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:CS_ShowHandGiveUpEixt) */ {
 public:
  CS_ShowHandGiveUpEixt();
  virtual ~CS_ShowHandGiveUpEixt();

  CS_ShowHandGiveUpEixt(const CS_ShowHandGiveUpEixt& from);

  inline CS_ShowHandGiveUpEixt& operator=(const CS_ShowHandGiveUpEixt& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CS_ShowHandGiveUpEixt& default_instance();

  static inline const CS_ShowHandGiveUpEixt* internal_default_instance() {
    return reinterpret_cast<const CS_ShowHandGiveUpEixt*>(
               &_CS_ShowHandGiveUpEixt_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    3;

  void Swap(CS_ShowHandGiveUpEixt* other);

  // implements Message ----------------------------------------------

  inline CS_ShowHandGiveUpEixt* New() const PROTOBUF_FINAL { return New(NULL); }

  CS_ShowHandGiveUpEixt* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const CS_ShowHandGiveUpEixt& from);
  void MergeFrom(const CS_ShowHandGiveUpEixt& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(CS_ShowHandGiveUpEixt* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  typedef CS_ShowHandGiveUpEixt_MsgID MsgID;
  static const MsgID ID =
    CS_ShowHandGiveUpEixt_MsgID_ID;
  static inline bool MsgID_IsValid(int value) {
    return CS_ShowHandGiveUpEixt_MsgID_IsValid(value);
  }
  static const MsgID MsgID_MIN =
    CS_ShowHandGiveUpEixt_MsgID_MsgID_MIN;
  static const MsgID MsgID_MAX =
    CS_ShowHandGiveUpEixt_MsgID_MsgID_MAX;
  static const int MsgID_ARRAYSIZE =
    CS_ShowHandGiveUpEixt_MsgID_MsgID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  MsgID_descriptor() {
    return CS_ShowHandGiveUpEixt_MsgID_descriptor();
  }
  static inline const ::std::string& MsgID_Name(MsgID value) {
    return CS_ShowHandGiveUpEixt_MsgID_Name(value);
  }
  static inline bool MsgID_Parse(const ::std::string& name,
      MsgID* value) {
    return CS_ShowHandGiveUpEixt_MsgID_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:CS_ShowHandGiveUpEixt)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  friend struct protobuf_public_5fshowhand_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class CS_ShowHandMyVoteResult : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:CS_ShowHandMyVoteResult) */ {
 public:
  CS_ShowHandMyVoteResult();
  virtual ~CS_ShowHandMyVoteResult();

  CS_ShowHandMyVoteResult(const CS_ShowHandMyVoteResult& from);

  inline CS_ShowHandMyVoteResult& operator=(const CS_ShowHandMyVoteResult& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CS_ShowHandMyVoteResult& default_instance();

  static inline const CS_ShowHandMyVoteResult* internal_default_instance() {
    return reinterpret_cast<const CS_ShowHandMyVoteResult*>(
               &_CS_ShowHandMyVoteResult_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    4;

  void Swap(CS_ShowHandMyVoteResult* other);

  // implements Message ----------------------------------------------

  inline CS_ShowHandMyVoteResult* New() const PROTOBUF_FINAL { return New(NULL); }

  CS_ShowHandMyVoteResult* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const CS_ShowHandMyVoteResult& from);
  void MergeFrom(const CS_ShowHandMyVoteResult& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(CS_ShowHandMyVoteResult* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  typedef CS_ShowHandMyVoteResult_MsgID MsgID;
  static const MsgID ID =
    CS_ShowHandMyVoteResult_MsgID_ID;
  static inline bool MsgID_IsValid(int value) {
    return CS_ShowHandMyVoteResult_MsgID_IsValid(value);
  }
  static const MsgID MsgID_MIN =
    CS_ShowHandMyVoteResult_MsgID_MsgID_MIN;
  static const MsgID MsgID_MAX =
    CS_ShowHandMyVoteResult_MsgID_MsgID_MAX;
  static const int MsgID_ARRAYSIZE =
    CS_ShowHandMyVoteResult_MsgID_MsgID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  MsgID_descriptor() {
    return CS_ShowHandMyVoteResult_MsgID_descriptor();
  }
  static inline const ::std::string& MsgID_Name(MsgID value) {
    return CS_ShowHandMyVoteResult_MsgID_Name(value);
  }
  static inline bool MsgID_Parse(const ::std::string& name,
      MsgID* value) {
    return CS_ShowHandMyVoteResult_MsgID_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional bool agreen = 1;
  bool has_agreen() const;
  void clear_agreen();
  static const int kAgreenFieldNumber = 1;
  bool agreen() const;
  void set_agreen(bool value);

  // @@protoc_insertion_point(class_scope:CS_ShowHandMyVoteResult)
 private:
  void set_has_agreen();
  void clear_has_agreen();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  bool agreen_;
  friend struct protobuf_public_5fshowhand_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ShowHand_Player_Info : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ShowHand_Player_Info) */ {
 public:
  ShowHand_Player_Info();
  virtual ~ShowHand_Player_Info();

  ShowHand_Player_Info(const ShowHand_Player_Info& from);

  inline ShowHand_Player_Info& operator=(const ShowHand_Player_Info& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ShowHand_Player_Info& default_instance();

  static inline const ShowHand_Player_Info* internal_default_instance() {
    return reinterpret_cast<const ShowHand_Player_Info*>(
               &_ShowHand_Player_Info_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    5;

  void Swap(ShowHand_Player_Info* other);

  // implements Message ----------------------------------------------

  inline ShowHand_Player_Info* New() const PROTOBUF_FINAL { return New(NULL); }

  ShowHand_Player_Info* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const ShowHand_Player_Info& from);
  void MergeFrom(const ShowHand_Player_Info& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(ShowHand_Player_Info* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated int32 tiles = 1;
  int tiles_size() const;
  void clear_tiles();
  static const int kTilesFieldNumber = 1;
  ::google::protobuf::int32 tiles(int index) const;
  void set_tiles(int index, ::google::protobuf::int32 value);
  void add_tiles(::google::protobuf::int32 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      tiles() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_tiles();

  // optional string nick = 5;
  bool has_nick() const;
  void clear_nick();
  static const int kNickFieldNumber = 5;
  const ::std::string& nick() const;
  void set_nick(const ::std::string& value);
  #if LANG_CXX11
  void set_nick(::std::string&& value);
  #endif
  void set_nick(const char* value);
  void set_nick(const char* value, size_t size);
  ::std::string* mutable_nick();
  ::std::string* release_nick();
  void set_allocated_nick(::std::string* nick);

  // optional int32 chair_id = 2;
  bool has_chair_id() const;
  void clear_chair_id();
  static const int kChairIdFieldNumber = 2;
  ::google::protobuf::int32 chair_id() const;
  void set_chair_id(::google::protobuf::int32 value);

  // optional int32 add_total = 3;
  bool has_add_total() const;
  void clear_add_total();
  static const int kAddTotalFieldNumber = 3;
  ::google::protobuf::int32 add_total() const;
  void set_add_total(::google::protobuf::int32 value);

  // optional int32 cur_round_add = 4;
  bool has_cur_round_add() const;
  void clear_cur_round_add();
  static const int kCurRoundAddFieldNumber = 4;
  ::google::protobuf::int32 cur_round_add() const;
  void set_cur_round_add(::google::protobuf::int32 value);

  // optional int32 icon = 6;
  bool has_icon() const;
  void clear_icon();
  static const int kIconFieldNumber = 6;
  ::google::protobuf::int32 icon() const;
  void set_icon(::google::protobuf::int32 value);

  // optional int64 gold = 7;
  bool has_gold() const;
  void clear_gold();
  static const int kGoldFieldNumber = 7;
  ::google::protobuf::int64 gold() const;
  void set_gold(::google::protobuf::int64 value);

  // optional int32 guid = 8;
  bool has_guid() const;
  void clear_guid();
  static const int kGuidFieldNumber = 8;
  ::google::protobuf::int32 guid() const;
  void set_guid(::google::protobuf::int32 value);

  // optional int32 win_money = 10;
  bool has_win_money() const;
  void clear_win_money();
  static const int kWinMoneyFieldNumber = 10;
  ::google::protobuf::int32 win_money() const;
  void set_win_money(::google::protobuf::int32 value);

  // optional bool is_win = 9;
  bool has_is_win() const;
  void clear_is_win();
  static const int kIsWinFieldNumber = 9;
  bool is_win() const;
  void set_is_win(bool value);

  // optional bool is_give_up = 12;
  bool has_is_give_up() const;
  void clear_is_give_up();
  static const int kIsGiveUpFieldNumber = 12;
  bool is_give_up() const;
  void set_is_give_up(bool value);

  // optional int32 taxes = 11;
  bool has_taxes() const;
  void clear_taxes();
  static const int kTaxesFieldNumber = 11;
  ::google::protobuf::int32 taxes() const;
  void set_taxes(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:ShowHand_Player_Info)
 private:
  void set_has_chair_id();
  void clear_has_chair_id();
  void set_has_add_total();
  void clear_has_add_total();
  void set_has_cur_round_add();
  void clear_has_cur_round_add();
  void set_has_nick();
  void clear_has_nick();
  void set_has_icon();
  void clear_has_icon();
  void set_has_gold();
  void clear_has_gold();
  void set_has_guid();
  void clear_has_guid();
  void set_has_is_win();
  void clear_has_is_win();
  void set_has_win_money();
  void clear_has_win_money();
  void set_has_taxes();
  void clear_has_taxes();
  void set_has_is_give_up();
  void clear_has_is_give_up();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > tiles_;
  ::google::protobuf::internal::ArenaStringPtr nick_;
  ::google::protobuf::int32 chair_id_;
  ::google::protobuf::int32 add_total_;
  ::google::protobuf::int32 cur_round_add_;
  ::google::protobuf::int32 icon_;
  ::google::protobuf::int64 gold_;
  ::google::protobuf::int32 guid_;
  ::google::protobuf::int32 win_money_;
  bool is_win_;
  bool is_give_up_;
  ::google::protobuf::int32 taxes_;
  friend struct protobuf_public_5fshowhand_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ShowHand_Reconnect_Data : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ShowHand_Reconnect_Data) */ {
 public:
  ShowHand_Reconnect_Data();
  virtual ~ShowHand_Reconnect_Data();

  ShowHand_Reconnect_Data(const ShowHand_Reconnect_Data& from);

  inline ShowHand_Reconnect_Data& operator=(const ShowHand_Reconnect_Data& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ShowHand_Reconnect_Data& default_instance();

  static inline const ShowHand_Reconnect_Data* internal_default_instance() {
    return reinterpret_cast<const ShowHand_Reconnect_Data*>(
               &_ShowHand_Reconnect_Data_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    6;

  void Swap(ShowHand_Reconnect_Data* other);

  // implements Message ----------------------------------------------

  inline ShowHand_Reconnect_Data* New() const PROTOBUF_FINAL { return New(NULL); }

  ShowHand_Reconnect_Data* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const ShowHand_Reconnect_Data& from);
  void MergeFrom(const ShowHand_Reconnect_Data& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(ShowHand_Reconnect_Data* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 act_left_time = 1;
  bool has_act_left_time() const;
  void clear_act_left_time();
  static const int kActLeftTimeFieldNumber = 1;
  ::google::protobuf::int32 act_left_time() const;
  void set_act_left_time(::google::protobuf::int32 value);

  // optional int32 vote_chair_id = 2;
  bool has_vote_chair_id() const;
  void clear_vote_chair_id();
  static const int kVoteChairIdFieldNumber = 2;
  ::google::protobuf::int32 vote_chair_id() const;
  void set_vote_chair_id(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:ShowHand_Reconnect_Data)
 private:
  void set_has_act_left_time();
  void clear_has_act_left_time();
  void set_has_vote_chair_id();
  void clear_has_vote_chair_id();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::int32 act_left_time_;
  ::google::protobuf::int32 vote_chair_id_;
  friend struct protobuf_public_5fshowhand_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class SC_ShowHand_Desk_Enter : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:SC_ShowHand_Desk_Enter) */ {
 public:
  SC_ShowHand_Desk_Enter();
  virtual ~SC_ShowHand_Desk_Enter();

  SC_ShowHand_Desk_Enter(const SC_ShowHand_Desk_Enter& from);

  inline SC_ShowHand_Desk_Enter& operator=(const SC_ShowHand_Desk_Enter& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SC_ShowHand_Desk_Enter& default_instance();

  static inline const SC_ShowHand_Desk_Enter* internal_default_instance() {
    return reinterpret_cast<const SC_ShowHand_Desk_Enter*>(
               &_SC_ShowHand_Desk_Enter_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    7;

  void Swap(SC_ShowHand_Desk_Enter* other);

  // implements Message ----------------------------------------------

  inline SC_ShowHand_Desk_Enter* New() const PROTOBUF_FINAL { return New(NULL); }

  SC_ShowHand_Desk_Enter* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const SC_ShowHand_Desk_Enter& from);
  void MergeFrom(const SC_ShowHand_Desk_Enter& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(SC_ShowHand_Desk_Enter* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  typedef SC_ShowHand_Desk_Enter_MsgID MsgID;
  static const MsgID ID =
    SC_ShowHand_Desk_Enter_MsgID_ID;
  static inline bool MsgID_IsValid(int value) {
    return SC_ShowHand_Desk_Enter_MsgID_IsValid(value);
  }
  static const MsgID MsgID_MIN =
    SC_ShowHand_Desk_Enter_MsgID_MsgID_MIN;
  static const MsgID MsgID_MAX =
    SC_ShowHand_Desk_Enter_MsgID_MsgID_MAX;
  static const int MsgID_ARRAYSIZE =
    SC_ShowHand_Desk_Enter_MsgID_MsgID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  MsgID_descriptor() {
    return SC_ShowHand_Desk_Enter_MsgID_descriptor();
  }
  static inline const ::std::string& MsgID_Name(MsgID value) {
    return SC_ShowHand_Desk_Enter_MsgID_Name(value);
  }
  static inline bool MsgID_Parse(const ::std::string& name,
      MsgID* value) {
    return SC_ShowHand_Desk_Enter_MsgID_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // repeated .ShowHand_Player_Info pb_players = 1;
  int pb_players_size() const;
  void clear_pb_players();
  static const int kPbPlayersFieldNumber = 1;
  const ::ShowHand_Player_Info& pb_players(int index) const;
  ::ShowHand_Player_Info* mutable_pb_players(int index);
  ::ShowHand_Player_Info* add_pb_players();
  ::google::protobuf::RepeatedPtrField< ::ShowHand_Player_Info >*
      mutable_pb_players();
  const ::google::protobuf::RepeatedPtrField< ::ShowHand_Player_Info >&
      pb_players() const;

  // optional .ShowHand_Reconnect_Data pb_rec_data = 9;
  bool has_pb_rec_data() const;
  void clear_pb_rec_data();
  static const int kPbRecDataFieldNumber = 9;
  const ::ShowHand_Reconnect_Data& pb_rec_data() const;
  ::ShowHand_Reconnect_Data* mutable_pb_rec_data();
  ::ShowHand_Reconnect_Data* release_pb_rec_data();
  void set_allocated_pb_rec_data(::ShowHand_Reconnect_Data* pb_rec_data);

  // optional int32 state = 2;
  bool has_state() const;
  void clear_state();
  static const int kStateFieldNumber = 2;
  ::google::protobuf::int32 state() const;
  void set_state(::google::protobuf::int32 value);

  // optional int32 zhuang = 3;
  bool has_zhuang() const;
  void clear_zhuang();
  static const int kZhuangFieldNumber = 3;
  ::google::protobuf::int32 zhuang() const;
  void set_zhuang(::google::protobuf::int32 value);

  // optional int32 self_chair_id = 4;
  bool has_self_chair_id() const;
  void clear_self_chair_id();
  static const int kSelfChairIdFieldNumber = 4;
  ::google::protobuf::int32 self_chair_id() const;
  void set_self_chair_id(::google::protobuf::int32 value);

  // optional int32 act_time_limit = 5;
  bool has_act_time_limit() const;
  void clear_act_time_limit();
  static const int kActTimeLimitFieldNumber = 5;
  ::google::protobuf::int32 act_time_limit() const;
  void set_act_time_limit(::google::protobuf::int32 value);

  // optional bool is_reconnect = 6;
  bool has_is_reconnect() const;
  void clear_is_reconnect();
  static const int kIsReconnectFieldNumber = 6;
  bool is_reconnect() const;
  void set_is_reconnect(bool value);

  // optional int32 base_score = 7;
  bool has_base_score() const;
  void clear_base_score();
  static const int kBaseScoreFieldNumber = 7;
  ::google::protobuf::int32 base_score() const;
  void set_base_score(::google::protobuf::int32 value);

  // optional int32 max_call = 8;
  bool has_max_call() const;
  void clear_max_call();
  static const int kMaxCallFieldNumber = 8;
  ::google::protobuf::int32 max_call() const;
  void set_max_call(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:SC_ShowHand_Desk_Enter)
 private:
  void set_has_state();
  void clear_has_state();
  void set_has_zhuang();
  void clear_has_zhuang();
  void set_has_self_chair_id();
  void clear_has_self_chair_id();
  void set_has_act_time_limit();
  void clear_has_act_time_limit();
  void set_has_is_reconnect();
  void clear_has_is_reconnect();
  void set_has_base_score();
  void clear_has_base_score();
  void set_has_max_call();
  void clear_has_max_call();
  void set_has_pb_rec_data();
  void clear_has_pb_rec_data();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::ShowHand_Player_Info > pb_players_;
  ::ShowHand_Reconnect_Data* pb_rec_data_;
  ::google::protobuf::int32 state_;
  ::google::protobuf::int32 zhuang_;
  ::google::protobuf::int32 self_chair_id_;
  ::google::protobuf::int32 act_time_limit_;
  bool is_reconnect_;
  ::google::protobuf::int32 base_score_;
  ::google::protobuf::int32 max_call_;
  friend struct protobuf_public_5fshowhand_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class SC_ShowHand_Desk_State : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:SC_ShowHand_Desk_State) */ {
 public:
  SC_ShowHand_Desk_State();
  virtual ~SC_ShowHand_Desk_State();

  SC_ShowHand_Desk_State(const SC_ShowHand_Desk_State& from);

  inline SC_ShowHand_Desk_State& operator=(const SC_ShowHand_Desk_State& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SC_ShowHand_Desk_State& default_instance();

  static inline const SC_ShowHand_Desk_State* internal_default_instance() {
    return reinterpret_cast<const SC_ShowHand_Desk_State*>(
               &_SC_ShowHand_Desk_State_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    8;

  void Swap(SC_ShowHand_Desk_State* other);

  // implements Message ----------------------------------------------

  inline SC_ShowHand_Desk_State* New() const PROTOBUF_FINAL { return New(NULL); }

  SC_ShowHand_Desk_State* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const SC_ShowHand_Desk_State& from);
  void MergeFrom(const SC_ShowHand_Desk_State& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(SC_ShowHand_Desk_State* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  typedef SC_ShowHand_Desk_State_MsgID MsgID;
  static const MsgID ID =
    SC_ShowHand_Desk_State_MsgID_ID;
  static inline bool MsgID_IsValid(int value) {
    return SC_ShowHand_Desk_State_MsgID_IsValid(value);
  }
  static const MsgID MsgID_MIN =
    SC_ShowHand_Desk_State_MsgID_MsgID_MIN;
  static const MsgID MsgID_MAX =
    SC_ShowHand_Desk_State_MsgID_MsgID_MAX;
  static const int MsgID_ARRAYSIZE =
    SC_ShowHand_Desk_State_MsgID_MsgID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  MsgID_descriptor() {
    return SC_ShowHand_Desk_State_MsgID_descriptor();
  }
  static inline const ::std::string& MsgID_Name(MsgID value) {
    return SC_ShowHand_Desk_State_MsgID_Name(value);
  }
  static inline bool MsgID_Parse(const ::std::string& name,
      MsgID* value) {
    return SC_ShowHand_Desk_State_MsgID_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional int32 state = 1;
  bool has_state() const;
  void clear_state();
  static const int kStateFieldNumber = 1;
  ::google::protobuf::int32 state() const;
  void set_state(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:SC_ShowHand_Desk_State)
 private:
  void set_has_state();
  void clear_has_state();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::int32 state_;
  friend struct protobuf_public_5fshowhand_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class SC_ShowHand_Game_Finish : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:SC_ShowHand_Game_Finish) */ {
 public:
  SC_ShowHand_Game_Finish();
  virtual ~SC_ShowHand_Game_Finish();

  SC_ShowHand_Game_Finish(const SC_ShowHand_Game_Finish& from);

  inline SC_ShowHand_Game_Finish& operator=(const SC_ShowHand_Game_Finish& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SC_ShowHand_Game_Finish& default_instance();

  static inline const SC_ShowHand_Game_Finish* internal_default_instance() {
    return reinterpret_cast<const SC_ShowHand_Game_Finish*>(
               &_SC_ShowHand_Game_Finish_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    9;

  void Swap(SC_ShowHand_Game_Finish* other);

  // implements Message ----------------------------------------------

  inline SC_ShowHand_Game_Finish* New() const PROTOBUF_FINAL { return New(NULL); }

  SC_ShowHand_Game_Finish* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const SC_ShowHand_Game_Finish& from);
  void MergeFrom(const SC_ShowHand_Game_Finish& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(SC_ShowHand_Game_Finish* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  typedef SC_ShowHand_Game_Finish_MsgID MsgID;
  static const MsgID ID =
    SC_ShowHand_Game_Finish_MsgID_ID;
  static inline bool MsgID_IsValid(int value) {
    return SC_ShowHand_Game_Finish_MsgID_IsValid(value);
  }
  static const MsgID MsgID_MIN =
    SC_ShowHand_Game_Finish_MsgID_MsgID_MIN;
  static const MsgID MsgID_MAX =
    SC_ShowHand_Game_Finish_MsgID_MsgID_MAX;
  static const int MsgID_ARRAYSIZE =
    SC_ShowHand_Game_Finish_MsgID_MsgID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  MsgID_descriptor() {
    return SC_ShowHand_Game_Finish_MsgID_descriptor();
  }
  static inline const ::std::string& MsgID_Name(MsgID value) {
    return SC_ShowHand_Game_Finish_MsgID_Name(value);
  }
  static inline bool MsgID_Parse(const ::std::string& name,
      MsgID* value) {
    return SC_ShowHand_Game_Finish_MsgID_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // repeated .ShowHand_Player_Info pb_players = 1;
  int pb_players_size() const;
  void clear_pb_players();
  static const int kPbPlayersFieldNumber = 1;
  const ::ShowHand_Player_Info& pb_players(int index) const;
  ::ShowHand_Player_Info* mutable_pb_players(int index);
  ::ShowHand_Player_Info* add_pb_players();
  ::google::protobuf::RepeatedPtrField< ::ShowHand_Player_Info >*
      mutable_pb_players();
  const ::google::protobuf::RepeatedPtrField< ::ShowHand_Player_Info >&
      pb_players() const;

  // @@protoc_insertion_point(class_scope:SC_ShowHand_Game_Finish)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::ShowHand_Player_Info > pb_players_;
  friend struct protobuf_public_5fshowhand_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class SC_ShowHand_Next_Round : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:SC_ShowHand_Next_Round) */ {
 public:
  SC_ShowHand_Next_Round();
  virtual ~SC_ShowHand_Next_Round();

  SC_ShowHand_Next_Round(const SC_ShowHand_Next_Round& from);

  inline SC_ShowHand_Next_Round& operator=(const SC_ShowHand_Next_Round& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SC_ShowHand_Next_Round& default_instance();

  static inline const SC_ShowHand_Next_Round* internal_default_instance() {
    return reinterpret_cast<const SC_ShowHand_Next_Round*>(
               &_SC_ShowHand_Next_Round_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    10;

  void Swap(SC_ShowHand_Next_Round* other);

  // implements Message ----------------------------------------------

  inline SC_ShowHand_Next_Round* New() const PROTOBUF_FINAL { return New(NULL); }

  SC_ShowHand_Next_Round* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const SC_ShowHand_Next_Round& from);
  void MergeFrom(const SC_ShowHand_Next_Round& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(SC_ShowHand_Next_Round* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  typedef SC_ShowHand_Next_Round_MsgID MsgID;
  static const MsgID ID =
    SC_ShowHand_Next_Round_MsgID_ID;
  static inline bool MsgID_IsValid(int value) {
    return SC_ShowHand_Next_Round_MsgID_IsValid(value);
  }
  static const MsgID MsgID_MIN =
    SC_ShowHand_Next_Round_MsgID_MsgID_MIN;
  static const MsgID MsgID_MAX =
    SC_ShowHand_Next_Round_MsgID_MsgID_MAX;
  static const int MsgID_ARRAYSIZE =
    SC_ShowHand_Next_Round_MsgID_MsgID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  MsgID_descriptor() {
    return SC_ShowHand_Next_Round_MsgID_descriptor();
  }
  static inline const ::std::string& MsgID_Name(MsgID value) {
    return SC_ShowHand_Next_Round_MsgID_Name(value);
  }
  static inline bool MsgID_Parse(const ::std::string& name,
      MsgID* value) {
    return SC_ShowHand_Next_Round_MsgID_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // repeated .ShowHand_Player_Info pb_players = 1;
  int pb_players_size() const;
  void clear_pb_players();
  static const int kPbPlayersFieldNumber = 1;
  const ::ShowHand_Player_Info& pb_players(int index) const;
  ::ShowHand_Player_Info* mutable_pb_players(int index);
  ::ShowHand_Player_Info* add_pb_players();
  ::google::protobuf::RepeatedPtrField< ::ShowHand_Player_Info >*
      mutable_pb_players();
  const ::google::protobuf::RepeatedPtrField< ::ShowHand_Player_Info >&
      pb_players() const;

  // @@protoc_insertion_point(class_scope:SC_ShowHand_Next_Round)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::ShowHand_Player_Info > pb_players_;
  friend struct protobuf_public_5fshowhand_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class SC_ShowHandAddScore : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:SC_ShowHandAddScore) */ {
 public:
  SC_ShowHandAddScore();
  virtual ~SC_ShowHandAddScore();

  SC_ShowHandAddScore(const SC_ShowHandAddScore& from);

  inline SC_ShowHandAddScore& operator=(const SC_ShowHandAddScore& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SC_ShowHandAddScore& default_instance();

  static inline const SC_ShowHandAddScore* internal_default_instance() {
    return reinterpret_cast<const SC_ShowHandAddScore*>(
               &_SC_ShowHandAddScore_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    11;

  void Swap(SC_ShowHandAddScore* other);

  // implements Message ----------------------------------------------

  inline SC_ShowHandAddScore* New() const PROTOBUF_FINAL { return New(NULL); }

  SC_ShowHandAddScore* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const SC_ShowHandAddScore& from);
  void MergeFrom(const SC_ShowHandAddScore& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(SC_ShowHandAddScore* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  typedef SC_ShowHandAddScore_MsgID MsgID;
  static const MsgID ID =
    SC_ShowHandAddScore_MsgID_ID;
  static inline bool MsgID_IsValid(int value) {
    return SC_ShowHandAddScore_MsgID_IsValid(value);
  }
  static const MsgID MsgID_MIN =
    SC_ShowHandAddScore_MsgID_MsgID_MIN;
  static const MsgID MsgID_MAX =
    SC_ShowHandAddScore_MsgID_MsgID_MAX;
  static const int MsgID_ARRAYSIZE =
    SC_ShowHandAddScore_MsgID_MsgID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  MsgID_descriptor() {
    return SC_ShowHandAddScore_MsgID_descriptor();
  }
  static inline const ::std::string& MsgID_Name(MsgID value) {
    return SC_ShowHandAddScore_MsgID_Name(value);
  }
  static inline bool MsgID_Parse(const ::std::string& name,
      MsgID* value) {
    return SC_ShowHandAddScore_MsgID_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional int32 target = 1;
  bool has_target() const;
  void clear_target();
  static const int kTargetFieldNumber = 1;
  ::google::protobuf::int32 target() const;
  void set_target(::google::protobuf::int32 value);

  // optional int32 chair_id = 2;
  bool has_chair_id() const;
  void clear_chair_id();
  static const int kChairIdFieldNumber = 2;
  ::google::protobuf::int32 chair_id() const;
  void set_chair_id(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:SC_ShowHandAddScore)
 private:
  void set_has_target();
  void clear_has_target();
  void set_has_chair_id();
  void clear_has_chair_id();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::int32 target_;
  ::google::protobuf::int32 chair_id_;
  friend struct protobuf_public_5fshowhand_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class SC_ShowHandGiveUp : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:SC_ShowHandGiveUp) */ {
 public:
  SC_ShowHandGiveUp();
  virtual ~SC_ShowHandGiveUp();

  SC_ShowHandGiveUp(const SC_ShowHandGiveUp& from);

  inline SC_ShowHandGiveUp& operator=(const SC_ShowHandGiveUp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SC_ShowHandGiveUp& default_instance();

  static inline const SC_ShowHandGiveUp* internal_default_instance() {
    return reinterpret_cast<const SC_ShowHandGiveUp*>(
               &_SC_ShowHandGiveUp_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    12;

  void Swap(SC_ShowHandGiveUp* other);

  // implements Message ----------------------------------------------

  inline SC_ShowHandGiveUp* New() const PROTOBUF_FINAL { return New(NULL); }

  SC_ShowHandGiveUp* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const SC_ShowHandGiveUp& from);
  void MergeFrom(const SC_ShowHandGiveUp& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(SC_ShowHandGiveUp* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  typedef SC_ShowHandGiveUp_MsgID MsgID;
  static const MsgID ID =
    SC_ShowHandGiveUp_MsgID_ID;
  static inline bool MsgID_IsValid(int value) {
    return SC_ShowHandGiveUp_MsgID_IsValid(value);
  }
  static const MsgID MsgID_MIN =
    SC_ShowHandGiveUp_MsgID_MsgID_MIN;
  static const MsgID MsgID_MAX =
    SC_ShowHandGiveUp_MsgID_MsgID_MAX;
  static const int MsgID_ARRAYSIZE =
    SC_ShowHandGiveUp_MsgID_MsgID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  MsgID_descriptor() {
    return SC_ShowHandGiveUp_MsgID_descriptor();
  }
  static inline const ::std::string& MsgID_Name(MsgID value) {
    return SC_ShowHandGiveUp_MsgID_Name(value);
  }
  static inline bool MsgID_Parse(const ::std::string& name,
      MsgID* value) {
    return SC_ShowHandGiveUp_MsgID_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional int32 chair_id = 1;
  bool has_chair_id() const;
  void clear_chair_id();
  static const int kChairIdFieldNumber = 1;
  ::google::protobuf::int32 chair_id() const;
  void set_chair_id(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:SC_ShowHandGiveUp)
 private:
  void set_has_chair_id();
  void clear_has_chair_id();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::int32 chair_id_;
  friend struct protobuf_public_5fshowhand_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class SC_ShowHandPass : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:SC_ShowHandPass) */ {
 public:
  SC_ShowHandPass();
  virtual ~SC_ShowHandPass();

  SC_ShowHandPass(const SC_ShowHandPass& from);

  inline SC_ShowHandPass& operator=(const SC_ShowHandPass& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SC_ShowHandPass& default_instance();

  static inline const SC_ShowHandPass* internal_default_instance() {
    return reinterpret_cast<const SC_ShowHandPass*>(
               &_SC_ShowHandPass_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    13;

  void Swap(SC_ShowHandPass* other);

  // implements Message ----------------------------------------------

  inline SC_ShowHandPass* New() const PROTOBUF_FINAL { return New(NULL); }

  SC_ShowHandPass* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const SC_ShowHandPass& from);
  void MergeFrom(const SC_ShowHandPass& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(SC_ShowHandPass* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  typedef SC_ShowHandPass_MsgID MsgID;
  static const MsgID ID =
    SC_ShowHandPass_MsgID_ID;
  static inline bool MsgID_IsValid(int value) {
    return SC_ShowHandPass_MsgID_IsValid(value);
  }
  static const MsgID MsgID_MIN =
    SC_ShowHandPass_MsgID_MsgID_MIN;
  static const MsgID MsgID_MAX =
    SC_ShowHandPass_MsgID_MsgID_MAX;
  static const int MsgID_ARRAYSIZE =
    SC_ShowHandPass_MsgID_MsgID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  MsgID_descriptor() {
    return SC_ShowHandPass_MsgID_descriptor();
  }
  static inline const ::std::string& MsgID_Name(MsgID value) {
    return SC_ShowHandPass_MsgID_Name(value);
  }
  static inline bool MsgID_Parse(const ::std::string& name,
      MsgID* value) {
    return SC_ShowHandPass_MsgID_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional int32 chair_id = 1;
  bool has_chair_id() const;
  void clear_chair_id();
  static const int kChairIdFieldNumber = 1;
  ::google::protobuf::int32 chair_id() const;
  void set_chair_id(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:SC_ShowHandPass)
 private:
  void set_has_chair_id();
  void clear_has_chair_id();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::int32 chair_id_;
  friend struct protobuf_public_5fshowhand_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class SC_ShowHand_NextTurn : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:SC_ShowHand_NextTurn) */ {
 public:
  SC_ShowHand_NextTurn();
  virtual ~SC_ShowHand_NextTurn();

  SC_ShowHand_NextTurn(const SC_ShowHand_NextTurn& from);

  inline SC_ShowHand_NextTurn& operator=(const SC_ShowHand_NextTurn& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SC_ShowHand_NextTurn& default_instance();

  static inline const SC_ShowHand_NextTurn* internal_default_instance() {
    return reinterpret_cast<const SC_ShowHand_NextTurn*>(
               &_SC_ShowHand_NextTurn_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    14;

  void Swap(SC_ShowHand_NextTurn* other);

  // implements Message ----------------------------------------------

  inline SC_ShowHand_NextTurn* New() const PROTOBUF_FINAL { return New(NULL); }

  SC_ShowHand_NextTurn* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const SC_ShowHand_NextTurn& from);
  void MergeFrom(const SC_ShowHand_NextTurn& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(SC_ShowHand_NextTurn* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  typedef SC_ShowHand_NextTurn_MsgID MsgID;
  static const MsgID ID =
    SC_ShowHand_NextTurn_MsgID_ID;
  static inline bool MsgID_IsValid(int value) {
    return SC_ShowHand_NextTurn_MsgID_IsValid(value);
  }
  static const MsgID MsgID_MIN =
    SC_ShowHand_NextTurn_MsgID_MsgID_MIN;
  static const MsgID MsgID_MAX =
    SC_ShowHand_NextTurn_MsgID_MsgID_MAX;
  static const int MsgID_ARRAYSIZE =
    SC_ShowHand_NextTurn_MsgID_MsgID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  MsgID_descriptor() {
    return SC_ShowHand_NextTurn_MsgID_descriptor();
  }
  static inline const ::std::string& MsgID_Name(MsgID value) {
    return SC_ShowHand_NextTurn_MsgID_Name(value);
  }
  static inline bool MsgID_Parse(const ::std::string& name,
      MsgID* value) {
    return SC_ShowHand_NextTurn_MsgID_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional int32 chair_id = 1;
  bool has_chair_id() const;
  void clear_chair_id();
  static const int kChairIdFieldNumber = 1;
  ::google::protobuf::int32 chair_id() const;
  void set_chair_id(::google::protobuf::int32 value);

  // optional int32 type = 2;
  bool has_type() const;
  void clear_type();
  static const int kTypeFieldNumber = 2;
  ::google::protobuf::int32 type() const;
  void set_type(::google::protobuf::int32 value);

  // optional int32 max_add = 3;
  bool has_max_add() const;
  void clear_max_add();
  static const int kMaxAddFieldNumber = 3;
  ::google::protobuf::int32 max_add() const;
  void set_max_add(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:SC_ShowHand_NextTurn)
 private:
  void set_has_chair_id();
  void clear_has_chair_id();
  void set_has_type();
  void clear_has_type();
  void set_has_max_add();
  void clear_has_max_add();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::int32 chair_id_;
  ::google::protobuf::int32 type_;
  ::google::protobuf::int32 max_add_;
  friend struct protobuf_public_5fshowhand_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class SC_ShowHandStartVote : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:SC_ShowHandStartVote) */ {
 public:
  SC_ShowHandStartVote();
  virtual ~SC_ShowHandStartVote();

  SC_ShowHandStartVote(const SC_ShowHandStartVote& from);

  inline SC_ShowHandStartVote& operator=(const SC_ShowHandStartVote& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SC_ShowHandStartVote& default_instance();

  static inline const SC_ShowHandStartVote* internal_default_instance() {
    return reinterpret_cast<const SC_ShowHandStartVote*>(
               &_SC_ShowHandStartVote_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    15;

  void Swap(SC_ShowHandStartVote* other);

  // implements Message ----------------------------------------------

  inline SC_ShowHandStartVote* New() const PROTOBUF_FINAL { return New(NULL); }

  SC_ShowHandStartVote* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const SC_ShowHandStartVote& from);
  void MergeFrom(const SC_ShowHandStartVote& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(SC_ShowHandStartVote* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  typedef SC_ShowHandStartVote_MsgID MsgID;
  static const MsgID ID =
    SC_ShowHandStartVote_MsgID_ID;
  static inline bool MsgID_IsValid(int value) {
    return SC_ShowHandStartVote_MsgID_IsValid(value);
  }
  static const MsgID MsgID_MIN =
    SC_ShowHandStartVote_MsgID_MsgID_MIN;
  static const MsgID MsgID_MAX =
    SC_ShowHandStartVote_MsgID_MsgID_MAX;
  static const int MsgID_ARRAYSIZE =
    SC_ShowHandStartVote_MsgID_MsgID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  MsgID_descriptor() {
    return SC_ShowHandStartVote_MsgID_descriptor();
  }
  static inline const ::std::string& MsgID_Name(MsgID value) {
    return SC_ShowHandStartVote_MsgID_Name(value);
  }
  static inline bool MsgID_Parse(const ::std::string& name,
      MsgID* value) {
    return SC_ShowHandStartVote_MsgID_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional int32 chair_id = 1;
  bool has_chair_id() const;
  void clear_chair_id();
  static const int kChairIdFieldNumber = 1;
  ::google::protobuf::int32 chair_id() const;
  void set_chair_id(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:SC_ShowHandStartVote)
 private:
  void set_has_chair_id();
  void clear_has_chair_id();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::int32 chair_id_;
  friend struct protobuf_public_5fshowhand_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class SC_ShowHandPlayerVoteRes : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:SC_ShowHandPlayerVoteRes) */ {
 public:
  SC_ShowHandPlayerVoteRes();
  virtual ~SC_ShowHandPlayerVoteRes();

  SC_ShowHandPlayerVoteRes(const SC_ShowHandPlayerVoteRes& from);

  inline SC_ShowHandPlayerVoteRes& operator=(const SC_ShowHandPlayerVoteRes& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SC_ShowHandPlayerVoteRes& default_instance();

  static inline const SC_ShowHandPlayerVoteRes* internal_default_instance() {
    return reinterpret_cast<const SC_ShowHandPlayerVoteRes*>(
               &_SC_ShowHandPlayerVoteRes_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    16;

  void Swap(SC_ShowHandPlayerVoteRes* other);

  // implements Message ----------------------------------------------

  inline SC_ShowHandPlayerVoteRes* New() const PROTOBUF_FINAL { return New(NULL); }

  SC_ShowHandPlayerVoteRes* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const SC_ShowHandPlayerVoteRes& from);
  void MergeFrom(const SC_ShowHandPlayerVoteRes& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(SC_ShowHandPlayerVoteRes* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  typedef SC_ShowHandPlayerVoteRes_MsgID MsgID;
  static const MsgID ID =
    SC_ShowHandPlayerVoteRes_MsgID_ID;
  static inline bool MsgID_IsValid(int value) {
    return SC_ShowHandPlayerVoteRes_MsgID_IsValid(value);
  }
  static const MsgID MsgID_MIN =
    SC_ShowHandPlayerVoteRes_MsgID_MsgID_MIN;
  static const MsgID MsgID_MAX =
    SC_ShowHandPlayerVoteRes_MsgID_MsgID_MAX;
  static const int MsgID_ARRAYSIZE =
    SC_ShowHandPlayerVoteRes_MsgID_MsgID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  MsgID_descriptor() {
    return SC_ShowHandPlayerVoteRes_MsgID_descriptor();
  }
  static inline const ::std::string& MsgID_Name(MsgID value) {
    return SC_ShowHandPlayerVoteRes_MsgID_Name(value);
  }
  static inline bool MsgID_Parse(const ::std::string& name,
      MsgID* value) {
    return SC_ShowHandPlayerVoteRes_MsgID_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional int32 chair_id = 1;
  bool has_chair_id() const;
  void clear_chair_id();
  static const int kChairIdFieldNumber = 1;
  ::google::protobuf::int32 chair_id() const;
  void set_chair_id(::google::protobuf::int32 value);

  // optional bool agreen = 2;
  bool has_agreen() const;
  void clear_agreen();
  static const int kAgreenFieldNumber = 2;
  bool agreen() const;
  void set_agreen(bool value);

  // @@protoc_insertion_point(class_scope:SC_ShowHandPlayerVoteRes)
 private:
  void set_has_chair_id();
  void clear_has_chair_id();
  void set_has_agreen();
  void clear_has_agreen();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::int32 chair_id_;
  bool agreen_;
  friend struct protobuf_public_5fshowhand_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
// CS_ShowHandAddScore

// optional int32 target = 1;
inline bool CS_ShowHandAddScore::has_target() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CS_ShowHandAddScore::set_has_target() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CS_ShowHandAddScore::clear_has_target() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CS_ShowHandAddScore::clear_target() {
  target_ = 0;
  clear_has_target();
}
inline ::google::protobuf::int32 CS_ShowHandAddScore::target() const {
  // @@protoc_insertion_point(field_get:CS_ShowHandAddScore.target)
  return target_;
}
inline void CS_ShowHandAddScore::set_target(::google::protobuf::int32 value) {
  set_has_target();
  target_ = value;
  // @@protoc_insertion_point(field_set:CS_ShowHandAddScore.target)
}

// -------------------------------------------------------------------

// CS_ShowHandGiveUp

// -------------------------------------------------------------------

// CS_ShowHandPass

// -------------------------------------------------------------------

// CS_ShowHandGiveUpEixt

// -------------------------------------------------------------------

// CS_ShowHandMyVoteResult

// optional bool agreen = 1;
inline bool CS_ShowHandMyVoteResult::has_agreen() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CS_ShowHandMyVoteResult::set_has_agreen() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CS_ShowHandMyVoteResult::clear_has_agreen() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CS_ShowHandMyVoteResult::clear_agreen() {
  agreen_ = false;
  clear_has_agreen();
}
inline bool CS_ShowHandMyVoteResult::agreen() const {
  // @@protoc_insertion_point(field_get:CS_ShowHandMyVoteResult.agreen)
  return agreen_;
}
inline void CS_ShowHandMyVoteResult::set_agreen(bool value) {
  set_has_agreen();
  agreen_ = value;
  // @@protoc_insertion_point(field_set:CS_ShowHandMyVoteResult.agreen)
}

// -------------------------------------------------------------------

// ShowHand_Player_Info

// repeated int32 tiles = 1;
inline int ShowHand_Player_Info::tiles_size() const {
  return tiles_.size();
}
inline void ShowHand_Player_Info::clear_tiles() {
  tiles_.Clear();
}
inline ::google::protobuf::int32 ShowHand_Player_Info::tiles(int index) const {
  // @@protoc_insertion_point(field_get:ShowHand_Player_Info.tiles)
  return tiles_.Get(index);
}
inline void ShowHand_Player_Info::set_tiles(int index, ::google::protobuf::int32 value) {
  tiles_.Set(index, value);
  // @@protoc_insertion_point(field_set:ShowHand_Player_Info.tiles)
}
inline void ShowHand_Player_Info::add_tiles(::google::protobuf::int32 value) {
  tiles_.Add(value);
  // @@protoc_insertion_point(field_add:ShowHand_Player_Info.tiles)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
ShowHand_Player_Info::tiles() const {
  // @@protoc_insertion_point(field_list:ShowHand_Player_Info.tiles)
  return tiles_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
ShowHand_Player_Info::mutable_tiles() {
  // @@protoc_insertion_point(field_mutable_list:ShowHand_Player_Info.tiles)
  return &tiles_;
}

// optional int32 chair_id = 2;
inline bool ShowHand_Player_Info::has_chair_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ShowHand_Player_Info::set_has_chair_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ShowHand_Player_Info::clear_has_chair_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ShowHand_Player_Info::clear_chair_id() {
  chair_id_ = 0;
  clear_has_chair_id();
}
inline ::google::protobuf::int32 ShowHand_Player_Info::chair_id() const {
  // @@protoc_insertion_point(field_get:ShowHand_Player_Info.chair_id)
  return chair_id_;
}
inline void ShowHand_Player_Info::set_chair_id(::google::protobuf::int32 value) {
  set_has_chair_id();
  chair_id_ = value;
  // @@protoc_insertion_point(field_set:ShowHand_Player_Info.chair_id)
}

// optional int32 add_total = 3;
inline bool ShowHand_Player_Info::has_add_total() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ShowHand_Player_Info::set_has_add_total() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ShowHand_Player_Info::clear_has_add_total() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ShowHand_Player_Info::clear_add_total() {
  add_total_ = 0;
  clear_has_add_total();
}
inline ::google::protobuf::int32 ShowHand_Player_Info::add_total() const {
  // @@protoc_insertion_point(field_get:ShowHand_Player_Info.add_total)
  return add_total_;
}
inline void ShowHand_Player_Info::set_add_total(::google::protobuf::int32 value) {
  set_has_add_total();
  add_total_ = value;
  // @@protoc_insertion_point(field_set:ShowHand_Player_Info.add_total)
}

// optional int32 cur_round_add = 4;
inline bool ShowHand_Player_Info::has_cur_round_add() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ShowHand_Player_Info::set_has_cur_round_add() {
  _has_bits_[0] |= 0x00000008u;
}
inline void ShowHand_Player_Info::clear_has_cur_round_add() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void ShowHand_Player_Info::clear_cur_round_add() {
  cur_round_add_ = 0;
  clear_has_cur_round_add();
}
inline ::google::protobuf::int32 ShowHand_Player_Info::cur_round_add() const {
  // @@protoc_insertion_point(field_get:ShowHand_Player_Info.cur_round_add)
  return cur_round_add_;
}
inline void ShowHand_Player_Info::set_cur_round_add(::google::protobuf::int32 value) {
  set_has_cur_round_add();
  cur_round_add_ = value;
  // @@protoc_insertion_point(field_set:ShowHand_Player_Info.cur_round_add)
}

// optional string nick = 5;
inline bool ShowHand_Player_Info::has_nick() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ShowHand_Player_Info::set_has_nick() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ShowHand_Player_Info::clear_has_nick() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ShowHand_Player_Info::clear_nick() {
  nick_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_nick();
}
inline const ::std::string& ShowHand_Player_Info::nick() const {
  // @@protoc_insertion_point(field_get:ShowHand_Player_Info.nick)
  return nick_.GetNoArena();
}
inline void ShowHand_Player_Info::set_nick(const ::std::string& value) {
  set_has_nick();
  nick_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ShowHand_Player_Info.nick)
}
#if LANG_CXX11
inline void ShowHand_Player_Info::set_nick(::std::string&& value) {
  set_has_nick();
  nick_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ShowHand_Player_Info.nick)
}
#endif
inline void ShowHand_Player_Info::set_nick(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_nick();
  nick_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ShowHand_Player_Info.nick)
}
inline void ShowHand_Player_Info::set_nick(const char* value, size_t size) {
  set_has_nick();
  nick_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ShowHand_Player_Info.nick)
}
inline ::std::string* ShowHand_Player_Info::mutable_nick() {
  set_has_nick();
  // @@protoc_insertion_point(field_mutable:ShowHand_Player_Info.nick)
  return nick_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ShowHand_Player_Info::release_nick() {
  // @@protoc_insertion_point(field_release:ShowHand_Player_Info.nick)
  clear_has_nick();
  return nick_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ShowHand_Player_Info::set_allocated_nick(::std::string* nick) {
  if (nick != NULL) {
    set_has_nick();
  } else {
    clear_has_nick();
  }
  nick_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), nick);
  // @@protoc_insertion_point(field_set_allocated:ShowHand_Player_Info.nick)
}

// optional int32 icon = 6;
inline bool ShowHand_Player_Info::has_icon() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void ShowHand_Player_Info::set_has_icon() {
  _has_bits_[0] |= 0x00000010u;
}
inline void ShowHand_Player_Info::clear_has_icon() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void ShowHand_Player_Info::clear_icon() {
  icon_ = 0;
  clear_has_icon();
}
inline ::google::protobuf::int32 ShowHand_Player_Info::icon() const {
  // @@protoc_insertion_point(field_get:ShowHand_Player_Info.icon)
  return icon_;
}
inline void ShowHand_Player_Info::set_icon(::google::protobuf::int32 value) {
  set_has_icon();
  icon_ = value;
  // @@protoc_insertion_point(field_set:ShowHand_Player_Info.icon)
}

// optional int64 gold = 7;
inline bool ShowHand_Player_Info::has_gold() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void ShowHand_Player_Info::set_has_gold() {
  _has_bits_[0] |= 0x00000020u;
}
inline void ShowHand_Player_Info::clear_has_gold() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void ShowHand_Player_Info::clear_gold() {
  gold_ = GOOGLE_LONGLONG(0);
  clear_has_gold();
}
inline ::google::protobuf::int64 ShowHand_Player_Info::gold() const {
  // @@protoc_insertion_point(field_get:ShowHand_Player_Info.gold)
  return gold_;
}
inline void ShowHand_Player_Info::set_gold(::google::protobuf::int64 value) {
  set_has_gold();
  gold_ = value;
  // @@protoc_insertion_point(field_set:ShowHand_Player_Info.gold)
}

// optional int32 guid = 8;
inline bool ShowHand_Player_Info::has_guid() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void ShowHand_Player_Info::set_has_guid() {
  _has_bits_[0] |= 0x00000040u;
}
inline void ShowHand_Player_Info::clear_has_guid() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void ShowHand_Player_Info::clear_guid() {
  guid_ = 0;
  clear_has_guid();
}
inline ::google::protobuf::int32 ShowHand_Player_Info::guid() const {
  // @@protoc_insertion_point(field_get:ShowHand_Player_Info.guid)
  return guid_;
}
inline void ShowHand_Player_Info::set_guid(::google::protobuf::int32 value) {
  set_has_guid();
  guid_ = value;
  // @@protoc_insertion_point(field_set:ShowHand_Player_Info.guid)
}

// optional bool is_win = 9;
inline bool ShowHand_Player_Info::has_is_win() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void ShowHand_Player_Info::set_has_is_win() {
  _has_bits_[0] |= 0x00000100u;
}
inline void ShowHand_Player_Info::clear_has_is_win() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void ShowHand_Player_Info::clear_is_win() {
  is_win_ = false;
  clear_has_is_win();
}
inline bool ShowHand_Player_Info::is_win() const {
  // @@protoc_insertion_point(field_get:ShowHand_Player_Info.is_win)
  return is_win_;
}
inline void ShowHand_Player_Info::set_is_win(bool value) {
  set_has_is_win();
  is_win_ = value;
  // @@protoc_insertion_point(field_set:ShowHand_Player_Info.is_win)
}

// optional int32 win_money = 10;
inline bool ShowHand_Player_Info::has_win_money() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void ShowHand_Player_Info::set_has_win_money() {
  _has_bits_[0] |= 0x00000080u;
}
inline void ShowHand_Player_Info::clear_has_win_money() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void ShowHand_Player_Info::clear_win_money() {
  win_money_ = 0;
  clear_has_win_money();
}
inline ::google::protobuf::int32 ShowHand_Player_Info::win_money() const {
  // @@protoc_insertion_point(field_get:ShowHand_Player_Info.win_money)
  return win_money_;
}
inline void ShowHand_Player_Info::set_win_money(::google::protobuf::int32 value) {
  set_has_win_money();
  win_money_ = value;
  // @@protoc_insertion_point(field_set:ShowHand_Player_Info.win_money)
}

// optional int32 taxes = 11;
inline bool ShowHand_Player_Info::has_taxes() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void ShowHand_Player_Info::set_has_taxes() {
  _has_bits_[0] |= 0x00000400u;
}
inline void ShowHand_Player_Info::clear_has_taxes() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void ShowHand_Player_Info::clear_taxes() {
  taxes_ = 0;
  clear_has_taxes();
}
inline ::google::protobuf::int32 ShowHand_Player_Info::taxes() const {
  // @@protoc_insertion_point(field_get:ShowHand_Player_Info.taxes)
  return taxes_;
}
inline void ShowHand_Player_Info::set_taxes(::google::protobuf::int32 value) {
  set_has_taxes();
  taxes_ = value;
  // @@protoc_insertion_point(field_set:ShowHand_Player_Info.taxes)
}

// optional bool is_give_up = 12;
inline bool ShowHand_Player_Info::has_is_give_up() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void ShowHand_Player_Info::set_has_is_give_up() {
  _has_bits_[0] |= 0x00000200u;
}
inline void ShowHand_Player_Info::clear_has_is_give_up() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void ShowHand_Player_Info::clear_is_give_up() {
  is_give_up_ = false;
  clear_has_is_give_up();
}
inline bool ShowHand_Player_Info::is_give_up() const {
  // @@protoc_insertion_point(field_get:ShowHand_Player_Info.is_give_up)
  return is_give_up_;
}
inline void ShowHand_Player_Info::set_is_give_up(bool value) {
  set_has_is_give_up();
  is_give_up_ = value;
  // @@protoc_insertion_point(field_set:ShowHand_Player_Info.is_give_up)
}

// -------------------------------------------------------------------

// ShowHand_Reconnect_Data

// optional int32 act_left_time = 1;
inline bool ShowHand_Reconnect_Data::has_act_left_time() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ShowHand_Reconnect_Data::set_has_act_left_time() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ShowHand_Reconnect_Data::clear_has_act_left_time() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ShowHand_Reconnect_Data::clear_act_left_time() {
  act_left_time_ = 0;
  clear_has_act_left_time();
}
inline ::google::protobuf::int32 ShowHand_Reconnect_Data::act_left_time() const {
  // @@protoc_insertion_point(field_get:ShowHand_Reconnect_Data.act_left_time)
  return act_left_time_;
}
inline void ShowHand_Reconnect_Data::set_act_left_time(::google::protobuf::int32 value) {
  set_has_act_left_time();
  act_left_time_ = value;
  // @@protoc_insertion_point(field_set:ShowHand_Reconnect_Data.act_left_time)
}

// optional int32 vote_chair_id = 2;
inline bool ShowHand_Reconnect_Data::has_vote_chair_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ShowHand_Reconnect_Data::set_has_vote_chair_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ShowHand_Reconnect_Data::clear_has_vote_chair_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ShowHand_Reconnect_Data::clear_vote_chair_id() {
  vote_chair_id_ = 0;
  clear_has_vote_chair_id();
}
inline ::google::protobuf::int32 ShowHand_Reconnect_Data::vote_chair_id() const {
  // @@protoc_insertion_point(field_get:ShowHand_Reconnect_Data.vote_chair_id)
  return vote_chair_id_;
}
inline void ShowHand_Reconnect_Data::set_vote_chair_id(::google::protobuf::int32 value) {
  set_has_vote_chair_id();
  vote_chair_id_ = value;
  // @@protoc_insertion_point(field_set:ShowHand_Reconnect_Data.vote_chair_id)
}

// -------------------------------------------------------------------

// SC_ShowHand_Desk_Enter

// repeated .ShowHand_Player_Info pb_players = 1;
inline int SC_ShowHand_Desk_Enter::pb_players_size() const {
  return pb_players_.size();
}
inline void SC_ShowHand_Desk_Enter::clear_pb_players() {
  pb_players_.Clear();
}
inline const ::ShowHand_Player_Info& SC_ShowHand_Desk_Enter::pb_players(int index) const {
  // @@protoc_insertion_point(field_get:SC_ShowHand_Desk_Enter.pb_players)
  return pb_players_.Get(index);
}
inline ::ShowHand_Player_Info* SC_ShowHand_Desk_Enter::mutable_pb_players(int index) {
  // @@protoc_insertion_point(field_mutable:SC_ShowHand_Desk_Enter.pb_players)
  return pb_players_.Mutable(index);
}
inline ::ShowHand_Player_Info* SC_ShowHand_Desk_Enter::add_pb_players() {
  // @@protoc_insertion_point(field_add:SC_ShowHand_Desk_Enter.pb_players)
  return pb_players_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::ShowHand_Player_Info >*
SC_ShowHand_Desk_Enter::mutable_pb_players() {
  // @@protoc_insertion_point(field_mutable_list:SC_ShowHand_Desk_Enter.pb_players)
  return &pb_players_;
}
inline const ::google::protobuf::RepeatedPtrField< ::ShowHand_Player_Info >&
SC_ShowHand_Desk_Enter::pb_players() const {
  // @@protoc_insertion_point(field_list:SC_ShowHand_Desk_Enter.pb_players)
  return pb_players_;
}

// optional int32 state = 2;
inline bool SC_ShowHand_Desk_Enter::has_state() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SC_ShowHand_Desk_Enter::set_has_state() {
  _has_bits_[0] |= 0x00000002u;
}
inline void SC_ShowHand_Desk_Enter::clear_has_state() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void SC_ShowHand_Desk_Enter::clear_state() {
  state_ = 0;
  clear_has_state();
}
inline ::google::protobuf::int32 SC_ShowHand_Desk_Enter::state() const {
  // @@protoc_insertion_point(field_get:SC_ShowHand_Desk_Enter.state)
  return state_;
}
inline void SC_ShowHand_Desk_Enter::set_state(::google::protobuf::int32 value) {
  set_has_state();
  state_ = value;
  // @@protoc_insertion_point(field_set:SC_ShowHand_Desk_Enter.state)
}

// optional int32 zhuang = 3;
inline bool SC_ShowHand_Desk_Enter::has_zhuang() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void SC_ShowHand_Desk_Enter::set_has_zhuang() {
  _has_bits_[0] |= 0x00000004u;
}
inline void SC_ShowHand_Desk_Enter::clear_has_zhuang() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void SC_ShowHand_Desk_Enter::clear_zhuang() {
  zhuang_ = 0;
  clear_has_zhuang();
}
inline ::google::protobuf::int32 SC_ShowHand_Desk_Enter::zhuang() const {
  // @@protoc_insertion_point(field_get:SC_ShowHand_Desk_Enter.zhuang)
  return zhuang_;
}
inline void SC_ShowHand_Desk_Enter::set_zhuang(::google::protobuf::int32 value) {
  set_has_zhuang();
  zhuang_ = value;
  // @@protoc_insertion_point(field_set:SC_ShowHand_Desk_Enter.zhuang)
}

// optional int32 self_chair_id = 4;
inline bool SC_ShowHand_Desk_Enter::has_self_chair_id() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void SC_ShowHand_Desk_Enter::set_has_self_chair_id() {
  _has_bits_[0] |= 0x00000008u;
}
inline void SC_ShowHand_Desk_Enter::clear_has_self_chair_id() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void SC_ShowHand_Desk_Enter::clear_self_chair_id() {
  self_chair_id_ = 0;
  clear_has_self_chair_id();
}
inline ::google::protobuf::int32 SC_ShowHand_Desk_Enter::self_chair_id() const {
  // @@protoc_insertion_point(field_get:SC_ShowHand_Desk_Enter.self_chair_id)
  return self_chair_id_;
}
inline void SC_ShowHand_Desk_Enter::set_self_chair_id(::google::protobuf::int32 value) {
  set_has_self_chair_id();
  self_chair_id_ = value;
  // @@protoc_insertion_point(field_set:SC_ShowHand_Desk_Enter.self_chair_id)
}

// optional int32 act_time_limit = 5;
inline bool SC_ShowHand_Desk_Enter::has_act_time_limit() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void SC_ShowHand_Desk_Enter::set_has_act_time_limit() {
  _has_bits_[0] |= 0x00000010u;
}
inline void SC_ShowHand_Desk_Enter::clear_has_act_time_limit() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void SC_ShowHand_Desk_Enter::clear_act_time_limit() {
  act_time_limit_ = 0;
  clear_has_act_time_limit();
}
inline ::google::protobuf::int32 SC_ShowHand_Desk_Enter::act_time_limit() const {
  // @@protoc_insertion_point(field_get:SC_ShowHand_Desk_Enter.act_time_limit)
  return act_time_limit_;
}
inline void SC_ShowHand_Desk_Enter::set_act_time_limit(::google::protobuf::int32 value) {
  set_has_act_time_limit();
  act_time_limit_ = value;
  // @@protoc_insertion_point(field_set:SC_ShowHand_Desk_Enter.act_time_limit)
}

// optional bool is_reconnect = 6;
inline bool SC_ShowHand_Desk_Enter::has_is_reconnect() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void SC_ShowHand_Desk_Enter::set_has_is_reconnect() {
  _has_bits_[0] |= 0x00000020u;
}
inline void SC_ShowHand_Desk_Enter::clear_has_is_reconnect() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void SC_ShowHand_Desk_Enter::clear_is_reconnect() {
  is_reconnect_ = false;
  clear_has_is_reconnect();
}
inline bool SC_ShowHand_Desk_Enter::is_reconnect() const {
  // @@protoc_insertion_point(field_get:SC_ShowHand_Desk_Enter.is_reconnect)
  return is_reconnect_;
}
inline void SC_ShowHand_Desk_Enter::set_is_reconnect(bool value) {
  set_has_is_reconnect();
  is_reconnect_ = value;
  // @@protoc_insertion_point(field_set:SC_ShowHand_Desk_Enter.is_reconnect)
}

// optional int32 base_score = 7;
inline bool SC_ShowHand_Desk_Enter::has_base_score() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void SC_ShowHand_Desk_Enter::set_has_base_score() {
  _has_bits_[0] |= 0x00000040u;
}
inline void SC_ShowHand_Desk_Enter::clear_has_base_score() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void SC_ShowHand_Desk_Enter::clear_base_score() {
  base_score_ = 0;
  clear_has_base_score();
}
inline ::google::protobuf::int32 SC_ShowHand_Desk_Enter::base_score() const {
  // @@protoc_insertion_point(field_get:SC_ShowHand_Desk_Enter.base_score)
  return base_score_;
}
inline void SC_ShowHand_Desk_Enter::set_base_score(::google::protobuf::int32 value) {
  set_has_base_score();
  base_score_ = value;
  // @@protoc_insertion_point(field_set:SC_ShowHand_Desk_Enter.base_score)
}

// optional int32 max_call = 8;
inline bool SC_ShowHand_Desk_Enter::has_max_call() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void SC_ShowHand_Desk_Enter::set_has_max_call() {
  _has_bits_[0] |= 0x00000080u;
}
inline void SC_ShowHand_Desk_Enter::clear_has_max_call() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void SC_ShowHand_Desk_Enter::clear_max_call() {
  max_call_ = 0;
  clear_has_max_call();
}
inline ::google::protobuf::int32 SC_ShowHand_Desk_Enter::max_call() const {
  // @@protoc_insertion_point(field_get:SC_ShowHand_Desk_Enter.max_call)
  return max_call_;
}
inline void SC_ShowHand_Desk_Enter::set_max_call(::google::protobuf::int32 value) {
  set_has_max_call();
  max_call_ = value;
  // @@protoc_insertion_point(field_set:SC_ShowHand_Desk_Enter.max_call)
}

// optional .ShowHand_Reconnect_Data pb_rec_data = 9;
inline bool SC_ShowHand_Desk_Enter::has_pb_rec_data() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SC_ShowHand_Desk_Enter::set_has_pb_rec_data() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SC_ShowHand_Desk_Enter::clear_has_pb_rec_data() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SC_ShowHand_Desk_Enter::clear_pb_rec_data() {
  if (pb_rec_data_ != NULL) pb_rec_data_->::ShowHand_Reconnect_Data::Clear();
  clear_has_pb_rec_data();
}
inline const ::ShowHand_Reconnect_Data& SC_ShowHand_Desk_Enter::pb_rec_data() const {
  // @@protoc_insertion_point(field_get:SC_ShowHand_Desk_Enter.pb_rec_data)
  return pb_rec_data_ != NULL ? *pb_rec_data_
                         : *::ShowHand_Reconnect_Data::internal_default_instance();
}
inline ::ShowHand_Reconnect_Data* SC_ShowHand_Desk_Enter::mutable_pb_rec_data() {
  set_has_pb_rec_data();
  if (pb_rec_data_ == NULL) {
    pb_rec_data_ = new ::ShowHand_Reconnect_Data;
  }
  // @@protoc_insertion_point(field_mutable:SC_ShowHand_Desk_Enter.pb_rec_data)
  return pb_rec_data_;
}
inline ::ShowHand_Reconnect_Data* SC_ShowHand_Desk_Enter::release_pb_rec_data() {
  // @@protoc_insertion_point(field_release:SC_ShowHand_Desk_Enter.pb_rec_data)
  clear_has_pb_rec_data();
  ::ShowHand_Reconnect_Data* temp = pb_rec_data_;
  pb_rec_data_ = NULL;
  return temp;
}
inline void SC_ShowHand_Desk_Enter::set_allocated_pb_rec_data(::ShowHand_Reconnect_Data* pb_rec_data) {
  delete pb_rec_data_;
  pb_rec_data_ = pb_rec_data;
  if (pb_rec_data) {
    set_has_pb_rec_data();
  } else {
    clear_has_pb_rec_data();
  }
  // @@protoc_insertion_point(field_set_allocated:SC_ShowHand_Desk_Enter.pb_rec_data)
}

// -------------------------------------------------------------------

// SC_ShowHand_Desk_State

// optional int32 state = 1;
inline bool SC_ShowHand_Desk_State::has_state() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SC_ShowHand_Desk_State::set_has_state() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SC_ShowHand_Desk_State::clear_has_state() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SC_ShowHand_Desk_State::clear_state() {
  state_ = 0;
  clear_has_state();
}
inline ::google::protobuf::int32 SC_ShowHand_Desk_State::state() const {
  // @@protoc_insertion_point(field_get:SC_ShowHand_Desk_State.state)
  return state_;
}
inline void SC_ShowHand_Desk_State::set_state(::google::protobuf::int32 value) {
  set_has_state();
  state_ = value;
  // @@protoc_insertion_point(field_set:SC_ShowHand_Desk_State.state)
}

// -------------------------------------------------------------------

// SC_ShowHand_Game_Finish

// repeated .ShowHand_Player_Info pb_players = 1;
inline int SC_ShowHand_Game_Finish::pb_players_size() const {
  return pb_players_.size();
}
inline void SC_ShowHand_Game_Finish::clear_pb_players() {
  pb_players_.Clear();
}
inline const ::ShowHand_Player_Info& SC_ShowHand_Game_Finish::pb_players(int index) const {
  // @@protoc_insertion_point(field_get:SC_ShowHand_Game_Finish.pb_players)
  return pb_players_.Get(index);
}
inline ::ShowHand_Player_Info* SC_ShowHand_Game_Finish::mutable_pb_players(int index) {
  // @@protoc_insertion_point(field_mutable:SC_ShowHand_Game_Finish.pb_players)
  return pb_players_.Mutable(index);
}
inline ::ShowHand_Player_Info* SC_ShowHand_Game_Finish::add_pb_players() {
  // @@protoc_insertion_point(field_add:SC_ShowHand_Game_Finish.pb_players)
  return pb_players_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::ShowHand_Player_Info >*
SC_ShowHand_Game_Finish::mutable_pb_players() {
  // @@protoc_insertion_point(field_mutable_list:SC_ShowHand_Game_Finish.pb_players)
  return &pb_players_;
}
inline const ::google::protobuf::RepeatedPtrField< ::ShowHand_Player_Info >&
SC_ShowHand_Game_Finish::pb_players() const {
  // @@protoc_insertion_point(field_list:SC_ShowHand_Game_Finish.pb_players)
  return pb_players_;
}

// -------------------------------------------------------------------

// SC_ShowHand_Next_Round

// repeated .ShowHand_Player_Info pb_players = 1;
inline int SC_ShowHand_Next_Round::pb_players_size() const {
  return pb_players_.size();
}
inline void SC_ShowHand_Next_Round::clear_pb_players() {
  pb_players_.Clear();
}
inline const ::ShowHand_Player_Info& SC_ShowHand_Next_Round::pb_players(int index) const {
  // @@protoc_insertion_point(field_get:SC_ShowHand_Next_Round.pb_players)
  return pb_players_.Get(index);
}
inline ::ShowHand_Player_Info* SC_ShowHand_Next_Round::mutable_pb_players(int index) {
  // @@protoc_insertion_point(field_mutable:SC_ShowHand_Next_Round.pb_players)
  return pb_players_.Mutable(index);
}
inline ::ShowHand_Player_Info* SC_ShowHand_Next_Round::add_pb_players() {
  // @@protoc_insertion_point(field_add:SC_ShowHand_Next_Round.pb_players)
  return pb_players_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::ShowHand_Player_Info >*
SC_ShowHand_Next_Round::mutable_pb_players() {
  // @@protoc_insertion_point(field_mutable_list:SC_ShowHand_Next_Round.pb_players)
  return &pb_players_;
}
inline const ::google::protobuf::RepeatedPtrField< ::ShowHand_Player_Info >&
SC_ShowHand_Next_Round::pb_players() const {
  // @@protoc_insertion_point(field_list:SC_ShowHand_Next_Round.pb_players)
  return pb_players_;
}

// -------------------------------------------------------------------

// SC_ShowHandAddScore

// optional int32 target = 1;
inline bool SC_ShowHandAddScore::has_target() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SC_ShowHandAddScore::set_has_target() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SC_ShowHandAddScore::clear_has_target() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SC_ShowHandAddScore::clear_target() {
  target_ = 0;
  clear_has_target();
}
inline ::google::protobuf::int32 SC_ShowHandAddScore::target() const {
  // @@protoc_insertion_point(field_get:SC_ShowHandAddScore.target)
  return target_;
}
inline void SC_ShowHandAddScore::set_target(::google::protobuf::int32 value) {
  set_has_target();
  target_ = value;
  // @@protoc_insertion_point(field_set:SC_ShowHandAddScore.target)
}

// optional int32 chair_id = 2;
inline bool SC_ShowHandAddScore::has_chair_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SC_ShowHandAddScore::set_has_chair_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void SC_ShowHandAddScore::clear_has_chair_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void SC_ShowHandAddScore::clear_chair_id() {
  chair_id_ = 0;
  clear_has_chair_id();
}
inline ::google::protobuf::int32 SC_ShowHandAddScore::chair_id() const {
  // @@protoc_insertion_point(field_get:SC_ShowHandAddScore.chair_id)
  return chair_id_;
}
inline void SC_ShowHandAddScore::set_chair_id(::google::protobuf::int32 value) {
  set_has_chair_id();
  chair_id_ = value;
  // @@protoc_insertion_point(field_set:SC_ShowHandAddScore.chair_id)
}

// -------------------------------------------------------------------

// SC_ShowHandGiveUp

// optional int32 chair_id = 1;
inline bool SC_ShowHandGiveUp::has_chair_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SC_ShowHandGiveUp::set_has_chair_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SC_ShowHandGiveUp::clear_has_chair_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SC_ShowHandGiveUp::clear_chair_id() {
  chair_id_ = 0;
  clear_has_chair_id();
}
inline ::google::protobuf::int32 SC_ShowHandGiveUp::chair_id() const {
  // @@protoc_insertion_point(field_get:SC_ShowHandGiveUp.chair_id)
  return chair_id_;
}
inline void SC_ShowHandGiveUp::set_chair_id(::google::protobuf::int32 value) {
  set_has_chair_id();
  chair_id_ = value;
  // @@protoc_insertion_point(field_set:SC_ShowHandGiveUp.chair_id)
}

// -------------------------------------------------------------------

// SC_ShowHandPass

// optional int32 chair_id = 1;
inline bool SC_ShowHandPass::has_chair_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SC_ShowHandPass::set_has_chair_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SC_ShowHandPass::clear_has_chair_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SC_ShowHandPass::clear_chair_id() {
  chair_id_ = 0;
  clear_has_chair_id();
}
inline ::google::protobuf::int32 SC_ShowHandPass::chair_id() const {
  // @@protoc_insertion_point(field_get:SC_ShowHandPass.chair_id)
  return chair_id_;
}
inline void SC_ShowHandPass::set_chair_id(::google::protobuf::int32 value) {
  set_has_chair_id();
  chair_id_ = value;
  // @@protoc_insertion_point(field_set:SC_ShowHandPass.chair_id)
}

// -------------------------------------------------------------------

// SC_ShowHand_NextTurn

// optional int32 chair_id = 1;
inline bool SC_ShowHand_NextTurn::has_chair_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SC_ShowHand_NextTurn::set_has_chair_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SC_ShowHand_NextTurn::clear_has_chair_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SC_ShowHand_NextTurn::clear_chair_id() {
  chair_id_ = 0;
  clear_has_chair_id();
}
inline ::google::protobuf::int32 SC_ShowHand_NextTurn::chair_id() const {
  // @@protoc_insertion_point(field_get:SC_ShowHand_NextTurn.chair_id)
  return chair_id_;
}
inline void SC_ShowHand_NextTurn::set_chair_id(::google::protobuf::int32 value) {
  set_has_chair_id();
  chair_id_ = value;
  // @@protoc_insertion_point(field_set:SC_ShowHand_NextTurn.chair_id)
}

// optional int32 type = 2;
inline bool SC_ShowHand_NextTurn::has_type() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SC_ShowHand_NextTurn::set_has_type() {
  _has_bits_[0] |= 0x00000002u;
}
inline void SC_ShowHand_NextTurn::clear_has_type() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void SC_ShowHand_NextTurn::clear_type() {
  type_ = 0;
  clear_has_type();
}
inline ::google::protobuf::int32 SC_ShowHand_NextTurn::type() const {
  // @@protoc_insertion_point(field_get:SC_ShowHand_NextTurn.type)
  return type_;
}
inline void SC_ShowHand_NextTurn::set_type(::google::protobuf::int32 value) {
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:SC_ShowHand_NextTurn.type)
}

// optional int32 max_add = 3;
inline bool SC_ShowHand_NextTurn::has_max_add() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void SC_ShowHand_NextTurn::set_has_max_add() {
  _has_bits_[0] |= 0x00000004u;
}
inline void SC_ShowHand_NextTurn::clear_has_max_add() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void SC_ShowHand_NextTurn::clear_max_add() {
  max_add_ = 0;
  clear_has_max_add();
}
inline ::google::protobuf::int32 SC_ShowHand_NextTurn::max_add() const {
  // @@protoc_insertion_point(field_get:SC_ShowHand_NextTurn.max_add)
  return max_add_;
}
inline void SC_ShowHand_NextTurn::set_max_add(::google::protobuf::int32 value) {
  set_has_max_add();
  max_add_ = value;
  // @@protoc_insertion_point(field_set:SC_ShowHand_NextTurn.max_add)
}

// -------------------------------------------------------------------

// SC_ShowHandStartVote

// optional int32 chair_id = 1;
inline bool SC_ShowHandStartVote::has_chair_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SC_ShowHandStartVote::set_has_chair_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SC_ShowHandStartVote::clear_has_chair_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SC_ShowHandStartVote::clear_chair_id() {
  chair_id_ = 0;
  clear_has_chair_id();
}
inline ::google::protobuf::int32 SC_ShowHandStartVote::chair_id() const {
  // @@protoc_insertion_point(field_get:SC_ShowHandStartVote.chair_id)
  return chair_id_;
}
inline void SC_ShowHandStartVote::set_chair_id(::google::protobuf::int32 value) {
  set_has_chair_id();
  chair_id_ = value;
  // @@protoc_insertion_point(field_set:SC_ShowHandStartVote.chair_id)
}

// -------------------------------------------------------------------

// SC_ShowHandPlayerVoteRes

// optional int32 chair_id = 1;
inline bool SC_ShowHandPlayerVoteRes::has_chair_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SC_ShowHandPlayerVoteRes::set_has_chair_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SC_ShowHandPlayerVoteRes::clear_has_chair_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SC_ShowHandPlayerVoteRes::clear_chair_id() {
  chair_id_ = 0;
  clear_has_chair_id();
}
inline ::google::protobuf::int32 SC_ShowHandPlayerVoteRes::chair_id() const {
  // @@protoc_insertion_point(field_get:SC_ShowHandPlayerVoteRes.chair_id)
  return chair_id_;
}
inline void SC_ShowHandPlayerVoteRes::set_chair_id(::google::protobuf::int32 value) {
  set_has_chair_id();
  chair_id_ = value;
  // @@protoc_insertion_point(field_set:SC_ShowHandPlayerVoteRes.chair_id)
}

// optional bool agreen = 2;
inline bool SC_ShowHandPlayerVoteRes::has_agreen() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SC_ShowHandPlayerVoteRes::set_has_agreen() {
  _has_bits_[0] |= 0x00000002u;
}
inline void SC_ShowHandPlayerVoteRes::clear_has_agreen() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void SC_ShowHandPlayerVoteRes::clear_agreen() {
  agreen_ = false;
  clear_has_agreen();
}
inline bool SC_ShowHandPlayerVoteRes::agreen() const {
  // @@protoc_insertion_point(field_get:SC_ShowHandPlayerVoteRes.agreen)
  return agreen_;
}
inline void SC_ShowHandPlayerVoteRes::set_agreen(bool value) {
  set_has_agreen();
  agreen_ = value;
  // @@protoc_insertion_point(field_set:SC_ShowHandPlayerVoteRes.agreen)
}

#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)


#ifndef SWIG
namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::CS_ShowHandAddScore_MsgID> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::CS_ShowHandAddScore_MsgID>() {
  return ::CS_ShowHandAddScore_MsgID_descriptor();
}
template <> struct is_proto_enum< ::CS_ShowHandGiveUp_MsgID> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::CS_ShowHandGiveUp_MsgID>() {
  return ::CS_ShowHandGiveUp_MsgID_descriptor();
}
template <> struct is_proto_enum< ::CS_ShowHandPass_MsgID> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::CS_ShowHandPass_MsgID>() {
  return ::CS_ShowHandPass_MsgID_descriptor();
}
template <> struct is_proto_enum< ::CS_ShowHandGiveUpEixt_MsgID> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::CS_ShowHandGiveUpEixt_MsgID>() {
  return ::CS_ShowHandGiveUpEixt_MsgID_descriptor();
}
template <> struct is_proto_enum< ::CS_ShowHandMyVoteResult_MsgID> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::CS_ShowHandMyVoteResult_MsgID>() {
  return ::CS_ShowHandMyVoteResult_MsgID_descriptor();
}
template <> struct is_proto_enum< ::SC_ShowHand_Desk_Enter_MsgID> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::SC_ShowHand_Desk_Enter_MsgID>() {
  return ::SC_ShowHand_Desk_Enter_MsgID_descriptor();
}
template <> struct is_proto_enum< ::SC_ShowHand_Desk_State_MsgID> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::SC_ShowHand_Desk_State_MsgID>() {
  return ::SC_ShowHand_Desk_State_MsgID_descriptor();
}
template <> struct is_proto_enum< ::SC_ShowHand_Game_Finish_MsgID> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::SC_ShowHand_Game_Finish_MsgID>() {
  return ::SC_ShowHand_Game_Finish_MsgID_descriptor();
}
template <> struct is_proto_enum< ::SC_ShowHand_Next_Round_MsgID> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::SC_ShowHand_Next_Round_MsgID>() {
  return ::SC_ShowHand_Next_Round_MsgID_descriptor();
}
template <> struct is_proto_enum< ::SC_ShowHandAddScore_MsgID> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::SC_ShowHandAddScore_MsgID>() {
  return ::SC_ShowHandAddScore_MsgID_descriptor();
}
template <> struct is_proto_enum< ::SC_ShowHandGiveUp_MsgID> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::SC_ShowHandGiveUp_MsgID>() {
  return ::SC_ShowHandGiveUp_MsgID_descriptor();
}
template <> struct is_proto_enum< ::SC_ShowHandPass_MsgID> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::SC_ShowHandPass_MsgID>() {
  return ::SC_ShowHandPass_MsgID_descriptor();
}
template <> struct is_proto_enum< ::SC_ShowHand_NextTurn_MsgID> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::SC_ShowHand_NextTurn_MsgID>() {
  return ::SC_ShowHand_NextTurn_MsgID_descriptor();
}
template <> struct is_proto_enum< ::SC_ShowHandStartVote_MsgID> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::SC_ShowHandStartVote_MsgID>() {
  return ::SC_ShowHandStartVote_MsgID_descriptor();
}
template <> struct is_proto_enum< ::SC_ShowHandPlayerVoteRes_MsgID> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::SC_ShowHandPlayerVoteRes_MsgID>() {
  return ::SC_ShowHandPlayerVoteRes_MsgID_descriptor();
}

}  // namespace protobuf
}  // namespace google
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_public_5fshowhand_2eproto__INCLUDED
