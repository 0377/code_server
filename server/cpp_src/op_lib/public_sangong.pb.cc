// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: public_sangong.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "public_sangong.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
class SC_SanGong_GameStartDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<SC_SanGong_GameStart> {
} _SC_SanGong_GameStart_default_instance_;
class SC_SanGong_AskBankerDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<SC_SanGong_AskBanker> {
} _SC_SanGong_AskBanker_default_instance_;
class CS_SanGong_AskBankerDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CS_SanGong_AskBanker> {
} _CS_SanGong_AskBanker_default_instance_;
class SC_SanGong_TalkBankerDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<SC_SanGong_TalkBanker> {
} _SC_SanGong_TalkBanker_default_instance_;
class SC_SanGong_BankerDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<SC_SanGong_Banker> {
} _SC_SanGong_Banker_default_instance_;
class SC_SanGong_AskBetDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<SC_SanGong_AskBet> {
} _SC_SanGong_AskBet_default_instance_;
class CS_SanGong_AskBetDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CS_SanGong_AskBet> {
} _CS_SanGong_AskBet_default_instance_;
class SC_SanGong_BetDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<SC_SanGong_Bet> {
} _SC_SanGong_Bet_default_instance_;
class SanGong_Card_InfoDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<SanGong_Card_Info> {
} _SanGong_Card_Info_default_instance_;
class SC_SanGong_PostCardDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<SC_SanGong_PostCard> {
} _SC_SanGong_PostCard_default_instance_;
class SanGong_Player_InfoDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<SanGong_Player_Info> {
} _SanGong_Player_Info_default_instance_;
class SC_SanGong_PostResultDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<SC_SanGong_PostResult> {
} _SC_SanGong_PostResult_default_instance_;

namespace protobuf_public_5fsangong_2eproto {


namespace {

::google::protobuf::Metadata file_level_metadata[12];
const ::google::protobuf::EnumDescriptor* file_level_enum_descriptors[10];

}  // namespace

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTableField
    const TableStruct::entries[] = {
  {0, 0, 0, ::google::protobuf::internal::kInvalidMask, 0, 0},
};

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::AuxillaryParseTableField
    const TableStruct::aux[] = {
  ::google::protobuf::internal::AuxillaryParseTableField(),
};
PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTable const
    TableStruct::schema[] = {
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
};

const ::google::protobuf::uint32 TableStruct::offsets[] = {
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SC_SanGong_GameStart, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SC_SanGong_GameStart, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SC_SanGong_GameStart, pb_splayerinfo_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SC_SanGong_GameStart, breconnect_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SC_SanGong_GameStart, tablestatus_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SC_SanGong_GameStart, playerturn_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SC_SanGong_GameStart, zhuangchair_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SC_SanGong_GameStart, waittime_),
  ~0u,
  0,
  1,
  2,
  3,
  4,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SC_SanGong_AskBanker, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SC_SanGong_AskBanker, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SC_SanGong_AskBanker, chair_id_),
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CS_SanGong_AskBanker, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CS_SanGong_AskBanker, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CS_SanGong_AskBanker, brequest_),
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SC_SanGong_TalkBanker, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SC_SanGong_TalkBanker, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SC_SanGong_TalkBanker, chair_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SC_SanGong_TalkBanker, brequest_),
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SC_SanGong_Banker, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SC_SanGong_Banker, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SC_SanGong_Banker, chair_id_),
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SC_SanGong_AskBet, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SC_SanGong_AskBet, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SC_SanGong_AskBet, bets_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SC_SanGong_AskBet, chair_id_),
  ~0u,
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CS_SanGong_AskBet, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CS_SanGong_AskBet, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CS_SanGong_AskBet, target_),
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SC_SanGong_Bet, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SC_SanGong_Bet, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SC_SanGong_Bet, target_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SC_SanGong_Bet, chair_id_),
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SanGong_Card_Info, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SanGong_Card_Info, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SanGong_Card_Info, cards_),
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SC_SanGong_PostCard, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SC_SanGong_PostCard, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SC_SanGong_PostCard, pb_cards_),
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SanGong_Player_Info, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SanGong_Player_Info, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SanGong_Player_Info, cards_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SanGong_Player_Info, chair_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SanGong_Player_Info, add_total_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SanGong_Player_Info, cur_round_add_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SanGong_Player_Info, nick_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SanGong_Player_Info, icon_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SanGong_Player_Info, gold_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SanGong_Player_Info, guid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SanGong_Player_Info, is_win_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SanGong_Player_Info, is_getbanker_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SanGong_Player_Info, bets_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SanGong_Player_Info, win_money_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SanGong_Player_Info, taxes_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SanGong_Player_Info, lefttime_),
  ~0u,
  1,
  2,
  3,
  0,
  4,
  5,
  6,
  7,
  8,
  ~0u,
  9,
  10,
  11,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SC_SanGong_PostResult, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SC_SanGong_PostResult, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SC_SanGong_PostResult, pb_splayerinfo_),
  ~0u,
};

static const ::google::protobuf::internal::MigrationSchema schemas[] = {
  { 0, 11, sizeof(SC_SanGong_GameStart)},
  { 17, 23, sizeof(SC_SanGong_AskBanker)},
  { 24, 30, sizeof(CS_SanGong_AskBanker)},
  { 31, 38, sizeof(SC_SanGong_TalkBanker)},
  { 40, 46, sizeof(SC_SanGong_Banker)},
  { 47, 54, sizeof(SC_SanGong_AskBet)},
  { 56, 62, sizeof(CS_SanGong_AskBet)},
  { 63, 70, sizeof(SC_SanGong_Bet)},
  { 72, 78, sizeof(SanGong_Card_Info)},
  { 79, 85, sizeof(SC_SanGong_PostCard)},
  { 86, 105, sizeof(SanGong_Player_Info)},
  { 119, 125, sizeof(SC_SanGong_PostResult)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&_SC_SanGong_GameStart_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_SC_SanGong_AskBanker_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CS_SanGong_AskBanker_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_SC_SanGong_TalkBanker_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_SC_SanGong_Banker_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_SC_SanGong_AskBet_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CS_SanGong_AskBet_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_SC_SanGong_Bet_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_SanGong_Card_Info_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_SC_SanGong_PostCard_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_SanGong_Player_Info_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_SC_SanGong_PostResult_default_instance_),
};

namespace {

void protobuf_AssignDescriptors() {
  AddDescriptors();
  ::google::protobuf::MessageFactory* factory = NULL;
  AssignDescriptors(
      "public_sangong.proto", schemas, file_default_instances, TableStruct::offsets, factory,
      file_level_metadata, file_level_enum_descriptors, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 12);
}

}  // namespace

void TableStruct::Shutdown() {
  _SC_SanGong_GameStart_default_instance_.Shutdown();
  delete file_level_metadata[0].reflection;
  _SC_SanGong_AskBanker_default_instance_.Shutdown();
  delete file_level_metadata[1].reflection;
  _CS_SanGong_AskBanker_default_instance_.Shutdown();
  delete file_level_metadata[2].reflection;
  _SC_SanGong_TalkBanker_default_instance_.Shutdown();
  delete file_level_metadata[3].reflection;
  _SC_SanGong_Banker_default_instance_.Shutdown();
  delete file_level_metadata[4].reflection;
  _SC_SanGong_AskBet_default_instance_.Shutdown();
  delete file_level_metadata[5].reflection;
  _CS_SanGong_AskBet_default_instance_.Shutdown();
  delete file_level_metadata[6].reflection;
  _SC_SanGong_Bet_default_instance_.Shutdown();
  delete file_level_metadata[7].reflection;
  _SanGong_Card_Info_default_instance_.Shutdown();
  delete file_level_metadata[8].reflection;
  _SC_SanGong_PostCard_default_instance_.Shutdown();
  delete file_level_metadata[9].reflection;
  _SanGong_Player_Info_default_instance_.Shutdown();
  delete file_level_metadata[10].reflection;
  _SC_SanGong_PostResult_default_instance_.Shutdown();
  delete file_level_metadata[11].reflection;
}

void TableStruct::InitDefaultsImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::internal::InitProtobufDefaults();
  _SC_SanGong_GameStart_default_instance_.DefaultConstruct();
  _SC_SanGong_AskBanker_default_instance_.DefaultConstruct();
  _CS_SanGong_AskBanker_default_instance_.DefaultConstruct();
  _SC_SanGong_TalkBanker_default_instance_.DefaultConstruct();
  _SC_SanGong_Banker_default_instance_.DefaultConstruct();
  _SC_SanGong_AskBet_default_instance_.DefaultConstruct();
  _CS_SanGong_AskBet_default_instance_.DefaultConstruct();
  _SC_SanGong_Bet_default_instance_.DefaultConstruct();
  _SanGong_Card_Info_default_instance_.DefaultConstruct();
  _SC_SanGong_PostCard_default_instance_.DefaultConstruct();
  _SanGong_Player_Info_default_instance_.DefaultConstruct();
  _SC_SanGong_PostResult_default_instance_.DefaultConstruct();
}

void InitDefaults() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &TableStruct::InitDefaultsImpl);
}
void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] = {
      "\n\024public_sangong.proto\"\273\001\n\024SC_SanGong_Ga"
      "meStart\022,\n\016pb_splayerinfo\030\001 \003(\0132\024.SanGon"
      "g_Player_Info\022\022\n\nbreconnect\030\002 \001(\010\022\023\n\013tab"
      "lestatus\030\003 \001(\005\022\022\n\nplayerturn\030\004 \001(\005\022\023\n\013zh"
      "uangchair\030\005 \001(\005\022\020\n\010waittime\030\006 \001(\005\"\021\n\005Msg"
      "ID\022\010\n\002ID\020\340\332\001\";\n\024SC_SanGong_AskBanker\022\020\n\010"
      "chair_id\030\001 \001(\005\"\021\n\005MsgID\022\010\n\002ID\020\341\332\001\";\n\024CS_"
      "SanGong_AskBanker\022\020\n\010brequest\030\001 \001(\010\"\021\n\005M"
      "sgID\022\010\n\002ID\020\342\332\001\"N\n\025SC_SanGong_TalkBanker\022"
      "\020\n\010chair_id\030\001 \001(\005\022\020\n\010brequest\030\002 \001(\010\"\021\n\005M"
      "sgID\022\010\n\002ID\020\343\332\001\"8\n\021SC_SanGong_Banker\022\020\n\010c"
      "hair_id\030\001 \001(\005\"\021\n\005MsgID\022\010\n\002ID\020\344\332\001\"F\n\021SC_S"
      "anGong_AskBet\022\014\n\004Bets\030\001 \003(\005\022\020\n\010chair_id\030"
      "\002 \001(\005\"\021\n\005MsgID\022\010\n\002ID\020\345\332\001\"6\n\021CS_SanGong_A"
      "skBet\022\016\n\006target\030\001 \001(\005\"\021\n\005MsgID\022\010\n\002ID\020\346\332\001"
      "\"E\n\016SC_SanGong_Bet\022\016\n\006target\030\001 \001(\005\022\020\n\010ch"
      "air_id\030\002 \001(\005\"\021\n\005MsgID\022\010\n\002ID\020\347\332\001\"\"\n\021SanGo"
      "ng_Card_Info\022\r\n\005cards\030\001 \003(\005\"N\n\023SC_SanGon"
      "g_PostCard\022$\n\010pb_cards\030\001 \003(\0132\022.SanGong_C"
      "ard_Info\"\021\n\005MsgID\022\010\n\002ID\020\350\332\001\"\200\002\n\023SanGong_"
      "Player_Info\022\r\n\005cards\030\001 \003(\005\022\020\n\010chair_id\030\002"
      " \001(\005\022\021\n\tadd_total\030\003 \001(\005\022\025\n\rcur_round_add"
      "\030\004 \001(\005\022\014\n\004nick\030\005 \001(\t\022\014\n\004icon\030\006 \001(\005\022\014\n\004go"
      "ld\030\007 \001(\003\022\014\n\004guid\030\010 \001(\005\022\016\n\006is_win\030\t \001(\010\022\024"
      "\n\014is_getbanker\030\n \001(\010\022\014\n\004Bets\030\013 \003(\005\022\021\n\twi"
      "n_money\030\014 \001(\005\022\r\n\005taxes\030\r \001(\005\022\020\n\010lefttime"
      "\030\016 \001(\005\"X\n\025SC_SanGong_PostResult\022,\n\016pb_sp"
      "layerinfo\030\001 \003(\0132\024.SanGong_Player_Info\"\021\n"
      "\005MsgID\022\010\n\002ID\020\351\332\001"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 1136);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "public_sangong.proto", &protobuf_RegisterTypes);
  ::google::protobuf::internal::OnShutdown(&TableStruct::Shutdown);
}

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;

}  // namespace protobuf_public_5fsangong_2eproto

const ::google::protobuf::EnumDescriptor* SC_SanGong_GameStart_MsgID_descriptor() {
  protobuf_public_5fsangong_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_public_5fsangong_2eproto::file_level_enum_descriptors[0];
}
bool SC_SanGong_GameStart_MsgID_IsValid(int value) {
  switch (value) {
    case 28000:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const SC_SanGong_GameStart_MsgID SC_SanGong_GameStart::ID;
const SC_SanGong_GameStart_MsgID SC_SanGong_GameStart::MsgID_MIN;
const SC_SanGong_GameStart_MsgID SC_SanGong_GameStart::MsgID_MAX;
const int SC_SanGong_GameStart::MsgID_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* SC_SanGong_AskBanker_MsgID_descriptor() {
  protobuf_public_5fsangong_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_public_5fsangong_2eproto::file_level_enum_descriptors[1];
}
bool SC_SanGong_AskBanker_MsgID_IsValid(int value) {
  switch (value) {
    case 28001:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const SC_SanGong_AskBanker_MsgID SC_SanGong_AskBanker::ID;
const SC_SanGong_AskBanker_MsgID SC_SanGong_AskBanker::MsgID_MIN;
const SC_SanGong_AskBanker_MsgID SC_SanGong_AskBanker::MsgID_MAX;
const int SC_SanGong_AskBanker::MsgID_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* CS_SanGong_AskBanker_MsgID_descriptor() {
  protobuf_public_5fsangong_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_public_5fsangong_2eproto::file_level_enum_descriptors[2];
}
bool CS_SanGong_AskBanker_MsgID_IsValid(int value) {
  switch (value) {
    case 28002:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const CS_SanGong_AskBanker_MsgID CS_SanGong_AskBanker::ID;
const CS_SanGong_AskBanker_MsgID CS_SanGong_AskBanker::MsgID_MIN;
const CS_SanGong_AskBanker_MsgID CS_SanGong_AskBanker::MsgID_MAX;
const int CS_SanGong_AskBanker::MsgID_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* SC_SanGong_TalkBanker_MsgID_descriptor() {
  protobuf_public_5fsangong_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_public_5fsangong_2eproto::file_level_enum_descriptors[3];
}
bool SC_SanGong_TalkBanker_MsgID_IsValid(int value) {
  switch (value) {
    case 28003:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const SC_SanGong_TalkBanker_MsgID SC_SanGong_TalkBanker::ID;
const SC_SanGong_TalkBanker_MsgID SC_SanGong_TalkBanker::MsgID_MIN;
const SC_SanGong_TalkBanker_MsgID SC_SanGong_TalkBanker::MsgID_MAX;
const int SC_SanGong_TalkBanker::MsgID_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* SC_SanGong_Banker_MsgID_descriptor() {
  protobuf_public_5fsangong_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_public_5fsangong_2eproto::file_level_enum_descriptors[4];
}
bool SC_SanGong_Banker_MsgID_IsValid(int value) {
  switch (value) {
    case 28004:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const SC_SanGong_Banker_MsgID SC_SanGong_Banker::ID;
const SC_SanGong_Banker_MsgID SC_SanGong_Banker::MsgID_MIN;
const SC_SanGong_Banker_MsgID SC_SanGong_Banker::MsgID_MAX;
const int SC_SanGong_Banker::MsgID_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* SC_SanGong_AskBet_MsgID_descriptor() {
  protobuf_public_5fsangong_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_public_5fsangong_2eproto::file_level_enum_descriptors[5];
}
bool SC_SanGong_AskBet_MsgID_IsValid(int value) {
  switch (value) {
    case 28005:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const SC_SanGong_AskBet_MsgID SC_SanGong_AskBet::ID;
const SC_SanGong_AskBet_MsgID SC_SanGong_AskBet::MsgID_MIN;
const SC_SanGong_AskBet_MsgID SC_SanGong_AskBet::MsgID_MAX;
const int SC_SanGong_AskBet::MsgID_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* CS_SanGong_AskBet_MsgID_descriptor() {
  protobuf_public_5fsangong_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_public_5fsangong_2eproto::file_level_enum_descriptors[6];
}
bool CS_SanGong_AskBet_MsgID_IsValid(int value) {
  switch (value) {
    case 28006:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const CS_SanGong_AskBet_MsgID CS_SanGong_AskBet::ID;
const CS_SanGong_AskBet_MsgID CS_SanGong_AskBet::MsgID_MIN;
const CS_SanGong_AskBet_MsgID CS_SanGong_AskBet::MsgID_MAX;
const int CS_SanGong_AskBet::MsgID_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* SC_SanGong_Bet_MsgID_descriptor() {
  protobuf_public_5fsangong_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_public_5fsangong_2eproto::file_level_enum_descriptors[7];
}
bool SC_SanGong_Bet_MsgID_IsValid(int value) {
  switch (value) {
    case 28007:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const SC_SanGong_Bet_MsgID SC_SanGong_Bet::ID;
const SC_SanGong_Bet_MsgID SC_SanGong_Bet::MsgID_MIN;
const SC_SanGong_Bet_MsgID SC_SanGong_Bet::MsgID_MAX;
const int SC_SanGong_Bet::MsgID_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* SC_SanGong_PostCard_MsgID_descriptor() {
  protobuf_public_5fsangong_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_public_5fsangong_2eproto::file_level_enum_descriptors[8];
}
bool SC_SanGong_PostCard_MsgID_IsValid(int value) {
  switch (value) {
    case 28008:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const SC_SanGong_PostCard_MsgID SC_SanGong_PostCard::ID;
const SC_SanGong_PostCard_MsgID SC_SanGong_PostCard::MsgID_MIN;
const SC_SanGong_PostCard_MsgID SC_SanGong_PostCard::MsgID_MAX;
const int SC_SanGong_PostCard::MsgID_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* SC_SanGong_PostResult_MsgID_descriptor() {
  protobuf_public_5fsangong_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_public_5fsangong_2eproto::file_level_enum_descriptors[9];
}
bool SC_SanGong_PostResult_MsgID_IsValid(int value) {
  switch (value) {
    case 28009:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const SC_SanGong_PostResult_MsgID SC_SanGong_PostResult::ID;
const SC_SanGong_PostResult_MsgID SC_SanGong_PostResult::MsgID_MIN;
const SC_SanGong_PostResult_MsgID SC_SanGong_PostResult::MsgID_MAX;
const int SC_SanGong_PostResult::MsgID_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SC_SanGong_GameStart::kPbSplayerinfoFieldNumber;
const int SC_SanGong_GameStart::kBreconnectFieldNumber;
const int SC_SanGong_GameStart::kTablestatusFieldNumber;
const int SC_SanGong_GameStart::kPlayerturnFieldNumber;
const int SC_SanGong_GameStart::kZhuangchairFieldNumber;
const int SC_SanGong_GameStart::kWaittimeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SC_SanGong_GameStart::SC_SanGong_GameStart()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_public_5fsangong_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:SC_SanGong_GameStart)
}
SC_SanGong_GameStart::SC_SanGong_GameStart(const SC_SanGong_GameStart& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      pb_splayerinfo_(from.pb_splayerinfo_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&breconnect_, &from.breconnect_,
    reinterpret_cast<char*>(&waittime_) -
    reinterpret_cast<char*>(&breconnect_) + sizeof(waittime_));
  // @@protoc_insertion_point(copy_constructor:SC_SanGong_GameStart)
}

void SC_SanGong_GameStart::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&breconnect_, 0, reinterpret_cast<char*>(&waittime_) -
    reinterpret_cast<char*>(&breconnect_) + sizeof(waittime_));
}

SC_SanGong_GameStart::~SC_SanGong_GameStart() {
  // @@protoc_insertion_point(destructor:SC_SanGong_GameStart)
  SharedDtor();
}

void SC_SanGong_GameStart::SharedDtor() {
}

void SC_SanGong_GameStart::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SC_SanGong_GameStart::descriptor() {
  protobuf_public_5fsangong_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_public_5fsangong_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const SC_SanGong_GameStart& SC_SanGong_GameStart::default_instance() {
  protobuf_public_5fsangong_2eproto::InitDefaults();
  return *internal_default_instance();
}

SC_SanGong_GameStart* SC_SanGong_GameStart::New(::google::protobuf::Arena* arena) const {
  SC_SanGong_GameStart* n = new SC_SanGong_GameStart;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SC_SanGong_GameStart::Clear() {
// @@protoc_insertion_point(message_clear_start:SC_SanGong_GameStart)
  pb_splayerinfo_.Clear();
  if (_has_bits_[0 / 32] & 31u) {
    ::memset(&breconnect_, 0, reinterpret_cast<char*>(&waittime_) -
      reinterpret_cast<char*>(&breconnect_) + sizeof(waittime_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool SC_SanGong_GameStart::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:SC_SanGong_GameStart)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .SanGong_Player_Info pb_splayerinfo = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_pb_splayerinfo()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool breconnect = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_breconnect();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &breconnect_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 tablestatus = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {
          set_has_tablestatus();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &tablestatus_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 playerturn = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u)) {
          set_has_playerturn();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &playerturn_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 zhuangchair = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u)) {
          set_has_zhuangchair();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &zhuangchair_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 waittime = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u)) {
          set_has_waittime();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &waittime_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:SC_SanGong_GameStart)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:SC_SanGong_GameStart)
  return false;
#undef DO_
}

void SC_SanGong_GameStart::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:SC_SanGong_GameStart)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .SanGong_Player_Info pb_splayerinfo = 1;
  for (unsigned int i = 0, n = this->pb_splayerinfo_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->pb_splayerinfo(i), output);
  }

  cached_has_bits = _has_bits_[0];
  // optional bool breconnect = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->breconnect(), output);
  }

  // optional int32 tablestatus = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->tablestatus(), output);
  }

  // optional int32 playerturn = 4;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->playerturn(), output);
  }

  // optional int32 zhuangchair = 5;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->zhuangchair(), output);
  }

  // optional int32 waittime = 6;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->waittime(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:SC_SanGong_GameStart)
}

::google::protobuf::uint8* SC_SanGong_GameStart::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:SC_SanGong_GameStart)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .SanGong_Player_Info pb_splayerinfo = 1;
  for (unsigned int i = 0, n = this->pb_splayerinfo_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, this->pb_splayerinfo(i), deterministic, target);
  }

  cached_has_bits = _has_bits_[0];
  // optional bool breconnect = 2;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->breconnect(), target);
  }

  // optional int32 tablestatus = 3;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->tablestatus(), target);
  }

  // optional int32 playerturn = 4;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->playerturn(), target);
  }

  // optional int32 zhuangchair = 5;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->zhuangchair(), target);
  }

  // optional int32 waittime = 6;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->waittime(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SC_SanGong_GameStart)
  return target;
}

size_t SC_SanGong_GameStart::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SC_SanGong_GameStart)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // repeated .SanGong_Player_Info pb_splayerinfo = 1;
  {
    unsigned int count = this->pb_splayerinfo_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->pb_splayerinfo(i));
    }
  }

  if (_has_bits_[0 / 32] & 31u) {
    // optional bool breconnect = 2;
    if (has_breconnect()) {
      total_size += 1 + 1;
    }

    // optional int32 tablestatus = 3;
    if (has_tablestatus()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->tablestatus());
    }

    // optional int32 playerturn = 4;
    if (has_playerturn()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->playerturn());
    }

    // optional int32 zhuangchair = 5;
    if (has_zhuangchair()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->zhuangchair());
    }

    // optional int32 waittime = 6;
    if (has_waittime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->waittime());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SC_SanGong_GameStart::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:SC_SanGong_GameStart)
  GOOGLE_DCHECK_NE(&from, this);
  const SC_SanGong_GameStart* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SC_SanGong_GameStart>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:SC_SanGong_GameStart)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:SC_SanGong_GameStart)
    MergeFrom(*source);
  }
}

void SC_SanGong_GameStart::MergeFrom(const SC_SanGong_GameStart& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:SC_SanGong_GameStart)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  pb_splayerinfo_.MergeFrom(from.pb_splayerinfo_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 31u) {
    if (cached_has_bits & 0x00000001u) {
      breconnect_ = from.breconnect_;
    }
    if (cached_has_bits & 0x00000002u) {
      tablestatus_ = from.tablestatus_;
    }
    if (cached_has_bits & 0x00000004u) {
      playerturn_ = from.playerturn_;
    }
    if (cached_has_bits & 0x00000008u) {
      zhuangchair_ = from.zhuangchair_;
    }
    if (cached_has_bits & 0x00000010u) {
      waittime_ = from.waittime_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void SC_SanGong_GameStart::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:SC_SanGong_GameStart)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SC_SanGong_GameStart::CopyFrom(const SC_SanGong_GameStart& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SC_SanGong_GameStart)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SC_SanGong_GameStart::IsInitialized() const {
  return true;
}

void SC_SanGong_GameStart::Swap(SC_SanGong_GameStart* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SC_SanGong_GameStart::InternalSwap(SC_SanGong_GameStart* other) {
  pb_splayerinfo_.InternalSwap(&other->pb_splayerinfo_);
  std::swap(breconnect_, other->breconnect_);
  std::swap(tablestatus_, other->tablestatus_);
  std::swap(playerturn_, other->playerturn_);
  std::swap(zhuangchair_, other->zhuangchair_);
  std::swap(waittime_, other->waittime_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SC_SanGong_GameStart::GetMetadata() const {
  protobuf_public_5fsangong_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_public_5fsangong_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SC_SanGong_GameStart

// repeated .SanGong_Player_Info pb_splayerinfo = 1;
int SC_SanGong_GameStart::pb_splayerinfo_size() const {
  return pb_splayerinfo_.size();
}
void SC_SanGong_GameStart::clear_pb_splayerinfo() {
  pb_splayerinfo_.Clear();
}
const ::SanGong_Player_Info& SC_SanGong_GameStart::pb_splayerinfo(int index) const {
  // @@protoc_insertion_point(field_get:SC_SanGong_GameStart.pb_splayerinfo)
  return pb_splayerinfo_.Get(index);
}
::SanGong_Player_Info* SC_SanGong_GameStart::mutable_pb_splayerinfo(int index) {
  // @@protoc_insertion_point(field_mutable:SC_SanGong_GameStart.pb_splayerinfo)
  return pb_splayerinfo_.Mutable(index);
}
::SanGong_Player_Info* SC_SanGong_GameStart::add_pb_splayerinfo() {
  // @@protoc_insertion_point(field_add:SC_SanGong_GameStart.pb_splayerinfo)
  return pb_splayerinfo_.Add();
}
::google::protobuf::RepeatedPtrField< ::SanGong_Player_Info >*
SC_SanGong_GameStart::mutable_pb_splayerinfo() {
  // @@protoc_insertion_point(field_mutable_list:SC_SanGong_GameStart.pb_splayerinfo)
  return &pb_splayerinfo_;
}
const ::google::protobuf::RepeatedPtrField< ::SanGong_Player_Info >&
SC_SanGong_GameStart::pb_splayerinfo() const {
  // @@protoc_insertion_point(field_list:SC_SanGong_GameStart.pb_splayerinfo)
  return pb_splayerinfo_;
}

// optional bool breconnect = 2;
bool SC_SanGong_GameStart::has_breconnect() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void SC_SanGong_GameStart::set_has_breconnect() {
  _has_bits_[0] |= 0x00000001u;
}
void SC_SanGong_GameStart::clear_has_breconnect() {
  _has_bits_[0] &= ~0x00000001u;
}
void SC_SanGong_GameStart::clear_breconnect() {
  breconnect_ = false;
  clear_has_breconnect();
}
bool SC_SanGong_GameStart::breconnect() const {
  // @@protoc_insertion_point(field_get:SC_SanGong_GameStart.breconnect)
  return breconnect_;
}
void SC_SanGong_GameStart::set_breconnect(bool value) {
  set_has_breconnect();
  breconnect_ = value;
  // @@protoc_insertion_point(field_set:SC_SanGong_GameStart.breconnect)
}

// optional int32 tablestatus = 3;
bool SC_SanGong_GameStart::has_tablestatus() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void SC_SanGong_GameStart::set_has_tablestatus() {
  _has_bits_[0] |= 0x00000002u;
}
void SC_SanGong_GameStart::clear_has_tablestatus() {
  _has_bits_[0] &= ~0x00000002u;
}
void SC_SanGong_GameStart::clear_tablestatus() {
  tablestatus_ = 0;
  clear_has_tablestatus();
}
::google::protobuf::int32 SC_SanGong_GameStart::tablestatus() const {
  // @@protoc_insertion_point(field_get:SC_SanGong_GameStart.tablestatus)
  return tablestatus_;
}
void SC_SanGong_GameStart::set_tablestatus(::google::protobuf::int32 value) {
  set_has_tablestatus();
  tablestatus_ = value;
  // @@protoc_insertion_point(field_set:SC_SanGong_GameStart.tablestatus)
}

// optional int32 playerturn = 4;
bool SC_SanGong_GameStart::has_playerturn() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void SC_SanGong_GameStart::set_has_playerturn() {
  _has_bits_[0] |= 0x00000004u;
}
void SC_SanGong_GameStart::clear_has_playerturn() {
  _has_bits_[0] &= ~0x00000004u;
}
void SC_SanGong_GameStart::clear_playerturn() {
  playerturn_ = 0;
  clear_has_playerturn();
}
::google::protobuf::int32 SC_SanGong_GameStart::playerturn() const {
  // @@protoc_insertion_point(field_get:SC_SanGong_GameStart.playerturn)
  return playerturn_;
}
void SC_SanGong_GameStart::set_playerturn(::google::protobuf::int32 value) {
  set_has_playerturn();
  playerturn_ = value;
  // @@protoc_insertion_point(field_set:SC_SanGong_GameStart.playerturn)
}

// optional int32 zhuangchair = 5;
bool SC_SanGong_GameStart::has_zhuangchair() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void SC_SanGong_GameStart::set_has_zhuangchair() {
  _has_bits_[0] |= 0x00000008u;
}
void SC_SanGong_GameStart::clear_has_zhuangchair() {
  _has_bits_[0] &= ~0x00000008u;
}
void SC_SanGong_GameStart::clear_zhuangchair() {
  zhuangchair_ = 0;
  clear_has_zhuangchair();
}
::google::protobuf::int32 SC_SanGong_GameStart::zhuangchair() const {
  // @@protoc_insertion_point(field_get:SC_SanGong_GameStart.zhuangchair)
  return zhuangchair_;
}
void SC_SanGong_GameStart::set_zhuangchair(::google::protobuf::int32 value) {
  set_has_zhuangchair();
  zhuangchair_ = value;
  // @@protoc_insertion_point(field_set:SC_SanGong_GameStart.zhuangchair)
}

// optional int32 waittime = 6;
bool SC_SanGong_GameStart::has_waittime() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void SC_SanGong_GameStart::set_has_waittime() {
  _has_bits_[0] |= 0x00000010u;
}
void SC_SanGong_GameStart::clear_has_waittime() {
  _has_bits_[0] &= ~0x00000010u;
}
void SC_SanGong_GameStart::clear_waittime() {
  waittime_ = 0;
  clear_has_waittime();
}
::google::protobuf::int32 SC_SanGong_GameStart::waittime() const {
  // @@protoc_insertion_point(field_get:SC_SanGong_GameStart.waittime)
  return waittime_;
}
void SC_SanGong_GameStart::set_waittime(::google::protobuf::int32 value) {
  set_has_waittime();
  waittime_ = value;
  // @@protoc_insertion_point(field_set:SC_SanGong_GameStart.waittime)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SC_SanGong_AskBanker::kChairIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SC_SanGong_AskBanker::SC_SanGong_AskBanker()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_public_5fsangong_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:SC_SanGong_AskBanker)
}
SC_SanGong_AskBanker::SC_SanGong_AskBanker(const SC_SanGong_AskBanker& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  chair_id_ = from.chair_id_;
  // @@protoc_insertion_point(copy_constructor:SC_SanGong_AskBanker)
}

void SC_SanGong_AskBanker::SharedCtor() {
  _cached_size_ = 0;
  chair_id_ = 0;
}

SC_SanGong_AskBanker::~SC_SanGong_AskBanker() {
  // @@protoc_insertion_point(destructor:SC_SanGong_AskBanker)
  SharedDtor();
}

void SC_SanGong_AskBanker::SharedDtor() {
}

void SC_SanGong_AskBanker::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SC_SanGong_AskBanker::descriptor() {
  protobuf_public_5fsangong_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_public_5fsangong_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const SC_SanGong_AskBanker& SC_SanGong_AskBanker::default_instance() {
  protobuf_public_5fsangong_2eproto::InitDefaults();
  return *internal_default_instance();
}

SC_SanGong_AskBanker* SC_SanGong_AskBanker::New(::google::protobuf::Arena* arena) const {
  SC_SanGong_AskBanker* n = new SC_SanGong_AskBanker;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SC_SanGong_AskBanker::Clear() {
// @@protoc_insertion_point(message_clear_start:SC_SanGong_AskBanker)
  chair_id_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool SC_SanGong_AskBanker::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:SC_SanGong_AskBanker)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 chair_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_chair_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &chair_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:SC_SanGong_AskBanker)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:SC_SanGong_AskBanker)
  return false;
#undef DO_
}

void SC_SanGong_AskBanker::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:SC_SanGong_AskBanker)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 chair_id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->chair_id(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:SC_SanGong_AskBanker)
}

::google::protobuf::uint8* SC_SanGong_AskBanker::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:SC_SanGong_AskBanker)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 chair_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->chair_id(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SC_SanGong_AskBanker)
  return target;
}

size_t SC_SanGong_AskBanker::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SC_SanGong_AskBanker)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // optional int32 chair_id = 1;
  if (has_chair_id()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->chair_id());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SC_SanGong_AskBanker::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:SC_SanGong_AskBanker)
  GOOGLE_DCHECK_NE(&from, this);
  const SC_SanGong_AskBanker* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SC_SanGong_AskBanker>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:SC_SanGong_AskBanker)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:SC_SanGong_AskBanker)
    MergeFrom(*source);
  }
}

void SC_SanGong_AskBanker::MergeFrom(const SC_SanGong_AskBanker& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:SC_SanGong_AskBanker)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_chair_id()) {
    set_chair_id(from.chair_id());
  }
}

void SC_SanGong_AskBanker::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:SC_SanGong_AskBanker)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SC_SanGong_AskBanker::CopyFrom(const SC_SanGong_AskBanker& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SC_SanGong_AskBanker)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SC_SanGong_AskBanker::IsInitialized() const {
  return true;
}

void SC_SanGong_AskBanker::Swap(SC_SanGong_AskBanker* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SC_SanGong_AskBanker::InternalSwap(SC_SanGong_AskBanker* other) {
  std::swap(chair_id_, other->chair_id_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SC_SanGong_AskBanker::GetMetadata() const {
  protobuf_public_5fsangong_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_public_5fsangong_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SC_SanGong_AskBanker

// optional int32 chair_id = 1;
bool SC_SanGong_AskBanker::has_chair_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void SC_SanGong_AskBanker::set_has_chair_id() {
  _has_bits_[0] |= 0x00000001u;
}
void SC_SanGong_AskBanker::clear_has_chair_id() {
  _has_bits_[0] &= ~0x00000001u;
}
void SC_SanGong_AskBanker::clear_chair_id() {
  chair_id_ = 0;
  clear_has_chair_id();
}
::google::protobuf::int32 SC_SanGong_AskBanker::chair_id() const {
  // @@protoc_insertion_point(field_get:SC_SanGong_AskBanker.chair_id)
  return chair_id_;
}
void SC_SanGong_AskBanker::set_chair_id(::google::protobuf::int32 value) {
  set_has_chair_id();
  chair_id_ = value;
  // @@protoc_insertion_point(field_set:SC_SanGong_AskBanker.chair_id)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CS_SanGong_AskBanker::kBrequestFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CS_SanGong_AskBanker::CS_SanGong_AskBanker()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_public_5fsangong_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:CS_SanGong_AskBanker)
}
CS_SanGong_AskBanker::CS_SanGong_AskBanker(const CS_SanGong_AskBanker& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  brequest_ = from.brequest_;
  // @@protoc_insertion_point(copy_constructor:CS_SanGong_AskBanker)
}

void CS_SanGong_AskBanker::SharedCtor() {
  _cached_size_ = 0;
  brequest_ = false;
}

CS_SanGong_AskBanker::~CS_SanGong_AskBanker() {
  // @@protoc_insertion_point(destructor:CS_SanGong_AskBanker)
  SharedDtor();
}

void CS_SanGong_AskBanker::SharedDtor() {
}

void CS_SanGong_AskBanker::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CS_SanGong_AskBanker::descriptor() {
  protobuf_public_5fsangong_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_public_5fsangong_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CS_SanGong_AskBanker& CS_SanGong_AskBanker::default_instance() {
  protobuf_public_5fsangong_2eproto::InitDefaults();
  return *internal_default_instance();
}

CS_SanGong_AskBanker* CS_SanGong_AskBanker::New(::google::protobuf::Arena* arena) const {
  CS_SanGong_AskBanker* n = new CS_SanGong_AskBanker;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CS_SanGong_AskBanker::Clear() {
// @@protoc_insertion_point(message_clear_start:CS_SanGong_AskBanker)
  brequest_ = false;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CS_SanGong_AskBanker::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CS_SanGong_AskBanker)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bool brequest = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_brequest();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &brequest_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CS_SanGong_AskBanker)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CS_SanGong_AskBanker)
  return false;
#undef DO_
}

void CS_SanGong_AskBanker::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CS_SanGong_AskBanker)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool brequest = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->brequest(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CS_SanGong_AskBanker)
}

::google::protobuf::uint8* CS_SanGong_AskBanker::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CS_SanGong_AskBanker)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool brequest = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->brequest(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CS_SanGong_AskBanker)
  return target;
}

size_t CS_SanGong_AskBanker::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CS_SanGong_AskBanker)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // optional bool brequest = 1;
  if (has_brequest()) {
    total_size += 1 + 1;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CS_SanGong_AskBanker::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CS_SanGong_AskBanker)
  GOOGLE_DCHECK_NE(&from, this);
  const CS_SanGong_AskBanker* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CS_SanGong_AskBanker>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CS_SanGong_AskBanker)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CS_SanGong_AskBanker)
    MergeFrom(*source);
  }
}

void CS_SanGong_AskBanker::MergeFrom(const CS_SanGong_AskBanker& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CS_SanGong_AskBanker)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_brequest()) {
    set_brequest(from.brequest());
  }
}

void CS_SanGong_AskBanker::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CS_SanGong_AskBanker)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CS_SanGong_AskBanker::CopyFrom(const CS_SanGong_AskBanker& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CS_SanGong_AskBanker)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CS_SanGong_AskBanker::IsInitialized() const {
  return true;
}

void CS_SanGong_AskBanker::Swap(CS_SanGong_AskBanker* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CS_SanGong_AskBanker::InternalSwap(CS_SanGong_AskBanker* other) {
  std::swap(brequest_, other->brequest_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CS_SanGong_AskBanker::GetMetadata() const {
  protobuf_public_5fsangong_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_public_5fsangong_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CS_SanGong_AskBanker

// optional bool brequest = 1;
bool CS_SanGong_AskBanker::has_brequest() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CS_SanGong_AskBanker::set_has_brequest() {
  _has_bits_[0] |= 0x00000001u;
}
void CS_SanGong_AskBanker::clear_has_brequest() {
  _has_bits_[0] &= ~0x00000001u;
}
void CS_SanGong_AskBanker::clear_brequest() {
  brequest_ = false;
  clear_has_brequest();
}
bool CS_SanGong_AskBanker::brequest() const {
  // @@protoc_insertion_point(field_get:CS_SanGong_AskBanker.brequest)
  return brequest_;
}
void CS_SanGong_AskBanker::set_brequest(bool value) {
  set_has_brequest();
  brequest_ = value;
  // @@protoc_insertion_point(field_set:CS_SanGong_AskBanker.brequest)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SC_SanGong_TalkBanker::kChairIdFieldNumber;
const int SC_SanGong_TalkBanker::kBrequestFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SC_SanGong_TalkBanker::SC_SanGong_TalkBanker()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_public_5fsangong_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:SC_SanGong_TalkBanker)
}
SC_SanGong_TalkBanker::SC_SanGong_TalkBanker(const SC_SanGong_TalkBanker& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&chair_id_, &from.chair_id_,
    reinterpret_cast<char*>(&brequest_) -
    reinterpret_cast<char*>(&chair_id_) + sizeof(brequest_));
  // @@protoc_insertion_point(copy_constructor:SC_SanGong_TalkBanker)
}

void SC_SanGong_TalkBanker::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&chair_id_, 0, reinterpret_cast<char*>(&brequest_) -
    reinterpret_cast<char*>(&chair_id_) + sizeof(brequest_));
}

SC_SanGong_TalkBanker::~SC_SanGong_TalkBanker() {
  // @@protoc_insertion_point(destructor:SC_SanGong_TalkBanker)
  SharedDtor();
}

void SC_SanGong_TalkBanker::SharedDtor() {
}

void SC_SanGong_TalkBanker::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SC_SanGong_TalkBanker::descriptor() {
  protobuf_public_5fsangong_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_public_5fsangong_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const SC_SanGong_TalkBanker& SC_SanGong_TalkBanker::default_instance() {
  protobuf_public_5fsangong_2eproto::InitDefaults();
  return *internal_default_instance();
}

SC_SanGong_TalkBanker* SC_SanGong_TalkBanker::New(::google::protobuf::Arena* arena) const {
  SC_SanGong_TalkBanker* n = new SC_SanGong_TalkBanker;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SC_SanGong_TalkBanker::Clear() {
// @@protoc_insertion_point(message_clear_start:SC_SanGong_TalkBanker)
  if (_has_bits_[0 / 32] & 3u) {
    ::memset(&chair_id_, 0, reinterpret_cast<char*>(&brequest_) -
      reinterpret_cast<char*>(&chair_id_) + sizeof(brequest_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool SC_SanGong_TalkBanker::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:SC_SanGong_TalkBanker)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 chair_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_chair_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &chair_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool brequest = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_brequest();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &brequest_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:SC_SanGong_TalkBanker)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:SC_SanGong_TalkBanker)
  return false;
#undef DO_
}

void SC_SanGong_TalkBanker::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:SC_SanGong_TalkBanker)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 chair_id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->chair_id(), output);
  }

  // optional bool brequest = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->brequest(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:SC_SanGong_TalkBanker)
}

::google::protobuf::uint8* SC_SanGong_TalkBanker::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:SC_SanGong_TalkBanker)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 chair_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->chair_id(), target);
  }

  // optional bool brequest = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->brequest(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SC_SanGong_TalkBanker)
  return target;
}

size_t SC_SanGong_TalkBanker::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SC_SanGong_TalkBanker)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 3u) {
    // optional int32 chair_id = 1;
    if (has_chair_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->chair_id());
    }

    // optional bool brequest = 2;
    if (has_brequest()) {
      total_size += 1 + 1;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SC_SanGong_TalkBanker::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:SC_SanGong_TalkBanker)
  GOOGLE_DCHECK_NE(&from, this);
  const SC_SanGong_TalkBanker* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SC_SanGong_TalkBanker>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:SC_SanGong_TalkBanker)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:SC_SanGong_TalkBanker)
    MergeFrom(*source);
  }
}

void SC_SanGong_TalkBanker::MergeFrom(const SC_SanGong_TalkBanker& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:SC_SanGong_TalkBanker)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      chair_id_ = from.chair_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      brequest_ = from.brequest_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void SC_SanGong_TalkBanker::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:SC_SanGong_TalkBanker)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SC_SanGong_TalkBanker::CopyFrom(const SC_SanGong_TalkBanker& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SC_SanGong_TalkBanker)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SC_SanGong_TalkBanker::IsInitialized() const {
  return true;
}

void SC_SanGong_TalkBanker::Swap(SC_SanGong_TalkBanker* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SC_SanGong_TalkBanker::InternalSwap(SC_SanGong_TalkBanker* other) {
  std::swap(chair_id_, other->chair_id_);
  std::swap(brequest_, other->brequest_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SC_SanGong_TalkBanker::GetMetadata() const {
  protobuf_public_5fsangong_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_public_5fsangong_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SC_SanGong_TalkBanker

// optional int32 chair_id = 1;
bool SC_SanGong_TalkBanker::has_chair_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void SC_SanGong_TalkBanker::set_has_chair_id() {
  _has_bits_[0] |= 0x00000001u;
}
void SC_SanGong_TalkBanker::clear_has_chair_id() {
  _has_bits_[0] &= ~0x00000001u;
}
void SC_SanGong_TalkBanker::clear_chair_id() {
  chair_id_ = 0;
  clear_has_chair_id();
}
::google::protobuf::int32 SC_SanGong_TalkBanker::chair_id() const {
  // @@protoc_insertion_point(field_get:SC_SanGong_TalkBanker.chair_id)
  return chair_id_;
}
void SC_SanGong_TalkBanker::set_chair_id(::google::protobuf::int32 value) {
  set_has_chair_id();
  chair_id_ = value;
  // @@protoc_insertion_point(field_set:SC_SanGong_TalkBanker.chair_id)
}

// optional bool brequest = 2;
bool SC_SanGong_TalkBanker::has_brequest() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void SC_SanGong_TalkBanker::set_has_brequest() {
  _has_bits_[0] |= 0x00000002u;
}
void SC_SanGong_TalkBanker::clear_has_brequest() {
  _has_bits_[0] &= ~0x00000002u;
}
void SC_SanGong_TalkBanker::clear_brequest() {
  brequest_ = false;
  clear_has_brequest();
}
bool SC_SanGong_TalkBanker::brequest() const {
  // @@protoc_insertion_point(field_get:SC_SanGong_TalkBanker.brequest)
  return brequest_;
}
void SC_SanGong_TalkBanker::set_brequest(bool value) {
  set_has_brequest();
  brequest_ = value;
  // @@protoc_insertion_point(field_set:SC_SanGong_TalkBanker.brequest)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SC_SanGong_Banker::kChairIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SC_SanGong_Banker::SC_SanGong_Banker()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_public_5fsangong_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:SC_SanGong_Banker)
}
SC_SanGong_Banker::SC_SanGong_Banker(const SC_SanGong_Banker& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  chair_id_ = from.chair_id_;
  // @@protoc_insertion_point(copy_constructor:SC_SanGong_Banker)
}

void SC_SanGong_Banker::SharedCtor() {
  _cached_size_ = 0;
  chair_id_ = 0;
}

SC_SanGong_Banker::~SC_SanGong_Banker() {
  // @@protoc_insertion_point(destructor:SC_SanGong_Banker)
  SharedDtor();
}

void SC_SanGong_Banker::SharedDtor() {
}

void SC_SanGong_Banker::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SC_SanGong_Banker::descriptor() {
  protobuf_public_5fsangong_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_public_5fsangong_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const SC_SanGong_Banker& SC_SanGong_Banker::default_instance() {
  protobuf_public_5fsangong_2eproto::InitDefaults();
  return *internal_default_instance();
}

SC_SanGong_Banker* SC_SanGong_Banker::New(::google::protobuf::Arena* arena) const {
  SC_SanGong_Banker* n = new SC_SanGong_Banker;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SC_SanGong_Banker::Clear() {
// @@protoc_insertion_point(message_clear_start:SC_SanGong_Banker)
  chair_id_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool SC_SanGong_Banker::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:SC_SanGong_Banker)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 chair_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_chair_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &chair_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:SC_SanGong_Banker)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:SC_SanGong_Banker)
  return false;
#undef DO_
}

void SC_SanGong_Banker::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:SC_SanGong_Banker)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 chair_id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->chair_id(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:SC_SanGong_Banker)
}

::google::protobuf::uint8* SC_SanGong_Banker::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:SC_SanGong_Banker)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 chair_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->chair_id(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SC_SanGong_Banker)
  return target;
}

size_t SC_SanGong_Banker::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SC_SanGong_Banker)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // optional int32 chair_id = 1;
  if (has_chair_id()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->chair_id());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SC_SanGong_Banker::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:SC_SanGong_Banker)
  GOOGLE_DCHECK_NE(&from, this);
  const SC_SanGong_Banker* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SC_SanGong_Banker>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:SC_SanGong_Banker)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:SC_SanGong_Banker)
    MergeFrom(*source);
  }
}

void SC_SanGong_Banker::MergeFrom(const SC_SanGong_Banker& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:SC_SanGong_Banker)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_chair_id()) {
    set_chair_id(from.chair_id());
  }
}

void SC_SanGong_Banker::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:SC_SanGong_Banker)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SC_SanGong_Banker::CopyFrom(const SC_SanGong_Banker& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SC_SanGong_Banker)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SC_SanGong_Banker::IsInitialized() const {
  return true;
}

void SC_SanGong_Banker::Swap(SC_SanGong_Banker* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SC_SanGong_Banker::InternalSwap(SC_SanGong_Banker* other) {
  std::swap(chair_id_, other->chair_id_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SC_SanGong_Banker::GetMetadata() const {
  protobuf_public_5fsangong_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_public_5fsangong_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SC_SanGong_Banker

// optional int32 chair_id = 1;
bool SC_SanGong_Banker::has_chair_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void SC_SanGong_Banker::set_has_chair_id() {
  _has_bits_[0] |= 0x00000001u;
}
void SC_SanGong_Banker::clear_has_chair_id() {
  _has_bits_[0] &= ~0x00000001u;
}
void SC_SanGong_Banker::clear_chair_id() {
  chair_id_ = 0;
  clear_has_chair_id();
}
::google::protobuf::int32 SC_SanGong_Banker::chair_id() const {
  // @@protoc_insertion_point(field_get:SC_SanGong_Banker.chair_id)
  return chair_id_;
}
void SC_SanGong_Banker::set_chair_id(::google::protobuf::int32 value) {
  set_has_chair_id();
  chair_id_ = value;
  // @@protoc_insertion_point(field_set:SC_SanGong_Banker.chair_id)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SC_SanGong_AskBet::kBetsFieldNumber;
const int SC_SanGong_AskBet::kChairIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SC_SanGong_AskBet::SC_SanGong_AskBet()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_public_5fsangong_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:SC_SanGong_AskBet)
}
SC_SanGong_AskBet::SC_SanGong_AskBet(const SC_SanGong_AskBet& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      bets_(from.bets_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  chair_id_ = from.chair_id_;
  // @@protoc_insertion_point(copy_constructor:SC_SanGong_AskBet)
}

void SC_SanGong_AskBet::SharedCtor() {
  _cached_size_ = 0;
  chair_id_ = 0;
}

SC_SanGong_AskBet::~SC_SanGong_AskBet() {
  // @@protoc_insertion_point(destructor:SC_SanGong_AskBet)
  SharedDtor();
}

void SC_SanGong_AskBet::SharedDtor() {
}

void SC_SanGong_AskBet::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SC_SanGong_AskBet::descriptor() {
  protobuf_public_5fsangong_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_public_5fsangong_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const SC_SanGong_AskBet& SC_SanGong_AskBet::default_instance() {
  protobuf_public_5fsangong_2eproto::InitDefaults();
  return *internal_default_instance();
}

SC_SanGong_AskBet* SC_SanGong_AskBet::New(::google::protobuf::Arena* arena) const {
  SC_SanGong_AskBet* n = new SC_SanGong_AskBet;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SC_SanGong_AskBet::Clear() {
// @@protoc_insertion_point(message_clear_start:SC_SanGong_AskBet)
  bets_.Clear();
  chair_id_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool SC_SanGong_AskBet::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:SC_SanGong_AskBet)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated int32 Bets = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 8u, input, this->mutable_bets())));
        } else if (static_cast< ::google::protobuf::uint8>(tag) ==
                   static_cast< ::google::protobuf::uint8>(10u)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_bets())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 chair_id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_chair_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &chair_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:SC_SanGong_AskBet)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:SC_SanGong_AskBet)
  return false;
#undef DO_
}

void SC_SanGong_AskBet::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:SC_SanGong_AskBet)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated int32 Bets = 1;
  for (int i = 0, n = this->bets_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      1, this->bets(i), output);
  }

  cached_has_bits = _has_bits_[0];
  // optional int32 chair_id = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->chair_id(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:SC_SanGong_AskBet)
}

::google::protobuf::uint8* SC_SanGong_AskBet::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:SC_SanGong_AskBet)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated int32 Bets = 1;
  target = ::google::protobuf::internal::WireFormatLite::
    WriteInt32ToArray(1, this->bets_, target);

  cached_has_bits = _has_bits_[0];
  // optional int32 chair_id = 2;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->chair_id(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SC_SanGong_AskBet)
  return target;
}

size_t SC_SanGong_AskBet::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SC_SanGong_AskBet)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // repeated int32 Bets = 1;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      Int32Size(this->bets_);
    total_size += 1 *
                  ::google::protobuf::internal::FromIntSize(this->bets_size());
    total_size += data_size;
  }

  // optional int32 chair_id = 2;
  if (has_chair_id()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->chair_id());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SC_SanGong_AskBet::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:SC_SanGong_AskBet)
  GOOGLE_DCHECK_NE(&from, this);
  const SC_SanGong_AskBet* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SC_SanGong_AskBet>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:SC_SanGong_AskBet)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:SC_SanGong_AskBet)
    MergeFrom(*source);
  }
}

void SC_SanGong_AskBet::MergeFrom(const SC_SanGong_AskBet& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:SC_SanGong_AskBet)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  bets_.MergeFrom(from.bets_);
  if (from.has_chair_id()) {
    set_chair_id(from.chair_id());
  }
}

void SC_SanGong_AskBet::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:SC_SanGong_AskBet)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SC_SanGong_AskBet::CopyFrom(const SC_SanGong_AskBet& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SC_SanGong_AskBet)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SC_SanGong_AskBet::IsInitialized() const {
  return true;
}

void SC_SanGong_AskBet::Swap(SC_SanGong_AskBet* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SC_SanGong_AskBet::InternalSwap(SC_SanGong_AskBet* other) {
  bets_.InternalSwap(&other->bets_);
  std::swap(chair_id_, other->chair_id_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SC_SanGong_AskBet::GetMetadata() const {
  protobuf_public_5fsangong_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_public_5fsangong_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SC_SanGong_AskBet

// repeated int32 Bets = 1;
int SC_SanGong_AskBet::bets_size() const {
  return bets_.size();
}
void SC_SanGong_AskBet::clear_bets() {
  bets_.Clear();
}
::google::protobuf::int32 SC_SanGong_AskBet::bets(int index) const {
  // @@protoc_insertion_point(field_get:SC_SanGong_AskBet.Bets)
  return bets_.Get(index);
}
void SC_SanGong_AskBet::set_bets(int index, ::google::protobuf::int32 value) {
  bets_.Set(index, value);
  // @@protoc_insertion_point(field_set:SC_SanGong_AskBet.Bets)
}
void SC_SanGong_AskBet::add_bets(::google::protobuf::int32 value) {
  bets_.Add(value);
  // @@protoc_insertion_point(field_add:SC_SanGong_AskBet.Bets)
}
const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
SC_SanGong_AskBet::bets() const {
  // @@protoc_insertion_point(field_list:SC_SanGong_AskBet.Bets)
  return bets_;
}
::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
SC_SanGong_AskBet::mutable_bets() {
  // @@protoc_insertion_point(field_mutable_list:SC_SanGong_AskBet.Bets)
  return &bets_;
}

// optional int32 chair_id = 2;
bool SC_SanGong_AskBet::has_chair_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void SC_SanGong_AskBet::set_has_chair_id() {
  _has_bits_[0] |= 0x00000001u;
}
void SC_SanGong_AskBet::clear_has_chair_id() {
  _has_bits_[0] &= ~0x00000001u;
}
void SC_SanGong_AskBet::clear_chair_id() {
  chair_id_ = 0;
  clear_has_chair_id();
}
::google::protobuf::int32 SC_SanGong_AskBet::chair_id() const {
  // @@protoc_insertion_point(field_get:SC_SanGong_AskBet.chair_id)
  return chair_id_;
}
void SC_SanGong_AskBet::set_chair_id(::google::protobuf::int32 value) {
  set_has_chair_id();
  chair_id_ = value;
  // @@protoc_insertion_point(field_set:SC_SanGong_AskBet.chair_id)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CS_SanGong_AskBet::kTargetFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CS_SanGong_AskBet::CS_SanGong_AskBet()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_public_5fsangong_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:CS_SanGong_AskBet)
}
CS_SanGong_AskBet::CS_SanGong_AskBet(const CS_SanGong_AskBet& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  target_ = from.target_;
  // @@protoc_insertion_point(copy_constructor:CS_SanGong_AskBet)
}

void CS_SanGong_AskBet::SharedCtor() {
  _cached_size_ = 0;
  target_ = 0;
}

CS_SanGong_AskBet::~CS_SanGong_AskBet() {
  // @@protoc_insertion_point(destructor:CS_SanGong_AskBet)
  SharedDtor();
}

void CS_SanGong_AskBet::SharedDtor() {
}

void CS_SanGong_AskBet::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CS_SanGong_AskBet::descriptor() {
  protobuf_public_5fsangong_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_public_5fsangong_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CS_SanGong_AskBet& CS_SanGong_AskBet::default_instance() {
  protobuf_public_5fsangong_2eproto::InitDefaults();
  return *internal_default_instance();
}

CS_SanGong_AskBet* CS_SanGong_AskBet::New(::google::protobuf::Arena* arena) const {
  CS_SanGong_AskBet* n = new CS_SanGong_AskBet;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CS_SanGong_AskBet::Clear() {
// @@protoc_insertion_point(message_clear_start:CS_SanGong_AskBet)
  target_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CS_SanGong_AskBet::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CS_SanGong_AskBet)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 target = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_target();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &target_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CS_SanGong_AskBet)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CS_SanGong_AskBet)
  return false;
#undef DO_
}

void CS_SanGong_AskBet::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CS_SanGong_AskBet)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 target = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->target(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CS_SanGong_AskBet)
}

::google::protobuf::uint8* CS_SanGong_AskBet::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CS_SanGong_AskBet)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 target = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->target(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CS_SanGong_AskBet)
  return target;
}

size_t CS_SanGong_AskBet::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CS_SanGong_AskBet)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // optional int32 target = 1;
  if (has_target()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->target());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CS_SanGong_AskBet::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CS_SanGong_AskBet)
  GOOGLE_DCHECK_NE(&from, this);
  const CS_SanGong_AskBet* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CS_SanGong_AskBet>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CS_SanGong_AskBet)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CS_SanGong_AskBet)
    MergeFrom(*source);
  }
}

void CS_SanGong_AskBet::MergeFrom(const CS_SanGong_AskBet& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CS_SanGong_AskBet)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_target()) {
    set_target(from.target());
  }
}

void CS_SanGong_AskBet::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CS_SanGong_AskBet)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CS_SanGong_AskBet::CopyFrom(const CS_SanGong_AskBet& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CS_SanGong_AskBet)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CS_SanGong_AskBet::IsInitialized() const {
  return true;
}

void CS_SanGong_AskBet::Swap(CS_SanGong_AskBet* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CS_SanGong_AskBet::InternalSwap(CS_SanGong_AskBet* other) {
  std::swap(target_, other->target_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CS_SanGong_AskBet::GetMetadata() const {
  protobuf_public_5fsangong_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_public_5fsangong_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CS_SanGong_AskBet

// optional int32 target = 1;
bool CS_SanGong_AskBet::has_target() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CS_SanGong_AskBet::set_has_target() {
  _has_bits_[0] |= 0x00000001u;
}
void CS_SanGong_AskBet::clear_has_target() {
  _has_bits_[0] &= ~0x00000001u;
}
void CS_SanGong_AskBet::clear_target() {
  target_ = 0;
  clear_has_target();
}
::google::protobuf::int32 CS_SanGong_AskBet::target() const {
  // @@protoc_insertion_point(field_get:CS_SanGong_AskBet.target)
  return target_;
}
void CS_SanGong_AskBet::set_target(::google::protobuf::int32 value) {
  set_has_target();
  target_ = value;
  // @@protoc_insertion_point(field_set:CS_SanGong_AskBet.target)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SC_SanGong_Bet::kTargetFieldNumber;
const int SC_SanGong_Bet::kChairIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SC_SanGong_Bet::SC_SanGong_Bet()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_public_5fsangong_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:SC_SanGong_Bet)
}
SC_SanGong_Bet::SC_SanGong_Bet(const SC_SanGong_Bet& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&target_, &from.target_,
    reinterpret_cast<char*>(&chair_id_) -
    reinterpret_cast<char*>(&target_) + sizeof(chair_id_));
  // @@protoc_insertion_point(copy_constructor:SC_SanGong_Bet)
}

void SC_SanGong_Bet::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&target_, 0, reinterpret_cast<char*>(&chair_id_) -
    reinterpret_cast<char*>(&target_) + sizeof(chair_id_));
}

SC_SanGong_Bet::~SC_SanGong_Bet() {
  // @@protoc_insertion_point(destructor:SC_SanGong_Bet)
  SharedDtor();
}

void SC_SanGong_Bet::SharedDtor() {
}

void SC_SanGong_Bet::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SC_SanGong_Bet::descriptor() {
  protobuf_public_5fsangong_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_public_5fsangong_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const SC_SanGong_Bet& SC_SanGong_Bet::default_instance() {
  protobuf_public_5fsangong_2eproto::InitDefaults();
  return *internal_default_instance();
}

SC_SanGong_Bet* SC_SanGong_Bet::New(::google::protobuf::Arena* arena) const {
  SC_SanGong_Bet* n = new SC_SanGong_Bet;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SC_SanGong_Bet::Clear() {
// @@protoc_insertion_point(message_clear_start:SC_SanGong_Bet)
  if (_has_bits_[0 / 32] & 3u) {
    ::memset(&target_, 0, reinterpret_cast<char*>(&chair_id_) -
      reinterpret_cast<char*>(&target_) + sizeof(chair_id_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool SC_SanGong_Bet::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:SC_SanGong_Bet)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 target = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_target();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &target_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 chair_id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_chair_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &chair_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:SC_SanGong_Bet)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:SC_SanGong_Bet)
  return false;
#undef DO_
}

void SC_SanGong_Bet::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:SC_SanGong_Bet)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 target = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->target(), output);
  }

  // optional int32 chair_id = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->chair_id(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:SC_SanGong_Bet)
}

::google::protobuf::uint8* SC_SanGong_Bet::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:SC_SanGong_Bet)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 target = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->target(), target);
  }

  // optional int32 chair_id = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->chair_id(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SC_SanGong_Bet)
  return target;
}

size_t SC_SanGong_Bet::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SC_SanGong_Bet)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 3u) {
    // optional int32 target = 1;
    if (has_target()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->target());
    }

    // optional int32 chair_id = 2;
    if (has_chair_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->chair_id());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SC_SanGong_Bet::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:SC_SanGong_Bet)
  GOOGLE_DCHECK_NE(&from, this);
  const SC_SanGong_Bet* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SC_SanGong_Bet>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:SC_SanGong_Bet)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:SC_SanGong_Bet)
    MergeFrom(*source);
  }
}

void SC_SanGong_Bet::MergeFrom(const SC_SanGong_Bet& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:SC_SanGong_Bet)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      target_ = from.target_;
    }
    if (cached_has_bits & 0x00000002u) {
      chair_id_ = from.chair_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void SC_SanGong_Bet::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:SC_SanGong_Bet)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SC_SanGong_Bet::CopyFrom(const SC_SanGong_Bet& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SC_SanGong_Bet)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SC_SanGong_Bet::IsInitialized() const {
  return true;
}

void SC_SanGong_Bet::Swap(SC_SanGong_Bet* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SC_SanGong_Bet::InternalSwap(SC_SanGong_Bet* other) {
  std::swap(target_, other->target_);
  std::swap(chair_id_, other->chair_id_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SC_SanGong_Bet::GetMetadata() const {
  protobuf_public_5fsangong_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_public_5fsangong_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SC_SanGong_Bet

// optional int32 target = 1;
bool SC_SanGong_Bet::has_target() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void SC_SanGong_Bet::set_has_target() {
  _has_bits_[0] |= 0x00000001u;
}
void SC_SanGong_Bet::clear_has_target() {
  _has_bits_[0] &= ~0x00000001u;
}
void SC_SanGong_Bet::clear_target() {
  target_ = 0;
  clear_has_target();
}
::google::protobuf::int32 SC_SanGong_Bet::target() const {
  // @@protoc_insertion_point(field_get:SC_SanGong_Bet.target)
  return target_;
}
void SC_SanGong_Bet::set_target(::google::protobuf::int32 value) {
  set_has_target();
  target_ = value;
  // @@protoc_insertion_point(field_set:SC_SanGong_Bet.target)
}

// optional int32 chair_id = 2;
bool SC_SanGong_Bet::has_chair_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void SC_SanGong_Bet::set_has_chair_id() {
  _has_bits_[0] |= 0x00000002u;
}
void SC_SanGong_Bet::clear_has_chair_id() {
  _has_bits_[0] &= ~0x00000002u;
}
void SC_SanGong_Bet::clear_chair_id() {
  chair_id_ = 0;
  clear_has_chair_id();
}
::google::protobuf::int32 SC_SanGong_Bet::chair_id() const {
  // @@protoc_insertion_point(field_get:SC_SanGong_Bet.chair_id)
  return chair_id_;
}
void SC_SanGong_Bet::set_chair_id(::google::protobuf::int32 value) {
  set_has_chair_id();
  chair_id_ = value;
  // @@protoc_insertion_point(field_set:SC_SanGong_Bet.chair_id)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SanGong_Card_Info::kCardsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SanGong_Card_Info::SanGong_Card_Info()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_public_5fsangong_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:SanGong_Card_Info)
}
SanGong_Card_Info::SanGong_Card_Info(const SanGong_Card_Info& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      cards_(from.cards_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:SanGong_Card_Info)
}

void SanGong_Card_Info::SharedCtor() {
  _cached_size_ = 0;
}

SanGong_Card_Info::~SanGong_Card_Info() {
  // @@protoc_insertion_point(destructor:SanGong_Card_Info)
  SharedDtor();
}

void SanGong_Card_Info::SharedDtor() {
}

void SanGong_Card_Info::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SanGong_Card_Info::descriptor() {
  protobuf_public_5fsangong_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_public_5fsangong_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const SanGong_Card_Info& SanGong_Card_Info::default_instance() {
  protobuf_public_5fsangong_2eproto::InitDefaults();
  return *internal_default_instance();
}

SanGong_Card_Info* SanGong_Card_Info::New(::google::protobuf::Arena* arena) const {
  SanGong_Card_Info* n = new SanGong_Card_Info;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SanGong_Card_Info::Clear() {
// @@protoc_insertion_point(message_clear_start:SanGong_Card_Info)
  cards_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool SanGong_Card_Info::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:SanGong_Card_Info)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated int32 cards = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 8u, input, this->mutable_cards())));
        } else if (static_cast< ::google::protobuf::uint8>(tag) ==
                   static_cast< ::google::protobuf::uint8>(10u)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_cards())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:SanGong_Card_Info)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:SanGong_Card_Info)
  return false;
#undef DO_
}

void SanGong_Card_Info::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:SanGong_Card_Info)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated int32 cards = 1;
  for (int i = 0, n = this->cards_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      1, this->cards(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:SanGong_Card_Info)
}

::google::protobuf::uint8* SanGong_Card_Info::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:SanGong_Card_Info)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated int32 cards = 1;
  target = ::google::protobuf::internal::WireFormatLite::
    WriteInt32ToArray(1, this->cards_, target);

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SanGong_Card_Info)
  return target;
}

size_t SanGong_Card_Info::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SanGong_Card_Info)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // repeated int32 cards = 1;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      Int32Size(this->cards_);
    total_size += 1 *
                  ::google::protobuf::internal::FromIntSize(this->cards_size());
    total_size += data_size;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SanGong_Card_Info::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:SanGong_Card_Info)
  GOOGLE_DCHECK_NE(&from, this);
  const SanGong_Card_Info* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SanGong_Card_Info>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:SanGong_Card_Info)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:SanGong_Card_Info)
    MergeFrom(*source);
  }
}

void SanGong_Card_Info::MergeFrom(const SanGong_Card_Info& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:SanGong_Card_Info)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cards_.MergeFrom(from.cards_);
}

void SanGong_Card_Info::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:SanGong_Card_Info)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SanGong_Card_Info::CopyFrom(const SanGong_Card_Info& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SanGong_Card_Info)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SanGong_Card_Info::IsInitialized() const {
  return true;
}

void SanGong_Card_Info::Swap(SanGong_Card_Info* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SanGong_Card_Info::InternalSwap(SanGong_Card_Info* other) {
  cards_.InternalSwap(&other->cards_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SanGong_Card_Info::GetMetadata() const {
  protobuf_public_5fsangong_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_public_5fsangong_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SanGong_Card_Info

// repeated int32 cards = 1;
int SanGong_Card_Info::cards_size() const {
  return cards_.size();
}
void SanGong_Card_Info::clear_cards() {
  cards_.Clear();
}
::google::protobuf::int32 SanGong_Card_Info::cards(int index) const {
  // @@protoc_insertion_point(field_get:SanGong_Card_Info.cards)
  return cards_.Get(index);
}
void SanGong_Card_Info::set_cards(int index, ::google::protobuf::int32 value) {
  cards_.Set(index, value);
  // @@protoc_insertion_point(field_set:SanGong_Card_Info.cards)
}
void SanGong_Card_Info::add_cards(::google::protobuf::int32 value) {
  cards_.Add(value);
  // @@protoc_insertion_point(field_add:SanGong_Card_Info.cards)
}
const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
SanGong_Card_Info::cards() const {
  // @@protoc_insertion_point(field_list:SanGong_Card_Info.cards)
  return cards_;
}
::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
SanGong_Card_Info::mutable_cards() {
  // @@protoc_insertion_point(field_mutable_list:SanGong_Card_Info.cards)
  return &cards_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SC_SanGong_PostCard::kPbCardsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SC_SanGong_PostCard::SC_SanGong_PostCard()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_public_5fsangong_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:SC_SanGong_PostCard)
}
SC_SanGong_PostCard::SC_SanGong_PostCard(const SC_SanGong_PostCard& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      pb_cards_(from.pb_cards_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:SC_SanGong_PostCard)
}

void SC_SanGong_PostCard::SharedCtor() {
  _cached_size_ = 0;
}

SC_SanGong_PostCard::~SC_SanGong_PostCard() {
  // @@protoc_insertion_point(destructor:SC_SanGong_PostCard)
  SharedDtor();
}

void SC_SanGong_PostCard::SharedDtor() {
}

void SC_SanGong_PostCard::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SC_SanGong_PostCard::descriptor() {
  protobuf_public_5fsangong_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_public_5fsangong_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const SC_SanGong_PostCard& SC_SanGong_PostCard::default_instance() {
  protobuf_public_5fsangong_2eproto::InitDefaults();
  return *internal_default_instance();
}

SC_SanGong_PostCard* SC_SanGong_PostCard::New(::google::protobuf::Arena* arena) const {
  SC_SanGong_PostCard* n = new SC_SanGong_PostCard;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SC_SanGong_PostCard::Clear() {
// @@protoc_insertion_point(message_clear_start:SC_SanGong_PostCard)
  pb_cards_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool SC_SanGong_PostCard::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:SC_SanGong_PostCard)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .SanGong_Card_Info pb_cards = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_pb_cards()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:SC_SanGong_PostCard)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:SC_SanGong_PostCard)
  return false;
#undef DO_
}

void SC_SanGong_PostCard::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:SC_SanGong_PostCard)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .SanGong_Card_Info pb_cards = 1;
  for (unsigned int i = 0, n = this->pb_cards_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->pb_cards(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:SC_SanGong_PostCard)
}

::google::protobuf::uint8* SC_SanGong_PostCard::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:SC_SanGong_PostCard)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .SanGong_Card_Info pb_cards = 1;
  for (unsigned int i = 0, n = this->pb_cards_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, this->pb_cards(i), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SC_SanGong_PostCard)
  return target;
}

size_t SC_SanGong_PostCard::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SC_SanGong_PostCard)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // repeated .SanGong_Card_Info pb_cards = 1;
  {
    unsigned int count = this->pb_cards_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->pb_cards(i));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SC_SanGong_PostCard::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:SC_SanGong_PostCard)
  GOOGLE_DCHECK_NE(&from, this);
  const SC_SanGong_PostCard* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SC_SanGong_PostCard>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:SC_SanGong_PostCard)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:SC_SanGong_PostCard)
    MergeFrom(*source);
  }
}

void SC_SanGong_PostCard::MergeFrom(const SC_SanGong_PostCard& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:SC_SanGong_PostCard)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  pb_cards_.MergeFrom(from.pb_cards_);
}

void SC_SanGong_PostCard::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:SC_SanGong_PostCard)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SC_SanGong_PostCard::CopyFrom(const SC_SanGong_PostCard& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SC_SanGong_PostCard)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SC_SanGong_PostCard::IsInitialized() const {
  return true;
}

void SC_SanGong_PostCard::Swap(SC_SanGong_PostCard* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SC_SanGong_PostCard::InternalSwap(SC_SanGong_PostCard* other) {
  pb_cards_.InternalSwap(&other->pb_cards_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SC_SanGong_PostCard::GetMetadata() const {
  protobuf_public_5fsangong_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_public_5fsangong_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SC_SanGong_PostCard

// repeated .SanGong_Card_Info pb_cards = 1;
int SC_SanGong_PostCard::pb_cards_size() const {
  return pb_cards_.size();
}
void SC_SanGong_PostCard::clear_pb_cards() {
  pb_cards_.Clear();
}
const ::SanGong_Card_Info& SC_SanGong_PostCard::pb_cards(int index) const {
  // @@protoc_insertion_point(field_get:SC_SanGong_PostCard.pb_cards)
  return pb_cards_.Get(index);
}
::SanGong_Card_Info* SC_SanGong_PostCard::mutable_pb_cards(int index) {
  // @@protoc_insertion_point(field_mutable:SC_SanGong_PostCard.pb_cards)
  return pb_cards_.Mutable(index);
}
::SanGong_Card_Info* SC_SanGong_PostCard::add_pb_cards() {
  // @@protoc_insertion_point(field_add:SC_SanGong_PostCard.pb_cards)
  return pb_cards_.Add();
}
::google::protobuf::RepeatedPtrField< ::SanGong_Card_Info >*
SC_SanGong_PostCard::mutable_pb_cards() {
  // @@protoc_insertion_point(field_mutable_list:SC_SanGong_PostCard.pb_cards)
  return &pb_cards_;
}
const ::google::protobuf::RepeatedPtrField< ::SanGong_Card_Info >&
SC_SanGong_PostCard::pb_cards() const {
  // @@protoc_insertion_point(field_list:SC_SanGong_PostCard.pb_cards)
  return pb_cards_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SanGong_Player_Info::kCardsFieldNumber;
const int SanGong_Player_Info::kChairIdFieldNumber;
const int SanGong_Player_Info::kAddTotalFieldNumber;
const int SanGong_Player_Info::kCurRoundAddFieldNumber;
const int SanGong_Player_Info::kNickFieldNumber;
const int SanGong_Player_Info::kIconFieldNumber;
const int SanGong_Player_Info::kGoldFieldNumber;
const int SanGong_Player_Info::kGuidFieldNumber;
const int SanGong_Player_Info::kIsWinFieldNumber;
const int SanGong_Player_Info::kIsGetbankerFieldNumber;
const int SanGong_Player_Info::kBetsFieldNumber;
const int SanGong_Player_Info::kWinMoneyFieldNumber;
const int SanGong_Player_Info::kTaxesFieldNumber;
const int SanGong_Player_Info::kLefttimeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SanGong_Player_Info::SanGong_Player_Info()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_public_5fsangong_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:SanGong_Player_Info)
}
SanGong_Player_Info::SanGong_Player_Info(const SanGong_Player_Info& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      cards_(from.cards_),
      bets_(from.bets_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  nick_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_nick()) {
    nick_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.nick_);
  }
  ::memcpy(&chair_id_, &from.chair_id_,
    reinterpret_cast<char*>(&lefttime_) -
    reinterpret_cast<char*>(&chair_id_) + sizeof(lefttime_));
  // @@protoc_insertion_point(copy_constructor:SanGong_Player_Info)
}

void SanGong_Player_Info::SharedCtor() {
  _cached_size_ = 0;
  nick_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&chair_id_, 0, reinterpret_cast<char*>(&lefttime_) -
    reinterpret_cast<char*>(&chair_id_) + sizeof(lefttime_));
}

SanGong_Player_Info::~SanGong_Player_Info() {
  // @@protoc_insertion_point(destructor:SanGong_Player_Info)
  SharedDtor();
}

void SanGong_Player_Info::SharedDtor() {
  nick_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void SanGong_Player_Info::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SanGong_Player_Info::descriptor() {
  protobuf_public_5fsangong_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_public_5fsangong_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const SanGong_Player_Info& SanGong_Player_Info::default_instance() {
  protobuf_public_5fsangong_2eproto::InitDefaults();
  return *internal_default_instance();
}

SanGong_Player_Info* SanGong_Player_Info::New(::google::protobuf::Arena* arena) const {
  SanGong_Player_Info* n = new SanGong_Player_Info;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SanGong_Player_Info::Clear() {
// @@protoc_insertion_point(message_clear_start:SanGong_Player_Info)
  cards_.Clear();
  bets_.Clear();
  if (has_nick()) {
    GOOGLE_DCHECK(!nick_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
    (*nick_.UnsafeRawStringPointer())->clear();
  }
  if (_has_bits_[0 / 32] & 254u) {
    ::memset(&chair_id_, 0, reinterpret_cast<char*>(&is_win_) -
      reinterpret_cast<char*>(&chair_id_) + sizeof(is_win_));
  }
  if (_has_bits_[8 / 32] & 3840u) {
    ::memset(&is_getbanker_, 0, reinterpret_cast<char*>(&lefttime_) -
      reinterpret_cast<char*>(&is_getbanker_) + sizeof(lefttime_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool SanGong_Player_Info::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:SanGong_Player_Info)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated int32 cards = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 8u, input, this->mutable_cards())));
        } else if (static_cast< ::google::protobuf::uint8>(tag) ==
                   static_cast< ::google::protobuf::uint8>(10u)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_cards())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 chair_id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_chair_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &chair_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 add_total = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {
          set_has_add_total();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &add_total_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 cur_round_add = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u)) {
          set_has_cur_round_add();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &cur_round_add_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string nick = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_nick()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->nick().data(), this->nick().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "SanGong_Player_Info.nick");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 icon = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u)) {
          set_has_icon();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &icon_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 gold = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u)) {
          set_has_gold();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &gold_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 guid = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(64u)) {
          set_has_guid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &guid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool is_win = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(72u)) {
          set_has_is_win();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_win_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool is_getbanker = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(80u)) {
          set_has_is_getbanker();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_getbanker_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated int32 Bets = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(88u)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 88u, input, this->mutable_bets())));
        } else if (static_cast< ::google::protobuf::uint8>(tag) ==
                   static_cast< ::google::protobuf::uint8>(90u)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_bets())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 win_money = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(96u)) {
          set_has_win_money();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &win_money_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 taxes = 13;
      case 13: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(104u)) {
          set_has_taxes();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &taxes_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 lefttime = 14;
      case 14: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(112u)) {
          set_has_lefttime();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &lefttime_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:SanGong_Player_Info)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:SanGong_Player_Info)
  return false;
#undef DO_
}

void SanGong_Player_Info::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:SanGong_Player_Info)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated int32 cards = 1;
  for (int i = 0, n = this->cards_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      1, this->cards(i), output);
  }

  cached_has_bits = _has_bits_[0];
  // optional int32 chair_id = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->chair_id(), output);
  }

  // optional int32 add_total = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->add_total(), output);
  }

  // optional int32 cur_round_add = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->cur_round_add(), output);
  }

  // optional string nick = 5;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->nick().data(), this->nick().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "SanGong_Player_Info.nick");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->nick(), output);
  }

  // optional int32 icon = 6;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->icon(), output);
  }

  // optional int64 gold = 7;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(7, this->gold(), output);
  }

  // optional int32 guid = 8;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->guid(), output);
  }

  // optional bool is_win = 9;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(9, this->is_win(), output);
  }

  // optional bool is_getbanker = 10;
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(10, this->is_getbanker(), output);
  }

  // repeated int32 Bets = 11;
  for (int i = 0, n = this->bets_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      11, this->bets(i), output);
  }

  // optional int32 win_money = 12;
  if (cached_has_bits & 0x00000200u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(12, this->win_money(), output);
  }

  // optional int32 taxes = 13;
  if (cached_has_bits & 0x00000400u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(13, this->taxes(), output);
  }

  // optional int32 lefttime = 14;
  if (cached_has_bits & 0x00000800u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(14, this->lefttime(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:SanGong_Player_Info)
}

::google::protobuf::uint8* SanGong_Player_Info::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:SanGong_Player_Info)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated int32 cards = 1;
  target = ::google::protobuf::internal::WireFormatLite::
    WriteInt32ToArray(1, this->cards_, target);

  cached_has_bits = _has_bits_[0];
  // optional int32 chair_id = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->chair_id(), target);
  }

  // optional int32 add_total = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->add_total(), target);
  }

  // optional int32 cur_round_add = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->cur_round_add(), target);
  }

  // optional string nick = 5;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->nick().data(), this->nick().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "SanGong_Player_Info.nick");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->nick(), target);
  }

  // optional int32 icon = 6;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->icon(), target);
  }

  // optional int64 gold = 7;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(7, this->gold(), target);
  }

  // optional int32 guid = 8;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->guid(), target);
  }

  // optional bool is_win = 9;
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(9, this->is_win(), target);
  }

  // optional bool is_getbanker = 10;
  if (cached_has_bits & 0x00000100u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(10, this->is_getbanker(), target);
  }

  // repeated int32 Bets = 11;
  target = ::google::protobuf::internal::WireFormatLite::
    WriteInt32ToArray(11, this->bets_, target);

  // optional int32 win_money = 12;
  if (cached_has_bits & 0x00000200u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(12, this->win_money(), target);
  }

  // optional int32 taxes = 13;
  if (cached_has_bits & 0x00000400u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(13, this->taxes(), target);
  }

  // optional int32 lefttime = 14;
  if (cached_has_bits & 0x00000800u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(14, this->lefttime(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SanGong_Player_Info)
  return target;
}

size_t SanGong_Player_Info::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SanGong_Player_Info)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // repeated int32 cards = 1;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      Int32Size(this->cards_);
    total_size += 1 *
                  ::google::protobuf::internal::FromIntSize(this->cards_size());
    total_size += data_size;
  }

  // repeated int32 Bets = 11;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      Int32Size(this->bets_);
    total_size += 1 *
                  ::google::protobuf::internal::FromIntSize(this->bets_size());
    total_size += data_size;
  }

  if (_has_bits_[0 / 32] & 255u) {
    // optional string nick = 5;
    if (has_nick()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->nick());
    }

    // optional int32 chair_id = 2;
    if (has_chair_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->chair_id());
    }

    // optional int32 add_total = 3;
    if (has_add_total()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->add_total());
    }

    // optional int32 cur_round_add = 4;
    if (has_cur_round_add()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->cur_round_add());
    }

    // optional int32 icon = 6;
    if (has_icon()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->icon());
    }

    // optional int64 gold = 7;
    if (has_gold()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->gold());
    }

    // optional int32 guid = 8;
    if (has_guid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->guid());
    }

    // optional bool is_win = 9;
    if (has_is_win()) {
      total_size += 1 + 1;
    }

  }
  if (_has_bits_[8 / 32] & 3840u) {
    // optional bool is_getbanker = 10;
    if (has_is_getbanker()) {
      total_size += 1 + 1;
    }

    // optional int32 win_money = 12;
    if (has_win_money()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->win_money());
    }

    // optional int32 taxes = 13;
    if (has_taxes()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->taxes());
    }

    // optional int32 lefttime = 14;
    if (has_lefttime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->lefttime());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SanGong_Player_Info::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:SanGong_Player_Info)
  GOOGLE_DCHECK_NE(&from, this);
  const SanGong_Player_Info* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SanGong_Player_Info>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:SanGong_Player_Info)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:SanGong_Player_Info)
    MergeFrom(*source);
  }
}

void SanGong_Player_Info::MergeFrom(const SanGong_Player_Info& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:SanGong_Player_Info)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cards_.MergeFrom(from.cards_);
  bets_.MergeFrom(from.bets_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_nick();
      nick_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.nick_);
    }
    if (cached_has_bits & 0x00000002u) {
      chair_id_ = from.chair_id_;
    }
    if (cached_has_bits & 0x00000004u) {
      add_total_ = from.add_total_;
    }
    if (cached_has_bits & 0x00000008u) {
      cur_round_add_ = from.cur_round_add_;
    }
    if (cached_has_bits & 0x00000010u) {
      icon_ = from.icon_;
    }
    if (cached_has_bits & 0x00000020u) {
      gold_ = from.gold_;
    }
    if (cached_has_bits & 0x00000040u) {
      guid_ = from.guid_;
    }
    if (cached_has_bits & 0x00000080u) {
      is_win_ = from.is_win_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 3840u) {
    if (cached_has_bits & 0x00000100u) {
      is_getbanker_ = from.is_getbanker_;
    }
    if (cached_has_bits & 0x00000200u) {
      win_money_ = from.win_money_;
    }
    if (cached_has_bits & 0x00000400u) {
      taxes_ = from.taxes_;
    }
    if (cached_has_bits & 0x00000800u) {
      lefttime_ = from.lefttime_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void SanGong_Player_Info::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:SanGong_Player_Info)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SanGong_Player_Info::CopyFrom(const SanGong_Player_Info& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SanGong_Player_Info)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SanGong_Player_Info::IsInitialized() const {
  return true;
}

void SanGong_Player_Info::Swap(SanGong_Player_Info* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SanGong_Player_Info::InternalSwap(SanGong_Player_Info* other) {
  cards_.InternalSwap(&other->cards_);
  bets_.InternalSwap(&other->bets_);
  nick_.Swap(&other->nick_);
  std::swap(chair_id_, other->chair_id_);
  std::swap(add_total_, other->add_total_);
  std::swap(cur_round_add_, other->cur_round_add_);
  std::swap(icon_, other->icon_);
  std::swap(gold_, other->gold_);
  std::swap(guid_, other->guid_);
  std::swap(is_win_, other->is_win_);
  std::swap(is_getbanker_, other->is_getbanker_);
  std::swap(win_money_, other->win_money_);
  std::swap(taxes_, other->taxes_);
  std::swap(lefttime_, other->lefttime_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SanGong_Player_Info::GetMetadata() const {
  protobuf_public_5fsangong_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_public_5fsangong_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SanGong_Player_Info

// repeated int32 cards = 1;
int SanGong_Player_Info::cards_size() const {
  return cards_.size();
}
void SanGong_Player_Info::clear_cards() {
  cards_.Clear();
}
::google::protobuf::int32 SanGong_Player_Info::cards(int index) const {
  // @@protoc_insertion_point(field_get:SanGong_Player_Info.cards)
  return cards_.Get(index);
}
void SanGong_Player_Info::set_cards(int index, ::google::protobuf::int32 value) {
  cards_.Set(index, value);
  // @@protoc_insertion_point(field_set:SanGong_Player_Info.cards)
}
void SanGong_Player_Info::add_cards(::google::protobuf::int32 value) {
  cards_.Add(value);
  // @@protoc_insertion_point(field_add:SanGong_Player_Info.cards)
}
const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
SanGong_Player_Info::cards() const {
  // @@protoc_insertion_point(field_list:SanGong_Player_Info.cards)
  return cards_;
}
::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
SanGong_Player_Info::mutable_cards() {
  // @@protoc_insertion_point(field_mutable_list:SanGong_Player_Info.cards)
  return &cards_;
}

// optional int32 chair_id = 2;
bool SanGong_Player_Info::has_chair_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void SanGong_Player_Info::set_has_chair_id() {
  _has_bits_[0] |= 0x00000002u;
}
void SanGong_Player_Info::clear_has_chair_id() {
  _has_bits_[0] &= ~0x00000002u;
}
void SanGong_Player_Info::clear_chair_id() {
  chair_id_ = 0;
  clear_has_chair_id();
}
::google::protobuf::int32 SanGong_Player_Info::chair_id() const {
  // @@protoc_insertion_point(field_get:SanGong_Player_Info.chair_id)
  return chair_id_;
}
void SanGong_Player_Info::set_chair_id(::google::protobuf::int32 value) {
  set_has_chair_id();
  chair_id_ = value;
  // @@protoc_insertion_point(field_set:SanGong_Player_Info.chair_id)
}

// optional int32 add_total = 3;
bool SanGong_Player_Info::has_add_total() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void SanGong_Player_Info::set_has_add_total() {
  _has_bits_[0] |= 0x00000004u;
}
void SanGong_Player_Info::clear_has_add_total() {
  _has_bits_[0] &= ~0x00000004u;
}
void SanGong_Player_Info::clear_add_total() {
  add_total_ = 0;
  clear_has_add_total();
}
::google::protobuf::int32 SanGong_Player_Info::add_total() const {
  // @@protoc_insertion_point(field_get:SanGong_Player_Info.add_total)
  return add_total_;
}
void SanGong_Player_Info::set_add_total(::google::protobuf::int32 value) {
  set_has_add_total();
  add_total_ = value;
  // @@protoc_insertion_point(field_set:SanGong_Player_Info.add_total)
}

// optional int32 cur_round_add = 4;
bool SanGong_Player_Info::has_cur_round_add() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void SanGong_Player_Info::set_has_cur_round_add() {
  _has_bits_[0] |= 0x00000008u;
}
void SanGong_Player_Info::clear_has_cur_round_add() {
  _has_bits_[0] &= ~0x00000008u;
}
void SanGong_Player_Info::clear_cur_round_add() {
  cur_round_add_ = 0;
  clear_has_cur_round_add();
}
::google::protobuf::int32 SanGong_Player_Info::cur_round_add() const {
  // @@protoc_insertion_point(field_get:SanGong_Player_Info.cur_round_add)
  return cur_round_add_;
}
void SanGong_Player_Info::set_cur_round_add(::google::protobuf::int32 value) {
  set_has_cur_round_add();
  cur_round_add_ = value;
  // @@protoc_insertion_point(field_set:SanGong_Player_Info.cur_round_add)
}

// optional string nick = 5;
bool SanGong_Player_Info::has_nick() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void SanGong_Player_Info::set_has_nick() {
  _has_bits_[0] |= 0x00000001u;
}
void SanGong_Player_Info::clear_has_nick() {
  _has_bits_[0] &= ~0x00000001u;
}
void SanGong_Player_Info::clear_nick() {
  nick_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_nick();
}
const ::std::string& SanGong_Player_Info::nick() const {
  // @@protoc_insertion_point(field_get:SanGong_Player_Info.nick)
  return nick_.GetNoArena();
}
void SanGong_Player_Info::set_nick(const ::std::string& value) {
  set_has_nick();
  nick_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:SanGong_Player_Info.nick)
}
#if LANG_CXX11
void SanGong_Player_Info::set_nick(::std::string&& value) {
  set_has_nick();
  nick_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:SanGong_Player_Info.nick)
}
#endif
void SanGong_Player_Info::set_nick(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_nick();
  nick_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:SanGong_Player_Info.nick)
}
void SanGong_Player_Info::set_nick(const char* value, size_t size) {
  set_has_nick();
  nick_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:SanGong_Player_Info.nick)
}
::std::string* SanGong_Player_Info::mutable_nick() {
  set_has_nick();
  // @@protoc_insertion_point(field_mutable:SanGong_Player_Info.nick)
  return nick_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* SanGong_Player_Info::release_nick() {
  // @@protoc_insertion_point(field_release:SanGong_Player_Info.nick)
  clear_has_nick();
  return nick_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void SanGong_Player_Info::set_allocated_nick(::std::string* nick) {
  if (nick != NULL) {
    set_has_nick();
  } else {
    clear_has_nick();
  }
  nick_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), nick);
  // @@protoc_insertion_point(field_set_allocated:SanGong_Player_Info.nick)
}

// optional int32 icon = 6;
bool SanGong_Player_Info::has_icon() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void SanGong_Player_Info::set_has_icon() {
  _has_bits_[0] |= 0x00000010u;
}
void SanGong_Player_Info::clear_has_icon() {
  _has_bits_[0] &= ~0x00000010u;
}
void SanGong_Player_Info::clear_icon() {
  icon_ = 0;
  clear_has_icon();
}
::google::protobuf::int32 SanGong_Player_Info::icon() const {
  // @@protoc_insertion_point(field_get:SanGong_Player_Info.icon)
  return icon_;
}
void SanGong_Player_Info::set_icon(::google::protobuf::int32 value) {
  set_has_icon();
  icon_ = value;
  // @@protoc_insertion_point(field_set:SanGong_Player_Info.icon)
}

// optional int64 gold = 7;
bool SanGong_Player_Info::has_gold() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void SanGong_Player_Info::set_has_gold() {
  _has_bits_[0] |= 0x00000020u;
}
void SanGong_Player_Info::clear_has_gold() {
  _has_bits_[0] &= ~0x00000020u;
}
void SanGong_Player_Info::clear_gold() {
  gold_ = GOOGLE_LONGLONG(0);
  clear_has_gold();
}
::google::protobuf::int64 SanGong_Player_Info::gold() const {
  // @@protoc_insertion_point(field_get:SanGong_Player_Info.gold)
  return gold_;
}
void SanGong_Player_Info::set_gold(::google::protobuf::int64 value) {
  set_has_gold();
  gold_ = value;
  // @@protoc_insertion_point(field_set:SanGong_Player_Info.gold)
}

// optional int32 guid = 8;
bool SanGong_Player_Info::has_guid() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void SanGong_Player_Info::set_has_guid() {
  _has_bits_[0] |= 0x00000040u;
}
void SanGong_Player_Info::clear_has_guid() {
  _has_bits_[0] &= ~0x00000040u;
}
void SanGong_Player_Info::clear_guid() {
  guid_ = 0;
  clear_has_guid();
}
::google::protobuf::int32 SanGong_Player_Info::guid() const {
  // @@protoc_insertion_point(field_get:SanGong_Player_Info.guid)
  return guid_;
}
void SanGong_Player_Info::set_guid(::google::protobuf::int32 value) {
  set_has_guid();
  guid_ = value;
  // @@protoc_insertion_point(field_set:SanGong_Player_Info.guid)
}

// optional bool is_win = 9;
bool SanGong_Player_Info::has_is_win() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void SanGong_Player_Info::set_has_is_win() {
  _has_bits_[0] |= 0x00000080u;
}
void SanGong_Player_Info::clear_has_is_win() {
  _has_bits_[0] &= ~0x00000080u;
}
void SanGong_Player_Info::clear_is_win() {
  is_win_ = false;
  clear_has_is_win();
}
bool SanGong_Player_Info::is_win() const {
  // @@protoc_insertion_point(field_get:SanGong_Player_Info.is_win)
  return is_win_;
}
void SanGong_Player_Info::set_is_win(bool value) {
  set_has_is_win();
  is_win_ = value;
  // @@protoc_insertion_point(field_set:SanGong_Player_Info.is_win)
}

// optional bool is_getbanker = 10;
bool SanGong_Player_Info::has_is_getbanker() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
void SanGong_Player_Info::set_has_is_getbanker() {
  _has_bits_[0] |= 0x00000100u;
}
void SanGong_Player_Info::clear_has_is_getbanker() {
  _has_bits_[0] &= ~0x00000100u;
}
void SanGong_Player_Info::clear_is_getbanker() {
  is_getbanker_ = false;
  clear_has_is_getbanker();
}
bool SanGong_Player_Info::is_getbanker() const {
  // @@protoc_insertion_point(field_get:SanGong_Player_Info.is_getbanker)
  return is_getbanker_;
}
void SanGong_Player_Info::set_is_getbanker(bool value) {
  set_has_is_getbanker();
  is_getbanker_ = value;
  // @@protoc_insertion_point(field_set:SanGong_Player_Info.is_getbanker)
}

// repeated int32 Bets = 11;
int SanGong_Player_Info::bets_size() const {
  return bets_.size();
}
void SanGong_Player_Info::clear_bets() {
  bets_.Clear();
}
::google::protobuf::int32 SanGong_Player_Info::bets(int index) const {
  // @@protoc_insertion_point(field_get:SanGong_Player_Info.Bets)
  return bets_.Get(index);
}
void SanGong_Player_Info::set_bets(int index, ::google::protobuf::int32 value) {
  bets_.Set(index, value);
  // @@protoc_insertion_point(field_set:SanGong_Player_Info.Bets)
}
void SanGong_Player_Info::add_bets(::google::protobuf::int32 value) {
  bets_.Add(value);
  // @@protoc_insertion_point(field_add:SanGong_Player_Info.Bets)
}
const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
SanGong_Player_Info::bets() const {
  // @@protoc_insertion_point(field_list:SanGong_Player_Info.Bets)
  return bets_;
}
::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
SanGong_Player_Info::mutable_bets() {
  // @@protoc_insertion_point(field_mutable_list:SanGong_Player_Info.Bets)
  return &bets_;
}

// optional int32 win_money = 12;
bool SanGong_Player_Info::has_win_money() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
void SanGong_Player_Info::set_has_win_money() {
  _has_bits_[0] |= 0x00000200u;
}
void SanGong_Player_Info::clear_has_win_money() {
  _has_bits_[0] &= ~0x00000200u;
}
void SanGong_Player_Info::clear_win_money() {
  win_money_ = 0;
  clear_has_win_money();
}
::google::protobuf::int32 SanGong_Player_Info::win_money() const {
  // @@protoc_insertion_point(field_get:SanGong_Player_Info.win_money)
  return win_money_;
}
void SanGong_Player_Info::set_win_money(::google::protobuf::int32 value) {
  set_has_win_money();
  win_money_ = value;
  // @@protoc_insertion_point(field_set:SanGong_Player_Info.win_money)
}

// optional int32 taxes = 13;
bool SanGong_Player_Info::has_taxes() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
void SanGong_Player_Info::set_has_taxes() {
  _has_bits_[0] |= 0x00000400u;
}
void SanGong_Player_Info::clear_has_taxes() {
  _has_bits_[0] &= ~0x00000400u;
}
void SanGong_Player_Info::clear_taxes() {
  taxes_ = 0;
  clear_has_taxes();
}
::google::protobuf::int32 SanGong_Player_Info::taxes() const {
  // @@protoc_insertion_point(field_get:SanGong_Player_Info.taxes)
  return taxes_;
}
void SanGong_Player_Info::set_taxes(::google::protobuf::int32 value) {
  set_has_taxes();
  taxes_ = value;
  // @@protoc_insertion_point(field_set:SanGong_Player_Info.taxes)
}

// optional int32 lefttime = 14;
bool SanGong_Player_Info::has_lefttime() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
void SanGong_Player_Info::set_has_lefttime() {
  _has_bits_[0] |= 0x00000800u;
}
void SanGong_Player_Info::clear_has_lefttime() {
  _has_bits_[0] &= ~0x00000800u;
}
void SanGong_Player_Info::clear_lefttime() {
  lefttime_ = 0;
  clear_has_lefttime();
}
::google::protobuf::int32 SanGong_Player_Info::lefttime() const {
  // @@protoc_insertion_point(field_get:SanGong_Player_Info.lefttime)
  return lefttime_;
}
void SanGong_Player_Info::set_lefttime(::google::protobuf::int32 value) {
  set_has_lefttime();
  lefttime_ = value;
  // @@protoc_insertion_point(field_set:SanGong_Player_Info.lefttime)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SC_SanGong_PostResult::kPbSplayerinfoFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SC_SanGong_PostResult::SC_SanGong_PostResult()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_public_5fsangong_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:SC_SanGong_PostResult)
}
SC_SanGong_PostResult::SC_SanGong_PostResult(const SC_SanGong_PostResult& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      pb_splayerinfo_(from.pb_splayerinfo_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:SC_SanGong_PostResult)
}

void SC_SanGong_PostResult::SharedCtor() {
  _cached_size_ = 0;
}

SC_SanGong_PostResult::~SC_SanGong_PostResult() {
  // @@protoc_insertion_point(destructor:SC_SanGong_PostResult)
  SharedDtor();
}

void SC_SanGong_PostResult::SharedDtor() {
}

void SC_SanGong_PostResult::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SC_SanGong_PostResult::descriptor() {
  protobuf_public_5fsangong_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_public_5fsangong_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const SC_SanGong_PostResult& SC_SanGong_PostResult::default_instance() {
  protobuf_public_5fsangong_2eproto::InitDefaults();
  return *internal_default_instance();
}

SC_SanGong_PostResult* SC_SanGong_PostResult::New(::google::protobuf::Arena* arena) const {
  SC_SanGong_PostResult* n = new SC_SanGong_PostResult;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SC_SanGong_PostResult::Clear() {
// @@protoc_insertion_point(message_clear_start:SC_SanGong_PostResult)
  pb_splayerinfo_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool SC_SanGong_PostResult::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:SC_SanGong_PostResult)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .SanGong_Player_Info pb_splayerinfo = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_pb_splayerinfo()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:SC_SanGong_PostResult)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:SC_SanGong_PostResult)
  return false;
#undef DO_
}

void SC_SanGong_PostResult::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:SC_SanGong_PostResult)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .SanGong_Player_Info pb_splayerinfo = 1;
  for (unsigned int i = 0, n = this->pb_splayerinfo_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->pb_splayerinfo(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:SC_SanGong_PostResult)
}

::google::protobuf::uint8* SC_SanGong_PostResult::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:SC_SanGong_PostResult)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .SanGong_Player_Info pb_splayerinfo = 1;
  for (unsigned int i = 0, n = this->pb_splayerinfo_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, this->pb_splayerinfo(i), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SC_SanGong_PostResult)
  return target;
}

size_t SC_SanGong_PostResult::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SC_SanGong_PostResult)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // repeated .SanGong_Player_Info pb_splayerinfo = 1;
  {
    unsigned int count = this->pb_splayerinfo_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->pb_splayerinfo(i));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SC_SanGong_PostResult::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:SC_SanGong_PostResult)
  GOOGLE_DCHECK_NE(&from, this);
  const SC_SanGong_PostResult* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SC_SanGong_PostResult>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:SC_SanGong_PostResult)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:SC_SanGong_PostResult)
    MergeFrom(*source);
  }
}

void SC_SanGong_PostResult::MergeFrom(const SC_SanGong_PostResult& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:SC_SanGong_PostResult)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  pb_splayerinfo_.MergeFrom(from.pb_splayerinfo_);
}

void SC_SanGong_PostResult::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:SC_SanGong_PostResult)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SC_SanGong_PostResult::CopyFrom(const SC_SanGong_PostResult& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SC_SanGong_PostResult)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SC_SanGong_PostResult::IsInitialized() const {
  return true;
}

void SC_SanGong_PostResult::Swap(SC_SanGong_PostResult* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SC_SanGong_PostResult::InternalSwap(SC_SanGong_PostResult* other) {
  pb_splayerinfo_.InternalSwap(&other->pb_splayerinfo_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SC_SanGong_PostResult::GetMetadata() const {
  protobuf_public_5fsangong_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_public_5fsangong_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SC_SanGong_PostResult

// repeated .SanGong_Player_Info pb_splayerinfo = 1;
int SC_SanGong_PostResult::pb_splayerinfo_size() const {
  return pb_splayerinfo_.size();
}
void SC_SanGong_PostResult::clear_pb_splayerinfo() {
  pb_splayerinfo_.Clear();
}
const ::SanGong_Player_Info& SC_SanGong_PostResult::pb_splayerinfo(int index) const {
  // @@protoc_insertion_point(field_get:SC_SanGong_PostResult.pb_splayerinfo)
  return pb_splayerinfo_.Get(index);
}
::SanGong_Player_Info* SC_SanGong_PostResult::mutable_pb_splayerinfo(int index) {
  // @@protoc_insertion_point(field_mutable:SC_SanGong_PostResult.pb_splayerinfo)
  return pb_splayerinfo_.Mutable(index);
}
::SanGong_Player_Info* SC_SanGong_PostResult::add_pb_splayerinfo() {
  // @@protoc_insertion_point(field_add:SC_SanGong_PostResult.pb_splayerinfo)
  return pb_splayerinfo_.Add();
}
::google::protobuf::RepeatedPtrField< ::SanGong_Player_Info >*
SC_SanGong_PostResult::mutable_pb_splayerinfo() {
  // @@protoc_insertion_point(field_mutable_list:SC_SanGong_PostResult.pb_splayerinfo)
  return &pb_splayerinfo_;
}
const ::google::protobuf::RepeatedPtrField< ::SanGong_Player_Info >&
SC_SanGong_PostResult::pb_splayerinfo() const {
  // @@protoc_insertion_point(field_list:SC_SanGong_PostResult.pb_splayerinfo)
  return pb_splayerinfo_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)
