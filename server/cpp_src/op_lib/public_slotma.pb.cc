// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: public_slotma.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "public_slotma.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
class CS_SlotmaPlayerConnectGameDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CS_SlotmaPlayerConnectGame> {
} _CS_SlotmaPlayerConnectGame_default_instance_;
class CS_SlotmaLeaveGameDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CS_SlotmaLeaveGame> {
} _CS_SlotmaLeaveGame_default_instance_;
class WinningLineDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<WinningLine> {
} _WinningLine_default_instance_;
class SC_Slotma_StartDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<SC_Slotma_Start> {
} _SC_Slotma_Start_default_instance_;
class CS_Slotma_StartDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CS_Slotma_Start> {
} _CS_Slotma_Start_default_instance_;

namespace protobuf_public_5fslotma_2eproto {


namespace {

::google::protobuf::Metadata file_level_metadata[5];
const ::google::protobuf::EnumDescriptor* file_level_enum_descriptors[5];

}  // namespace

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTableField
    const TableStruct::entries[] = {
  {0, 0, 0, ::google::protobuf::internal::kInvalidMask, 0, 0},
};

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::AuxillaryParseTableField
    const TableStruct::aux[] = {
  ::google::protobuf::internal::AuxillaryParseTableField(),
};
PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTable const
    TableStruct::schema[] = {
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
};

const ::google::protobuf::uint32 TableStruct::offsets[] = {
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CS_SlotmaPlayerConnectGame, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CS_SlotmaPlayerConnectGame, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CS_SlotmaPlayerConnectGame, guid_),
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CS_SlotmaLeaveGame, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CS_SlotmaLeaveGame, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CS_SlotmaLeaveGame, guid_),
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WinningLine, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WinningLine, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WinningLine, lineid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WinningLine, itemid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WinningLine, itemnum_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WinningLine, times_),
  0,
  1,
  2,
  3,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SC_Slotma_Start, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SC_Slotma_Start, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SC_Slotma_Start, items_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SC_Slotma_Start, money_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SC_Slotma_Start, tax_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SC_Slotma_Start, pb_winline_),
  ~0u,
  0,
  1,
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CS_Slotma_Start, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CS_Slotma_Start, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CS_Slotma_Start, cell_times_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CS_Slotma_Start, lines_),
  0,
  ~0u,
};

static const ::google::protobuf::internal::MigrationSchema schemas[] = {
  { 0, 6, sizeof(CS_SlotmaPlayerConnectGame)},
  { 7, 13, sizeof(CS_SlotmaLeaveGame)},
  { 14, 23, sizeof(WinningLine)},
  { 27, 36, sizeof(SC_Slotma_Start)},
  { 40, 47, sizeof(CS_Slotma_Start)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&_CS_SlotmaPlayerConnectGame_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CS_SlotmaLeaveGame_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_WinningLine_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_SC_Slotma_Start_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CS_Slotma_Start_default_instance_),
};

namespace {

void protobuf_AssignDescriptors() {
  AddDescriptors();
  ::google::protobuf::MessageFactory* factory = NULL;
  AssignDescriptors(
      "public_slotma.proto", schemas, file_default_instances, TableStruct::offsets, factory,
      file_level_metadata, file_level_enum_descriptors, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 5);
}

}  // namespace

void TableStruct::Shutdown() {
  _CS_SlotmaPlayerConnectGame_default_instance_.Shutdown();
  delete file_level_metadata[0].reflection;
  _CS_SlotmaLeaveGame_default_instance_.Shutdown();
  delete file_level_metadata[1].reflection;
  _WinningLine_default_instance_.Shutdown();
  delete file_level_metadata[2].reflection;
  _SC_Slotma_Start_default_instance_.Shutdown();
  delete file_level_metadata[3].reflection;
  _CS_Slotma_Start_default_instance_.Shutdown();
  delete file_level_metadata[4].reflection;
}

void TableStruct::InitDefaultsImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::internal::InitProtobufDefaults();
  _CS_SlotmaPlayerConnectGame_default_instance_.DefaultConstruct();
  _CS_SlotmaLeaveGame_default_instance_.DefaultConstruct();
  _WinningLine_default_instance_.DefaultConstruct();
  _SC_Slotma_Start_default_instance_.DefaultConstruct();
  _CS_Slotma_Start_default_instance_.DefaultConstruct();
}

void InitDefaults() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &TableStruct::InitDefaultsImpl);
}
void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] = {
      "\n\023public_slotma.proto\"=\n\032CS_SlotmaPlayer"
      "ConnectGame\022\014\n\004guid\030\001 \001(\005\"\021\n\005MsgID\022\010\n\002ID"
      "\020\364\253\001\"5\n\022CS_SlotmaLeaveGame\022\014\n\004guid\030\001 \001(\005"
      "\"\021\n\005MsgID\022\010\n\002ID\020\365\253\001\"M\n\013WinningLine\022\016\n\006li"
      "neid\030\001 \001(\005\022\016\n\006itemid\030\002 \001(\005\022\017\n\007itemNum\030\003 "
      "\001(\005\022\r\n\005times\030\004 \001(\005\"q\n\017SC_Slotma_Start\022\r\n"
      "\005items\030\001 \003(\005\022\r\n\005money\030\002 \001(\003\022\013\n\003tax\030\003 \001(\005"
      "\022 \n\npb_winline\030\004 \003(\0132\014.WinningLine\"\021\n\005Ms"
      "gID\022\010\n\002ID\020\362\253\001\"S\n\017CS_Slotma_Start\022\022\n\ncell"
      "_times\030\001 \001(\005\022\r\n\005lines\030\002 \003(\005\"\035\n\005MsgID\022\010\n\002"
      "ID\020\363\253\001\022\n\n\006Target\020\002*\211\001\n\013SLOTMA_TYPE\022\026\n\022SL"
      "OTMA_TYPE_SUCESS\020\000\022\027\n\023SLOTMA_TYPE_ERRORI"
      "D\020\001\022\027\n\023SLOTMA_TYPE_NOMONEY\020\002\022\030\n\024SLOTMA_T"
      "YPE_LINERROR\020\003\022\026\n\022SLOTMA_TYPE_NOLINE\020\004"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 558);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "public_slotma.proto", &protobuf_RegisterTypes);
  ::google::protobuf::internal::OnShutdown(&TableStruct::Shutdown);
}

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;

}  // namespace protobuf_public_5fslotma_2eproto

const ::google::protobuf::EnumDescriptor* CS_SlotmaPlayerConnectGame_MsgID_descriptor() {
  protobuf_public_5fslotma_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_public_5fslotma_2eproto::file_level_enum_descriptors[0];
}
bool CS_SlotmaPlayerConnectGame_MsgID_IsValid(int value) {
  switch (value) {
    case 22004:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const CS_SlotmaPlayerConnectGame_MsgID CS_SlotmaPlayerConnectGame::ID;
const CS_SlotmaPlayerConnectGame_MsgID CS_SlotmaPlayerConnectGame::MsgID_MIN;
const CS_SlotmaPlayerConnectGame_MsgID CS_SlotmaPlayerConnectGame::MsgID_MAX;
const int CS_SlotmaPlayerConnectGame::MsgID_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* CS_SlotmaLeaveGame_MsgID_descriptor() {
  protobuf_public_5fslotma_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_public_5fslotma_2eproto::file_level_enum_descriptors[1];
}
bool CS_SlotmaLeaveGame_MsgID_IsValid(int value) {
  switch (value) {
    case 22005:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const CS_SlotmaLeaveGame_MsgID CS_SlotmaLeaveGame::ID;
const CS_SlotmaLeaveGame_MsgID CS_SlotmaLeaveGame::MsgID_MIN;
const CS_SlotmaLeaveGame_MsgID CS_SlotmaLeaveGame::MsgID_MAX;
const int CS_SlotmaLeaveGame::MsgID_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* SC_Slotma_Start_MsgID_descriptor() {
  protobuf_public_5fslotma_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_public_5fslotma_2eproto::file_level_enum_descriptors[2];
}
bool SC_Slotma_Start_MsgID_IsValid(int value) {
  switch (value) {
    case 22002:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const SC_Slotma_Start_MsgID SC_Slotma_Start::ID;
const SC_Slotma_Start_MsgID SC_Slotma_Start::MsgID_MIN;
const SC_Slotma_Start_MsgID SC_Slotma_Start::MsgID_MAX;
const int SC_Slotma_Start::MsgID_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* CS_Slotma_Start_MsgID_descriptor() {
  protobuf_public_5fslotma_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_public_5fslotma_2eproto::file_level_enum_descriptors[3];
}
bool CS_Slotma_Start_MsgID_IsValid(int value) {
  switch (value) {
    case 2:
    case 22003:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const CS_Slotma_Start_MsgID CS_Slotma_Start::ID;
const CS_Slotma_Start_MsgID CS_Slotma_Start::Target;
const CS_Slotma_Start_MsgID CS_Slotma_Start::MsgID_MIN;
const CS_Slotma_Start_MsgID CS_Slotma_Start::MsgID_MAX;
const int CS_Slotma_Start::MsgID_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* SLOTMA_TYPE_descriptor() {
  protobuf_public_5fslotma_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_public_5fslotma_2eproto::file_level_enum_descriptors[4];
}
bool SLOTMA_TYPE_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CS_SlotmaPlayerConnectGame::kGuidFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CS_SlotmaPlayerConnectGame::CS_SlotmaPlayerConnectGame()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_public_5fslotma_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:CS_SlotmaPlayerConnectGame)
}
CS_SlotmaPlayerConnectGame::CS_SlotmaPlayerConnectGame(const CS_SlotmaPlayerConnectGame& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  guid_ = from.guid_;
  // @@protoc_insertion_point(copy_constructor:CS_SlotmaPlayerConnectGame)
}

void CS_SlotmaPlayerConnectGame::SharedCtor() {
  _cached_size_ = 0;
  guid_ = 0;
}

CS_SlotmaPlayerConnectGame::~CS_SlotmaPlayerConnectGame() {
  // @@protoc_insertion_point(destructor:CS_SlotmaPlayerConnectGame)
  SharedDtor();
}

void CS_SlotmaPlayerConnectGame::SharedDtor() {
}

void CS_SlotmaPlayerConnectGame::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CS_SlotmaPlayerConnectGame::descriptor() {
  protobuf_public_5fslotma_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_public_5fslotma_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CS_SlotmaPlayerConnectGame& CS_SlotmaPlayerConnectGame::default_instance() {
  protobuf_public_5fslotma_2eproto::InitDefaults();
  return *internal_default_instance();
}

CS_SlotmaPlayerConnectGame* CS_SlotmaPlayerConnectGame::New(::google::protobuf::Arena* arena) const {
  CS_SlotmaPlayerConnectGame* n = new CS_SlotmaPlayerConnectGame;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CS_SlotmaPlayerConnectGame::Clear() {
// @@protoc_insertion_point(message_clear_start:CS_SlotmaPlayerConnectGame)
  guid_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CS_SlotmaPlayerConnectGame::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CS_SlotmaPlayerConnectGame)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 guid = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_guid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &guid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CS_SlotmaPlayerConnectGame)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CS_SlotmaPlayerConnectGame)
  return false;
#undef DO_
}

void CS_SlotmaPlayerConnectGame::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CS_SlotmaPlayerConnectGame)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 guid = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->guid(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CS_SlotmaPlayerConnectGame)
}

::google::protobuf::uint8* CS_SlotmaPlayerConnectGame::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CS_SlotmaPlayerConnectGame)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 guid = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->guid(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CS_SlotmaPlayerConnectGame)
  return target;
}

size_t CS_SlotmaPlayerConnectGame::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CS_SlotmaPlayerConnectGame)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // optional int32 guid = 1;
  if (has_guid()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->guid());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CS_SlotmaPlayerConnectGame::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CS_SlotmaPlayerConnectGame)
  GOOGLE_DCHECK_NE(&from, this);
  const CS_SlotmaPlayerConnectGame* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CS_SlotmaPlayerConnectGame>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CS_SlotmaPlayerConnectGame)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CS_SlotmaPlayerConnectGame)
    MergeFrom(*source);
  }
}

void CS_SlotmaPlayerConnectGame::MergeFrom(const CS_SlotmaPlayerConnectGame& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CS_SlotmaPlayerConnectGame)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_guid()) {
    set_guid(from.guid());
  }
}

void CS_SlotmaPlayerConnectGame::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CS_SlotmaPlayerConnectGame)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CS_SlotmaPlayerConnectGame::CopyFrom(const CS_SlotmaPlayerConnectGame& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CS_SlotmaPlayerConnectGame)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CS_SlotmaPlayerConnectGame::IsInitialized() const {
  return true;
}

void CS_SlotmaPlayerConnectGame::Swap(CS_SlotmaPlayerConnectGame* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CS_SlotmaPlayerConnectGame::InternalSwap(CS_SlotmaPlayerConnectGame* other) {
  std::swap(guid_, other->guid_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CS_SlotmaPlayerConnectGame::GetMetadata() const {
  protobuf_public_5fslotma_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_public_5fslotma_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CS_SlotmaPlayerConnectGame

// optional int32 guid = 1;
bool CS_SlotmaPlayerConnectGame::has_guid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CS_SlotmaPlayerConnectGame::set_has_guid() {
  _has_bits_[0] |= 0x00000001u;
}
void CS_SlotmaPlayerConnectGame::clear_has_guid() {
  _has_bits_[0] &= ~0x00000001u;
}
void CS_SlotmaPlayerConnectGame::clear_guid() {
  guid_ = 0;
  clear_has_guid();
}
::google::protobuf::int32 CS_SlotmaPlayerConnectGame::guid() const {
  // @@protoc_insertion_point(field_get:CS_SlotmaPlayerConnectGame.guid)
  return guid_;
}
void CS_SlotmaPlayerConnectGame::set_guid(::google::protobuf::int32 value) {
  set_has_guid();
  guid_ = value;
  // @@protoc_insertion_point(field_set:CS_SlotmaPlayerConnectGame.guid)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CS_SlotmaLeaveGame::kGuidFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CS_SlotmaLeaveGame::CS_SlotmaLeaveGame()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_public_5fslotma_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:CS_SlotmaLeaveGame)
}
CS_SlotmaLeaveGame::CS_SlotmaLeaveGame(const CS_SlotmaLeaveGame& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  guid_ = from.guid_;
  // @@protoc_insertion_point(copy_constructor:CS_SlotmaLeaveGame)
}

void CS_SlotmaLeaveGame::SharedCtor() {
  _cached_size_ = 0;
  guid_ = 0;
}

CS_SlotmaLeaveGame::~CS_SlotmaLeaveGame() {
  // @@protoc_insertion_point(destructor:CS_SlotmaLeaveGame)
  SharedDtor();
}

void CS_SlotmaLeaveGame::SharedDtor() {
}

void CS_SlotmaLeaveGame::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CS_SlotmaLeaveGame::descriptor() {
  protobuf_public_5fslotma_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_public_5fslotma_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CS_SlotmaLeaveGame& CS_SlotmaLeaveGame::default_instance() {
  protobuf_public_5fslotma_2eproto::InitDefaults();
  return *internal_default_instance();
}

CS_SlotmaLeaveGame* CS_SlotmaLeaveGame::New(::google::protobuf::Arena* arena) const {
  CS_SlotmaLeaveGame* n = new CS_SlotmaLeaveGame;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CS_SlotmaLeaveGame::Clear() {
// @@protoc_insertion_point(message_clear_start:CS_SlotmaLeaveGame)
  guid_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CS_SlotmaLeaveGame::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CS_SlotmaLeaveGame)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 guid = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_guid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &guid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CS_SlotmaLeaveGame)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CS_SlotmaLeaveGame)
  return false;
#undef DO_
}

void CS_SlotmaLeaveGame::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CS_SlotmaLeaveGame)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 guid = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->guid(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CS_SlotmaLeaveGame)
}

::google::protobuf::uint8* CS_SlotmaLeaveGame::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CS_SlotmaLeaveGame)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 guid = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->guid(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CS_SlotmaLeaveGame)
  return target;
}

size_t CS_SlotmaLeaveGame::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CS_SlotmaLeaveGame)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // optional int32 guid = 1;
  if (has_guid()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->guid());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CS_SlotmaLeaveGame::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CS_SlotmaLeaveGame)
  GOOGLE_DCHECK_NE(&from, this);
  const CS_SlotmaLeaveGame* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CS_SlotmaLeaveGame>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CS_SlotmaLeaveGame)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CS_SlotmaLeaveGame)
    MergeFrom(*source);
  }
}

void CS_SlotmaLeaveGame::MergeFrom(const CS_SlotmaLeaveGame& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CS_SlotmaLeaveGame)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_guid()) {
    set_guid(from.guid());
  }
}

void CS_SlotmaLeaveGame::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CS_SlotmaLeaveGame)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CS_SlotmaLeaveGame::CopyFrom(const CS_SlotmaLeaveGame& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CS_SlotmaLeaveGame)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CS_SlotmaLeaveGame::IsInitialized() const {
  return true;
}

void CS_SlotmaLeaveGame::Swap(CS_SlotmaLeaveGame* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CS_SlotmaLeaveGame::InternalSwap(CS_SlotmaLeaveGame* other) {
  std::swap(guid_, other->guid_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CS_SlotmaLeaveGame::GetMetadata() const {
  protobuf_public_5fslotma_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_public_5fslotma_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CS_SlotmaLeaveGame

// optional int32 guid = 1;
bool CS_SlotmaLeaveGame::has_guid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CS_SlotmaLeaveGame::set_has_guid() {
  _has_bits_[0] |= 0x00000001u;
}
void CS_SlotmaLeaveGame::clear_has_guid() {
  _has_bits_[0] &= ~0x00000001u;
}
void CS_SlotmaLeaveGame::clear_guid() {
  guid_ = 0;
  clear_has_guid();
}
::google::protobuf::int32 CS_SlotmaLeaveGame::guid() const {
  // @@protoc_insertion_point(field_get:CS_SlotmaLeaveGame.guid)
  return guid_;
}
void CS_SlotmaLeaveGame::set_guid(::google::protobuf::int32 value) {
  set_has_guid();
  guid_ = value;
  // @@protoc_insertion_point(field_set:CS_SlotmaLeaveGame.guid)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int WinningLine::kLineidFieldNumber;
const int WinningLine::kItemidFieldNumber;
const int WinningLine::kItemNumFieldNumber;
const int WinningLine::kTimesFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

WinningLine::WinningLine()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_public_5fslotma_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:WinningLine)
}
WinningLine::WinningLine(const WinningLine& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&lineid_, &from.lineid_,
    reinterpret_cast<char*>(&times_) -
    reinterpret_cast<char*>(&lineid_) + sizeof(times_));
  // @@protoc_insertion_point(copy_constructor:WinningLine)
}

void WinningLine::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&lineid_, 0, reinterpret_cast<char*>(&times_) -
    reinterpret_cast<char*>(&lineid_) + sizeof(times_));
}

WinningLine::~WinningLine() {
  // @@protoc_insertion_point(destructor:WinningLine)
  SharedDtor();
}

void WinningLine::SharedDtor() {
}

void WinningLine::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* WinningLine::descriptor() {
  protobuf_public_5fslotma_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_public_5fslotma_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const WinningLine& WinningLine::default_instance() {
  protobuf_public_5fslotma_2eproto::InitDefaults();
  return *internal_default_instance();
}

WinningLine* WinningLine::New(::google::protobuf::Arena* arena) const {
  WinningLine* n = new WinningLine;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void WinningLine::Clear() {
// @@protoc_insertion_point(message_clear_start:WinningLine)
  if (_has_bits_[0 / 32] & 15u) {
    ::memset(&lineid_, 0, reinterpret_cast<char*>(&times_) -
      reinterpret_cast<char*>(&lineid_) + sizeof(times_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool WinningLine::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:WinningLine)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 lineid = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_lineid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &lineid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 itemid = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_itemid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &itemid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 itemNum = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {
          set_has_itemnum();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &itemnum_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 times = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u)) {
          set_has_times();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &times_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:WinningLine)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:WinningLine)
  return false;
#undef DO_
}

void WinningLine::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:WinningLine)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 lineid = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->lineid(), output);
  }

  // optional int32 itemid = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->itemid(), output);
  }

  // optional int32 itemNum = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->itemnum(), output);
  }

  // optional int32 times = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->times(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:WinningLine)
}

::google::protobuf::uint8* WinningLine::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:WinningLine)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 lineid = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->lineid(), target);
  }

  // optional int32 itemid = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->itemid(), target);
  }

  // optional int32 itemNum = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->itemnum(), target);
  }

  // optional int32 times = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->times(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:WinningLine)
  return target;
}

size_t WinningLine::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:WinningLine)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 15u) {
    // optional int32 lineid = 1;
    if (has_lineid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->lineid());
    }

    // optional int32 itemid = 2;
    if (has_itemid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->itemid());
    }

    // optional int32 itemNum = 3;
    if (has_itemnum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->itemnum());
    }

    // optional int32 times = 4;
    if (has_times()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->times());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void WinningLine::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:WinningLine)
  GOOGLE_DCHECK_NE(&from, this);
  const WinningLine* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const WinningLine>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:WinningLine)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:WinningLine)
    MergeFrom(*source);
  }
}

void WinningLine::MergeFrom(const WinningLine& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:WinningLine)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 15u) {
    if (cached_has_bits & 0x00000001u) {
      lineid_ = from.lineid_;
    }
    if (cached_has_bits & 0x00000002u) {
      itemid_ = from.itemid_;
    }
    if (cached_has_bits & 0x00000004u) {
      itemnum_ = from.itemnum_;
    }
    if (cached_has_bits & 0x00000008u) {
      times_ = from.times_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void WinningLine::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:WinningLine)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void WinningLine::CopyFrom(const WinningLine& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:WinningLine)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WinningLine::IsInitialized() const {
  return true;
}

void WinningLine::Swap(WinningLine* other) {
  if (other == this) return;
  InternalSwap(other);
}
void WinningLine::InternalSwap(WinningLine* other) {
  std::swap(lineid_, other->lineid_);
  std::swap(itemid_, other->itemid_);
  std::swap(itemnum_, other->itemnum_);
  std::swap(times_, other->times_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata WinningLine::GetMetadata() const {
  protobuf_public_5fslotma_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_public_5fslotma_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// WinningLine

// optional int32 lineid = 1;
bool WinningLine::has_lineid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void WinningLine::set_has_lineid() {
  _has_bits_[0] |= 0x00000001u;
}
void WinningLine::clear_has_lineid() {
  _has_bits_[0] &= ~0x00000001u;
}
void WinningLine::clear_lineid() {
  lineid_ = 0;
  clear_has_lineid();
}
::google::protobuf::int32 WinningLine::lineid() const {
  // @@protoc_insertion_point(field_get:WinningLine.lineid)
  return lineid_;
}
void WinningLine::set_lineid(::google::protobuf::int32 value) {
  set_has_lineid();
  lineid_ = value;
  // @@protoc_insertion_point(field_set:WinningLine.lineid)
}

// optional int32 itemid = 2;
bool WinningLine::has_itemid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void WinningLine::set_has_itemid() {
  _has_bits_[0] |= 0x00000002u;
}
void WinningLine::clear_has_itemid() {
  _has_bits_[0] &= ~0x00000002u;
}
void WinningLine::clear_itemid() {
  itemid_ = 0;
  clear_has_itemid();
}
::google::protobuf::int32 WinningLine::itemid() const {
  // @@protoc_insertion_point(field_get:WinningLine.itemid)
  return itemid_;
}
void WinningLine::set_itemid(::google::protobuf::int32 value) {
  set_has_itemid();
  itemid_ = value;
  // @@protoc_insertion_point(field_set:WinningLine.itemid)
}

// optional int32 itemNum = 3;
bool WinningLine::has_itemnum() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void WinningLine::set_has_itemnum() {
  _has_bits_[0] |= 0x00000004u;
}
void WinningLine::clear_has_itemnum() {
  _has_bits_[0] &= ~0x00000004u;
}
void WinningLine::clear_itemnum() {
  itemnum_ = 0;
  clear_has_itemnum();
}
::google::protobuf::int32 WinningLine::itemnum() const {
  // @@protoc_insertion_point(field_get:WinningLine.itemNum)
  return itemnum_;
}
void WinningLine::set_itemnum(::google::protobuf::int32 value) {
  set_has_itemnum();
  itemnum_ = value;
  // @@protoc_insertion_point(field_set:WinningLine.itemNum)
}

// optional int32 times = 4;
bool WinningLine::has_times() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void WinningLine::set_has_times() {
  _has_bits_[0] |= 0x00000008u;
}
void WinningLine::clear_has_times() {
  _has_bits_[0] &= ~0x00000008u;
}
void WinningLine::clear_times() {
  times_ = 0;
  clear_has_times();
}
::google::protobuf::int32 WinningLine::times() const {
  // @@protoc_insertion_point(field_get:WinningLine.times)
  return times_;
}
void WinningLine::set_times(::google::protobuf::int32 value) {
  set_has_times();
  times_ = value;
  // @@protoc_insertion_point(field_set:WinningLine.times)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SC_Slotma_Start::kItemsFieldNumber;
const int SC_Slotma_Start::kMoneyFieldNumber;
const int SC_Slotma_Start::kTaxFieldNumber;
const int SC_Slotma_Start::kPbWinlineFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SC_Slotma_Start::SC_Slotma_Start()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_public_5fslotma_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:SC_Slotma_Start)
}
SC_Slotma_Start::SC_Slotma_Start(const SC_Slotma_Start& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      items_(from.items_),
      pb_winline_(from.pb_winline_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&money_, &from.money_,
    reinterpret_cast<char*>(&tax_) -
    reinterpret_cast<char*>(&money_) + sizeof(tax_));
  // @@protoc_insertion_point(copy_constructor:SC_Slotma_Start)
}

void SC_Slotma_Start::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&money_, 0, reinterpret_cast<char*>(&tax_) -
    reinterpret_cast<char*>(&money_) + sizeof(tax_));
}

SC_Slotma_Start::~SC_Slotma_Start() {
  // @@protoc_insertion_point(destructor:SC_Slotma_Start)
  SharedDtor();
}

void SC_Slotma_Start::SharedDtor() {
}

void SC_Slotma_Start::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SC_Slotma_Start::descriptor() {
  protobuf_public_5fslotma_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_public_5fslotma_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const SC_Slotma_Start& SC_Slotma_Start::default_instance() {
  protobuf_public_5fslotma_2eproto::InitDefaults();
  return *internal_default_instance();
}

SC_Slotma_Start* SC_Slotma_Start::New(::google::protobuf::Arena* arena) const {
  SC_Slotma_Start* n = new SC_Slotma_Start;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SC_Slotma_Start::Clear() {
// @@protoc_insertion_point(message_clear_start:SC_Slotma_Start)
  items_.Clear();
  pb_winline_.Clear();
  if (_has_bits_[0 / 32] & 3u) {
    ::memset(&money_, 0, reinterpret_cast<char*>(&tax_) -
      reinterpret_cast<char*>(&money_) + sizeof(tax_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool SC_Slotma_Start::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:SC_Slotma_Start)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated int32 items = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 8u, input, this->mutable_items())));
        } else if (static_cast< ::google::protobuf::uint8>(tag) ==
                   static_cast< ::google::protobuf::uint8>(10u)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_items())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 money = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_money();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &money_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 tax = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {
          set_has_tax();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &tax_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .WinningLine pb_winline = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_pb_winline()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:SC_Slotma_Start)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:SC_Slotma_Start)
  return false;
#undef DO_
}

void SC_Slotma_Start::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:SC_Slotma_Start)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated int32 items = 1;
  for (int i = 0, n = this->items_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      1, this->items(i), output);
  }

  cached_has_bits = _has_bits_[0];
  // optional int64 money = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->money(), output);
  }

  // optional int32 tax = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->tax(), output);
  }

  // repeated .WinningLine pb_winline = 4;
  for (unsigned int i = 0, n = this->pb_winline_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->pb_winline(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:SC_Slotma_Start)
}

::google::protobuf::uint8* SC_Slotma_Start::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:SC_Slotma_Start)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated int32 items = 1;
  target = ::google::protobuf::internal::WireFormatLite::
    WriteInt32ToArray(1, this->items_, target);

  cached_has_bits = _has_bits_[0];
  // optional int64 money = 2;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->money(), target);
  }

  // optional int32 tax = 3;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->tax(), target);
  }

  // repeated .WinningLine pb_winline = 4;
  for (unsigned int i = 0, n = this->pb_winline_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        4, this->pb_winline(i), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SC_Slotma_Start)
  return target;
}

size_t SC_Slotma_Start::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SC_Slotma_Start)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // repeated int32 items = 1;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      Int32Size(this->items_);
    total_size += 1 *
                  ::google::protobuf::internal::FromIntSize(this->items_size());
    total_size += data_size;
  }

  // repeated .WinningLine pb_winline = 4;
  {
    unsigned int count = this->pb_winline_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->pb_winline(i));
    }
  }

  if (_has_bits_[0 / 32] & 3u) {
    // optional int64 money = 2;
    if (has_money()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->money());
    }

    // optional int32 tax = 3;
    if (has_tax()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->tax());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SC_Slotma_Start::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:SC_Slotma_Start)
  GOOGLE_DCHECK_NE(&from, this);
  const SC_Slotma_Start* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SC_Slotma_Start>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:SC_Slotma_Start)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:SC_Slotma_Start)
    MergeFrom(*source);
  }
}

void SC_Slotma_Start::MergeFrom(const SC_Slotma_Start& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:SC_Slotma_Start)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  items_.MergeFrom(from.items_);
  pb_winline_.MergeFrom(from.pb_winline_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      money_ = from.money_;
    }
    if (cached_has_bits & 0x00000002u) {
      tax_ = from.tax_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void SC_Slotma_Start::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:SC_Slotma_Start)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SC_Slotma_Start::CopyFrom(const SC_Slotma_Start& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SC_Slotma_Start)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SC_Slotma_Start::IsInitialized() const {
  return true;
}

void SC_Slotma_Start::Swap(SC_Slotma_Start* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SC_Slotma_Start::InternalSwap(SC_Slotma_Start* other) {
  items_.InternalSwap(&other->items_);
  pb_winline_.InternalSwap(&other->pb_winline_);
  std::swap(money_, other->money_);
  std::swap(tax_, other->tax_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SC_Slotma_Start::GetMetadata() const {
  protobuf_public_5fslotma_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_public_5fslotma_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SC_Slotma_Start

// repeated int32 items = 1;
int SC_Slotma_Start::items_size() const {
  return items_.size();
}
void SC_Slotma_Start::clear_items() {
  items_.Clear();
}
::google::protobuf::int32 SC_Slotma_Start::items(int index) const {
  // @@protoc_insertion_point(field_get:SC_Slotma_Start.items)
  return items_.Get(index);
}
void SC_Slotma_Start::set_items(int index, ::google::protobuf::int32 value) {
  items_.Set(index, value);
  // @@protoc_insertion_point(field_set:SC_Slotma_Start.items)
}
void SC_Slotma_Start::add_items(::google::protobuf::int32 value) {
  items_.Add(value);
  // @@protoc_insertion_point(field_add:SC_Slotma_Start.items)
}
const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
SC_Slotma_Start::items() const {
  // @@protoc_insertion_point(field_list:SC_Slotma_Start.items)
  return items_;
}
::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
SC_Slotma_Start::mutable_items() {
  // @@protoc_insertion_point(field_mutable_list:SC_Slotma_Start.items)
  return &items_;
}

// optional int64 money = 2;
bool SC_Slotma_Start::has_money() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void SC_Slotma_Start::set_has_money() {
  _has_bits_[0] |= 0x00000001u;
}
void SC_Slotma_Start::clear_has_money() {
  _has_bits_[0] &= ~0x00000001u;
}
void SC_Slotma_Start::clear_money() {
  money_ = GOOGLE_LONGLONG(0);
  clear_has_money();
}
::google::protobuf::int64 SC_Slotma_Start::money() const {
  // @@protoc_insertion_point(field_get:SC_Slotma_Start.money)
  return money_;
}
void SC_Slotma_Start::set_money(::google::protobuf::int64 value) {
  set_has_money();
  money_ = value;
  // @@protoc_insertion_point(field_set:SC_Slotma_Start.money)
}

// optional int32 tax = 3;
bool SC_Slotma_Start::has_tax() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void SC_Slotma_Start::set_has_tax() {
  _has_bits_[0] |= 0x00000002u;
}
void SC_Slotma_Start::clear_has_tax() {
  _has_bits_[0] &= ~0x00000002u;
}
void SC_Slotma_Start::clear_tax() {
  tax_ = 0;
  clear_has_tax();
}
::google::protobuf::int32 SC_Slotma_Start::tax() const {
  // @@protoc_insertion_point(field_get:SC_Slotma_Start.tax)
  return tax_;
}
void SC_Slotma_Start::set_tax(::google::protobuf::int32 value) {
  set_has_tax();
  tax_ = value;
  // @@protoc_insertion_point(field_set:SC_Slotma_Start.tax)
}

// repeated .WinningLine pb_winline = 4;
int SC_Slotma_Start::pb_winline_size() const {
  return pb_winline_.size();
}
void SC_Slotma_Start::clear_pb_winline() {
  pb_winline_.Clear();
}
const ::WinningLine& SC_Slotma_Start::pb_winline(int index) const {
  // @@protoc_insertion_point(field_get:SC_Slotma_Start.pb_winline)
  return pb_winline_.Get(index);
}
::WinningLine* SC_Slotma_Start::mutable_pb_winline(int index) {
  // @@protoc_insertion_point(field_mutable:SC_Slotma_Start.pb_winline)
  return pb_winline_.Mutable(index);
}
::WinningLine* SC_Slotma_Start::add_pb_winline() {
  // @@protoc_insertion_point(field_add:SC_Slotma_Start.pb_winline)
  return pb_winline_.Add();
}
::google::protobuf::RepeatedPtrField< ::WinningLine >*
SC_Slotma_Start::mutable_pb_winline() {
  // @@protoc_insertion_point(field_mutable_list:SC_Slotma_Start.pb_winline)
  return &pb_winline_;
}
const ::google::protobuf::RepeatedPtrField< ::WinningLine >&
SC_Slotma_Start::pb_winline() const {
  // @@protoc_insertion_point(field_list:SC_Slotma_Start.pb_winline)
  return pb_winline_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CS_Slotma_Start::kCellTimesFieldNumber;
const int CS_Slotma_Start::kLinesFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CS_Slotma_Start::CS_Slotma_Start()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_public_5fslotma_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:CS_Slotma_Start)
}
CS_Slotma_Start::CS_Slotma_Start(const CS_Slotma_Start& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      lines_(from.lines_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  cell_times_ = from.cell_times_;
  // @@protoc_insertion_point(copy_constructor:CS_Slotma_Start)
}

void CS_Slotma_Start::SharedCtor() {
  _cached_size_ = 0;
  cell_times_ = 0;
}

CS_Slotma_Start::~CS_Slotma_Start() {
  // @@protoc_insertion_point(destructor:CS_Slotma_Start)
  SharedDtor();
}

void CS_Slotma_Start::SharedDtor() {
}

void CS_Slotma_Start::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CS_Slotma_Start::descriptor() {
  protobuf_public_5fslotma_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_public_5fslotma_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CS_Slotma_Start& CS_Slotma_Start::default_instance() {
  protobuf_public_5fslotma_2eproto::InitDefaults();
  return *internal_default_instance();
}

CS_Slotma_Start* CS_Slotma_Start::New(::google::protobuf::Arena* arena) const {
  CS_Slotma_Start* n = new CS_Slotma_Start;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CS_Slotma_Start::Clear() {
// @@protoc_insertion_point(message_clear_start:CS_Slotma_Start)
  lines_.Clear();
  cell_times_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CS_Slotma_Start::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CS_Slotma_Start)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 cell_times = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_cell_times();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &cell_times_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated int32 lines = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 16u, input, this->mutable_lines())));
        } else if (static_cast< ::google::protobuf::uint8>(tag) ==
                   static_cast< ::google::protobuf::uint8>(18u)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_lines())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CS_Slotma_Start)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CS_Slotma_Start)
  return false;
#undef DO_
}

void CS_Slotma_Start::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CS_Slotma_Start)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 cell_times = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->cell_times(), output);
  }

  // repeated int32 lines = 2;
  for (int i = 0, n = this->lines_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      2, this->lines(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CS_Slotma_Start)
}

::google::protobuf::uint8* CS_Slotma_Start::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CS_Slotma_Start)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 cell_times = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->cell_times(), target);
  }

  // repeated int32 lines = 2;
  target = ::google::protobuf::internal::WireFormatLite::
    WriteInt32ToArray(2, this->lines_, target);

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CS_Slotma_Start)
  return target;
}

size_t CS_Slotma_Start::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CS_Slotma_Start)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // repeated int32 lines = 2;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      Int32Size(this->lines_);
    total_size += 1 *
                  ::google::protobuf::internal::FromIntSize(this->lines_size());
    total_size += data_size;
  }

  // optional int32 cell_times = 1;
  if (has_cell_times()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->cell_times());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CS_Slotma_Start::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CS_Slotma_Start)
  GOOGLE_DCHECK_NE(&from, this);
  const CS_Slotma_Start* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CS_Slotma_Start>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CS_Slotma_Start)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CS_Slotma_Start)
    MergeFrom(*source);
  }
}

void CS_Slotma_Start::MergeFrom(const CS_Slotma_Start& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CS_Slotma_Start)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  lines_.MergeFrom(from.lines_);
  if (from.has_cell_times()) {
    set_cell_times(from.cell_times());
  }
}

void CS_Slotma_Start::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CS_Slotma_Start)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CS_Slotma_Start::CopyFrom(const CS_Slotma_Start& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CS_Slotma_Start)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CS_Slotma_Start::IsInitialized() const {
  return true;
}

void CS_Slotma_Start::Swap(CS_Slotma_Start* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CS_Slotma_Start::InternalSwap(CS_Slotma_Start* other) {
  lines_.InternalSwap(&other->lines_);
  std::swap(cell_times_, other->cell_times_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CS_Slotma_Start::GetMetadata() const {
  protobuf_public_5fslotma_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_public_5fslotma_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CS_Slotma_Start

// optional int32 cell_times = 1;
bool CS_Slotma_Start::has_cell_times() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CS_Slotma_Start::set_has_cell_times() {
  _has_bits_[0] |= 0x00000001u;
}
void CS_Slotma_Start::clear_has_cell_times() {
  _has_bits_[0] &= ~0x00000001u;
}
void CS_Slotma_Start::clear_cell_times() {
  cell_times_ = 0;
  clear_has_cell_times();
}
::google::protobuf::int32 CS_Slotma_Start::cell_times() const {
  // @@protoc_insertion_point(field_get:CS_Slotma_Start.cell_times)
  return cell_times_;
}
void CS_Slotma_Start::set_cell_times(::google::protobuf::int32 value) {
  set_has_cell_times();
  cell_times_ = value;
  // @@protoc_insertion_point(field_set:CS_Slotma_Start.cell_times)
}

// repeated int32 lines = 2;
int CS_Slotma_Start::lines_size() const {
  return lines_.size();
}
void CS_Slotma_Start::clear_lines() {
  lines_.Clear();
}
::google::protobuf::int32 CS_Slotma_Start::lines(int index) const {
  // @@protoc_insertion_point(field_get:CS_Slotma_Start.lines)
  return lines_.Get(index);
}
void CS_Slotma_Start::set_lines(int index, ::google::protobuf::int32 value) {
  lines_.Set(index, value);
  // @@protoc_insertion_point(field_set:CS_Slotma_Start.lines)
}
void CS_Slotma_Start::add_lines(::google::protobuf::int32 value) {
  lines_.Add(value);
  // @@protoc_insertion_point(field_add:CS_Slotma_Start.lines)
}
const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
CS_Slotma_Start::lines() const {
  // @@protoc_insertion_point(field_list:CS_Slotma_Start.lines)
  return lines_;
}
::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
CS_Slotma_Start::mutable_lines() {
  // @@protoc_insertion_point(field_mutable_list:CS_Slotma_Start.lines)
  return &lines_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)
