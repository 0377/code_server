// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: public_land.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "public_land.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
class SC_LandStartDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<SC_LandStart> {
} _SC_LandStart_default_instance_;
class CS_LandCallScoreDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CS_LandCallScore> {
} _CS_LandCallScore_default_instance_;
class SC_LandCallScoreDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<SC_LandCallScore> {
} _SC_LandCallScore_default_instance_;
class SC_LandCallFailDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<SC_LandCallFail> {
} _SC_LandCallFail_default_instance_;
class SC_LandInfoDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<SC_LandInfo> {
} _SC_LandInfo_default_instance_;
class CS_LandOutCardDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CS_LandOutCard> {
} _CS_LandOutCard_default_instance_;
class SC_LandOutCardDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<SC_LandOutCard> {
} _SC_LandOutCard_default_instance_;
class CS_LandPassCardDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CS_LandPassCard> {
} _CS_LandPassCard_default_instance_;
class SC_LandPassCardDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<SC_LandPassCard> {
} _SC_LandPassCard_default_instance_;
class LandPlayerConcludeDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<LandPlayerConclude> {
} _LandPlayerConclude_default_instance_;
class SC_LandConcludeDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<SC_LandConclude> {
} _SC_LandConclude_default_instance_;
class SC_LandPlayerOfflineDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<SC_LandPlayerOffline> {
} _SC_LandPlayerOffline_default_instance_;
class SC_LandPlayerOnlineDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<SC_LandPlayerOnline> {
} _SC_LandPlayerOnline_default_instance_;
class PlayerCardsMsgDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<PlayerCardsMsg> {
} _PlayerCardsMsg_default_instance_;
class SC_LandRecoveryPlayerCardDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<SC_LandRecoveryPlayerCard> {
} _SC_LandRecoveryPlayerCard_default_instance_;
class pofflineMsgDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<pofflineMsg> {
} _pofflineMsg_default_instance_;
class SC_LandRecoveryPlayerCallScoreDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<SC_LandRecoveryPlayerCallScore> {
} _SC_LandRecoveryPlayerCallScore_default_instance_;
class SC_LandCallScorePlayerOfflineDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<SC_LandCallScorePlayerOffline> {
} _SC_LandCallScorePlayerOffline_default_instance_;
class CS_LandTrusteeshipDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CS_LandTrusteeship> {
} _CS_LandTrusteeship_default_instance_;
class SC_LandTrusteeshipDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<SC_LandTrusteeship> {
} _SC_LandTrusteeship_default_instance_;
class CS_LandCallDoubleDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CS_LandCallDouble> {
} _CS_LandCallDouble_default_instance_;
class SC_LandCallDoubleDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<SC_LandCallDouble> {
} _SC_LandCallDouble_default_instance_;
class SC_LandCallDoubleFinishDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<SC_LandCallDoubleFinish> {
} _SC_LandCallDoubleFinish_default_instance_;
class PlayerDoubleMsgDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<PlayerDoubleMsg> {
} _PlayerDoubleMsg_default_instance_;
class SC_LandRecoveryPlayerDoubleDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<SC_LandRecoveryPlayerDouble> {
} _SC_LandRecoveryPlayerDouble_default_instance_;
class CS_GetPrivateConfigDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CS_GetPrivateConfig> {
} _CS_GetPrivateConfig_default_instance_;
class CS_SetPrivateConfigChangeDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CS_SetPrivateConfigChange> {
} _CS_SetPrivateConfigChange_default_instance_;
class SC_PrivateConfigChangeDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<SC_PrivateConfigChange> {
} _SC_PrivateConfigChange_default_instance_;
class CS_TabTirenDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CS_TabTiren> {
} _CS_TabTiren_default_instance_;
class CS_TabVoteDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CS_TabVote> {
} _CS_TabVote_default_instance_;
class SC_TabVoteInfoDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<SC_TabVoteInfo> {
} _SC_TabVoteInfo_default_instance_;
class SC_TotalScoreInfoDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<SC_TotalScoreInfo> {
} _SC_TotalScoreInfo_default_instance_;
class CS_GetTabVoteArrayDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CS_GetTabVoteArray> {
} _CS_GetTabVoteArray_default_instance_;
class SC_TabVoteArrayDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<SC_TabVoteArray> {
} _SC_TabVoteArray_default_instance_;
class SC_TickNotifyDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<SC_TickNotify> {
} _SC_TickNotify_default_instance_;
class SC_DismissDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<SC_Dismiss> {
} _SC_Dismiss_default_instance_;
class SC_RecconectReadyDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<SC_RecconectReady> {
} _SC_RecconectReady_default_instance_;

namespace protobuf_public_5fland_2eproto {


namespace {

::google::protobuf::Metadata file_level_metadata[37];
const ::google::protobuf::EnumDescriptor* file_level_enum_descriptors[34];

}  // namespace

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTableField
    const TableStruct::entries[] = {
  {0, 0, 0, ::google::protobuf::internal::kInvalidMask, 0, 0},
};

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::AuxillaryParseTableField
    const TableStruct::aux[] = {
  ::google::protobuf::internal::AuxillaryParseTableField(),
};
PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTable const
    TableStruct::schema[] = {
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
};

const ::google::protobuf::uint32 TableStruct::offsets[] = {
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SC_LandStart, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SC_LandStart, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SC_LandStart, first_turn_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SC_LandStart, valid_card_chair_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SC_LandStart, valid_card_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SC_LandStart, cards_),
  0,
  1,
  2,
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CS_LandCallScore, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CS_LandCallScore, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CS_LandCallScore, call_score_),
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SC_LandCallScore, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SC_LandCallScore, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SC_LandCallScore, cur_chair_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SC_LandCallScore, call_chair_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SC_LandCallScore, call_score_),
  0,
  1,
  2,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SC_LandCallFail, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SC_LandCallFail, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SC_LandInfo, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SC_LandInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SC_LandInfo, land_chair_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SC_LandInfo, call_score_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SC_LandInfo, cards_),
  0,
  1,
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CS_LandOutCard, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CS_LandOutCard, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CS_LandOutCard, cards_),
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SC_LandOutCard, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SC_LandOutCard, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SC_LandOutCard, cur_chair_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SC_LandOutCard, out_chair_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SC_LandOutCard, cards_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SC_LandOutCard, turn_over_),
  0,
  1,
  ~0u,
  2,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CS_LandPassCard, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CS_LandPassCard, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SC_LandPassCard, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SC_LandPassCard, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SC_LandPassCard, cur_chair_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SC_LandPassCard, pass_chair_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SC_LandPassCard, turn_over_),
  0,
  1,
  2,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LandPlayerConclude, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LandPlayerConclude, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LandPlayerConclude, score_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LandPlayerConclude, bomb_count_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LandPlayerConclude, cards_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LandPlayerConclude, flag_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LandPlayerConclude, tax_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LandPlayerConclude, totoalwinlost_),
  0,
  1,
  ~0u,
  2,
  3,
  4,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SC_LandConclude, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SC_LandConclude, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SC_LandConclude, pb_conclude_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SC_LandConclude, chuntian_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SC_LandConclude, fanchuntian_),
  ~0u,
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SC_LandPlayerOffline, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SC_LandPlayerOffline, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SC_LandPlayerOffline, cur_chair_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SC_LandPlayerOffline, wait_time_),
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SC_LandPlayerOnline, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SC_LandPlayerOnline, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SC_LandPlayerOnline, cur_online_chair_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SC_LandPlayerOnline, cur_chair_id_),
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerCardsMsg, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerCardsMsg, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerCardsMsg, chair_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerCardsMsg, cardsnum_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerCardsMsg, istrusteeship_),
  0,
  1,
  2,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SC_LandRecoveryPlayerCard, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SC_LandRecoveryPlayerCard, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SC_LandRecoveryPlayerCard, cur_chair_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SC_LandRecoveryPlayerCard, cards_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SC_LandRecoveryPlayerCard, pb_msg_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SC_LandRecoveryPlayerCard, landchairid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SC_LandRecoveryPlayerCard, landcards_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SC_LandRecoveryPlayerCard, call_score_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SC_LandRecoveryPlayerCard, lastcards_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SC_LandRecoveryPlayerCard, lastcardid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SC_LandRecoveryPlayerCard, outcardid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SC_LandRecoveryPlayerCard, alreadyoutcards_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SC_LandRecoveryPlayerCard, bomb_),
  0,
  ~0u,
  ~0u,
  1,
  ~0u,
  2,
  ~0u,
  3,
  4,
  ~0u,
  5,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pofflineMsg, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pofflineMsg, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pofflineMsg, chair_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pofflineMsg, outtimes_),
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SC_LandRecoveryPlayerCallScore, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SC_LandRecoveryPlayerCallScore, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SC_LandRecoveryPlayerCallScore, cur_chair_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SC_LandRecoveryPlayerCallScore, call_chair_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SC_LandRecoveryPlayerCallScore, call_score_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SC_LandRecoveryPlayerCallScore, cards_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SC_LandRecoveryPlayerCallScore, pb_playerofflinemsg_),
  0,
  1,
  2,
  ~0u,
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SC_LandCallScorePlayerOffline, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SC_LandCallScorePlayerOffline, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SC_LandCallScorePlayerOffline, cur_chair_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SC_LandCallScorePlayerOffline, wait_time_),
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CS_LandTrusteeship, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CS_LandTrusteeship, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SC_LandTrusteeship, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SC_LandTrusteeship, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SC_LandTrusteeship, chair_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SC_LandTrusteeship, istrusteeship_),
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CS_LandCallDouble, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CS_LandCallDouble, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CS_LandCallDouble, is_double_),
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SC_LandCallDouble, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SC_LandCallDouble, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SC_LandCallDouble, call_chair_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SC_LandCallDouble, is_double_),
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SC_LandCallDoubleFinish, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SC_LandCallDoubleFinish, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SC_LandCallDoubleFinish, land_chair_id_),
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerDoubleMsg, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerDoubleMsg, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerDoubleMsg, chair_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerDoubleMsg, is_double_),
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SC_LandRecoveryPlayerDouble, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SC_LandRecoveryPlayerDouble, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SC_LandRecoveryPlayerDouble, pb_double_state_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SC_LandRecoveryPlayerDouble, double_count_down_),
  ~0u,
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CS_GetPrivateConfig, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CS_GetPrivateConfig, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CS_SetPrivateConfigChange, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CS_SetPrivateConfigChange, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CS_SetPrivateConfigChange, nallowdouble_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CS_SetPrivateConfigChange, nlimitbeishu_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CS_SetPrivateConfigChange, nallowyixiaoboda_),
  0,
  1,
  2,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SC_PrivateConfigChange, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SC_PrivateConfigChange, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SC_PrivateConfigChange, nallowdouble_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SC_PrivateConfigChange, nlimitbeishu_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SC_PrivateConfigChange, nallowyixiaoboda_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SC_PrivateConfigChange, ncell_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SC_PrivateConfigChange, nlimit_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SC_PrivateConfigChange, nhosterguid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SC_PrivateConfigChange, nstatues_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SC_PrivateConfigChange, nreason_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SC_PrivateConfigChange, private_room_has_start_),
  0,
  1,
  2,
  3,
  4,
  5,
  6,
  7,
  8,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CS_TabTiren, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CS_TabTiren, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CS_TabTiren, chair_id_),
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CS_TabVote, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CS_TabVote, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CS_TabVote, bret_),
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SC_TabVoteInfo, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SC_TabVoteInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SC_TabVoteInfo, chair_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SC_TabVoteInfo, bret_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SC_TabVoteInfo, vote_chairid_),
  0,
  1,
  2,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SC_TotalScoreInfo, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SC_TotalScoreInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SC_TotalScoreInfo, totoalscore_),
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CS_GetTabVoteArray, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CS_GetTabVoteArray, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SC_TabVoteArray, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SC_TabVoteArray, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SC_TabVoteArray, pb_sctableinfo_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SC_TabVoteArray, votechairid_),
  ~0u,
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SC_TickNotify, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SC_TickNotify, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SC_TickNotify, tickchairid_),
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SC_Dismiss, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SC_Dismiss, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SC_Dismiss, guid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SC_Dismiss, chair_id_),
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SC_RecconectReady, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SC_RecconectReady, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
};

static const ::google::protobuf::internal::MigrationSchema schemas[] = {
  { 0, 9, sizeof(SC_LandStart)},
  { 13, 19, sizeof(CS_LandCallScore)},
  { 20, 28, sizeof(SC_LandCallScore)},
  { 31, 36, sizeof(SC_LandCallFail)},
  { 36, 44, sizeof(SC_LandInfo)},
  { 47, 53, sizeof(CS_LandOutCard)},
  { 54, 63, sizeof(SC_LandOutCard)},
  { 67, 72, sizeof(CS_LandPassCard)},
  { 72, 80, sizeof(SC_LandPassCard)},
  { 83, 94, sizeof(LandPlayerConclude)},
  { 100, 108, sizeof(SC_LandConclude)},
  { 111, 118, sizeof(SC_LandPlayerOffline)},
  { 120, 127, sizeof(SC_LandPlayerOnline)},
  { 129, 137, sizeof(PlayerCardsMsg)},
  { 140, 156, sizeof(SC_LandRecoveryPlayerCard)},
  { 167, 174, sizeof(pofflineMsg)},
  { 176, 186, sizeof(SC_LandRecoveryPlayerCallScore)},
  { 191, 198, sizeof(SC_LandCallScorePlayerOffline)},
  { 200, 205, sizeof(CS_LandTrusteeship)},
  { 205, 212, sizeof(SC_LandTrusteeship)},
  { 214, 220, sizeof(CS_LandCallDouble)},
  { 221, 228, sizeof(SC_LandCallDouble)},
  { 230, 236, sizeof(SC_LandCallDoubleFinish)},
  { 237, 244, sizeof(PlayerDoubleMsg)},
  { 246, 253, sizeof(SC_LandRecoveryPlayerDouble)},
  { 255, 260, sizeof(CS_GetPrivateConfig)},
  { 260, 268, sizeof(CS_SetPrivateConfigChange)},
  { 271, 285, sizeof(SC_PrivateConfigChange)},
  { 294, 300, sizeof(CS_TabTiren)},
  { 301, 307, sizeof(CS_TabVote)},
  { 308, 316, sizeof(SC_TabVoteInfo)},
  { 319, 325, sizeof(SC_TotalScoreInfo)},
  { 326, 331, sizeof(CS_GetTabVoteArray)},
  { 331, 338, sizeof(SC_TabVoteArray)},
  { 340, 346, sizeof(SC_TickNotify)},
  { 347, 354, sizeof(SC_Dismiss)},
  { 356, 361, sizeof(SC_RecconectReady)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&_SC_LandStart_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CS_LandCallScore_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_SC_LandCallScore_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_SC_LandCallFail_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_SC_LandInfo_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CS_LandOutCard_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_SC_LandOutCard_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CS_LandPassCard_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_SC_LandPassCard_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_LandPlayerConclude_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_SC_LandConclude_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_SC_LandPlayerOffline_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_SC_LandPlayerOnline_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_PlayerCardsMsg_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_SC_LandRecoveryPlayerCard_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_pofflineMsg_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_SC_LandRecoveryPlayerCallScore_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_SC_LandCallScorePlayerOffline_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CS_LandTrusteeship_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_SC_LandTrusteeship_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CS_LandCallDouble_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_SC_LandCallDouble_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_SC_LandCallDoubleFinish_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_PlayerDoubleMsg_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_SC_LandRecoveryPlayerDouble_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CS_GetPrivateConfig_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CS_SetPrivateConfigChange_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_SC_PrivateConfigChange_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CS_TabTiren_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CS_TabVote_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_SC_TabVoteInfo_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_SC_TotalScoreInfo_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CS_GetTabVoteArray_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_SC_TabVoteArray_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_SC_TickNotify_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_SC_Dismiss_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_SC_RecconectReady_default_instance_),
};

namespace {

void protobuf_AssignDescriptors() {
  AddDescriptors();
  ::google::protobuf::MessageFactory* factory = NULL;
  AssignDescriptors(
      "public_land.proto", schemas, file_default_instances, TableStruct::offsets, factory,
      file_level_metadata, file_level_enum_descriptors, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 37);
}

}  // namespace

void TableStruct::Shutdown() {
  _SC_LandStart_default_instance_.Shutdown();
  delete file_level_metadata[0].reflection;
  _CS_LandCallScore_default_instance_.Shutdown();
  delete file_level_metadata[1].reflection;
  _SC_LandCallScore_default_instance_.Shutdown();
  delete file_level_metadata[2].reflection;
  _SC_LandCallFail_default_instance_.Shutdown();
  delete file_level_metadata[3].reflection;
  _SC_LandInfo_default_instance_.Shutdown();
  delete file_level_metadata[4].reflection;
  _CS_LandOutCard_default_instance_.Shutdown();
  delete file_level_metadata[5].reflection;
  _SC_LandOutCard_default_instance_.Shutdown();
  delete file_level_metadata[6].reflection;
  _CS_LandPassCard_default_instance_.Shutdown();
  delete file_level_metadata[7].reflection;
  _SC_LandPassCard_default_instance_.Shutdown();
  delete file_level_metadata[8].reflection;
  _LandPlayerConclude_default_instance_.Shutdown();
  delete file_level_metadata[9].reflection;
  _SC_LandConclude_default_instance_.Shutdown();
  delete file_level_metadata[10].reflection;
  _SC_LandPlayerOffline_default_instance_.Shutdown();
  delete file_level_metadata[11].reflection;
  _SC_LandPlayerOnline_default_instance_.Shutdown();
  delete file_level_metadata[12].reflection;
  _PlayerCardsMsg_default_instance_.Shutdown();
  delete file_level_metadata[13].reflection;
  _SC_LandRecoveryPlayerCard_default_instance_.Shutdown();
  delete file_level_metadata[14].reflection;
  _pofflineMsg_default_instance_.Shutdown();
  delete file_level_metadata[15].reflection;
  _SC_LandRecoveryPlayerCallScore_default_instance_.Shutdown();
  delete file_level_metadata[16].reflection;
  _SC_LandCallScorePlayerOffline_default_instance_.Shutdown();
  delete file_level_metadata[17].reflection;
  _CS_LandTrusteeship_default_instance_.Shutdown();
  delete file_level_metadata[18].reflection;
  _SC_LandTrusteeship_default_instance_.Shutdown();
  delete file_level_metadata[19].reflection;
  _CS_LandCallDouble_default_instance_.Shutdown();
  delete file_level_metadata[20].reflection;
  _SC_LandCallDouble_default_instance_.Shutdown();
  delete file_level_metadata[21].reflection;
  _SC_LandCallDoubleFinish_default_instance_.Shutdown();
  delete file_level_metadata[22].reflection;
  _PlayerDoubleMsg_default_instance_.Shutdown();
  delete file_level_metadata[23].reflection;
  _SC_LandRecoveryPlayerDouble_default_instance_.Shutdown();
  delete file_level_metadata[24].reflection;
  _CS_GetPrivateConfig_default_instance_.Shutdown();
  delete file_level_metadata[25].reflection;
  _CS_SetPrivateConfigChange_default_instance_.Shutdown();
  delete file_level_metadata[26].reflection;
  _SC_PrivateConfigChange_default_instance_.Shutdown();
  delete file_level_metadata[27].reflection;
  _CS_TabTiren_default_instance_.Shutdown();
  delete file_level_metadata[28].reflection;
  _CS_TabVote_default_instance_.Shutdown();
  delete file_level_metadata[29].reflection;
  _SC_TabVoteInfo_default_instance_.Shutdown();
  delete file_level_metadata[30].reflection;
  _SC_TotalScoreInfo_default_instance_.Shutdown();
  delete file_level_metadata[31].reflection;
  _CS_GetTabVoteArray_default_instance_.Shutdown();
  delete file_level_metadata[32].reflection;
  _SC_TabVoteArray_default_instance_.Shutdown();
  delete file_level_metadata[33].reflection;
  _SC_TickNotify_default_instance_.Shutdown();
  delete file_level_metadata[34].reflection;
  _SC_Dismiss_default_instance_.Shutdown();
  delete file_level_metadata[35].reflection;
  _SC_RecconectReady_default_instance_.Shutdown();
  delete file_level_metadata[36].reflection;
}

void TableStruct::InitDefaultsImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::internal::InitProtobufDefaults();
  _SC_LandStart_default_instance_.DefaultConstruct();
  _CS_LandCallScore_default_instance_.DefaultConstruct();
  _SC_LandCallScore_default_instance_.DefaultConstruct();
  _SC_LandCallFail_default_instance_.DefaultConstruct();
  _SC_LandInfo_default_instance_.DefaultConstruct();
  _CS_LandOutCard_default_instance_.DefaultConstruct();
  _SC_LandOutCard_default_instance_.DefaultConstruct();
  _CS_LandPassCard_default_instance_.DefaultConstruct();
  _SC_LandPassCard_default_instance_.DefaultConstruct();
  _LandPlayerConclude_default_instance_.DefaultConstruct();
  _SC_LandConclude_default_instance_.DefaultConstruct();
  _SC_LandPlayerOffline_default_instance_.DefaultConstruct();
  _SC_LandPlayerOnline_default_instance_.DefaultConstruct();
  _PlayerCardsMsg_default_instance_.DefaultConstruct();
  _SC_LandRecoveryPlayerCard_default_instance_.DefaultConstruct();
  _pofflineMsg_default_instance_.DefaultConstruct();
  _SC_LandRecoveryPlayerCallScore_default_instance_.DefaultConstruct();
  _SC_LandCallScorePlayerOffline_default_instance_.DefaultConstruct();
  _CS_LandTrusteeship_default_instance_.DefaultConstruct();
  _SC_LandTrusteeship_default_instance_.DefaultConstruct();
  _CS_LandCallDouble_default_instance_.DefaultConstruct();
  _SC_LandCallDouble_default_instance_.DefaultConstruct();
  _SC_LandCallDoubleFinish_default_instance_.DefaultConstruct();
  _PlayerDoubleMsg_default_instance_.DefaultConstruct();
  _SC_LandRecoveryPlayerDouble_default_instance_.DefaultConstruct();
  _CS_GetPrivateConfig_default_instance_.DefaultConstruct();
  _CS_SetPrivateConfigChange_default_instance_.DefaultConstruct();
  _SC_PrivateConfigChange_default_instance_.DefaultConstruct();
  _CS_TabTiren_default_instance_.DefaultConstruct();
  _CS_TabVote_default_instance_.DefaultConstruct();
  _SC_TabVoteInfo_default_instance_.DefaultConstruct();
  _SC_TotalScoreInfo_default_instance_.DefaultConstruct();
  _CS_GetTabVoteArray_default_instance_.DefaultConstruct();
  _SC_TabVoteArray_default_instance_.DefaultConstruct();
  _SC_TickNotify_default_instance_.DefaultConstruct();
  _SC_Dismiss_default_instance_.DefaultConstruct();
  _SC_RecconectReady_default_instance_.DefaultConstruct();
}

void InitDefaults() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &TableStruct::InitDefaultsImpl);
}
void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] = {
      "\n\021public_land.proto\"t\n\014SC_LandStart\022\022\n\nf"
      "irst_turn\030\001 \001(\005\022\033\n\023valid_card_chair_id\030\002"
      " \001(\005\022\022\n\nvalid_card\030\003 \001(\005\022\r\n\005cards\030\004 \003(\005\""
      "\020\n\005MsgID\022\007\n\002ID\020\232u\"8\n\020CS_LandCallScore\022\022\n"
      "\ncall_score\030\001 \001(\005\"\020\n\005MsgID\022\007\n\002ID\020\233u\"e\n\020S"
      "C_LandCallScore\022\024\n\014cur_chair_id\030\001 \001(\005\022\025\n"
      "\rcall_chair_id\030\002 \001(\005\022\022\n\ncall_score\030\003 \001(\005"
      "\"\020\n\005MsgID\022\007\n\002ID\020\234u\"#\n\017SC_LandCallFail\"\020\n"
      "\005MsgID\022\007\n\002ID\020\235u\"Y\n\013SC_LandInfo\022\025\n\rland_c"
      "hair_id\030\001 \001(\005\022\022\n\ncall_score\030\002 \001(\005\022\r\n\005car"
      "ds\030\003 \003(\005\"\020\n\005MsgID\022\007\n\002ID\020\236u\"1\n\016CS_LandOut"
      "Card\022\r\n\005cards\030\001 \003(\005\"\020\n\005MsgID\022\007\n\002ID\020\237u\"p\n"
      "\016SC_LandOutCard\022\024\n\014cur_chair_id\030\001 \001(\005\022\024\n"
      "\014out_chair_id\030\002 \001(\005\022\r\n\005cards\030\003 \003(\005\022\021\n\ttu"
      "rn_over\030\004 \001(\005\"\020\n\005MsgID\022\007\n\002ID\020\240u\"#\n\017CS_La"
      "ndPassCard\"\020\n\005MsgID\022\007\n\002ID\020\241u\"c\n\017SC_LandP"
      "assCard\022\024\n\014cur_chair_id\030\001 \001(\005\022\025\n\rpass_ch"
      "air_id\030\002 \001(\005\022\021\n\tturn_over\030\003 \001(\005\"\020\n\005MsgID"
      "\022\007\n\002ID\020\242u\"x\n\022LandPlayerConclude\022\r\n\005score"
      "\030\001 \001(\005\022\022\n\nbomb_count\030\002 \001(\005\022\r\n\005cards\030\003 \003("
      "\005\022\014\n\004flag\030\004 \001(\005\022\013\n\003tax\030\005 \001(\005\022\025\n\rtotoalwi"
      "nlost\030\006 \001(\005\"t\n\017SC_LandConclude\022(\n\013pb_con"
      "clude\030\001 \003(\0132\023.LandPlayerConclude\022\020\n\010chun"
      "tian\030\002 \001(\005\022\023\n\013fanchuntian\030\003 \001(\005\"\020\n\005MsgID"
      "\022\007\n\002ID\020\243u\"Q\n\024SC_LandPlayerOffline\022\024\n\014cur"
      "_chair_id\030\001 \001(\005\022\021\n\twait_time\030\002 \001(\005\"\020\n\005Ms"
      "gID\022\007\n\002ID\020\244u\"Z\n\023SC_LandPlayerOnline\022\033\n\023c"
      "ur_online_chair_id\030\001 \001(\005\022\024\n\014cur_chair_id"
      "\030\002 \001(\005\"\020\n\005MsgID\022\007\n\002ID\020\245u\"K\n\016PlayerCardsM"
      "sg\022\020\n\010chair_id\030\001 \001(\005\022\020\n\010cardsnum\030\002 \001(\005\022\025"
      "\n\risTrusteeship\030\003 \001(\010\"\220\002\n\031SC_LandRecover"
      "yPlayerCard\022\024\n\014cur_chair_id\030\001 \001(\005\022\r\n\005car"
      "ds\030\002 \003(\005\022\037\n\006pb_msg\030\003 \003(\0132\017.PlayerCardsMs"
      "g\022\023\n\013landchairid\030\004 \001(\005\022\021\n\tlandcards\030\005 \003("
      "\005\022\022\n\ncall_score\030\006 \001(\005\022\021\n\tlastCards\030\007 \003(\005"
      "\022\022\n\nlastcardid\030\010 \001(\005\022\021\n\toutcardid\030\t \001(\005\022"
      "\027\n\017alreadyoutcards\030\n \003(\005\022\014\n\004bomb\030\013 \001(\005\"\020"
      "\n\005MsgID\022\007\n\002ID\020\246u\"1\n\013pofflineMsg\022\020\n\010chair"
      "_id\030\001 \001(\005\022\020\n\010outTimes\030\002 \001(\005\"\255\001\n\036SC_LandR"
      "ecoveryPlayerCallScore\022\024\n\014cur_chair_id\030\001"
      " \001(\005\022\025\n\rcall_chair_id\030\002 \001(\005\022\022\n\ncall_scor"
      "e\030\003 \001(\005\022\r\n\005cards\030\004 \003(\005\022)\n\023pb_playerOffli"
      "neMsg\030\005 \003(\0132\014.pofflineMsg\"\020\n\005MsgID\022\007\n\002ID"
      "\020\247u\"Z\n\035SC_LandCallScorePlayerOffline\022\024\n\014"
      "cur_chair_id\030\001 \001(\005\022\021\n\twait_time\030\002 \001(\005\"\020\n"
      "\005MsgID\022\007\n\002ID\020\251u\"&\n\022CS_LandTrusteeship\"\020\n"
      "\005MsgID\022\007\n\002ID\020\252u\"O\n\022SC_LandTrusteeship\022\020\n"
      "\010chair_id\030\001 \001(\005\022\025\n\risTrusteeship\030\002 \001(\010\"\020"
      "\n\005MsgID\022\007\n\002ID\020\253u\"8\n\021CS_LandCallDouble\022\021\n"
      "\tis_double\030\001 \001(\005\"\020\n\005MsgID\022\007\n\002ID\020\254u\"O\n\021SC"
      "_LandCallDouble\022\025\n\rcall_chair_id\030\001 \001(\005\022\021"
      "\n\tis_double\030\002 \001(\005\"\020\n\005MsgID\022\007\n\002ID\020\255u\"B\n\027S"
      "C_LandCallDoubleFinish\022\025\n\rland_chair_id\030"
      "\001 \001(\005\"\020\n\005MsgID\022\007\n\002ID\020\256u\"6\n\017PlayerDoubleM"
      "sg\022\020\n\010chair_id\030\001 \001(\005\022\021\n\tis_double\030\002 \001(\005\""
      "u\n\033SC_LandRecoveryPlayerDouble\022)\n\017pb_dou"
      "ble_state\030\001 \003(\0132\020.PlayerDoubleMsg\022\031\n\021dou"
      "ble_count_down\030\002 \001(\005\"\020\n\005MsgID\022\007\n\002ID\020\257u\"\'"
      "\n\023CS_GetPrivateConfig\"\020\n\005MsgID\022\007\n\002ID\020\260u\""
      "s\n\031CS_SetPrivateConfigChange\022\024\n\014nallowDo"
      "uble\030\001 \001(\005\022\024\n\014nlimitbeishu\030\002 \001(\005\022\030\n\020nall"
      "owYiXiaoBoda\030\003 \001(\005\"\020\n\005MsgID\022\007\n\002ID\020\261u\"\347\001\n"
      "\026SC_PrivateConfigChange\022\024\n\014nallowDouble\030"
      "\001 \001(\005\022\024\n\014nlimitbeishu\030\002 \001(\005\022\030\n\020nallowYiX"
      "iaoBoda\030\003 \001(\005\022\r\n\005ncell\030\004 \001(\005\022\016\n\006nlimit\030\005"
      " \001(\005\022\023\n\013nhosterguid\030\006 \001(\005\022\020\n\010nstatues\030\007 "
      "\001(\005\022\017\n\007nreason\030\010 \001(\005\022\036\n\026private_room_has"
      "_start\030\t \001(\005\"\020\n\005MsgID\022\007\n\002ID\020\262u\"1\n\013CS_Tab"
      "Tiren\022\020\n\010chair_id\030\001 \001(\005\"\020\n\005MsgID\022\007\n\002ID\020\263"
      "u\",\n\nCS_TabVote\022\014\n\004bret\030\001 \002(\010\"\020\n\005MsgID\022\007"
      "\n\002ID\020\264u\"X\n\016SC_TabVoteInfo\022\020\n\010chair_id\030\001 "
      "\001(\005\022\014\n\004bret\030\002 \002(\010\022\024\n\014vote_chairid\030\003 \002(\005\""
      "\020\n\005MsgID\022\007\n\002ID\020\265u\":\n\021SC_TotalScoreInfo\022\023"
      "\n\013totoalscore\030\001 \003(\005\"\020\n\005MsgID\022\007\n\002ID\020\266u\"&\n"
      "\022CS_GetTabVoteArray\"\020\n\005MsgID\022\007\n\002ID\020\267u\"a\n"
      "\017SC_TabVoteArray\022\'\n\016pb_sctableinfo\030\001 \003(\013"
      "2\017.SC_TabVoteInfo\022\023\n\013votechairid\030\002 \001(\005\"\020"
      "\n\005MsgID\022\007\n\002ID\020\270u\"6\n\rSC_TickNotify\022\023\n\013tic"
      "kchairid\030\001 \001(\005\"\020\n\005MsgID\022\007\n\002ID\020\271u\">\n\nSC_D"
      "ismiss\022\014\n\004guid\030\001 \001(\005\022\020\n\010chair_id\030\002 \001(\005\"\020"
      "\n\005MsgID\022\007\n\002ID\020\272u\"%\n\021SC_RecconectReady\"\020\n"
      "\005MsgID\022\007\n\002ID\020\273u*\230\003\n\016LAND_CARD_TYPE\022\030\n\024LA"
      "ND_CARD_TYPE_ERROR\020\000\022\031\n\025LAND_CARD_TYPE_S"
      "INGLE\020\001\022\031\n\025LAND_CARD_TYPE_DOUBLE\020\002\022\030\n\024LA"
      "ND_CARD_TYPE_THREE\020\003\022\036\n\032LAND_CARD_TYPE_S"
      "INGLE_LINE\020\004\022\036\n\032LAND_CARD_TYPE_DOUBLE_LI"
      "NE\020\005\022\035\n\031LAND_CARD_TYPE_THREE_LINE\020\006\022!\n\035L"
      "AND_CARD_TYPE_THREE_TAKE_ONE\020\007\022!\n\035LAND_C"
      "ARD_TYPE_THREE_TAKE_TWO\020\010\022 \n\034LAND_CARD_T"
      "YPE_FOUR_TAKE_ONE\020\t\022 \n\034LAND_CARD_TYPE_FO"
      "UR_TAKE_TWO\020\n\022\027\n\023LAND_CARD_TYPE_BOMB\020\013\022\032"
      "\n\026LAND_CARD_TYPE_MISSILE\020\014"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 3666);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "public_land.proto", &protobuf_RegisterTypes);
  ::google::protobuf::internal::OnShutdown(&TableStruct::Shutdown);
}

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;

}  // namespace protobuf_public_5fland_2eproto

const ::google::protobuf::EnumDescriptor* SC_LandStart_MsgID_descriptor() {
  protobuf_public_5fland_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_public_5fland_2eproto::file_level_enum_descriptors[0];
}
bool SC_LandStart_MsgID_IsValid(int value) {
  switch (value) {
    case 15002:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const SC_LandStart_MsgID SC_LandStart::ID;
const SC_LandStart_MsgID SC_LandStart::MsgID_MIN;
const SC_LandStart_MsgID SC_LandStart::MsgID_MAX;
const int SC_LandStart::MsgID_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* CS_LandCallScore_MsgID_descriptor() {
  protobuf_public_5fland_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_public_5fland_2eproto::file_level_enum_descriptors[1];
}
bool CS_LandCallScore_MsgID_IsValid(int value) {
  switch (value) {
    case 15003:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const CS_LandCallScore_MsgID CS_LandCallScore::ID;
const CS_LandCallScore_MsgID CS_LandCallScore::MsgID_MIN;
const CS_LandCallScore_MsgID CS_LandCallScore::MsgID_MAX;
const int CS_LandCallScore::MsgID_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* SC_LandCallScore_MsgID_descriptor() {
  protobuf_public_5fland_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_public_5fland_2eproto::file_level_enum_descriptors[2];
}
bool SC_LandCallScore_MsgID_IsValid(int value) {
  switch (value) {
    case 15004:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const SC_LandCallScore_MsgID SC_LandCallScore::ID;
const SC_LandCallScore_MsgID SC_LandCallScore::MsgID_MIN;
const SC_LandCallScore_MsgID SC_LandCallScore::MsgID_MAX;
const int SC_LandCallScore::MsgID_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* SC_LandCallFail_MsgID_descriptor() {
  protobuf_public_5fland_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_public_5fland_2eproto::file_level_enum_descriptors[3];
}
bool SC_LandCallFail_MsgID_IsValid(int value) {
  switch (value) {
    case 15005:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const SC_LandCallFail_MsgID SC_LandCallFail::ID;
const SC_LandCallFail_MsgID SC_LandCallFail::MsgID_MIN;
const SC_LandCallFail_MsgID SC_LandCallFail::MsgID_MAX;
const int SC_LandCallFail::MsgID_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* SC_LandInfo_MsgID_descriptor() {
  protobuf_public_5fland_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_public_5fland_2eproto::file_level_enum_descriptors[4];
}
bool SC_LandInfo_MsgID_IsValid(int value) {
  switch (value) {
    case 15006:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const SC_LandInfo_MsgID SC_LandInfo::ID;
const SC_LandInfo_MsgID SC_LandInfo::MsgID_MIN;
const SC_LandInfo_MsgID SC_LandInfo::MsgID_MAX;
const int SC_LandInfo::MsgID_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* CS_LandOutCard_MsgID_descriptor() {
  protobuf_public_5fland_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_public_5fland_2eproto::file_level_enum_descriptors[5];
}
bool CS_LandOutCard_MsgID_IsValid(int value) {
  switch (value) {
    case 15007:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const CS_LandOutCard_MsgID CS_LandOutCard::ID;
const CS_LandOutCard_MsgID CS_LandOutCard::MsgID_MIN;
const CS_LandOutCard_MsgID CS_LandOutCard::MsgID_MAX;
const int CS_LandOutCard::MsgID_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* SC_LandOutCard_MsgID_descriptor() {
  protobuf_public_5fland_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_public_5fland_2eproto::file_level_enum_descriptors[6];
}
bool SC_LandOutCard_MsgID_IsValid(int value) {
  switch (value) {
    case 15008:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const SC_LandOutCard_MsgID SC_LandOutCard::ID;
const SC_LandOutCard_MsgID SC_LandOutCard::MsgID_MIN;
const SC_LandOutCard_MsgID SC_LandOutCard::MsgID_MAX;
const int SC_LandOutCard::MsgID_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* CS_LandPassCard_MsgID_descriptor() {
  protobuf_public_5fland_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_public_5fland_2eproto::file_level_enum_descriptors[7];
}
bool CS_LandPassCard_MsgID_IsValid(int value) {
  switch (value) {
    case 15009:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const CS_LandPassCard_MsgID CS_LandPassCard::ID;
const CS_LandPassCard_MsgID CS_LandPassCard::MsgID_MIN;
const CS_LandPassCard_MsgID CS_LandPassCard::MsgID_MAX;
const int CS_LandPassCard::MsgID_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* SC_LandPassCard_MsgID_descriptor() {
  protobuf_public_5fland_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_public_5fland_2eproto::file_level_enum_descriptors[8];
}
bool SC_LandPassCard_MsgID_IsValid(int value) {
  switch (value) {
    case 15010:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const SC_LandPassCard_MsgID SC_LandPassCard::ID;
const SC_LandPassCard_MsgID SC_LandPassCard::MsgID_MIN;
const SC_LandPassCard_MsgID SC_LandPassCard::MsgID_MAX;
const int SC_LandPassCard::MsgID_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* SC_LandConclude_MsgID_descriptor() {
  protobuf_public_5fland_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_public_5fland_2eproto::file_level_enum_descriptors[9];
}
bool SC_LandConclude_MsgID_IsValid(int value) {
  switch (value) {
    case 15011:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const SC_LandConclude_MsgID SC_LandConclude::ID;
const SC_LandConclude_MsgID SC_LandConclude::MsgID_MIN;
const SC_LandConclude_MsgID SC_LandConclude::MsgID_MAX;
const int SC_LandConclude::MsgID_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* SC_LandPlayerOffline_MsgID_descriptor() {
  protobuf_public_5fland_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_public_5fland_2eproto::file_level_enum_descriptors[10];
}
bool SC_LandPlayerOffline_MsgID_IsValid(int value) {
  switch (value) {
    case 15012:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const SC_LandPlayerOffline_MsgID SC_LandPlayerOffline::ID;
const SC_LandPlayerOffline_MsgID SC_LandPlayerOffline::MsgID_MIN;
const SC_LandPlayerOffline_MsgID SC_LandPlayerOffline::MsgID_MAX;
const int SC_LandPlayerOffline::MsgID_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* SC_LandPlayerOnline_MsgID_descriptor() {
  protobuf_public_5fland_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_public_5fland_2eproto::file_level_enum_descriptors[11];
}
bool SC_LandPlayerOnline_MsgID_IsValid(int value) {
  switch (value) {
    case 15013:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const SC_LandPlayerOnline_MsgID SC_LandPlayerOnline::ID;
const SC_LandPlayerOnline_MsgID SC_LandPlayerOnline::MsgID_MIN;
const SC_LandPlayerOnline_MsgID SC_LandPlayerOnline::MsgID_MAX;
const int SC_LandPlayerOnline::MsgID_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* SC_LandRecoveryPlayerCard_MsgID_descriptor() {
  protobuf_public_5fland_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_public_5fland_2eproto::file_level_enum_descriptors[12];
}
bool SC_LandRecoveryPlayerCard_MsgID_IsValid(int value) {
  switch (value) {
    case 15014:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const SC_LandRecoveryPlayerCard_MsgID SC_LandRecoveryPlayerCard::ID;
const SC_LandRecoveryPlayerCard_MsgID SC_LandRecoveryPlayerCard::MsgID_MIN;
const SC_LandRecoveryPlayerCard_MsgID SC_LandRecoveryPlayerCard::MsgID_MAX;
const int SC_LandRecoveryPlayerCard::MsgID_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* SC_LandRecoveryPlayerCallScore_MsgID_descriptor() {
  protobuf_public_5fland_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_public_5fland_2eproto::file_level_enum_descriptors[13];
}
bool SC_LandRecoveryPlayerCallScore_MsgID_IsValid(int value) {
  switch (value) {
    case 15015:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const SC_LandRecoveryPlayerCallScore_MsgID SC_LandRecoveryPlayerCallScore::ID;
const SC_LandRecoveryPlayerCallScore_MsgID SC_LandRecoveryPlayerCallScore::MsgID_MIN;
const SC_LandRecoveryPlayerCallScore_MsgID SC_LandRecoveryPlayerCallScore::MsgID_MAX;
const int SC_LandRecoveryPlayerCallScore::MsgID_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* SC_LandCallScorePlayerOffline_MsgID_descriptor() {
  protobuf_public_5fland_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_public_5fland_2eproto::file_level_enum_descriptors[14];
}
bool SC_LandCallScorePlayerOffline_MsgID_IsValid(int value) {
  switch (value) {
    case 15017:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const SC_LandCallScorePlayerOffline_MsgID SC_LandCallScorePlayerOffline::ID;
const SC_LandCallScorePlayerOffline_MsgID SC_LandCallScorePlayerOffline::MsgID_MIN;
const SC_LandCallScorePlayerOffline_MsgID SC_LandCallScorePlayerOffline::MsgID_MAX;
const int SC_LandCallScorePlayerOffline::MsgID_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* CS_LandTrusteeship_MsgID_descriptor() {
  protobuf_public_5fland_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_public_5fland_2eproto::file_level_enum_descriptors[15];
}
bool CS_LandTrusteeship_MsgID_IsValid(int value) {
  switch (value) {
    case 15018:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const CS_LandTrusteeship_MsgID CS_LandTrusteeship::ID;
const CS_LandTrusteeship_MsgID CS_LandTrusteeship::MsgID_MIN;
const CS_LandTrusteeship_MsgID CS_LandTrusteeship::MsgID_MAX;
const int CS_LandTrusteeship::MsgID_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* SC_LandTrusteeship_MsgID_descriptor() {
  protobuf_public_5fland_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_public_5fland_2eproto::file_level_enum_descriptors[16];
}
bool SC_LandTrusteeship_MsgID_IsValid(int value) {
  switch (value) {
    case 15019:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const SC_LandTrusteeship_MsgID SC_LandTrusteeship::ID;
const SC_LandTrusteeship_MsgID SC_LandTrusteeship::MsgID_MIN;
const SC_LandTrusteeship_MsgID SC_LandTrusteeship::MsgID_MAX;
const int SC_LandTrusteeship::MsgID_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* CS_LandCallDouble_MsgID_descriptor() {
  protobuf_public_5fland_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_public_5fland_2eproto::file_level_enum_descriptors[17];
}
bool CS_LandCallDouble_MsgID_IsValid(int value) {
  switch (value) {
    case 15020:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const CS_LandCallDouble_MsgID CS_LandCallDouble::ID;
const CS_LandCallDouble_MsgID CS_LandCallDouble::MsgID_MIN;
const CS_LandCallDouble_MsgID CS_LandCallDouble::MsgID_MAX;
const int CS_LandCallDouble::MsgID_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* SC_LandCallDouble_MsgID_descriptor() {
  protobuf_public_5fland_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_public_5fland_2eproto::file_level_enum_descriptors[18];
}
bool SC_LandCallDouble_MsgID_IsValid(int value) {
  switch (value) {
    case 15021:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const SC_LandCallDouble_MsgID SC_LandCallDouble::ID;
const SC_LandCallDouble_MsgID SC_LandCallDouble::MsgID_MIN;
const SC_LandCallDouble_MsgID SC_LandCallDouble::MsgID_MAX;
const int SC_LandCallDouble::MsgID_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* SC_LandCallDoubleFinish_MsgID_descriptor() {
  protobuf_public_5fland_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_public_5fland_2eproto::file_level_enum_descriptors[19];
}
bool SC_LandCallDoubleFinish_MsgID_IsValid(int value) {
  switch (value) {
    case 15022:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const SC_LandCallDoubleFinish_MsgID SC_LandCallDoubleFinish::ID;
const SC_LandCallDoubleFinish_MsgID SC_LandCallDoubleFinish::MsgID_MIN;
const SC_LandCallDoubleFinish_MsgID SC_LandCallDoubleFinish::MsgID_MAX;
const int SC_LandCallDoubleFinish::MsgID_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* SC_LandRecoveryPlayerDouble_MsgID_descriptor() {
  protobuf_public_5fland_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_public_5fland_2eproto::file_level_enum_descriptors[20];
}
bool SC_LandRecoveryPlayerDouble_MsgID_IsValid(int value) {
  switch (value) {
    case 15023:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const SC_LandRecoveryPlayerDouble_MsgID SC_LandRecoveryPlayerDouble::ID;
const SC_LandRecoveryPlayerDouble_MsgID SC_LandRecoveryPlayerDouble::MsgID_MIN;
const SC_LandRecoveryPlayerDouble_MsgID SC_LandRecoveryPlayerDouble::MsgID_MAX;
const int SC_LandRecoveryPlayerDouble::MsgID_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* CS_GetPrivateConfig_MsgID_descriptor() {
  protobuf_public_5fland_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_public_5fland_2eproto::file_level_enum_descriptors[21];
}
bool CS_GetPrivateConfig_MsgID_IsValid(int value) {
  switch (value) {
    case 15024:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const CS_GetPrivateConfig_MsgID CS_GetPrivateConfig::ID;
const CS_GetPrivateConfig_MsgID CS_GetPrivateConfig::MsgID_MIN;
const CS_GetPrivateConfig_MsgID CS_GetPrivateConfig::MsgID_MAX;
const int CS_GetPrivateConfig::MsgID_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* CS_SetPrivateConfigChange_MsgID_descriptor() {
  protobuf_public_5fland_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_public_5fland_2eproto::file_level_enum_descriptors[22];
}
bool CS_SetPrivateConfigChange_MsgID_IsValid(int value) {
  switch (value) {
    case 15025:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const CS_SetPrivateConfigChange_MsgID CS_SetPrivateConfigChange::ID;
const CS_SetPrivateConfigChange_MsgID CS_SetPrivateConfigChange::MsgID_MIN;
const CS_SetPrivateConfigChange_MsgID CS_SetPrivateConfigChange::MsgID_MAX;
const int CS_SetPrivateConfigChange::MsgID_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* SC_PrivateConfigChange_MsgID_descriptor() {
  protobuf_public_5fland_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_public_5fland_2eproto::file_level_enum_descriptors[23];
}
bool SC_PrivateConfigChange_MsgID_IsValid(int value) {
  switch (value) {
    case 15026:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const SC_PrivateConfigChange_MsgID SC_PrivateConfigChange::ID;
const SC_PrivateConfigChange_MsgID SC_PrivateConfigChange::MsgID_MIN;
const SC_PrivateConfigChange_MsgID SC_PrivateConfigChange::MsgID_MAX;
const int SC_PrivateConfigChange::MsgID_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* CS_TabTiren_MsgID_descriptor() {
  protobuf_public_5fland_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_public_5fland_2eproto::file_level_enum_descriptors[24];
}
bool CS_TabTiren_MsgID_IsValid(int value) {
  switch (value) {
    case 15027:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const CS_TabTiren_MsgID CS_TabTiren::ID;
const CS_TabTiren_MsgID CS_TabTiren::MsgID_MIN;
const CS_TabTiren_MsgID CS_TabTiren::MsgID_MAX;
const int CS_TabTiren::MsgID_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* CS_TabVote_MsgID_descriptor() {
  protobuf_public_5fland_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_public_5fland_2eproto::file_level_enum_descriptors[25];
}
bool CS_TabVote_MsgID_IsValid(int value) {
  switch (value) {
    case 15028:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const CS_TabVote_MsgID CS_TabVote::ID;
const CS_TabVote_MsgID CS_TabVote::MsgID_MIN;
const CS_TabVote_MsgID CS_TabVote::MsgID_MAX;
const int CS_TabVote::MsgID_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* SC_TabVoteInfo_MsgID_descriptor() {
  protobuf_public_5fland_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_public_5fland_2eproto::file_level_enum_descriptors[26];
}
bool SC_TabVoteInfo_MsgID_IsValid(int value) {
  switch (value) {
    case 15029:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const SC_TabVoteInfo_MsgID SC_TabVoteInfo::ID;
const SC_TabVoteInfo_MsgID SC_TabVoteInfo::MsgID_MIN;
const SC_TabVoteInfo_MsgID SC_TabVoteInfo::MsgID_MAX;
const int SC_TabVoteInfo::MsgID_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* SC_TotalScoreInfo_MsgID_descriptor() {
  protobuf_public_5fland_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_public_5fland_2eproto::file_level_enum_descriptors[27];
}
bool SC_TotalScoreInfo_MsgID_IsValid(int value) {
  switch (value) {
    case 15030:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const SC_TotalScoreInfo_MsgID SC_TotalScoreInfo::ID;
const SC_TotalScoreInfo_MsgID SC_TotalScoreInfo::MsgID_MIN;
const SC_TotalScoreInfo_MsgID SC_TotalScoreInfo::MsgID_MAX;
const int SC_TotalScoreInfo::MsgID_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* CS_GetTabVoteArray_MsgID_descriptor() {
  protobuf_public_5fland_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_public_5fland_2eproto::file_level_enum_descriptors[28];
}
bool CS_GetTabVoteArray_MsgID_IsValid(int value) {
  switch (value) {
    case 15031:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const CS_GetTabVoteArray_MsgID CS_GetTabVoteArray::ID;
const CS_GetTabVoteArray_MsgID CS_GetTabVoteArray::MsgID_MIN;
const CS_GetTabVoteArray_MsgID CS_GetTabVoteArray::MsgID_MAX;
const int CS_GetTabVoteArray::MsgID_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* SC_TabVoteArray_MsgID_descriptor() {
  protobuf_public_5fland_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_public_5fland_2eproto::file_level_enum_descriptors[29];
}
bool SC_TabVoteArray_MsgID_IsValid(int value) {
  switch (value) {
    case 15032:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const SC_TabVoteArray_MsgID SC_TabVoteArray::ID;
const SC_TabVoteArray_MsgID SC_TabVoteArray::MsgID_MIN;
const SC_TabVoteArray_MsgID SC_TabVoteArray::MsgID_MAX;
const int SC_TabVoteArray::MsgID_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* SC_TickNotify_MsgID_descriptor() {
  protobuf_public_5fland_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_public_5fland_2eproto::file_level_enum_descriptors[30];
}
bool SC_TickNotify_MsgID_IsValid(int value) {
  switch (value) {
    case 15033:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const SC_TickNotify_MsgID SC_TickNotify::ID;
const SC_TickNotify_MsgID SC_TickNotify::MsgID_MIN;
const SC_TickNotify_MsgID SC_TickNotify::MsgID_MAX;
const int SC_TickNotify::MsgID_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* SC_Dismiss_MsgID_descriptor() {
  protobuf_public_5fland_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_public_5fland_2eproto::file_level_enum_descriptors[31];
}
bool SC_Dismiss_MsgID_IsValid(int value) {
  switch (value) {
    case 15034:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const SC_Dismiss_MsgID SC_Dismiss::ID;
const SC_Dismiss_MsgID SC_Dismiss::MsgID_MIN;
const SC_Dismiss_MsgID SC_Dismiss::MsgID_MAX;
const int SC_Dismiss::MsgID_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* SC_RecconectReady_MsgID_descriptor() {
  protobuf_public_5fland_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_public_5fland_2eproto::file_level_enum_descriptors[32];
}
bool SC_RecconectReady_MsgID_IsValid(int value) {
  switch (value) {
    case 15035:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const SC_RecconectReady_MsgID SC_RecconectReady::ID;
const SC_RecconectReady_MsgID SC_RecconectReady::MsgID_MIN;
const SC_RecconectReady_MsgID SC_RecconectReady::MsgID_MAX;
const int SC_RecconectReady::MsgID_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* LAND_CARD_TYPE_descriptor() {
  protobuf_public_5fland_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_public_5fland_2eproto::file_level_enum_descriptors[33];
}
bool LAND_CARD_TYPE_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
      return true;
    default:
      return false;
  }
}


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SC_LandStart::kFirstTurnFieldNumber;
const int SC_LandStart::kValidCardChairIdFieldNumber;
const int SC_LandStart::kValidCardFieldNumber;
const int SC_LandStart::kCardsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SC_LandStart::SC_LandStart()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_public_5fland_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:SC_LandStart)
}
SC_LandStart::SC_LandStart(const SC_LandStart& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      cards_(from.cards_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&first_turn_, &from.first_turn_,
    reinterpret_cast<char*>(&valid_card_) -
    reinterpret_cast<char*>(&first_turn_) + sizeof(valid_card_));
  // @@protoc_insertion_point(copy_constructor:SC_LandStart)
}

void SC_LandStart::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&first_turn_, 0, reinterpret_cast<char*>(&valid_card_) -
    reinterpret_cast<char*>(&first_turn_) + sizeof(valid_card_));
}

SC_LandStart::~SC_LandStart() {
  // @@protoc_insertion_point(destructor:SC_LandStart)
  SharedDtor();
}

void SC_LandStart::SharedDtor() {
}

void SC_LandStart::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SC_LandStart::descriptor() {
  protobuf_public_5fland_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_public_5fland_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const SC_LandStart& SC_LandStart::default_instance() {
  protobuf_public_5fland_2eproto::InitDefaults();
  return *internal_default_instance();
}

SC_LandStart* SC_LandStart::New(::google::protobuf::Arena* arena) const {
  SC_LandStart* n = new SC_LandStart;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SC_LandStart::Clear() {
// @@protoc_insertion_point(message_clear_start:SC_LandStart)
  cards_.Clear();
  if (_has_bits_[0 / 32] & 7u) {
    ::memset(&first_turn_, 0, reinterpret_cast<char*>(&valid_card_) -
      reinterpret_cast<char*>(&first_turn_) + sizeof(valid_card_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool SC_LandStart::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:SC_LandStart)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 first_turn = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_first_turn();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &first_turn_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 valid_card_chair_id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_valid_card_chair_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &valid_card_chair_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 valid_card = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {
          set_has_valid_card();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &valid_card_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated int32 cards = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 32u, input, this->mutable_cards())));
        } else if (static_cast< ::google::protobuf::uint8>(tag) ==
                   static_cast< ::google::protobuf::uint8>(34u)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_cards())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:SC_LandStart)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:SC_LandStart)
  return false;
#undef DO_
}

void SC_LandStart::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:SC_LandStart)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 first_turn = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->first_turn(), output);
  }

  // optional int32 valid_card_chair_id = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->valid_card_chair_id(), output);
  }

  // optional int32 valid_card = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->valid_card(), output);
  }

  // repeated int32 cards = 4;
  for (int i = 0, n = this->cards_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      4, this->cards(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:SC_LandStart)
}

::google::protobuf::uint8* SC_LandStart::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:SC_LandStart)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 first_turn = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->first_turn(), target);
  }

  // optional int32 valid_card_chair_id = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->valid_card_chair_id(), target);
  }

  // optional int32 valid_card = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->valid_card(), target);
  }

  // repeated int32 cards = 4;
  target = ::google::protobuf::internal::WireFormatLite::
    WriteInt32ToArray(4, this->cards_, target);

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SC_LandStart)
  return target;
}

size_t SC_LandStart::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SC_LandStart)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // repeated int32 cards = 4;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      Int32Size(this->cards_);
    total_size += 1 *
                  ::google::protobuf::internal::FromIntSize(this->cards_size());
    total_size += data_size;
  }

  if (_has_bits_[0 / 32] & 7u) {
    // optional int32 first_turn = 1;
    if (has_first_turn()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->first_turn());
    }

    // optional int32 valid_card_chair_id = 2;
    if (has_valid_card_chair_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->valid_card_chair_id());
    }

    // optional int32 valid_card = 3;
    if (has_valid_card()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->valid_card());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SC_LandStart::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:SC_LandStart)
  GOOGLE_DCHECK_NE(&from, this);
  const SC_LandStart* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SC_LandStart>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:SC_LandStart)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:SC_LandStart)
    MergeFrom(*source);
  }
}

void SC_LandStart::MergeFrom(const SC_LandStart& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:SC_LandStart)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cards_.MergeFrom(from.cards_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      first_turn_ = from.first_turn_;
    }
    if (cached_has_bits & 0x00000002u) {
      valid_card_chair_id_ = from.valid_card_chair_id_;
    }
    if (cached_has_bits & 0x00000004u) {
      valid_card_ = from.valid_card_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void SC_LandStart::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:SC_LandStart)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SC_LandStart::CopyFrom(const SC_LandStart& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SC_LandStart)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SC_LandStart::IsInitialized() const {
  return true;
}

void SC_LandStart::Swap(SC_LandStart* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SC_LandStart::InternalSwap(SC_LandStart* other) {
  cards_.InternalSwap(&other->cards_);
  std::swap(first_turn_, other->first_turn_);
  std::swap(valid_card_chair_id_, other->valid_card_chair_id_);
  std::swap(valid_card_, other->valid_card_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SC_LandStart::GetMetadata() const {
  protobuf_public_5fland_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_public_5fland_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SC_LandStart

// optional int32 first_turn = 1;
bool SC_LandStart::has_first_turn() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void SC_LandStart::set_has_first_turn() {
  _has_bits_[0] |= 0x00000001u;
}
void SC_LandStart::clear_has_first_turn() {
  _has_bits_[0] &= ~0x00000001u;
}
void SC_LandStart::clear_first_turn() {
  first_turn_ = 0;
  clear_has_first_turn();
}
::google::protobuf::int32 SC_LandStart::first_turn() const {
  // @@protoc_insertion_point(field_get:SC_LandStart.first_turn)
  return first_turn_;
}
void SC_LandStart::set_first_turn(::google::protobuf::int32 value) {
  set_has_first_turn();
  first_turn_ = value;
  // @@protoc_insertion_point(field_set:SC_LandStart.first_turn)
}

// optional int32 valid_card_chair_id = 2;
bool SC_LandStart::has_valid_card_chair_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void SC_LandStart::set_has_valid_card_chair_id() {
  _has_bits_[0] |= 0x00000002u;
}
void SC_LandStart::clear_has_valid_card_chair_id() {
  _has_bits_[0] &= ~0x00000002u;
}
void SC_LandStart::clear_valid_card_chair_id() {
  valid_card_chair_id_ = 0;
  clear_has_valid_card_chair_id();
}
::google::protobuf::int32 SC_LandStart::valid_card_chair_id() const {
  // @@protoc_insertion_point(field_get:SC_LandStart.valid_card_chair_id)
  return valid_card_chair_id_;
}
void SC_LandStart::set_valid_card_chair_id(::google::protobuf::int32 value) {
  set_has_valid_card_chair_id();
  valid_card_chair_id_ = value;
  // @@protoc_insertion_point(field_set:SC_LandStart.valid_card_chair_id)
}

// optional int32 valid_card = 3;
bool SC_LandStart::has_valid_card() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void SC_LandStart::set_has_valid_card() {
  _has_bits_[0] |= 0x00000004u;
}
void SC_LandStart::clear_has_valid_card() {
  _has_bits_[0] &= ~0x00000004u;
}
void SC_LandStart::clear_valid_card() {
  valid_card_ = 0;
  clear_has_valid_card();
}
::google::protobuf::int32 SC_LandStart::valid_card() const {
  // @@protoc_insertion_point(field_get:SC_LandStart.valid_card)
  return valid_card_;
}
void SC_LandStart::set_valid_card(::google::protobuf::int32 value) {
  set_has_valid_card();
  valid_card_ = value;
  // @@protoc_insertion_point(field_set:SC_LandStart.valid_card)
}

// repeated int32 cards = 4;
int SC_LandStart::cards_size() const {
  return cards_.size();
}
void SC_LandStart::clear_cards() {
  cards_.Clear();
}
::google::protobuf::int32 SC_LandStart::cards(int index) const {
  // @@protoc_insertion_point(field_get:SC_LandStart.cards)
  return cards_.Get(index);
}
void SC_LandStart::set_cards(int index, ::google::protobuf::int32 value) {
  cards_.Set(index, value);
  // @@protoc_insertion_point(field_set:SC_LandStart.cards)
}
void SC_LandStart::add_cards(::google::protobuf::int32 value) {
  cards_.Add(value);
  // @@protoc_insertion_point(field_add:SC_LandStart.cards)
}
const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
SC_LandStart::cards() const {
  // @@protoc_insertion_point(field_list:SC_LandStart.cards)
  return cards_;
}
::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
SC_LandStart::mutable_cards() {
  // @@protoc_insertion_point(field_mutable_list:SC_LandStart.cards)
  return &cards_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CS_LandCallScore::kCallScoreFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CS_LandCallScore::CS_LandCallScore()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_public_5fland_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:CS_LandCallScore)
}
CS_LandCallScore::CS_LandCallScore(const CS_LandCallScore& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  call_score_ = from.call_score_;
  // @@protoc_insertion_point(copy_constructor:CS_LandCallScore)
}

void CS_LandCallScore::SharedCtor() {
  _cached_size_ = 0;
  call_score_ = 0;
}

CS_LandCallScore::~CS_LandCallScore() {
  // @@protoc_insertion_point(destructor:CS_LandCallScore)
  SharedDtor();
}

void CS_LandCallScore::SharedDtor() {
}

void CS_LandCallScore::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CS_LandCallScore::descriptor() {
  protobuf_public_5fland_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_public_5fland_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CS_LandCallScore& CS_LandCallScore::default_instance() {
  protobuf_public_5fland_2eproto::InitDefaults();
  return *internal_default_instance();
}

CS_LandCallScore* CS_LandCallScore::New(::google::protobuf::Arena* arena) const {
  CS_LandCallScore* n = new CS_LandCallScore;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CS_LandCallScore::Clear() {
// @@protoc_insertion_point(message_clear_start:CS_LandCallScore)
  call_score_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CS_LandCallScore::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CS_LandCallScore)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 call_score = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_call_score();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &call_score_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CS_LandCallScore)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CS_LandCallScore)
  return false;
#undef DO_
}

void CS_LandCallScore::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CS_LandCallScore)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 call_score = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->call_score(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CS_LandCallScore)
}

::google::protobuf::uint8* CS_LandCallScore::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CS_LandCallScore)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 call_score = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->call_score(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CS_LandCallScore)
  return target;
}

size_t CS_LandCallScore::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CS_LandCallScore)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // optional int32 call_score = 1;
  if (has_call_score()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->call_score());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CS_LandCallScore::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CS_LandCallScore)
  GOOGLE_DCHECK_NE(&from, this);
  const CS_LandCallScore* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CS_LandCallScore>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CS_LandCallScore)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CS_LandCallScore)
    MergeFrom(*source);
  }
}

void CS_LandCallScore::MergeFrom(const CS_LandCallScore& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CS_LandCallScore)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_call_score()) {
    set_call_score(from.call_score());
  }
}

void CS_LandCallScore::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CS_LandCallScore)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CS_LandCallScore::CopyFrom(const CS_LandCallScore& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CS_LandCallScore)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CS_LandCallScore::IsInitialized() const {
  return true;
}

void CS_LandCallScore::Swap(CS_LandCallScore* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CS_LandCallScore::InternalSwap(CS_LandCallScore* other) {
  std::swap(call_score_, other->call_score_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CS_LandCallScore::GetMetadata() const {
  protobuf_public_5fland_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_public_5fland_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CS_LandCallScore

// optional int32 call_score = 1;
bool CS_LandCallScore::has_call_score() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CS_LandCallScore::set_has_call_score() {
  _has_bits_[0] |= 0x00000001u;
}
void CS_LandCallScore::clear_has_call_score() {
  _has_bits_[0] &= ~0x00000001u;
}
void CS_LandCallScore::clear_call_score() {
  call_score_ = 0;
  clear_has_call_score();
}
::google::protobuf::int32 CS_LandCallScore::call_score() const {
  // @@protoc_insertion_point(field_get:CS_LandCallScore.call_score)
  return call_score_;
}
void CS_LandCallScore::set_call_score(::google::protobuf::int32 value) {
  set_has_call_score();
  call_score_ = value;
  // @@protoc_insertion_point(field_set:CS_LandCallScore.call_score)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SC_LandCallScore::kCurChairIdFieldNumber;
const int SC_LandCallScore::kCallChairIdFieldNumber;
const int SC_LandCallScore::kCallScoreFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SC_LandCallScore::SC_LandCallScore()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_public_5fland_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:SC_LandCallScore)
}
SC_LandCallScore::SC_LandCallScore(const SC_LandCallScore& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&cur_chair_id_, &from.cur_chair_id_,
    reinterpret_cast<char*>(&call_score_) -
    reinterpret_cast<char*>(&cur_chair_id_) + sizeof(call_score_));
  // @@protoc_insertion_point(copy_constructor:SC_LandCallScore)
}

void SC_LandCallScore::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&cur_chair_id_, 0, reinterpret_cast<char*>(&call_score_) -
    reinterpret_cast<char*>(&cur_chair_id_) + sizeof(call_score_));
}

SC_LandCallScore::~SC_LandCallScore() {
  // @@protoc_insertion_point(destructor:SC_LandCallScore)
  SharedDtor();
}

void SC_LandCallScore::SharedDtor() {
}

void SC_LandCallScore::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SC_LandCallScore::descriptor() {
  protobuf_public_5fland_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_public_5fland_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const SC_LandCallScore& SC_LandCallScore::default_instance() {
  protobuf_public_5fland_2eproto::InitDefaults();
  return *internal_default_instance();
}

SC_LandCallScore* SC_LandCallScore::New(::google::protobuf::Arena* arena) const {
  SC_LandCallScore* n = new SC_LandCallScore;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SC_LandCallScore::Clear() {
// @@protoc_insertion_point(message_clear_start:SC_LandCallScore)
  if (_has_bits_[0 / 32] & 7u) {
    ::memset(&cur_chair_id_, 0, reinterpret_cast<char*>(&call_score_) -
      reinterpret_cast<char*>(&cur_chair_id_) + sizeof(call_score_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool SC_LandCallScore::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:SC_LandCallScore)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 cur_chair_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_cur_chair_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &cur_chair_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 call_chair_id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_call_chair_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &call_chair_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 call_score = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {
          set_has_call_score();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &call_score_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:SC_LandCallScore)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:SC_LandCallScore)
  return false;
#undef DO_
}

void SC_LandCallScore::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:SC_LandCallScore)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 cur_chair_id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->cur_chair_id(), output);
  }

  // optional int32 call_chair_id = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->call_chair_id(), output);
  }

  // optional int32 call_score = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->call_score(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:SC_LandCallScore)
}

::google::protobuf::uint8* SC_LandCallScore::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:SC_LandCallScore)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 cur_chair_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->cur_chair_id(), target);
  }

  // optional int32 call_chair_id = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->call_chair_id(), target);
  }

  // optional int32 call_score = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->call_score(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SC_LandCallScore)
  return target;
}

size_t SC_LandCallScore::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SC_LandCallScore)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 7u) {
    // optional int32 cur_chair_id = 1;
    if (has_cur_chair_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->cur_chair_id());
    }

    // optional int32 call_chair_id = 2;
    if (has_call_chair_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->call_chair_id());
    }

    // optional int32 call_score = 3;
    if (has_call_score()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->call_score());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SC_LandCallScore::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:SC_LandCallScore)
  GOOGLE_DCHECK_NE(&from, this);
  const SC_LandCallScore* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SC_LandCallScore>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:SC_LandCallScore)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:SC_LandCallScore)
    MergeFrom(*source);
  }
}

void SC_LandCallScore::MergeFrom(const SC_LandCallScore& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:SC_LandCallScore)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      cur_chair_id_ = from.cur_chair_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      call_chair_id_ = from.call_chair_id_;
    }
    if (cached_has_bits & 0x00000004u) {
      call_score_ = from.call_score_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void SC_LandCallScore::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:SC_LandCallScore)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SC_LandCallScore::CopyFrom(const SC_LandCallScore& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SC_LandCallScore)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SC_LandCallScore::IsInitialized() const {
  return true;
}

void SC_LandCallScore::Swap(SC_LandCallScore* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SC_LandCallScore::InternalSwap(SC_LandCallScore* other) {
  std::swap(cur_chair_id_, other->cur_chair_id_);
  std::swap(call_chair_id_, other->call_chair_id_);
  std::swap(call_score_, other->call_score_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SC_LandCallScore::GetMetadata() const {
  protobuf_public_5fland_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_public_5fland_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SC_LandCallScore

// optional int32 cur_chair_id = 1;
bool SC_LandCallScore::has_cur_chair_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void SC_LandCallScore::set_has_cur_chair_id() {
  _has_bits_[0] |= 0x00000001u;
}
void SC_LandCallScore::clear_has_cur_chair_id() {
  _has_bits_[0] &= ~0x00000001u;
}
void SC_LandCallScore::clear_cur_chair_id() {
  cur_chair_id_ = 0;
  clear_has_cur_chair_id();
}
::google::protobuf::int32 SC_LandCallScore::cur_chair_id() const {
  // @@protoc_insertion_point(field_get:SC_LandCallScore.cur_chair_id)
  return cur_chair_id_;
}
void SC_LandCallScore::set_cur_chair_id(::google::protobuf::int32 value) {
  set_has_cur_chair_id();
  cur_chair_id_ = value;
  // @@protoc_insertion_point(field_set:SC_LandCallScore.cur_chair_id)
}

// optional int32 call_chair_id = 2;
bool SC_LandCallScore::has_call_chair_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void SC_LandCallScore::set_has_call_chair_id() {
  _has_bits_[0] |= 0x00000002u;
}
void SC_LandCallScore::clear_has_call_chair_id() {
  _has_bits_[0] &= ~0x00000002u;
}
void SC_LandCallScore::clear_call_chair_id() {
  call_chair_id_ = 0;
  clear_has_call_chair_id();
}
::google::protobuf::int32 SC_LandCallScore::call_chair_id() const {
  // @@protoc_insertion_point(field_get:SC_LandCallScore.call_chair_id)
  return call_chair_id_;
}
void SC_LandCallScore::set_call_chair_id(::google::protobuf::int32 value) {
  set_has_call_chair_id();
  call_chair_id_ = value;
  // @@protoc_insertion_point(field_set:SC_LandCallScore.call_chair_id)
}

// optional int32 call_score = 3;
bool SC_LandCallScore::has_call_score() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void SC_LandCallScore::set_has_call_score() {
  _has_bits_[0] |= 0x00000004u;
}
void SC_LandCallScore::clear_has_call_score() {
  _has_bits_[0] &= ~0x00000004u;
}
void SC_LandCallScore::clear_call_score() {
  call_score_ = 0;
  clear_has_call_score();
}
::google::protobuf::int32 SC_LandCallScore::call_score() const {
  // @@protoc_insertion_point(field_get:SC_LandCallScore.call_score)
  return call_score_;
}
void SC_LandCallScore::set_call_score(::google::protobuf::int32 value) {
  set_has_call_score();
  call_score_ = value;
  // @@protoc_insertion_point(field_set:SC_LandCallScore.call_score)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SC_LandCallFail::SC_LandCallFail()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_public_5fland_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:SC_LandCallFail)
}
SC_LandCallFail::SC_LandCallFail(const SC_LandCallFail& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:SC_LandCallFail)
}

void SC_LandCallFail::SharedCtor() {
  _cached_size_ = 0;
}

SC_LandCallFail::~SC_LandCallFail() {
  // @@protoc_insertion_point(destructor:SC_LandCallFail)
  SharedDtor();
}

void SC_LandCallFail::SharedDtor() {
}

void SC_LandCallFail::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SC_LandCallFail::descriptor() {
  protobuf_public_5fland_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_public_5fland_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const SC_LandCallFail& SC_LandCallFail::default_instance() {
  protobuf_public_5fland_2eproto::InitDefaults();
  return *internal_default_instance();
}

SC_LandCallFail* SC_LandCallFail::New(::google::protobuf::Arena* arena) const {
  SC_LandCallFail* n = new SC_LandCallFail;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SC_LandCallFail::Clear() {
// @@protoc_insertion_point(message_clear_start:SC_LandCallFail)
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool SC_LandCallFail::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:SC_LandCallFail)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:SC_LandCallFail)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:SC_LandCallFail)
  return false;
#undef DO_
}

void SC_LandCallFail::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:SC_LandCallFail)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:SC_LandCallFail)
}

::google::protobuf::uint8* SC_LandCallFail::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:SC_LandCallFail)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SC_LandCallFail)
  return target;
}

size_t SC_LandCallFail::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SC_LandCallFail)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SC_LandCallFail::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:SC_LandCallFail)
  GOOGLE_DCHECK_NE(&from, this);
  const SC_LandCallFail* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SC_LandCallFail>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:SC_LandCallFail)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:SC_LandCallFail)
    MergeFrom(*source);
  }
}

void SC_LandCallFail::MergeFrom(const SC_LandCallFail& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:SC_LandCallFail)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void SC_LandCallFail::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:SC_LandCallFail)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SC_LandCallFail::CopyFrom(const SC_LandCallFail& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SC_LandCallFail)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SC_LandCallFail::IsInitialized() const {
  return true;
}

void SC_LandCallFail::Swap(SC_LandCallFail* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SC_LandCallFail::InternalSwap(SC_LandCallFail* other) {
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SC_LandCallFail::GetMetadata() const {
  protobuf_public_5fland_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_public_5fland_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SC_LandCallFail

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SC_LandInfo::kLandChairIdFieldNumber;
const int SC_LandInfo::kCallScoreFieldNumber;
const int SC_LandInfo::kCardsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SC_LandInfo::SC_LandInfo()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_public_5fland_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:SC_LandInfo)
}
SC_LandInfo::SC_LandInfo(const SC_LandInfo& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      cards_(from.cards_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&land_chair_id_, &from.land_chair_id_,
    reinterpret_cast<char*>(&call_score_) -
    reinterpret_cast<char*>(&land_chair_id_) + sizeof(call_score_));
  // @@protoc_insertion_point(copy_constructor:SC_LandInfo)
}

void SC_LandInfo::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&land_chair_id_, 0, reinterpret_cast<char*>(&call_score_) -
    reinterpret_cast<char*>(&land_chair_id_) + sizeof(call_score_));
}

SC_LandInfo::~SC_LandInfo() {
  // @@protoc_insertion_point(destructor:SC_LandInfo)
  SharedDtor();
}

void SC_LandInfo::SharedDtor() {
}

void SC_LandInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SC_LandInfo::descriptor() {
  protobuf_public_5fland_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_public_5fland_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const SC_LandInfo& SC_LandInfo::default_instance() {
  protobuf_public_5fland_2eproto::InitDefaults();
  return *internal_default_instance();
}

SC_LandInfo* SC_LandInfo::New(::google::protobuf::Arena* arena) const {
  SC_LandInfo* n = new SC_LandInfo;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SC_LandInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:SC_LandInfo)
  cards_.Clear();
  if (_has_bits_[0 / 32] & 3u) {
    ::memset(&land_chair_id_, 0, reinterpret_cast<char*>(&call_score_) -
      reinterpret_cast<char*>(&land_chair_id_) + sizeof(call_score_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool SC_LandInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:SC_LandInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 land_chair_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_land_chair_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &land_chair_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 call_score = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_call_score();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &call_score_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated int32 cards = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 24u, input, this->mutable_cards())));
        } else if (static_cast< ::google::protobuf::uint8>(tag) ==
                   static_cast< ::google::protobuf::uint8>(26u)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_cards())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:SC_LandInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:SC_LandInfo)
  return false;
#undef DO_
}

void SC_LandInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:SC_LandInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 land_chair_id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->land_chair_id(), output);
  }

  // optional int32 call_score = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->call_score(), output);
  }

  // repeated int32 cards = 3;
  for (int i = 0, n = this->cards_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      3, this->cards(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:SC_LandInfo)
}

::google::protobuf::uint8* SC_LandInfo::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:SC_LandInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 land_chair_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->land_chair_id(), target);
  }

  // optional int32 call_score = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->call_score(), target);
  }

  // repeated int32 cards = 3;
  target = ::google::protobuf::internal::WireFormatLite::
    WriteInt32ToArray(3, this->cards_, target);

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SC_LandInfo)
  return target;
}

size_t SC_LandInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SC_LandInfo)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // repeated int32 cards = 3;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      Int32Size(this->cards_);
    total_size += 1 *
                  ::google::protobuf::internal::FromIntSize(this->cards_size());
    total_size += data_size;
  }

  if (_has_bits_[0 / 32] & 3u) {
    // optional int32 land_chair_id = 1;
    if (has_land_chair_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->land_chair_id());
    }

    // optional int32 call_score = 2;
    if (has_call_score()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->call_score());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SC_LandInfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:SC_LandInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const SC_LandInfo* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SC_LandInfo>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:SC_LandInfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:SC_LandInfo)
    MergeFrom(*source);
  }
}

void SC_LandInfo::MergeFrom(const SC_LandInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:SC_LandInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cards_.MergeFrom(from.cards_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      land_chair_id_ = from.land_chair_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      call_score_ = from.call_score_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void SC_LandInfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:SC_LandInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SC_LandInfo::CopyFrom(const SC_LandInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SC_LandInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SC_LandInfo::IsInitialized() const {
  return true;
}

void SC_LandInfo::Swap(SC_LandInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SC_LandInfo::InternalSwap(SC_LandInfo* other) {
  cards_.InternalSwap(&other->cards_);
  std::swap(land_chair_id_, other->land_chair_id_);
  std::swap(call_score_, other->call_score_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SC_LandInfo::GetMetadata() const {
  protobuf_public_5fland_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_public_5fland_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SC_LandInfo

// optional int32 land_chair_id = 1;
bool SC_LandInfo::has_land_chair_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void SC_LandInfo::set_has_land_chair_id() {
  _has_bits_[0] |= 0x00000001u;
}
void SC_LandInfo::clear_has_land_chair_id() {
  _has_bits_[0] &= ~0x00000001u;
}
void SC_LandInfo::clear_land_chair_id() {
  land_chair_id_ = 0;
  clear_has_land_chair_id();
}
::google::protobuf::int32 SC_LandInfo::land_chair_id() const {
  // @@protoc_insertion_point(field_get:SC_LandInfo.land_chair_id)
  return land_chair_id_;
}
void SC_LandInfo::set_land_chair_id(::google::protobuf::int32 value) {
  set_has_land_chair_id();
  land_chair_id_ = value;
  // @@protoc_insertion_point(field_set:SC_LandInfo.land_chair_id)
}

// optional int32 call_score = 2;
bool SC_LandInfo::has_call_score() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void SC_LandInfo::set_has_call_score() {
  _has_bits_[0] |= 0x00000002u;
}
void SC_LandInfo::clear_has_call_score() {
  _has_bits_[0] &= ~0x00000002u;
}
void SC_LandInfo::clear_call_score() {
  call_score_ = 0;
  clear_has_call_score();
}
::google::protobuf::int32 SC_LandInfo::call_score() const {
  // @@protoc_insertion_point(field_get:SC_LandInfo.call_score)
  return call_score_;
}
void SC_LandInfo::set_call_score(::google::protobuf::int32 value) {
  set_has_call_score();
  call_score_ = value;
  // @@protoc_insertion_point(field_set:SC_LandInfo.call_score)
}

// repeated int32 cards = 3;
int SC_LandInfo::cards_size() const {
  return cards_.size();
}
void SC_LandInfo::clear_cards() {
  cards_.Clear();
}
::google::protobuf::int32 SC_LandInfo::cards(int index) const {
  // @@protoc_insertion_point(field_get:SC_LandInfo.cards)
  return cards_.Get(index);
}
void SC_LandInfo::set_cards(int index, ::google::protobuf::int32 value) {
  cards_.Set(index, value);
  // @@protoc_insertion_point(field_set:SC_LandInfo.cards)
}
void SC_LandInfo::add_cards(::google::protobuf::int32 value) {
  cards_.Add(value);
  // @@protoc_insertion_point(field_add:SC_LandInfo.cards)
}
const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
SC_LandInfo::cards() const {
  // @@protoc_insertion_point(field_list:SC_LandInfo.cards)
  return cards_;
}
::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
SC_LandInfo::mutable_cards() {
  // @@protoc_insertion_point(field_mutable_list:SC_LandInfo.cards)
  return &cards_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CS_LandOutCard::kCardsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CS_LandOutCard::CS_LandOutCard()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_public_5fland_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:CS_LandOutCard)
}
CS_LandOutCard::CS_LandOutCard(const CS_LandOutCard& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      cards_(from.cards_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:CS_LandOutCard)
}

void CS_LandOutCard::SharedCtor() {
  _cached_size_ = 0;
}

CS_LandOutCard::~CS_LandOutCard() {
  // @@protoc_insertion_point(destructor:CS_LandOutCard)
  SharedDtor();
}

void CS_LandOutCard::SharedDtor() {
}

void CS_LandOutCard::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CS_LandOutCard::descriptor() {
  protobuf_public_5fland_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_public_5fland_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CS_LandOutCard& CS_LandOutCard::default_instance() {
  protobuf_public_5fland_2eproto::InitDefaults();
  return *internal_default_instance();
}

CS_LandOutCard* CS_LandOutCard::New(::google::protobuf::Arena* arena) const {
  CS_LandOutCard* n = new CS_LandOutCard;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CS_LandOutCard::Clear() {
// @@protoc_insertion_point(message_clear_start:CS_LandOutCard)
  cards_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CS_LandOutCard::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CS_LandOutCard)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated int32 cards = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 8u, input, this->mutable_cards())));
        } else if (static_cast< ::google::protobuf::uint8>(tag) ==
                   static_cast< ::google::protobuf::uint8>(10u)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_cards())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CS_LandOutCard)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CS_LandOutCard)
  return false;
#undef DO_
}

void CS_LandOutCard::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CS_LandOutCard)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated int32 cards = 1;
  for (int i = 0, n = this->cards_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      1, this->cards(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CS_LandOutCard)
}

::google::protobuf::uint8* CS_LandOutCard::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CS_LandOutCard)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated int32 cards = 1;
  target = ::google::protobuf::internal::WireFormatLite::
    WriteInt32ToArray(1, this->cards_, target);

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CS_LandOutCard)
  return target;
}

size_t CS_LandOutCard::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CS_LandOutCard)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // repeated int32 cards = 1;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      Int32Size(this->cards_);
    total_size += 1 *
                  ::google::protobuf::internal::FromIntSize(this->cards_size());
    total_size += data_size;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CS_LandOutCard::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CS_LandOutCard)
  GOOGLE_DCHECK_NE(&from, this);
  const CS_LandOutCard* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CS_LandOutCard>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CS_LandOutCard)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CS_LandOutCard)
    MergeFrom(*source);
  }
}

void CS_LandOutCard::MergeFrom(const CS_LandOutCard& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CS_LandOutCard)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cards_.MergeFrom(from.cards_);
}

void CS_LandOutCard::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CS_LandOutCard)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CS_LandOutCard::CopyFrom(const CS_LandOutCard& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CS_LandOutCard)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CS_LandOutCard::IsInitialized() const {
  return true;
}

void CS_LandOutCard::Swap(CS_LandOutCard* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CS_LandOutCard::InternalSwap(CS_LandOutCard* other) {
  cards_.InternalSwap(&other->cards_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CS_LandOutCard::GetMetadata() const {
  protobuf_public_5fland_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_public_5fland_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CS_LandOutCard

// repeated int32 cards = 1;
int CS_LandOutCard::cards_size() const {
  return cards_.size();
}
void CS_LandOutCard::clear_cards() {
  cards_.Clear();
}
::google::protobuf::int32 CS_LandOutCard::cards(int index) const {
  // @@protoc_insertion_point(field_get:CS_LandOutCard.cards)
  return cards_.Get(index);
}
void CS_LandOutCard::set_cards(int index, ::google::protobuf::int32 value) {
  cards_.Set(index, value);
  // @@protoc_insertion_point(field_set:CS_LandOutCard.cards)
}
void CS_LandOutCard::add_cards(::google::protobuf::int32 value) {
  cards_.Add(value);
  // @@protoc_insertion_point(field_add:CS_LandOutCard.cards)
}
const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
CS_LandOutCard::cards() const {
  // @@protoc_insertion_point(field_list:CS_LandOutCard.cards)
  return cards_;
}
::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
CS_LandOutCard::mutable_cards() {
  // @@protoc_insertion_point(field_mutable_list:CS_LandOutCard.cards)
  return &cards_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SC_LandOutCard::kCurChairIdFieldNumber;
const int SC_LandOutCard::kOutChairIdFieldNumber;
const int SC_LandOutCard::kCardsFieldNumber;
const int SC_LandOutCard::kTurnOverFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SC_LandOutCard::SC_LandOutCard()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_public_5fland_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:SC_LandOutCard)
}
SC_LandOutCard::SC_LandOutCard(const SC_LandOutCard& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      cards_(from.cards_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&cur_chair_id_, &from.cur_chair_id_,
    reinterpret_cast<char*>(&turn_over_) -
    reinterpret_cast<char*>(&cur_chair_id_) + sizeof(turn_over_));
  // @@protoc_insertion_point(copy_constructor:SC_LandOutCard)
}

void SC_LandOutCard::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&cur_chair_id_, 0, reinterpret_cast<char*>(&turn_over_) -
    reinterpret_cast<char*>(&cur_chair_id_) + sizeof(turn_over_));
}

SC_LandOutCard::~SC_LandOutCard() {
  // @@protoc_insertion_point(destructor:SC_LandOutCard)
  SharedDtor();
}

void SC_LandOutCard::SharedDtor() {
}

void SC_LandOutCard::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SC_LandOutCard::descriptor() {
  protobuf_public_5fland_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_public_5fland_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const SC_LandOutCard& SC_LandOutCard::default_instance() {
  protobuf_public_5fland_2eproto::InitDefaults();
  return *internal_default_instance();
}

SC_LandOutCard* SC_LandOutCard::New(::google::protobuf::Arena* arena) const {
  SC_LandOutCard* n = new SC_LandOutCard;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SC_LandOutCard::Clear() {
// @@protoc_insertion_point(message_clear_start:SC_LandOutCard)
  cards_.Clear();
  if (_has_bits_[0 / 32] & 7u) {
    ::memset(&cur_chair_id_, 0, reinterpret_cast<char*>(&turn_over_) -
      reinterpret_cast<char*>(&cur_chair_id_) + sizeof(turn_over_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool SC_LandOutCard::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:SC_LandOutCard)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 cur_chair_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_cur_chair_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &cur_chair_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 out_chair_id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_out_chair_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &out_chair_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated int32 cards = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 24u, input, this->mutable_cards())));
        } else if (static_cast< ::google::protobuf::uint8>(tag) ==
                   static_cast< ::google::protobuf::uint8>(26u)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_cards())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 turn_over = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u)) {
          set_has_turn_over();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &turn_over_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:SC_LandOutCard)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:SC_LandOutCard)
  return false;
#undef DO_
}

void SC_LandOutCard::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:SC_LandOutCard)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 cur_chair_id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->cur_chair_id(), output);
  }

  // optional int32 out_chair_id = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->out_chair_id(), output);
  }

  // repeated int32 cards = 3;
  for (int i = 0, n = this->cards_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      3, this->cards(i), output);
  }

  // optional int32 turn_over = 4;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->turn_over(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:SC_LandOutCard)
}

::google::protobuf::uint8* SC_LandOutCard::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:SC_LandOutCard)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 cur_chair_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->cur_chair_id(), target);
  }

  // optional int32 out_chair_id = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->out_chair_id(), target);
  }

  // repeated int32 cards = 3;
  target = ::google::protobuf::internal::WireFormatLite::
    WriteInt32ToArray(3, this->cards_, target);

  // optional int32 turn_over = 4;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->turn_over(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SC_LandOutCard)
  return target;
}

size_t SC_LandOutCard::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SC_LandOutCard)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // repeated int32 cards = 3;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      Int32Size(this->cards_);
    total_size += 1 *
                  ::google::protobuf::internal::FromIntSize(this->cards_size());
    total_size += data_size;
  }

  if (_has_bits_[0 / 32] & 7u) {
    // optional int32 cur_chair_id = 1;
    if (has_cur_chair_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->cur_chair_id());
    }

    // optional int32 out_chair_id = 2;
    if (has_out_chair_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->out_chair_id());
    }

    // optional int32 turn_over = 4;
    if (has_turn_over()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->turn_over());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SC_LandOutCard::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:SC_LandOutCard)
  GOOGLE_DCHECK_NE(&from, this);
  const SC_LandOutCard* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SC_LandOutCard>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:SC_LandOutCard)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:SC_LandOutCard)
    MergeFrom(*source);
  }
}

void SC_LandOutCard::MergeFrom(const SC_LandOutCard& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:SC_LandOutCard)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cards_.MergeFrom(from.cards_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      cur_chair_id_ = from.cur_chair_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      out_chair_id_ = from.out_chair_id_;
    }
    if (cached_has_bits & 0x00000004u) {
      turn_over_ = from.turn_over_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void SC_LandOutCard::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:SC_LandOutCard)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SC_LandOutCard::CopyFrom(const SC_LandOutCard& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SC_LandOutCard)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SC_LandOutCard::IsInitialized() const {
  return true;
}

void SC_LandOutCard::Swap(SC_LandOutCard* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SC_LandOutCard::InternalSwap(SC_LandOutCard* other) {
  cards_.InternalSwap(&other->cards_);
  std::swap(cur_chair_id_, other->cur_chair_id_);
  std::swap(out_chair_id_, other->out_chair_id_);
  std::swap(turn_over_, other->turn_over_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SC_LandOutCard::GetMetadata() const {
  protobuf_public_5fland_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_public_5fland_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SC_LandOutCard

// optional int32 cur_chair_id = 1;
bool SC_LandOutCard::has_cur_chair_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void SC_LandOutCard::set_has_cur_chair_id() {
  _has_bits_[0] |= 0x00000001u;
}
void SC_LandOutCard::clear_has_cur_chair_id() {
  _has_bits_[0] &= ~0x00000001u;
}
void SC_LandOutCard::clear_cur_chair_id() {
  cur_chair_id_ = 0;
  clear_has_cur_chair_id();
}
::google::protobuf::int32 SC_LandOutCard::cur_chair_id() const {
  // @@protoc_insertion_point(field_get:SC_LandOutCard.cur_chair_id)
  return cur_chair_id_;
}
void SC_LandOutCard::set_cur_chair_id(::google::protobuf::int32 value) {
  set_has_cur_chair_id();
  cur_chair_id_ = value;
  // @@protoc_insertion_point(field_set:SC_LandOutCard.cur_chair_id)
}

// optional int32 out_chair_id = 2;
bool SC_LandOutCard::has_out_chair_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void SC_LandOutCard::set_has_out_chair_id() {
  _has_bits_[0] |= 0x00000002u;
}
void SC_LandOutCard::clear_has_out_chair_id() {
  _has_bits_[0] &= ~0x00000002u;
}
void SC_LandOutCard::clear_out_chair_id() {
  out_chair_id_ = 0;
  clear_has_out_chair_id();
}
::google::protobuf::int32 SC_LandOutCard::out_chair_id() const {
  // @@protoc_insertion_point(field_get:SC_LandOutCard.out_chair_id)
  return out_chair_id_;
}
void SC_LandOutCard::set_out_chair_id(::google::protobuf::int32 value) {
  set_has_out_chair_id();
  out_chair_id_ = value;
  // @@protoc_insertion_point(field_set:SC_LandOutCard.out_chair_id)
}

// repeated int32 cards = 3;
int SC_LandOutCard::cards_size() const {
  return cards_.size();
}
void SC_LandOutCard::clear_cards() {
  cards_.Clear();
}
::google::protobuf::int32 SC_LandOutCard::cards(int index) const {
  // @@protoc_insertion_point(field_get:SC_LandOutCard.cards)
  return cards_.Get(index);
}
void SC_LandOutCard::set_cards(int index, ::google::protobuf::int32 value) {
  cards_.Set(index, value);
  // @@protoc_insertion_point(field_set:SC_LandOutCard.cards)
}
void SC_LandOutCard::add_cards(::google::protobuf::int32 value) {
  cards_.Add(value);
  // @@protoc_insertion_point(field_add:SC_LandOutCard.cards)
}
const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
SC_LandOutCard::cards() const {
  // @@protoc_insertion_point(field_list:SC_LandOutCard.cards)
  return cards_;
}
::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
SC_LandOutCard::mutable_cards() {
  // @@protoc_insertion_point(field_mutable_list:SC_LandOutCard.cards)
  return &cards_;
}

// optional int32 turn_over = 4;
bool SC_LandOutCard::has_turn_over() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void SC_LandOutCard::set_has_turn_over() {
  _has_bits_[0] |= 0x00000004u;
}
void SC_LandOutCard::clear_has_turn_over() {
  _has_bits_[0] &= ~0x00000004u;
}
void SC_LandOutCard::clear_turn_over() {
  turn_over_ = 0;
  clear_has_turn_over();
}
::google::protobuf::int32 SC_LandOutCard::turn_over() const {
  // @@protoc_insertion_point(field_get:SC_LandOutCard.turn_over)
  return turn_over_;
}
void SC_LandOutCard::set_turn_over(::google::protobuf::int32 value) {
  set_has_turn_over();
  turn_over_ = value;
  // @@protoc_insertion_point(field_set:SC_LandOutCard.turn_over)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CS_LandPassCard::CS_LandPassCard()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_public_5fland_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:CS_LandPassCard)
}
CS_LandPassCard::CS_LandPassCard(const CS_LandPassCard& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:CS_LandPassCard)
}

void CS_LandPassCard::SharedCtor() {
  _cached_size_ = 0;
}

CS_LandPassCard::~CS_LandPassCard() {
  // @@protoc_insertion_point(destructor:CS_LandPassCard)
  SharedDtor();
}

void CS_LandPassCard::SharedDtor() {
}

void CS_LandPassCard::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CS_LandPassCard::descriptor() {
  protobuf_public_5fland_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_public_5fland_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CS_LandPassCard& CS_LandPassCard::default_instance() {
  protobuf_public_5fland_2eproto::InitDefaults();
  return *internal_default_instance();
}

CS_LandPassCard* CS_LandPassCard::New(::google::protobuf::Arena* arena) const {
  CS_LandPassCard* n = new CS_LandPassCard;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CS_LandPassCard::Clear() {
// @@protoc_insertion_point(message_clear_start:CS_LandPassCard)
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CS_LandPassCard::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CS_LandPassCard)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:CS_LandPassCard)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CS_LandPassCard)
  return false;
#undef DO_
}

void CS_LandPassCard::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CS_LandPassCard)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CS_LandPassCard)
}

::google::protobuf::uint8* CS_LandPassCard::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CS_LandPassCard)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CS_LandPassCard)
  return target;
}

size_t CS_LandPassCard::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CS_LandPassCard)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CS_LandPassCard::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CS_LandPassCard)
  GOOGLE_DCHECK_NE(&from, this);
  const CS_LandPassCard* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CS_LandPassCard>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CS_LandPassCard)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CS_LandPassCard)
    MergeFrom(*source);
  }
}

void CS_LandPassCard::MergeFrom(const CS_LandPassCard& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CS_LandPassCard)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void CS_LandPassCard::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CS_LandPassCard)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CS_LandPassCard::CopyFrom(const CS_LandPassCard& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CS_LandPassCard)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CS_LandPassCard::IsInitialized() const {
  return true;
}

void CS_LandPassCard::Swap(CS_LandPassCard* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CS_LandPassCard::InternalSwap(CS_LandPassCard* other) {
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CS_LandPassCard::GetMetadata() const {
  protobuf_public_5fland_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_public_5fland_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CS_LandPassCard

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SC_LandPassCard::kCurChairIdFieldNumber;
const int SC_LandPassCard::kPassChairIdFieldNumber;
const int SC_LandPassCard::kTurnOverFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SC_LandPassCard::SC_LandPassCard()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_public_5fland_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:SC_LandPassCard)
}
SC_LandPassCard::SC_LandPassCard(const SC_LandPassCard& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&cur_chair_id_, &from.cur_chair_id_,
    reinterpret_cast<char*>(&turn_over_) -
    reinterpret_cast<char*>(&cur_chair_id_) + sizeof(turn_over_));
  // @@protoc_insertion_point(copy_constructor:SC_LandPassCard)
}

void SC_LandPassCard::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&cur_chair_id_, 0, reinterpret_cast<char*>(&turn_over_) -
    reinterpret_cast<char*>(&cur_chair_id_) + sizeof(turn_over_));
}

SC_LandPassCard::~SC_LandPassCard() {
  // @@protoc_insertion_point(destructor:SC_LandPassCard)
  SharedDtor();
}

void SC_LandPassCard::SharedDtor() {
}

void SC_LandPassCard::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SC_LandPassCard::descriptor() {
  protobuf_public_5fland_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_public_5fland_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const SC_LandPassCard& SC_LandPassCard::default_instance() {
  protobuf_public_5fland_2eproto::InitDefaults();
  return *internal_default_instance();
}

SC_LandPassCard* SC_LandPassCard::New(::google::protobuf::Arena* arena) const {
  SC_LandPassCard* n = new SC_LandPassCard;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SC_LandPassCard::Clear() {
// @@protoc_insertion_point(message_clear_start:SC_LandPassCard)
  if (_has_bits_[0 / 32] & 7u) {
    ::memset(&cur_chair_id_, 0, reinterpret_cast<char*>(&turn_over_) -
      reinterpret_cast<char*>(&cur_chair_id_) + sizeof(turn_over_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool SC_LandPassCard::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:SC_LandPassCard)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 cur_chair_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_cur_chair_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &cur_chair_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 pass_chair_id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_pass_chair_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &pass_chair_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 turn_over = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {
          set_has_turn_over();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &turn_over_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:SC_LandPassCard)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:SC_LandPassCard)
  return false;
#undef DO_
}

void SC_LandPassCard::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:SC_LandPassCard)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 cur_chair_id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->cur_chair_id(), output);
  }

  // optional int32 pass_chair_id = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->pass_chair_id(), output);
  }

  // optional int32 turn_over = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->turn_over(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:SC_LandPassCard)
}

::google::protobuf::uint8* SC_LandPassCard::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:SC_LandPassCard)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 cur_chair_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->cur_chair_id(), target);
  }

  // optional int32 pass_chair_id = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->pass_chair_id(), target);
  }

  // optional int32 turn_over = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->turn_over(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SC_LandPassCard)
  return target;
}

size_t SC_LandPassCard::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SC_LandPassCard)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 7u) {
    // optional int32 cur_chair_id = 1;
    if (has_cur_chair_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->cur_chair_id());
    }

    // optional int32 pass_chair_id = 2;
    if (has_pass_chair_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->pass_chair_id());
    }

    // optional int32 turn_over = 3;
    if (has_turn_over()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->turn_over());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SC_LandPassCard::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:SC_LandPassCard)
  GOOGLE_DCHECK_NE(&from, this);
  const SC_LandPassCard* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SC_LandPassCard>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:SC_LandPassCard)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:SC_LandPassCard)
    MergeFrom(*source);
  }
}

void SC_LandPassCard::MergeFrom(const SC_LandPassCard& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:SC_LandPassCard)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      cur_chair_id_ = from.cur_chair_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      pass_chair_id_ = from.pass_chair_id_;
    }
    if (cached_has_bits & 0x00000004u) {
      turn_over_ = from.turn_over_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void SC_LandPassCard::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:SC_LandPassCard)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SC_LandPassCard::CopyFrom(const SC_LandPassCard& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SC_LandPassCard)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SC_LandPassCard::IsInitialized() const {
  return true;
}

void SC_LandPassCard::Swap(SC_LandPassCard* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SC_LandPassCard::InternalSwap(SC_LandPassCard* other) {
  std::swap(cur_chair_id_, other->cur_chair_id_);
  std::swap(pass_chair_id_, other->pass_chair_id_);
  std::swap(turn_over_, other->turn_over_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SC_LandPassCard::GetMetadata() const {
  protobuf_public_5fland_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_public_5fland_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SC_LandPassCard

// optional int32 cur_chair_id = 1;
bool SC_LandPassCard::has_cur_chair_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void SC_LandPassCard::set_has_cur_chair_id() {
  _has_bits_[0] |= 0x00000001u;
}
void SC_LandPassCard::clear_has_cur_chair_id() {
  _has_bits_[0] &= ~0x00000001u;
}
void SC_LandPassCard::clear_cur_chair_id() {
  cur_chair_id_ = 0;
  clear_has_cur_chair_id();
}
::google::protobuf::int32 SC_LandPassCard::cur_chair_id() const {
  // @@protoc_insertion_point(field_get:SC_LandPassCard.cur_chair_id)
  return cur_chair_id_;
}
void SC_LandPassCard::set_cur_chair_id(::google::protobuf::int32 value) {
  set_has_cur_chair_id();
  cur_chair_id_ = value;
  // @@protoc_insertion_point(field_set:SC_LandPassCard.cur_chair_id)
}

// optional int32 pass_chair_id = 2;
bool SC_LandPassCard::has_pass_chair_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void SC_LandPassCard::set_has_pass_chair_id() {
  _has_bits_[0] |= 0x00000002u;
}
void SC_LandPassCard::clear_has_pass_chair_id() {
  _has_bits_[0] &= ~0x00000002u;
}
void SC_LandPassCard::clear_pass_chair_id() {
  pass_chair_id_ = 0;
  clear_has_pass_chair_id();
}
::google::protobuf::int32 SC_LandPassCard::pass_chair_id() const {
  // @@protoc_insertion_point(field_get:SC_LandPassCard.pass_chair_id)
  return pass_chair_id_;
}
void SC_LandPassCard::set_pass_chair_id(::google::protobuf::int32 value) {
  set_has_pass_chair_id();
  pass_chair_id_ = value;
  // @@protoc_insertion_point(field_set:SC_LandPassCard.pass_chair_id)
}

// optional int32 turn_over = 3;
bool SC_LandPassCard::has_turn_over() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void SC_LandPassCard::set_has_turn_over() {
  _has_bits_[0] |= 0x00000004u;
}
void SC_LandPassCard::clear_has_turn_over() {
  _has_bits_[0] &= ~0x00000004u;
}
void SC_LandPassCard::clear_turn_over() {
  turn_over_ = 0;
  clear_has_turn_over();
}
::google::protobuf::int32 SC_LandPassCard::turn_over() const {
  // @@protoc_insertion_point(field_get:SC_LandPassCard.turn_over)
  return turn_over_;
}
void SC_LandPassCard::set_turn_over(::google::protobuf::int32 value) {
  set_has_turn_over();
  turn_over_ = value;
  // @@protoc_insertion_point(field_set:SC_LandPassCard.turn_over)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int LandPlayerConclude::kScoreFieldNumber;
const int LandPlayerConclude::kBombCountFieldNumber;
const int LandPlayerConclude::kCardsFieldNumber;
const int LandPlayerConclude::kFlagFieldNumber;
const int LandPlayerConclude::kTaxFieldNumber;
const int LandPlayerConclude::kTotoalwinlostFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

LandPlayerConclude::LandPlayerConclude()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_public_5fland_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:LandPlayerConclude)
}
LandPlayerConclude::LandPlayerConclude(const LandPlayerConclude& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      cards_(from.cards_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&score_, &from.score_,
    reinterpret_cast<char*>(&totoalwinlost_) -
    reinterpret_cast<char*>(&score_) + sizeof(totoalwinlost_));
  // @@protoc_insertion_point(copy_constructor:LandPlayerConclude)
}

void LandPlayerConclude::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&score_, 0, reinterpret_cast<char*>(&totoalwinlost_) -
    reinterpret_cast<char*>(&score_) + sizeof(totoalwinlost_));
}

LandPlayerConclude::~LandPlayerConclude() {
  // @@protoc_insertion_point(destructor:LandPlayerConclude)
  SharedDtor();
}

void LandPlayerConclude::SharedDtor() {
}

void LandPlayerConclude::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LandPlayerConclude::descriptor() {
  protobuf_public_5fland_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_public_5fland_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const LandPlayerConclude& LandPlayerConclude::default_instance() {
  protobuf_public_5fland_2eproto::InitDefaults();
  return *internal_default_instance();
}

LandPlayerConclude* LandPlayerConclude::New(::google::protobuf::Arena* arena) const {
  LandPlayerConclude* n = new LandPlayerConclude;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void LandPlayerConclude::Clear() {
// @@protoc_insertion_point(message_clear_start:LandPlayerConclude)
  cards_.Clear();
  if (_has_bits_[0 / 32] & 31u) {
    ::memset(&score_, 0, reinterpret_cast<char*>(&totoalwinlost_) -
      reinterpret_cast<char*>(&score_) + sizeof(totoalwinlost_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool LandPlayerConclude::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:LandPlayerConclude)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 score = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_score();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &score_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 bomb_count = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_bomb_count();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &bomb_count_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated int32 cards = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 24u, input, this->mutable_cards())));
        } else if (static_cast< ::google::protobuf::uint8>(tag) ==
                   static_cast< ::google::protobuf::uint8>(26u)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_cards())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 flag = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u)) {
          set_has_flag();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &flag_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 tax = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u)) {
          set_has_tax();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &tax_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 totoalwinlost = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u)) {
          set_has_totoalwinlost();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &totoalwinlost_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:LandPlayerConclude)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:LandPlayerConclude)
  return false;
#undef DO_
}

void LandPlayerConclude::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:LandPlayerConclude)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 score = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->score(), output);
  }

  // optional int32 bomb_count = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->bomb_count(), output);
  }

  // repeated int32 cards = 3;
  for (int i = 0, n = this->cards_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      3, this->cards(i), output);
  }

  // optional int32 flag = 4;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->flag(), output);
  }

  // optional int32 tax = 5;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->tax(), output);
  }

  // optional int32 totoalwinlost = 6;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->totoalwinlost(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:LandPlayerConclude)
}

::google::protobuf::uint8* LandPlayerConclude::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:LandPlayerConclude)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 score = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->score(), target);
  }

  // optional int32 bomb_count = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->bomb_count(), target);
  }

  // repeated int32 cards = 3;
  target = ::google::protobuf::internal::WireFormatLite::
    WriteInt32ToArray(3, this->cards_, target);

  // optional int32 flag = 4;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->flag(), target);
  }

  // optional int32 tax = 5;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->tax(), target);
  }

  // optional int32 totoalwinlost = 6;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->totoalwinlost(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:LandPlayerConclude)
  return target;
}

size_t LandPlayerConclude::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:LandPlayerConclude)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // repeated int32 cards = 3;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      Int32Size(this->cards_);
    total_size += 1 *
                  ::google::protobuf::internal::FromIntSize(this->cards_size());
    total_size += data_size;
  }

  if (_has_bits_[0 / 32] & 31u) {
    // optional int32 score = 1;
    if (has_score()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->score());
    }

    // optional int32 bomb_count = 2;
    if (has_bomb_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->bomb_count());
    }

    // optional int32 flag = 4;
    if (has_flag()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->flag());
    }

    // optional int32 tax = 5;
    if (has_tax()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->tax());
    }

    // optional int32 totoalwinlost = 6;
    if (has_totoalwinlost()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->totoalwinlost());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LandPlayerConclude::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:LandPlayerConclude)
  GOOGLE_DCHECK_NE(&from, this);
  const LandPlayerConclude* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const LandPlayerConclude>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:LandPlayerConclude)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:LandPlayerConclude)
    MergeFrom(*source);
  }
}

void LandPlayerConclude::MergeFrom(const LandPlayerConclude& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:LandPlayerConclude)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cards_.MergeFrom(from.cards_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 31u) {
    if (cached_has_bits & 0x00000001u) {
      score_ = from.score_;
    }
    if (cached_has_bits & 0x00000002u) {
      bomb_count_ = from.bomb_count_;
    }
    if (cached_has_bits & 0x00000004u) {
      flag_ = from.flag_;
    }
    if (cached_has_bits & 0x00000008u) {
      tax_ = from.tax_;
    }
    if (cached_has_bits & 0x00000010u) {
      totoalwinlost_ = from.totoalwinlost_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void LandPlayerConclude::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:LandPlayerConclude)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LandPlayerConclude::CopyFrom(const LandPlayerConclude& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:LandPlayerConclude)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LandPlayerConclude::IsInitialized() const {
  return true;
}

void LandPlayerConclude::Swap(LandPlayerConclude* other) {
  if (other == this) return;
  InternalSwap(other);
}
void LandPlayerConclude::InternalSwap(LandPlayerConclude* other) {
  cards_.InternalSwap(&other->cards_);
  std::swap(score_, other->score_);
  std::swap(bomb_count_, other->bomb_count_);
  std::swap(flag_, other->flag_);
  std::swap(tax_, other->tax_);
  std::swap(totoalwinlost_, other->totoalwinlost_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata LandPlayerConclude::GetMetadata() const {
  protobuf_public_5fland_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_public_5fland_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// LandPlayerConclude

// optional int32 score = 1;
bool LandPlayerConclude::has_score() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void LandPlayerConclude::set_has_score() {
  _has_bits_[0] |= 0x00000001u;
}
void LandPlayerConclude::clear_has_score() {
  _has_bits_[0] &= ~0x00000001u;
}
void LandPlayerConclude::clear_score() {
  score_ = 0;
  clear_has_score();
}
::google::protobuf::int32 LandPlayerConclude::score() const {
  // @@protoc_insertion_point(field_get:LandPlayerConclude.score)
  return score_;
}
void LandPlayerConclude::set_score(::google::protobuf::int32 value) {
  set_has_score();
  score_ = value;
  // @@protoc_insertion_point(field_set:LandPlayerConclude.score)
}

// optional int32 bomb_count = 2;
bool LandPlayerConclude::has_bomb_count() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void LandPlayerConclude::set_has_bomb_count() {
  _has_bits_[0] |= 0x00000002u;
}
void LandPlayerConclude::clear_has_bomb_count() {
  _has_bits_[0] &= ~0x00000002u;
}
void LandPlayerConclude::clear_bomb_count() {
  bomb_count_ = 0;
  clear_has_bomb_count();
}
::google::protobuf::int32 LandPlayerConclude::bomb_count() const {
  // @@protoc_insertion_point(field_get:LandPlayerConclude.bomb_count)
  return bomb_count_;
}
void LandPlayerConclude::set_bomb_count(::google::protobuf::int32 value) {
  set_has_bomb_count();
  bomb_count_ = value;
  // @@protoc_insertion_point(field_set:LandPlayerConclude.bomb_count)
}

// repeated int32 cards = 3;
int LandPlayerConclude::cards_size() const {
  return cards_.size();
}
void LandPlayerConclude::clear_cards() {
  cards_.Clear();
}
::google::protobuf::int32 LandPlayerConclude::cards(int index) const {
  // @@protoc_insertion_point(field_get:LandPlayerConclude.cards)
  return cards_.Get(index);
}
void LandPlayerConclude::set_cards(int index, ::google::protobuf::int32 value) {
  cards_.Set(index, value);
  // @@protoc_insertion_point(field_set:LandPlayerConclude.cards)
}
void LandPlayerConclude::add_cards(::google::protobuf::int32 value) {
  cards_.Add(value);
  // @@protoc_insertion_point(field_add:LandPlayerConclude.cards)
}
const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
LandPlayerConclude::cards() const {
  // @@protoc_insertion_point(field_list:LandPlayerConclude.cards)
  return cards_;
}
::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
LandPlayerConclude::mutable_cards() {
  // @@protoc_insertion_point(field_mutable_list:LandPlayerConclude.cards)
  return &cards_;
}

// optional int32 flag = 4;
bool LandPlayerConclude::has_flag() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void LandPlayerConclude::set_has_flag() {
  _has_bits_[0] |= 0x00000004u;
}
void LandPlayerConclude::clear_has_flag() {
  _has_bits_[0] &= ~0x00000004u;
}
void LandPlayerConclude::clear_flag() {
  flag_ = 0;
  clear_has_flag();
}
::google::protobuf::int32 LandPlayerConclude::flag() const {
  // @@protoc_insertion_point(field_get:LandPlayerConclude.flag)
  return flag_;
}
void LandPlayerConclude::set_flag(::google::protobuf::int32 value) {
  set_has_flag();
  flag_ = value;
  // @@protoc_insertion_point(field_set:LandPlayerConclude.flag)
}

// optional int32 tax = 5;
bool LandPlayerConclude::has_tax() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void LandPlayerConclude::set_has_tax() {
  _has_bits_[0] |= 0x00000008u;
}
void LandPlayerConclude::clear_has_tax() {
  _has_bits_[0] &= ~0x00000008u;
}
void LandPlayerConclude::clear_tax() {
  tax_ = 0;
  clear_has_tax();
}
::google::protobuf::int32 LandPlayerConclude::tax() const {
  // @@protoc_insertion_point(field_get:LandPlayerConclude.tax)
  return tax_;
}
void LandPlayerConclude::set_tax(::google::protobuf::int32 value) {
  set_has_tax();
  tax_ = value;
  // @@protoc_insertion_point(field_set:LandPlayerConclude.tax)
}

// optional int32 totoalwinlost = 6;
bool LandPlayerConclude::has_totoalwinlost() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void LandPlayerConclude::set_has_totoalwinlost() {
  _has_bits_[0] |= 0x00000010u;
}
void LandPlayerConclude::clear_has_totoalwinlost() {
  _has_bits_[0] &= ~0x00000010u;
}
void LandPlayerConclude::clear_totoalwinlost() {
  totoalwinlost_ = 0;
  clear_has_totoalwinlost();
}
::google::protobuf::int32 LandPlayerConclude::totoalwinlost() const {
  // @@protoc_insertion_point(field_get:LandPlayerConclude.totoalwinlost)
  return totoalwinlost_;
}
void LandPlayerConclude::set_totoalwinlost(::google::protobuf::int32 value) {
  set_has_totoalwinlost();
  totoalwinlost_ = value;
  // @@protoc_insertion_point(field_set:LandPlayerConclude.totoalwinlost)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SC_LandConclude::kPbConcludeFieldNumber;
const int SC_LandConclude::kChuntianFieldNumber;
const int SC_LandConclude::kFanchuntianFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SC_LandConclude::SC_LandConclude()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_public_5fland_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:SC_LandConclude)
}
SC_LandConclude::SC_LandConclude(const SC_LandConclude& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      pb_conclude_(from.pb_conclude_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&chuntian_, &from.chuntian_,
    reinterpret_cast<char*>(&fanchuntian_) -
    reinterpret_cast<char*>(&chuntian_) + sizeof(fanchuntian_));
  // @@protoc_insertion_point(copy_constructor:SC_LandConclude)
}

void SC_LandConclude::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&chuntian_, 0, reinterpret_cast<char*>(&fanchuntian_) -
    reinterpret_cast<char*>(&chuntian_) + sizeof(fanchuntian_));
}

SC_LandConclude::~SC_LandConclude() {
  // @@protoc_insertion_point(destructor:SC_LandConclude)
  SharedDtor();
}

void SC_LandConclude::SharedDtor() {
}

void SC_LandConclude::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SC_LandConclude::descriptor() {
  protobuf_public_5fland_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_public_5fland_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const SC_LandConclude& SC_LandConclude::default_instance() {
  protobuf_public_5fland_2eproto::InitDefaults();
  return *internal_default_instance();
}

SC_LandConclude* SC_LandConclude::New(::google::protobuf::Arena* arena) const {
  SC_LandConclude* n = new SC_LandConclude;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SC_LandConclude::Clear() {
// @@protoc_insertion_point(message_clear_start:SC_LandConclude)
  pb_conclude_.Clear();
  if (_has_bits_[0 / 32] & 3u) {
    ::memset(&chuntian_, 0, reinterpret_cast<char*>(&fanchuntian_) -
      reinterpret_cast<char*>(&chuntian_) + sizeof(fanchuntian_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool SC_LandConclude::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:SC_LandConclude)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .LandPlayerConclude pb_conclude = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_pb_conclude()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 chuntian = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_chuntian();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &chuntian_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 fanchuntian = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {
          set_has_fanchuntian();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &fanchuntian_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:SC_LandConclude)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:SC_LandConclude)
  return false;
#undef DO_
}

void SC_LandConclude::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:SC_LandConclude)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .LandPlayerConclude pb_conclude = 1;
  for (unsigned int i = 0, n = this->pb_conclude_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->pb_conclude(i), output);
  }

  cached_has_bits = _has_bits_[0];
  // optional int32 chuntian = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->chuntian(), output);
  }

  // optional int32 fanchuntian = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->fanchuntian(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:SC_LandConclude)
}

::google::protobuf::uint8* SC_LandConclude::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:SC_LandConclude)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .LandPlayerConclude pb_conclude = 1;
  for (unsigned int i = 0, n = this->pb_conclude_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, this->pb_conclude(i), deterministic, target);
  }

  cached_has_bits = _has_bits_[0];
  // optional int32 chuntian = 2;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->chuntian(), target);
  }

  // optional int32 fanchuntian = 3;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->fanchuntian(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SC_LandConclude)
  return target;
}

size_t SC_LandConclude::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SC_LandConclude)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // repeated .LandPlayerConclude pb_conclude = 1;
  {
    unsigned int count = this->pb_conclude_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->pb_conclude(i));
    }
  }

  if (_has_bits_[0 / 32] & 3u) {
    // optional int32 chuntian = 2;
    if (has_chuntian()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->chuntian());
    }

    // optional int32 fanchuntian = 3;
    if (has_fanchuntian()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->fanchuntian());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SC_LandConclude::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:SC_LandConclude)
  GOOGLE_DCHECK_NE(&from, this);
  const SC_LandConclude* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SC_LandConclude>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:SC_LandConclude)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:SC_LandConclude)
    MergeFrom(*source);
  }
}

void SC_LandConclude::MergeFrom(const SC_LandConclude& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:SC_LandConclude)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  pb_conclude_.MergeFrom(from.pb_conclude_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      chuntian_ = from.chuntian_;
    }
    if (cached_has_bits & 0x00000002u) {
      fanchuntian_ = from.fanchuntian_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void SC_LandConclude::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:SC_LandConclude)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SC_LandConclude::CopyFrom(const SC_LandConclude& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SC_LandConclude)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SC_LandConclude::IsInitialized() const {
  return true;
}

void SC_LandConclude::Swap(SC_LandConclude* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SC_LandConclude::InternalSwap(SC_LandConclude* other) {
  pb_conclude_.InternalSwap(&other->pb_conclude_);
  std::swap(chuntian_, other->chuntian_);
  std::swap(fanchuntian_, other->fanchuntian_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SC_LandConclude::GetMetadata() const {
  protobuf_public_5fland_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_public_5fland_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SC_LandConclude

// repeated .LandPlayerConclude pb_conclude = 1;
int SC_LandConclude::pb_conclude_size() const {
  return pb_conclude_.size();
}
void SC_LandConclude::clear_pb_conclude() {
  pb_conclude_.Clear();
}
const ::LandPlayerConclude& SC_LandConclude::pb_conclude(int index) const {
  // @@protoc_insertion_point(field_get:SC_LandConclude.pb_conclude)
  return pb_conclude_.Get(index);
}
::LandPlayerConclude* SC_LandConclude::mutable_pb_conclude(int index) {
  // @@protoc_insertion_point(field_mutable:SC_LandConclude.pb_conclude)
  return pb_conclude_.Mutable(index);
}
::LandPlayerConclude* SC_LandConclude::add_pb_conclude() {
  // @@protoc_insertion_point(field_add:SC_LandConclude.pb_conclude)
  return pb_conclude_.Add();
}
::google::protobuf::RepeatedPtrField< ::LandPlayerConclude >*
SC_LandConclude::mutable_pb_conclude() {
  // @@protoc_insertion_point(field_mutable_list:SC_LandConclude.pb_conclude)
  return &pb_conclude_;
}
const ::google::protobuf::RepeatedPtrField< ::LandPlayerConclude >&
SC_LandConclude::pb_conclude() const {
  // @@protoc_insertion_point(field_list:SC_LandConclude.pb_conclude)
  return pb_conclude_;
}

// optional int32 chuntian = 2;
bool SC_LandConclude::has_chuntian() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void SC_LandConclude::set_has_chuntian() {
  _has_bits_[0] |= 0x00000001u;
}
void SC_LandConclude::clear_has_chuntian() {
  _has_bits_[0] &= ~0x00000001u;
}
void SC_LandConclude::clear_chuntian() {
  chuntian_ = 0;
  clear_has_chuntian();
}
::google::protobuf::int32 SC_LandConclude::chuntian() const {
  // @@protoc_insertion_point(field_get:SC_LandConclude.chuntian)
  return chuntian_;
}
void SC_LandConclude::set_chuntian(::google::protobuf::int32 value) {
  set_has_chuntian();
  chuntian_ = value;
  // @@protoc_insertion_point(field_set:SC_LandConclude.chuntian)
}

// optional int32 fanchuntian = 3;
bool SC_LandConclude::has_fanchuntian() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void SC_LandConclude::set_has_fanchuntian() {
  _has_bits_[0] |= 0x00000002u;
}
void SC_LandConclude::clear_has_fanchuntian() {
  _has_bits_[0] &= ~0x00000002u;
}
void SC_LandConclude::clear_fanchuntian() {
  fanchuntian_ = 0;
  clear_has_fanchuntian();
}
::google::protobuf::int32 SC_LandConclude::fanchuntian() const {
  // @@protoc_insertion_point(field_get:SC_LandConclude.fanchuntian)
  return fanchuntian_;
}
void SC_LandConclude::set_fanchuntian(::google::protobuf::int32 value) {
  set_has_fanchuntian();
  fanchuntian_ = value;
  // @@protoc_insertion_point(field_set:SC_LandConclude.fanchuntian)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SC_LandPlayerOffline::kCurChairIdFieldNumber;
const int SC_LandPlayerOffline::kWaitTimeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SC_LandPlayerOffline::SC_LandPlayerOffline()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_public_5fland_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:SC_LandPlayerOffline)
}
SC_LandPlayerOffline::SC_LandPlayerOffline(const SC_LandPlayerOffline& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&cur_chair_id_, &from.cur_chair_id_,
    reinterpret_cast<char*>(&wait_time_) -
    reinterpret_cast<char*>(&cur_chair_id_) + sizeof(wait_time_));
  // @@protoc_insertion_point(copy_constructor:SC_LandPlayerOffline)
}

void SC_LandPlayerOffline::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&cur_chair_id_, 0, reinterpret_cast<char*>(&wait_time_) -
    reinterpret_cast<char*>(&cur_chair_id_) + sizeof(wait_time_));
}

SC_LandPlayerOffline::~SC_LandPlayerOffline() {
  // @@protoc_insertion_point(destructor:SC_LandPlayerOffline)
  SharedDtor();
}

void SC_LandPlayerOffline::SharedDtor() {
}

void SC_LandPlayerOffline::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SC_LandPlayerOffline::descriptor() {
  protobuf_public_5fland_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_public_5fland_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const SC_LandPlayerOffline& SC_LandPlayerOffline::default_instance() {
  protobuf_public_5fland_2eproto::InitDefaults();
  return *internal_default_instance();
}

SC_LandPlayerOffline* SC_LandPlayerOffline::New(::google::protobuf::Arena* arena) const {
  SC_LandPlayerOffline* n = new SC_LandPlayerOffline;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SC_LandPlayerOffline::Clear() {
// @@protoc_insertion_point(message_clear_start:SC_LandPlayerOffline)
  if (_has_bits_[0 / 32] & 3u) {
    ::memset(&cur_chair_id_, 0, reinterpret_cast<char*>(&wait_time_) -
      reinterpret_cast<char*>(&cur_chair_id_) + sizeof(wait_time_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool SC_LandPlayerOffline::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:SC_LandPlayerOffline)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 cur_chair_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_cur_chair_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &cur_chair_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 wait_time = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_wait_time();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &wait_time_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:SC_LandPlayerOffline)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:SC_LandPlayerOffline)
  return false;
#undef DO_
}

void SC_LandPlayerOffline::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:SC_LandPlayerOffline)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 cur_chair_id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->cur_chair_id(), output);
  }

  // optional int32 wait_time = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->wait_time(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:SC_LandPlayerOffline)
}

::google::protobuf::uint8* SC_LandPlayerOffline::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:SC_LandPlayerOffline)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 cur_chair_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->cur_chair_id(), target);
  }

  // optional int32 wait_time = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->wait_time(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SC_LandPlayerOffline)
  return target;
}

size_t SC_LandPlayerOffline::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SC_LandPlayerOffline)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 3u) {
    // optional int32 cur_chair_id = 1;
    if (has_cur_chair_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->cur_chair_id());
    }

    // optional int32 wait_time = 2;
    if (has_wait_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->wait_time());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SC_LandPlayerOffline::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:SC_LandPlayerOffline)
  GOOGLE_DCHECK_NE(&from, this);
  const SC_LandPlayerOffline* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SC_LandPlayerOffline>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:SC_LandPlayerOffline)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:SC_LandPlayerOffline)
    MergeFrom(*source);
  }
}

void SC_LandPlayerOffline::MergeFrom(const SC_LandPlayerOffline& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:SC_LandPlayerOffline)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      cur_chair_id_ = from.cur_chair_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      wait_time_ = from.wait_time_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void SC_LandPlayerOffline::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:SC_LandPlayerOffline)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SC_LandPlayerOffline::CopyFrom(const SC_LandPlayerOffline& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SC_LandPlayerOffline)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SC_LandPlayerOffline::IsInitialized() const {
  return true;
}

void SC_LandPlayerOffline::Swap(SC_LandPlayerOffline* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SC_LandPlayerOffline::InternalSwap(SC_LandPlayerOffline* other) {
  std::swap(cur_chair_id_, other->cur_chair_id_);
  std::swap(wait_time_, other->wait_time_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SC_LandPlayerOffline::GetMetadata() const {
  protobuf_public_5fland_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_public_5fland_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SC_LandPlayerOffline

// optional int32 cur_chair_id = 1;
bool SC_LandPlayerOffline::has_cur_chair_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void SC_LandPlayerOffline::set_has_cur_chair_id() {
  _has_bits_[0] |= 0x00000001u;
}
void SC_LandPlayerOffline::clear_has_cur_chair_id() {
  _has_bits_[0] &= ~0x00000001u;
}
void SC_LandPlayerOffline::clear_cur_chair_id() {
  cur_chair_id_ = 0;
  clear_has_cur_chair_id();
}
::google::protobuf::int32 SC_LandPlayerOffline::cur_chair_id() const {
  // @@protoc_insertion_point(field_get:SC_LandPlayerOffline.cur_chair_id)
  return cur_chair_id_;
}
void SC_LandPlayerOffline::set_cur_chair_id(::google::protobuf::int32 value) {
  set_has_cur_chair_id();
  cur_chair_id_ = value;
  // @@protoc_insertion_point(field_set:SC_LandPlayerOffline.cur_chair_id)
}

// optional int32 wait_time = 2;
bool SC_LandPlayerOffline::has_wait_time() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void SC_LandPlayerOffline::set_has_wait_time() {
  _has_bits_[0] |= 0x00000002u;
}
void SC_LandPlayerOffline::clear_has_wait_time() {
  _has_bits_[0] &= ~0x00000002u;
}
void SC_LandPlayerOffline::clear_wait_time() {
  wait_time_ = 0;
  clear_has_wait_time();
}
::google::protobuf::int32 SC_LandPlayerOffline::wait_time() const {
  // @@protoc_insertion_point(field_get:SC_LandPlayerOffline.wait_time)
  return wait_time_;
}
void SC_LandPlayerOffline::set_wait_time(::google::protobuf::int32 value) {
  set_has_wait_time();
  wait_time_ = value;
  // @@protoc_insertion_point(field_set:SC_LandPlayerOffline.wait_time)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SC_LandPlayerOnline::kCurOnlineChairIdFieldNumber;
const int SC_LandPlayerOnline::kCurChairIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SC_LandPlayerOnline::SC_LandPlayerOnline()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_public_5fland_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:SC_LandPlayerOnline)
}
SC_LandPlayerOnline::SC_LandPlayerOnline(const SC_LandPlayerOnline& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&cur_online_chair_id_, &from.cur_online_chair_id_,
    reinterpret_cast<char*>(&cur_chair_id_) -
    reinterpret_cast<char*>(&cur_online_chair_id_) + sizeof(cur_chair_id_));
  // @@protoc_insertion_point(copy_constructor:SC_LandPlayerOnline)
}

void SC_LandPlayerOnline::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&cur_online_chair_id_, 0, reinterpret_cast<char*>(&cur_chair_id_) -
    reinterpret_cast<char*>(&cur_online_chair_id_) + sizeof(cur_chair_id_));
}

SC_LandPlayerOnline::~SC_LandPlayerOnline() {
  // @@protoc_insertion_point(destructor:SC_LandPlayerOnline)
  SharedDtor();
}

void SC_LandPlayerOnline::SharedDtor() {
}

void SC_LandPlayerOnline::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SC_LandPlayerOnline::descriptor() {
  protobuf_public_5fland_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_public_5fland_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const SC_LandPlayerOnline& SC_LandPlayerOnline::default_instance() {
  protobuf_public_5fland_2eproto::InitDefaults();
  return *internal_default_instance();
}

SC_LandPlayerOnline* SC_LandPlayerOnline::New(::google::protobuf::Arena* arena) const {
  SC_LandPlayerOnline* n = new SC_LandPlayerOnline;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SC_LandPlayerOnline::Clear() {
// @@protoc_insertion_point(message_clear_start:SC_LandPlayerOnline)
  if (_has_bits_[0 / 32] & 3u) {
    ::memset(&cur_online_chair_id_, 0, reinterpret_cast<char*>(&cur_chair_id_) -
      reinterpret_cast<char*>(&cur_online_chair_id_) + sizeof(cur_chair_id_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool SC_LandPlayerOnline::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:SC_LandPlayerOnline)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 cur_online_chair_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_cur_online_chair_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &cur_online_chair_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 cur_chair_id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_cur_chair_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &cur_chair_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:SC_LandPlayerOnline)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:SC_LandPlayerOnline)
  return false;
#undef DO_
}

void SC_LandPlayerOnline::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:SC_LandPlayerOnline)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 cur_online_chair_id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->cur_online_chair_id(), output);
  }

  // optional int32 cur_chair_id = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->cur_chair_id(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:SC_LandPlayerOnline)
}

::google::protobuf::uint8* SC_LandPlayerOnline::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:SC_LandPlayerOnline)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 cur_online_chair_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->cur_online_chair_id(), target);
  }

  // optional int32 cur_chair_id = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->cur_chair_id(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SC_LandPlayerOnline)
  return target;
}

size_t SC_LandPlayerOnline::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SC_LandPlayerOnline)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 3u) {
    // optional int32 cur_online_chair_id = 1;
    if (has_cur_online_chair_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->cur_online_chair_id());
    }

    // optional int32 cur_chair_id = 2;
    if (has_cur_chair_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->cur_chair_id());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SC_LandPlayerOnline::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:SC_LandPlayerOnline)
  GOOGLE_DCHECK_NE(&from, this);
  const SC_LandPlayerOnline* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SC_LandPlayerOnline>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:SC_LandPlayerOnline)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:SC_LandPlayerOnline)
    MergeFrom(*source);
  }
}

void SC_LandPlayerOnline::MergeFrom(const SC_LandPlayerOnline& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:SC_LandPlayerOnline)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      cur_online_chair_id_ = from.cur_online_chair_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      cur_chair_id_ = from.cur_chair_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void SC_LandPlayerOnline::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:SC_LandPlayerOnline)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SC_LandPlayerOnline::CopyFrom(const SC_LandPlayerOnline& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SC_LandPlayerOnline)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SC_LandPlayerOnline::IsInitialized() const {
  return true;
}

void SC_LandPlayerOnline::Swap(SC_LandPlayerOnline* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SC_LandPlayerOnline::InternalSwap(SC_LandPlayerOnline* other) {
  std::swap(cur_online_chair_id_, other->cur_online_chair_id_);
  std::swap(cur_chair_id_, other->cur_chair_id_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SC_LandPlayerOnline::GetMetadata() const {
  protobuf_public_5fland_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_public_5fland_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SC_LandPlayerOnline

// optional int32 cur_online_chair_id = 1;
bool SC_LandPlayerOnline::has_cur_online_chair_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void SC_LandPlayerOnline::set_has_cur_online_chair_id() {
  _has_bits_[0] |= 0x00000001u;
}
void SC_LandPlayerOnline::clear_has_cur_online_chair_id() {
  _has_bits_[0] &= ~0x00000001u;
}
void SC_LandPlayerOnline::clear_cur_online_chair_id() {
  cur_online_chair_id_ = 0;
  clear_has_cur_online_chair_id();
}
::google::protobuf::int32 SC_LandPlayerOnline::cur_online_chair_id() const {
  // @@protoc_insertion_point(field_get:SC_LandPlayerOnline.cur_online_chair_id)
  return cur_online_chair_id_;
}
void SC_LandPlayerOnline::set_cur_online_chair_id(::google::protobuf::int32 value) {
  set_has_cur_online_chair_id();
  cur_online_chair_id_ = value;
  // @@protoc_insertion_point(field_set:SC_LandPlayerOnline.cur_online_chair_id)
}

// optional int32 cur_chair_id = 2;
bool SC_LandPlayerOnline::has_cur_chair_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void SC_LandPlayerOnline::set_has_cur_chair_id() {
  _has_bits_[0] |= 0x00000002u;
}
void SC_LandPlayerOnline::clear_has_cur_chair_id() {
  _has_bits_[0] &= ~0x00000002u;
}
void SC_LandPlayerOnline::clear_cur_chair_id() {
  cur_chair_id_ = 0;
  clear_has_cur_chair_id();
}
::google::protobuf::int32 SC_LandPlayerOnline::cur_chair_id() const {
  // @@protoc_insertion_point(field_get:SC_LandPlayerOnline.cur_chair_id)
  return cur_chair_id_;
}
void SC_LandPlayerOnline::set_cur_chair_id(::google::protobuf::int32 value) {
  set_has_cur_chair_id();
  cur_chair_id_ = value;
  // @@protoc_insertion_point(field_set:SC_LandPlayerOnline.cur_chair_id)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PlayerCardsMsg::kChairIdFieldNumber;
const int PlayerCardsMsg::kCardsnumFieldNumber;
const int PlayerCardsMsg::kIsTrusteeshipFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PlayerCardsMsg::PlayerCardsMsg()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_public_5fland_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:PlayerCardsMsg)
}
PlayerCardsMsg::PlayerCardsMsg(const PlayerCardsMsg& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&chair_id_, &from.chair_id_,
    reinterpret_cast<char*>(&istrusteeship_) -
    reinterpret_cast<char*>(&chair_id_) + sizeof(istrusteeship_));
  // @@protoc_insertion_point(copy_constructor:PlayerCardsMsg)
}

void PlayerCardsMsg::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&chair_id_, 0, reinterpret_cast<char*>(&istrusteeship_) -
    reinterpret_cast<char*>(&chair_id_) + sizeof(istrusteeship_));
}

PlayerCardsMsg::~PlayerCardsMsg() {
  // @@protoc_insertion_point(destructor:PlayerCardsMsg)
  SharedDtor();
}

void PlayerCardsMsg::SharedDtor() {
}

void PlayerCardsMsg::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PlayerCardsMsg::descriptor() {
  protobuf_public_5fland_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_public_5fland_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const PlayerCardsMsg& PlayerCardsMsg::default_instance() {
  protobuf_public_5fland_2eproto::InitDefaults();
  return *internal_default_instance();
}

PlayerCardsMsg* PlayerCardsMsg::New(::google::protobuf::Arena* arena) const {
  PlayerCardsMsg* n = new PlayerCardsMsg;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void PlayerCardsMsg::Clear() {
// @@protoc_insertion_point(message_clear_start:PlayerCardsMsg)
  if (_has_bits_[0 / 32] & 7u) {
    ::memset(&chair_id_, 0, reinterpret_cast<char*>(&istrusteeship_) -
      reinterpret_cast<char*>(&chair_id_) + sizeof(istrusteeship_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool PlayerCardsMsg::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:PlayerCardsMsg)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 chair_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_chair_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &chair_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 cardsnum = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_cardsnum();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &cardsnum_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool isTrusteeship = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {
          set_has_istrusteeship();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &istrusteeship_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:PlayerCardsMsg)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:PlayerCardsMsg)
  return false;
#undef DO_
}

void PlayerCardsMsg::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:PlayerCardsMsg)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 chair_id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->chair_id(), output);
  }

  // optional int32 cardsnum = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->cardsnum(), output);
  }

  // optional bool isTrusteeship = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->istrusteeship(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:PlayerCardsMsg)
}

::google::protobuf::uint8* PlayerCardsMsg::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:PlayerCardsMsg)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 chair_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->chair_id(), target);
  }

  // optional int32 cardsnum = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->cardsnum(), target);
  }

  // optional bool isTrusteeship = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->istrusteeship(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:PlayerCardsMsg)
  return target;
}

size_t PlayerCardsMsg::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:PlayerCardsMsg)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 7u) {
    // optional int32 chair_id = 1;
    if (has_chair_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->chair_id());
    }

    // optional int32 cardsnum = 2;
    if (has_cardsnum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->cardsnum());
    }

    // optional bool isTrusteeship = 3;
    if (has_istrusteeship()) {
      total_size += 1 + 1;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PlayerCardsMsg::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:PlayerCardsMsg)
  GOOGLE_DCHECK_NE(&from, this);
  const PlayerCardsMsg* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const PlayerCardsMsg>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:PlayerCardsMsg)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:PlayerCardsMsg)
    MergeFrom(*source);
  }
}

void PlayerCardsMsg::MergeFrom(const PlayerCardsMsg& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:PlayerCardsMsg)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      chair_id_ = from.chair_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      cardsnum_ = from.cardsnum_;
    }
    if (cached_has_bits & 0x00000004u) {
      istrusteeship_ = from.istrusteeship_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void PlayerCardsMsg::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:PlayerCardsMsg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PlayerCardsMsg::CopyFrom(const PlayerCardsMsg& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:PlayerCardsMsg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PlayerCardsMsg::IsInitialized() const {
  return true;
}

void PlayerCardsMsg::Swap(PlayerCardsMsg* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PlayerCardsMsg::InternalSwap(PlayerCardsMsg* other) {
  std::swap(chair_id_, other->chair_id_);
  std::swap(cardsnum_, other->cardsnum_);
  std::swap(istrusteeship_, other->istrusteeship_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata PlayerCardsMsg::GetMetadata() const {
  protobuf_public_5fland_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_public_5fland_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// PlayerCardsMsg

// optional int32 chair_id = 1;
bool PlayerCardsMsg::has_chair_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void PlayerCardsMsg::set_has_chair_id() {
  _has_bits_[0] |= 0x00000001u;
}
void PlayerCardsMsg::clear_has_chair_id() {
  _has_bits_[0] &= ~0x00000001u;
}
void PlayerCardsMsg::clear_chair_id() {
  chair_id_ = 0;
  clear_has_chair_id();
}
::google::protobuf::int32 PlayerCardsMsg::chair_id() const {
  // @@protoc_insertion_point(field_get:PlayerCardsMsg.chair_id)
  return chair_id_;
}
void PlayerCardsMsg::set_chair_id(::google::protobuf::int32 value) {
  set_has_chair_id();
  chair_id_ = value;
  // @@protoc_insertion_point(field_set:PlayerCardsMsg.chair_id)
}

// optional int32 cardsnum = 2;
bool PlayerCardsMsg::has_cardsnum() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void PlayerCardsMsg::set_has_cardsnum() {
  _has_bits_[0] |= 0x00000002u;
}
void PlayerCardsMsg::clear_has_cardsnum() {
  _has_bits_[0] &= ~0x00000002u;
}
void PlayerCardsMsg::clear_cardsnum() {
  cardsnum_ = 0;
  clear_has_cardsnum();
}
::google::protobuf::int32 PlayerCardsMsg::cardsnum() const {
  // @@protoc_insertion_point(field_get:PlayerCardsMsg.cardsnum)
  return cardsnum_;
}
void PlayerCardsMsg::set_cardsnum(::google::protobuf::int32 value) {
  set_has_cardsnum();
  cardsnum_ = value;
  // @@protoc_insertion_point(field_set:PlayerCardsMsg.cardsnum)
}

// optional bool isTrusteeship = 3;
bool PlayerCardsMsg::has_istrusteeship() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void PlayerCardsMsg::set_has_istrusteeship() {
  _has_bits_[0] |= 0x00000004u;
}
void PlayerCardsMsg::clear_has_istrusteeship() {
  _has_bits_[0] &= ~0x00000004u;
}
void PlayerCardsMsg::clear_istrusteeship() {
  istrusteeship_ = false;
  clear_has_istrusteeship();
}
bool PlayerCardsMsg::istrusteeship() const {
  // @@protoc_insertion_point(field_get:PlayerCardsMsg.isTrusteeship)
  return istrusteeship_;
}
void PlayerCardsMsg::set_istrusteeship(bool value) {
  set_has_istrusteeship();
  istrusteeship_ = value;
  // @@protoc_insertion_point(field_set:PlayerCardsMsg.isTrusteeship)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SC_LandRecoveryPlayerCard::kCurChairIdFieldNumber;
const int SC_LandRecoveryPlayerCard::kCardsFieldNumber;
const int SC_LandRecoveryPlayerCard::kPbMsgFieldNumber;
const int SC_LandRecoveryPlayerCard::kLandchairidFieldNumber;
const int SC_LandRecoveryPlayerCard::kLandcardsFieldNumber;
const int SC_LandRecoveryPlayerCard::kCallScoreFieldNumber;
const int SC_LandRecoveryPlayerCard::kLastCardsFieldNumber;
const int SC_LandRecoveryPlayerCard::kLastcardidFieldNumber;
const int SC_LandRecoveryPlayerCard::kOutcardidFieldNumber;
const int SC_LandRecoveryPlayerCard::kAlreadyoutcardsFieldNumber;
const int SC_LandRecoveryPlayerCard::kBombFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SC_LandRecoveryPlayerCard::SC_LandRecoveryPlayerCard()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_public_5fland_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:SC_LandRecoveryPlayerCard)
}
SC_LandRecoveryPlayerCard::SC_LandRecoveryPlayerCard(const SC_LandRecoveryPlayerCard& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      cards_(from.cards_),
      pb_msg_(from.pb_msg_),
      landcards_(from.landcards_),
      lastcards_(from.lastcards_),
      alreadyoutcards_(from.alreadyoutcards_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&cur_chair_id_, &from.cur_chair_id_,
    reinterpret_cast<char*>(&bomb_) -
    reinterpret_cast<char*>(&cur_chair_id_) + sizeof(bomb_));
  // @@protoc_insertion_point(copy_constructor:SC_LandRecoveryPlayerCard)
}

void SC_LandRecoveryPlayerCard::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&cur_chair_id_, 0, reinterpret_cast<char*>(&bomb_) -
    reinterpret_cast<char*>(&cur_chair_id_) + sizeof(bomb_));
}

SC_LandRecoveryPlayerCard::~SC_LandRecoveryPlayerCard() {
  // @@protoc_insertion_point(destructor:SC_LandRecoveryPlayerCard)
  SharedDtor();
}

void SC_LandRecoveryPlayerCard::SharedDtor() {
}

void SC_LandRecoveryPlayerCard::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SC_LandRecoveryPlayerCard::descriptor() {
  protobuf_public_5fland_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_public_5fland_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const SC_LandRecoveryPlayerCard& SC_LandRecoveryPlayerCard::default_instance() {
  protobuf_public_5fland_2eproto::InitDefaults();
  return *internal_default_instance();
}

SC_LandRecoveryPlayerCard* SC_LandRecoveryPlayerCard::New(::google::protobuf::Arena* arena) const {
  SC_LandRecoveryPlayerCard* n = new SC_LandRecoveryPlayerCard;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SC_LandRecoveryPlayerCard::Clear() {
// @@protoc_insertion_point(message_clear_start:SC_LandRecoveryPlayerCard)
  cards_.Clear();
  pb_msg_.Clear();
  landcards_.Clear();
  lastcards_.Clear();
  alreadyoutcards_.Clear();
  if (_has_bits_[0 / 32] & 63u) {
    ::memset(&cur_chair_id_, 0, reinterpret_cast<char*>(&bomb_) -
      reinterpret_cast<char*>(&cur_chair_id_) + sizeof(bomb_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool SC_LandRecoveryPlayerCard::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:SC_LandRecoveryPlayerCard)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 cur_chair_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_cur_chair_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &cur_chair_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated int32 cards = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 16u, input, this->mutable_cards())));
        } else if (static_cast< ::google::protobuf::uint8>(tag) ==
                   static_cast< ::google::protobuf::uint8>(18u)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_cards())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .PlayerCardsMsg pb_msg = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_pb_msg()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 landchairid = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u)) {
          set_has_landchairid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &landchairid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated int32 landcards = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 40u, input, this->mutable_landcards())));
        } else if (static_cast< ::google::protobuf::uint8>(tag) ==
                   static_cast< ::google::protobuf::uint8>(42u)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_landcards())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 call_score = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u)) {
          set_has_call_score();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &call_score_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated int32 lastCards = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 56u, input, this->mutable_lastcards())));
        } else if (static_cast< ::google::protobuf::uint8>(tag) ==
                   static_cast< ::google::protobuf::uint8>(58u)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_lastcards())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 lastcardid = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(64u)) {
          set_has_lastcardid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &lastcardid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 outcardid = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(72u)) {
          set_has_outcardid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &outcardid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated int32 alreadyoutcards = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(80u)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 80u, input, this->mutable_alreadyoutcards())));
        } else if (static_cast< ::google::protobuf::uint8>(tag) ==
                   static_cast< ::google::protobuf::uint8>(82u)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_alreadyoutcards())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 bomb = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(88u)) {
          set_has_bomb();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &bomb_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:SC_LandRecoveryPlayerCard)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:SC_LandRecoveryPlayerCard)
  return false;
#undef DO_
}

void SC_LandRecoveryPlayerCard::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:SC_LandRecoveryPlayerCard)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 cur_chair_id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->cur_chair_id(), output);
  }

  // repeated int32 cards = 2;
  for (int i = 0, n = this->cards_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      2, this->cards(i), output);
  }

  // repeated .PlayerCardsMsg pb_msg = 3;
  for (unsigned int i = 0, n = this->pb_msg_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->pb_msg(i), output);
  }

  // optional int32 landchairid = 4;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->landchairid(), output);
  }

  // repeated int32 landcards = 5;
  for (int i = 0, n = this->landcards_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      5, this->landcards(i), output);
  }

  // optional int32 call_score = 6;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->call_score(), output);
  }

  // repeated int32 lastCards = 7;
  for (int i = 0, n = this->lastcards_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      7, this->lastcards(i), output);
  }

  // optional int32 lastcardid = 8;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->lastcardid(), output);
  }

  // optional int32 outcardid = 9;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->outcardid(), output);
  }

  // repeated int32 alreadyoutcards = 10;
  for (int i = 0, n = this->alreadyoutcards_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      10, this->alreadyoutcards(i), output);
  }

  // optional int32 bomb = 11;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(11, this->bomb(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:SC_LandRecoveryPlayerCard)
}

::google::protobuf::uint8* SC_LandRecoveryPlayerCard::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:SC_LandRecoveryPlayerCard)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 cur_chair_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->cur_chair_id(), target);
  }

  // repeated int32 cards = 2;
  target = ::google::protobuf::internal::WireFormatLite::
    WriteInt32ToArray(2, this->cards_, target);

  // repeated .PlayerCardsMsg pb_msg = 3;
  for (unsigned int i = 0, n = this->pb_msg_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, this->pb_msg(i), deterministic, target);
  }

  // optional int32 landchairid = 4;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->landchairid(), target);
  }

  // repeated int32 landcards = 5;
  target = ::google::protobuf::internal::WireFormatLite::
    WriteInt32ToArray(5, this->landcards_, target);

  // optional int32 call_score = 6;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->call_score(), target);
  }

  // repeated int32 lastCards = 7;
  target = ::google::protobuf::internal::WireFormatLite::
    WriteInt32ToArray(7, this->lastcards_, target);

  // optional int32 lastcardid = 8;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->lastcardid(), target);
  }

  // optional int32 outcardid = 9;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->outcardid(), target);
  }

  // repeated int32 alreadyoutcards = 10;
  target = ::google::protobuf::internal::WireFormatLite::
    WriteInt32ToArray(10, this->alreadyoutcards_, target);

  // optional int32 bomb = 11;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(11, this->bomb(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SC_LandRecoveryPlayerCard)
  return target;
}

size_t SC_LandRecoveryPlayerCard::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SC_LandRecoveryPlayerCard)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // repeated int32 cards = 2;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      Int32Size(this->cards_);
    total_size += 1 *
                  ::google::protobuf::internal::FromIntSize(this->cards_size());
    total_size += data_size;
  }

  // repeated .PlayerCardsMsg pb_msg = 3;
  {
    unsigned int count = this->pb_msg_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->pb_msg(i));
    }
  }

  // repeated int32 landcards = 5;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      Int32Size(this->landcards_);
    total_size += 1 *
                  ::google::protobuf::internal::FromIntSize(this->landcards_size());
    total_size += data_size;
  }

  // repeated int32 lastCards = 7;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      Int32Size(this->lastcards_);
    total_size += 1 *
                  ::google::protobuf::internal::FromIntSize(this->lastcards_size());
    total_size += data_size;
  }

  // repeated int32 alreadyoutcards = 10;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      Int32Size(this->alreadyoutcards_);
    total_size += 1 *
                  ::google::protobuf::internal::FromIntSize(this->alreadyoutcards_size());
    total_size += data_size;
  }

  if (_has_bits_[0 / 32] & 63u) {
    // optional int32 cur_chair_id = 1;
    if (has_cur_chair_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->cur_chair_id());
    }

    // optional int32 landchairid = 4;
    if (has_landchairid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->landchairid());
    }

    // optional int32 call_score = 6;
    if (has_call_score()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->call_score());
    }

    // optional int32 lastcardid = 8;
    if (has_lastcardid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->lastcardid());
    }

    // optional int32 outcardid = 9;
    if (has_outcardid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->outcardid());
    }

    // optional int32 bomb = 11;
    if (has_bomb()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->bomb());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SC_LandRecoveryPlayerCard::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:SC_LandRecoveryPlayerCard)
  GOOGLE_DCHECK_NE(&from, this);
  const SC_LandRecoveryPlayerCard* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SC_LandRecoveryPlayerCard>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:SC_LandRecoveryPlayerCard)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:SC_LandRecoveryPlayerCard)
    MergeFrom(*source);
  }
}

void SC_LandRecoveryPlayerCard::MergeFrom(const SC_LandRecoveryPlayerCard& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:SC_LandRecoveryPlayerCard)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cards_.MergeFrom(from.cards_);
  pb_msg_.MergeFrom(from.pb_msg_);
  landcards_.MergeFrom(from.landcards_);
  lastcards_.MergeFrom(from.lastcards_);
  alreadyoutcards_.MergeFrom(from.alreadyoutcards_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 63u) {
    if (cached_has_bits & 0x00000001u) {
      cur_chair_id_ = from.cur_chair_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      landchairid_ = from.landchairid_;
    }
    if (cached_has_bits & 0x00000004u) {
      call_score_ = from.call_score_;
    }
    if (cached_has_bits & 0x00000008u) {
      lastcardid_ = from.lastcardid_;
    }
    if (cached_has_bits & 0x00000010u) {
      outcardid_ = from.outcardid_;
    }
    if (cached_has_bits & 0x00000020u) {
      bomb_ = from.bomb_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void SC_LandRecoveryPlayerCard::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:SC_LandRecoveryPlayerCard)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SC_LandRecoveryPlayerCard::CopyFrom(const SC_LandRecoveryPlayerCard& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SC_LandRecoveryPlayerCard)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SC_LandRecoveryPlayerCard::IsInitialized() const {
  return true;
}

void SC_LandRecoveryPlayerCard::Swap(SC_LandRecoveryPlayerCard* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SC_LandRecoveryPlayerCard::InternalSwap(SC_LandRecoveryPlayerCard* other) {
  cards_.InternalSwap(&other->cards_);
  pb_msg_.InternalSwap(&other->pb_msg_);
  landcards_.InternalSwap(&other->landcards_);
  lastcards_.InternalSwap(&other->lastcards_);
  alreadyoutcards_.InternalSwap(&other->alreadyoutcards_);
  std::swap(cur_chair_id_, other->cur_chair_id_);
  std::swap(landchairid_, other->landchairid_);
  std::swap(call_score_, other->call_score_);
  std::swap(lastcardid_, other->lastcardid_);
  std::swap(outcardid_, other->outcardid_);
  std::swap(bomb_, other->bomb_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SC_LandRecoveryPlayerCard::GetMetadata() const {
  protobuf_public_5fland_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_public_5fland_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SC_LandRecoveryPlayerCard

// optional int32 cur_chair_id = 1;
bool SC_LandRecoveryPlayerCard::has_cur_chair_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void SC_LandRecoveryPlayerCard::set_has_cur_chair_id() {
  _has_bits_[0] |= 0x00000001u;
}
void SC_LandRecoveryPlayerCard::clear_has_cur_chair_id() {
  _has_bits_[0] &= ~0x00000001u;
}
void SC_LandRecoveryPlayerCard::clear_cur_chair_id() {
  cur_chair_id_ = 0;
  clear_has_cur_chair_id();
}
::google::protobuf::int32 SC_LandRecoveryPlayerCard::cur_chair_id() const {
  // @@protoc_insertion_point(field_get:SC_LandRecoveryPlayerCard.cur_chair_id)
  return cur_chair_id_;
}
void SC_LandRecoveryPlayerCard::set_cur_chair_id(::google::protobuf::int32 value) {
  set_has_cur_chair_id();
  cur_chair_id_ = value;
  // @@protoc_insertion_point(field_set:SC_LandRecoveryPlayerCard.cur_chair_id)
}

// repeated int32 cards = 2;
int SC_LandRecoveryPlayerCard::cards_size() const {
  return cards_.size();
}
void SC_LandRecoveryPlayerCard::clear_cards() {
  cards_.Clear();
}
::google::protobuf::int32 SC_LandRecoveryPlayerCard::cards(int index) const {
  // @@protoc_insertion_point(field_get:SC_LandRecoveryPlayerCard.cards)
  return cards_.Get(index);
}
void SC_LandRecoveryPlayerCard::set_cards(int index, ::google::protobuf::int32 value) {
  cards_.Set(index, value);
  // @@protoc_insertion_point(field_set:SC_LandRecoveryPlayerCard.cards)
}
void SC_LandRecoveryPlayerCard::add_cards(::google::protobuf::int32 value) {
  cards_.Add(value);
  // @@protoc_insertion_point(field_add:SC_LandRecoveryPlayerCard.cards)
}
const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
SC_LandRecoveryPlayerCard::cards() const {
  // @@protoc_insertion_point(field_list:SC_LandRecoveryPlayerCard.cards)
  return cards_;
}
::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
SC_LandRecoveryPlayerCard::mutable_cards() {
  // @@protoc_insertion_point(field_mutable_list:SC_LandRecoveryPlayerCard.cards)
  return &cards_;
}

// repeated .PlayerCardsMsg pb_msg = 3;
int SC_LandRecoveryPlayerCard::pb_msg_size() const {
  return pb_msg_.size();
}
void SC_LandRecoveryPlayerCard::clear_pb_msg() {
  pb_msg_.Clear();
}
const ::PlayerCardsMsg& SC_LandRecoveryPlayerCard::pb_msg(int index) const {
  // @@protoc_insertion_point(field_get:SC_LandRecoveryPlayerCard.pb_msg)
  return pb_msg_.Get(index);
}
::PlayerCardsMsg* SC_LandRecoveryPlayerCard::mutable_pb_msg(int index) {
  // @@protoc_insertion_point(field_mutable:SC_LandRecoveryPlayerCard.pb_msg)
  return pb_msg_.Mutable(index);
}
::PlayerCardsMsg* SC_LandRecoveryPlayerCard::add_pb_msg() {
  // @@protoc_insertion_point(field_add:SC_LandRecoveryPlayerCard.pb_msg)
  return pb_msg_.Add();
}
::google::protobuf::RepeatedPtrField< ::PlayerCardsMsg >*
SC_LandRecoveryPlayerCard::mutable_pb_msg() {
  // @@protoc_insertion_point(field_mutable_list:SC_LandRecoveryPlayerCard.pb_msg)
  return &pb_msg_;
}
const ::google::protobuf::RepeatedPtrField< ::PlayerCardsMsg >&
SC_LandRecoveryPlayerCard::pb_msg() const {
  // @@protoc_insertion_point(field_list:SC_LandRecoveryPlayerCard.pb_msg)
  return pb_msg_;
}

// optional int32 landchairid = 4;
bool SC_LandRecoveryPlayerCard::has_landchairid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void SC_LandRecoveryPlayerCard::set_has_landchairid() {
  _has_bits_[0] |= 0x00000002u;
}
void SC_LandRecoveryPlayerCard::clear_has_landchairid() {
  _has_bits_[0] &= ~0x00000002u;
}
void SC_LandRecoveryPlayerCard::clear_landchairid() {
  landchairid_ = 0;
  clear_has_landchairid();
}
::google::protobuf::int32 SC_LandRecoveryPlayerCard::landchairid() const {
  // @@protoc_insertion_point(field_get:SC_LandRecoveryPlayerCard.landchairid)
  return landchairid_;
}
void SC_LandRecoveryPlayerCard::set_landchairid(::google::protobuf::int32 value) {
  set_has_landchairid();
  landchairid_ = value;
  // @@protoc_insertion_point(field_set:SC_LandRecoveryPlayerCard.landchairid)
}

// repeated int32 landcards = 5;
int SC_LandRecoveryPlayerCard::landcards_size() const {
  return landcards_.size();
}
void SC_LandRecoveryPlayerCard::clear_landcards() {
  landcards_.Clear();
}
::google::protobuf::int32 SC_LandRecoveryPlayerCard::landcards(int index) const {
  // @@protoc_insertion_point(field_get:SC_LandRecoveryPlayerCard.landcards)
  return landcards_.Get(index);
}
void SC_LandRecoveryPlayerCard::set_landcards(int index, ::google::protobuf::int32 value) {
  landcards_.Set(index, value);
  // @@protoc_insertion_point(field_set:SC_LandRecoveryPlayerCard.landcards)
}
void SC_LandRecoveryPlayerCard::add_landcards(::google::protobuf::int32 value) {
  landcards_.Add(value);
  // @@protoc_insertion_point(field_add:SC_LandRecoveryPlayerCard.landcards)
}
const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
SC_LandRecoveryPlayerCard::landcards() const {
  // @@protoc_insertion_point(field_list:SC_LandRecoveryPlayerCard.landcards)
  return landcards_;
}
::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
SC_LandRecoveryPlayerCard::mutable_landcards() {
  // @@protoc_insertion_point(field_mutable_list:SC_LandRecoveryPlayerCard.landcards)
  return &landcards_;
}

// optional int32 call_score = 6;
bool SC_LandRecoveryPlayerCard::has_call_score() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void SC_LandRecoveryPlayerCard::set_has_call_score() {
  _has_bits_[0] |= 0x00000004u;
}
void SC_LandRecoveryPlayerCard::clear_has_call_score() {
  _has_bits_[0] &= ~0x00000004u;
}
void SC_LandRecoveryPlayerCard::clear_call_score() {
  call_score_ = 0;
  clear_has_call_score();
}
::google::protobuf::int32 SC_LandRecoveryPlayerCard::call_score() const {
  // @@protoc_insertion_point(field_get:SC_LandRecoveryPlayerCard.call_score)
  return call_score_;
}
void SC_LandRecoveryPlayerCard::set_call_score(::google::protobuf::int32 value) {
  set_has_call_score();
  call_score_ = value;
  // @@protoc_insertion_point(field_set:SC_LandRecoveryPlayerCard.call_score)
}

// repeated int32 lastCards = 7;
int SC_LandRecoveryPlayerCard::lastcards_size() const {
  return lastcards_.size();
}
void SC_LandRecoveryPlayerCard::clear_lastcards() {
  lastcards_.Clear();
}
::google::protobuf::int32 SC_LandRecoveryPlayerCard::lastcards(int index) const {
  // @@protoc_insertion_point(field_get:SC_LandRecoveryPlayerCard.lastCards)
  return lastcards_.Get(index);
}
void SC_LandRecoveryPlayerCard::set_lastcards(int index, ::google::protobuf::int32 value) {
  lastcards_.Set(index, value);
  // @@protoc_insertion_point(field_set:SC_LandRecoveryPlayerCard.lastCards)
}
void SC_LandRecoveryPlayerCard::add_lastcards(::google::protobuf::int32 value) {
  lastcards_.Add(value);
  // @@protoc_insertion_point(field_add:SC_LandRecoveryPlayerCard.lastCards)
}
const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
SC_LandRecoveryPlayerCard::lastcards() const {
  // @@protoc_insertion_point(field_list:SC_LandRecoveryPlayerCard.lastCards)
  return lastcards_;
}
::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
SC_LandRecoveryPlayerCard::mutable_lastcards() {
  // @@protoc_insertion_point(field_mutable_list:SC_LandRecoveryPlayerCard.lastCards)
  return &lastcards_;
}

// optional int32 lastcardid = 8;
bool SC_LandRecoveryPlayerCard::has_lastcardid() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void SC_LandRecoveryPlayerCard::set_has_lastcardid() {
  _has_bits_[0] |= 0x00000008u;
}
void SC_LandRecoveryPlayerCard::clear_has_lastcardid() {
  _has_bits_[0] &= ~0x00000008u;
}
void SC_LandRecoveryPlayerCard::clear_lastcardid() {
  lastcardid_ = 0;
  clear_has_lastcardid();
}
::google::protobuf::int32 SC_LandRecoveryPlayerCard::lastcardid() const {
  // @@protoc_insertion_point(field_get:SC_LandRecoveryPlayerCard.lastcardid)
  return lastcardid_;
}
void SC_LandRecoveryPlayerCard::set_lastcardid(::google::protobuf::int32 value) {
  set_has_lastcardid();
  lastcardid_ = value;
  // @@protoc_insertion_point(field_set:SC_LandRecoveryPlayerCard.lastcardid)
}

// optional int32 outcardid = 9;
bool SC_LandRecoveryPlayerCard::has_outcardid() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void SC_LandRecoveryPlayerCard::set_has_outcardid() {
  _has_bits_[0] |= 0x00000010u;
}
void SC_LandRecoveryPlayerCard::clear_has_outcardid() {
  _has_bits_[0] &= ~0x00000010u;
}
void SC_LandRecoveryPlayerCard::clear_outcardid() {
  outcardid_ = 0;
  clear_has_outcardid();
}
::google::protobuf::int32 SC_LandRecoveryPlayerCard::outcardid() const {
  // @@protoc_insertion_point(field_get:SC_LandRecoveryPlayerCard.outcardid)
  return outcardid_;
}
void SC_LandRecoveryPlayerCard::set_outcardid(::google::protobuf::int32 value) {
  set_has_outcardid();
  outcardid_ = value;
  // @@protoc_insertion_point(field_set:SC_LandRecoveryPlayerCard.outcardid)
}

// repeated int32 alreadyoutcards = 10;
int SC_LandRecoveryPlayerCard::alreadyoutcards_size() const {
  return alreadyoutcards_.size();
}
void SC_LandRecoveryPlayerCard::clear_alreadyoutcards() {
  alreadyoutcards_.Clear();
}
::google::protobuf::int32 SC_LandRecoveryPlayerCard::alreadyoutcards(int index) const {
  // @@protoc_insertion_point(field_get:SC_LandRecoveryPlayerCard.alreadyoutcards)
  return alreadyoutcards_.Get(index);
}
void SC_LandRecoveryPlayerCard::set_alreadyoutcards(int index, ::google::protobuf::int32 value) {
  alreadyoutcards_.Set(index, value);
  // @@protoc_insertion_point(field_set:SC_LandRecoveryPlayerCard.alreadyoutcards)
}
void SC_LandRecoveryPlayerCard::add_alreadyoutcards(::google::protobuf::int32 value) {
  alreadyoutcards_.Add(value);
  // @@protoc_insertion_point(field_add:SC_LandRecoveryPlayerCard.alreadyoutcards)
}
const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
SC_LandRecoveryPlayerCard::alreadyoutcards() const {
  // @@protoc_insertion_point(field_list:SC_LandRecoveryPlayerCard.alreadyoutcards)
  return alreadyoutcards_;
}
::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
SC_LandRecoveryPlayerCard::mutable_alreadyoutcards() {
  // @@protoc_insertion_point(field_mutable_list:SC_LandRecoveryPlayerCard.alreadyoutcards)
  return &alreadyoutcards_;
}

// optional int32 bomb = 11;
bool SC_LandRecoveryPlayerCard::has_bomb() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void SC_LandRecoveryPlayerCard::set_has_bomb() {
  _has_bits_[0] |= 0x00000020u;
}
void SC_LandRecoveryPlayerCard::clear_has_bomb() {
  _has_bits_[0] &= ~0x00000020u;
}
void SC_LandRecoveryPlayerCard::clear_bomb() {
  bomb_ = 0;
  clear_has_bomb();
}
::google::protobuf::int32 SC_LandRecoveryPlayerCard::bomb() const {
  // @@protoc_insertion_point(field_get:SC_LandRecoveryPlayerCard.bomb)
  return bomb_;
}
void SC_LandRecoveryPlayerCard::set_bomb(::google::protobuf::int32 value) {
  set_has_bomb();
  bomb_ = value;
  // @@protoc_insertion_point(field_set:SC_LandRecoveryPlayerCard.bomb)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int pofflineMsg::kChairIdFieldNumber;
const int pofflineMsg::kOutTimesFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

pofflineMsg::pofflineMsg()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_public_5fland_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:pofflineMsg)
}
pofflineMsg::pofflineMsg(const pofflineMsg& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&chair_id_, &from.chair_id_,
    reinterpret_cast<char*>(&outtimes_) -
    reinterpret_cast<char*>(&chair_id_) + sizeof(outtimes_));
  // @@protoc_insertion_point(copy_constructor:pofflineMsg)
}

void pofflineMsg::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&chair_id_, 0, reinterpret_cast<char*>(&outtimes_) -
    reinterpret_cast<char*>(&chair_id_) + sizeof(outtimes_));
}

pofflineMsg::~pofflineMsg() {
  // @@protoc_insertion_point(destructor:pofflineMsg)
  SharedDtor();
}

void pofflineMsg::SharedDtor() {
}

void pofflineMsg::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* pofflineMsg::descriptor() {
  protobuf_public_5fland_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_public_5fland_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const pofflineMsg& pofflineMsg::default_instance() {
  protobuf_public_5fland_2eproto::InitDefaults();
  return *internal_default_instance();
}

pofflineMsg* pofflineMsg::New(::google::protobuf::Arena* arena) const {
  pofflineMsg* n = new pofflineMsg;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void pofflineMsg::Clear() {
// @@protoc_insertion_point(message_clear_start:pofflineMsg)
  if (_has_bits_[0 / 32] & 3u) {
    ::memset(&chair_id_, 0, reinterpret_cast<char*>(&outtimes_) -
      reinterpret_cast<char*>(&chair_id_) + sizeof(outtimes_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool pofflineMsg::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pofflineMsg)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 chair_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_chair_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &chair_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 outTimes = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_outtimes();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &outtimes_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pofflineMsg)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pofflineMsg)
  return false;
#undef DO_
}

void pofflineMsg::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pofflineMsg)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 chair_id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->chair_id(), output);
  }

  // optional int32 outTimes = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->outtimes(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pofflineMsg)
}

::google::protobuf::uint8* pofflineMsg::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pofflineMsg)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 chair_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->chair_id(), target);
  }

  // optional int32 outTimes = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->outtimes(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pofflineMsg)
  return target;
}

size_t pofflineMsg::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pofflineMsg)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 3u) {
    // optional int32 chair_id = 1;
    if (has_chair_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->chair_id());
    }

    // optional int32 outTimes = 2;
    if (has_outtimes()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->outtimes());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void pofflineMsg::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pofflineMsg)
  GOOGLE_DCHECK_NE(&from, this);
  const pofflineMsg* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const pofflineMsg>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pofflineMsg)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pofflineMsg)
    MergeFrom(*source);
  }
}

void pofflineMsg::MergeFrom(const pofflineMsg& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pofflineMsg)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      chair_id_ = from.chair_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      outtimes_ = from.outtimes_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void pofflineMsg::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pofflineMsg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void pofflineMsg::CopyFrom(const pofflineMsg& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pofflineMsg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool pofflineMsg::IsInitialized() const {
  return true;
}

void pofflineMsg::Swap(pofflineMsg* other) {
  if (other == this) return;
  InternalSwap(other);
}
void pofflineMsg::InternalSwap(pofflineMsg* other) {
  std::swap(chair_id_, other->chair_id_);
  std::swap(outtimes_, other->outtimes_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata pofflineMsg::GetMetadata() const {
  protobuf_public_5fland_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_public_5fland_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// pofflineMsg

// optional int32 chair_id = 1;
bool pofflineMsg::has_chair_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void pofflineMsg::set_has_chair_id() {
  _has_bits_[0] |= 0x00000001u;
}
void pofflineMsg::clear_has_chair_id() {
  _has_bits_[0] &= ~0x00000001u;
}
void pofflineMsg::clear_chair_id() {
  chair_id_ = 0;
  clear_has_chair_id();
}
::google::protobuf::int32 pofflineMsg::chair_id() const {
  // @@protoc_insertion_point(field_get:pofflineMsg.chair_id)
  return chair_id_;
}
void pofflineMsg::set_chair_id(::google::protobuf::int32 value) {
  set_has_chair_id();
  chair_id_ = value;
  // @@protoc_insertion_point(field_set:pofflineMsg.chair_id)
}

// optional int32 outTimes = 2;
bool pofflineMsg::has_outtimes() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void pofflineMsg::set_has_outtimes() {
  _has_bits_[0] |= 0x00000002u;
}
void pofflineMsg::clear_has_outtimes() {
  _has_bits_[0] &= ~0x00000002u;
}
void pofflineMsg::clear_outtimes() {
  outtimes_ = 0;
  clear_has_outtimes();
}
::google::protobuf::int32 pofflineMsg::outtimes() const {
  // @@protoc_insertion_point(field_get:pofflineMsg.outTimes)
  return outtimes_;
}
void pofflineMsg::set_outtimes(::google::protobuf::int32 value) {
  set_has_outtimes();
  outtimes_ = value;
  // @@protoc_insertion_point(field_set:pofflineMsg.outTimes)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SC_LandRecoveryPlayerCallScore::kCurChairIdFieldNumber;
const int SC_LandRecoveryPlayerCallScore::kCallChairIdFieldNumber;
const int SC_LandRecoveryPlayerCallScore::kCallScoreFieldNumber;
const int SC_LandRecoveryPlayerCallScore::kCardsFieldNumber;
const int SC_LandRecoveryPlayerCallScore::kPbPlayerOfflineMsgFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SC_LandRecoveryPlayerCallScore::SC_LandRecoveryPlayerCallScore()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_public_5fland_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:SC_LandRecoveryPlayerCallScore)
}
SC_LandRecoveryPlayerCallScore::SC_LandRecoveryPlayerCallScore(const SC_LandRecoveryPlayerCallScore& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      cards_(from.cards_),
      pb_playerofflinemsg_(from.pb_playerofflinemsg_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&cur_chair_id_, &from.cur_chair_id_,
    reinterpret_cast<char*>(&call_score_) -
    reinterpret_cast<char*>(&cur_chair_id_) + sizeof(call_score_));
  // @@protoc_insertion_point(copy_constructor:SC_LandRecoveryPlayerCallScore)
}

void SC_LandRecoveryPlayerCallScore::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&cur_chair_id_, 0, reinterpret_cast<char*>(&call_score_) -
    reinterpret_cast<char*>(&cur_chair_id_) + sizeof(call_score_));
}

SC_LandRecoveryPlayerCallScore::~SC_LandRecoveryPlayerCallScore() {
  // @@protoc_insertion_point(destructor:SC_LandRecoveryPlayerCallScore)
  SharedDtor();
}

void SC_LandRecoveryPlayerCallScore::SharedDtor() {
}

void SC_LandRecoveryPlayerCallScore::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SC_LandRecoveryPlayerCallScore::descriptor() {
  protobuf_public_5fland_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_public_5fland_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const SC_LandRecoveryPlayerCallScore& SC_LandRecoveryPlayerCallScore::default_instance() {
  protobuf_public_5fland_2eproto::InitDefaults();
  return *internal_default_instance();
}

SC_LandRecoveryPlayerCallScore* SC_LandRecoveryPlayerCallScore::New(::google::protobuf::Arena* arena) const {
  SC_LandRecoveryPlayerCallScore* n = new SC_LandRecoveryPlayerCallScore;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SC_LandRecoveryPlayerCallScore::Clear() {
// @@protoc_insertion_point(message_clear_start:SC_LandRecoveryPlayerCallScore)
  cards_.Clear();
  pb_playerofflinemsg_.Clear();
  if (_has_bits_[0 / 32] & 7u) {
    ::memset(&cur_chair_id_, 0, reinterpret_cast<char*>(&call_score_) -
      reinterpret_cast<char*>(&cur_chair_id_) + sizeof(call_score_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool SC_LandRecoveryPlayerCallScore::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:SC_LandRecoveryPlayerCallScore)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 cur_chair_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_cur_chair_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &cur_chair_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 call_chair_id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_call_chair_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &call_chair_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 call_score = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {
          set_has_call_score();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &call_score_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated int32 cards = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 32u, input, this->mutable_cards())));
        } else if (static_cast< ::google::protobuf::uint8>(tag) ==
                   static_cast< ::google::protobuf::uint8>(34u)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_cards())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .pofflineMsg pb_playerOfflineMsg = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_pb_playerofflinemsg()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:SC_LandRecoveryPlayerCallScore)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:SC_LandRecoveryPlayerCallScore)
  return false;
#undef DO_
}

void SC_LandRecoveryPlayerCallScore::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:SC_LandRecoveryPlayerCallScore)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 cur_chair_id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->cur_chair_id(), output);
  }

  // optional int32 call_chair_id = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->call_chair_id(), output);
  }

  // optional int32 call_score = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->call_score(), output);
  }

  // repeated int32 cards = 4;
  for (int i = 0, n = this->cards_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      4, this->cards(i), output);
  }

  // repeated .pofflineMsg pb_playerOfflineMsg = 5;
  for (unsigned int i = 0, n = this->pb_playerofflinemsg_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->pb_playerofflinemsg(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:SC_LandRecoveryPlayerCallScore)
}

::google::protobuf::uint8* SC_LandRecoveryPlayerCallScore::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:SC_LandRecoveryPlayerCallScore)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 cur_chair_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->cur_chair_id(), target);
  }

  // optional int32 call_chair_id = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->call_chair_id(), target);
  }

  // optional int32 call_score = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->call_score(), target);
  }

  // repeated int32 cards = 4;
  target = ::google::protobuf::internal::WireFormatLite::
    WriteInt32ToArray(4, this->cards_, target);

  // repeated .pofflineMsg pb_playerOfflineMsg = 5;
  for (unsigned int i = 0, n = this->pb_playerofflinemsg_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        5, this->pb_playerofflinemsg(i), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SC_LandRecoveryPlayerCallScore)
  return target;
}

size_t SC_LandRecoveryPlayerCallScore::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SC_LandRecoveryPlayerCallScore)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // repeated int32 cards = 4;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      Int32Size(this->cards_);
    total_size += 1 *
                  ::google::protobuf::internal::FromIntSize(this->cards_size());
    total_size += data_size;
  }

  // repeated .pofflineMsg pb_playerOfflineMsg = 5;
  {
    unsigned int count = this->pb_playerofflinemsg_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->pb_playerofflinemsg(i));
    }
  }

  if (_has_bits_[0 / 32] & 7u) {
    // optional int32 cur_chair_id = 1;
    if (has_cur_chair_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->cur_chair_id());
    }

    // optional int32 call_chair_id = 2;
    if (has_call_chair_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->call_chair_id());
    }

    // optional int32 call_score = 3;
    if (has_call_score()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->call_score());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SC_LandRecoveryPlayerCallScore::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:SC_LandRecoveryPlayerCallScore)
  GOOGLE_DCHECK_NE(&from, this);
  const SC_LandRecoveryPlayerCallScore* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SC_LandRecoveryPlayerCallScore>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:SC_LandRecoveryPlayerCallScore)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:SC_LandRecoveryPlayerCallScore)
    MergeFrom(*source);
  }
}

void SC_LandRecoveryPlayerCallScore::MergeFrom(const SC_LandRecoveryPlayerCallScore& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:SC_LandRecoveryPlayerCallScore)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cards_.MergeFrom(from.cards_);
  pb_playerofflinemsg_.MergeFrom(from.pb_playerofflinemsg_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      cur_chair_id_ = from.cur_chair_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      call_chair_id_ = from.call_chair_id_;
    }
    if (cached_has_bits & 0x00000004u) {
      call_score_ = from.call_score_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void SC_LandRecoveryPlayerCallScore::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:SC_LandRecoveryPlayerCallScore)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SC_LandRecoveryPlayerCallScore::CopyFrom(const SC_LandRecoveryPlayerCallScore& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SC_LandRecoveryPlayerCallScore)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SC_LandRecoveryPlayerCallScore::IsInitialized() const {
  return true;
}

void SC_LandRecoveryPlayerCallScore::Swap(SC_LandRecoveryPlayerCallScore* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SC_LandRecoveryPlayerCallScore::InternalSwap(SC_LandRecoveryPlayerCallScore* other) {
  cards_.InternalSwap(&other->cards_);
  pb_playerofflinemsg_.InternalSwap(&other->pb_playerofflinemsg_);
  std::swap(cur_chair_id_, other->cur_chair_id_);
  std::swap(call_chair_id_, other->call_chair_id_);
  std::swap(call_score_, other->call_score_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SC_LandRecoveryPlayerCallScore::GetMetadata() const {
  protobuf_public_5fland_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_public_5fland_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SC_LandRecoveryPlayerCallScore

// optional int32 cur_chair_id = 1;
bool SC_LandRecoveryPlayerCallScore::has_cur_chair_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void SC_LandRecoveryPlayerCallScore::set_has_cur_chair_id() {
  _has_bits_[0] |= 0x00000001u;
}
void SC_LandRecoveryPlayerCallScore::clear_has_cur_chair_id() {
  _has_bits_[0] &= ~0x00000001u;
}
void SC_LandRecoveryPlayerCallScore::clear_cur_chair_id() {
  cur_chair_id_ = 0;
  clear_has_cur_chair_id();
}
::google::protobuf::int32 SC_LandRecoveryPlayerCallScore::cur_chair_id() const {
  // @@protoc_insertion_point(field_get:SC_LandRecoveryPlayerCallScore.cur_chair_id)
  return cur_chair_id_;
}
void SC_LandRecoveryPlayerCallScore::set_cur_chair_id(::google::protobuf::int32 value) {
  set_has_cur_chair_id();
  cur_chair_id_ = value;
  // @@protoc_insertion_point(field_set:SC_LandRecoveryPlayerCallScore.cur_chair_id)
}

// optional int32 call_chair_id = 2;
bool SC_LandRecoveryPlayerCallScore::has_call_chair_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void SC_LandRecoveryPlayerCallScore::set_has_call_chair_id() {
  _has_bits_[0] |= 0x00000002u;
}
void SC_LandRecoveryPlayerCallScore::clear_has_call_chair_id() {
  _has_bits_[0] &= ~0x00000002u;
}
void SC_LandRecoveryPlayerCallScore::clear_call_chair_id() {
  call_chair_id_ = 0;
  clear_has_call_chair_id();
}
::google::protobuf::int32 SC_LandRecoveryPlayerCallScore::call_chair_id() const {
  // @@protoc_insertion_point(field_get:SC_LandRecoveryPlayerCallScore.call_chair_id)
  return call_chair_id_;
}
void SC_LandRecoveryPlayerCallScore::set_call_chair_id(::google::protobuf::int32 value) {
  set_has_call_chair_id();
  call_chair_id_ = value;
  // @@protoc_insertion_point(field_set:SC_LandRecoveryPlayerCallScore.call_chair_id)
}

// optional int32 call_score = 3;
bool SC_LandRecoveryPlayerCallScore::has_call_score() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void SC_LandRecoveryPlayerCallScore::set_has_call_score() {
  _has_bits_[0] |= 0x00000004u;
}
void SC_LandRecoveryPlayerCallScore::clear_has_call_score() {
  _has_bits_[0] &= ~0x00000004u;
}
void SC_LandRecoveryPlayerCallScore::clear_call_score() {
  call_score_ = 0;
  clear_has_call_score();
}
::google::protobuf::int32 SC_LandRecoveryPlayerCallScore::call_score() const {
  // @@protoc_insertion_point(field_get:SC_LandRecoveryPlayerCallScore.call_score)
  return call_score_;
}
void SC_LandRecoveryPlayerCallScore::set_call_score(::google::protobuf::int32 value) {
  set_has_call_score();
  call_score_ = value;
  // @@protoc_insertion_point(field_set:SC_LandRecoveryPlayerCallScore.call_score)
}

// repeated int32 cards = 4;
int SC_LandRecoveryPlayerCallScore::cards_size() const {
  return cards_.size();
}
void SC_LandRecoveryPlayerCallScore::clear_cards() {
  cards_.Clear();
}
::google::protobuf::int32 SC_LandRecoveryPlayerCallScore::cards(int index) const {
  // @@protoc_insertion_point(field_get:SC_LandRecoveryPlayerCallScore.cards)
  return cards_.Get(index);
}
void SC_LandRecoveryPlayerCallScore::set_cards(int index, ::google::protobuf::int32 value) {
  cards_.Set(index, value);
  // @@protoc_insertion_point(field_set:SC_LandRecoveryPlayerCallScore.cards)
}
void SC_LandRecoveryPlayerCallScore::add_cards(::google::protobuf::int32 value) {
  cards_.Add(value);
  // @@protoc_insertion_point(field_add:SC_LandRecoveryPlayerCallScore.cards)
}
const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
SC_LandRecoveryPlayerCallScore::cards() const {
  // @@protoc_insertion_point(field_list:SC_LandRecoveryPlayerCallScore.cards)
  return cards_;
}
::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
SC_LandRecoveryPlayerCallScore::mutable_cards() {
  // @@protoc_insertion_point(field_mutable_list:SC_LandRecoveryPlayerCallScore.cards)
  return &cards_;
}

// repeated .pofflineMsg pb_playerOfflineMsg = 5;
int SC_LandRecoveryPlayerCallScore::pb_playerofflinemsg_size() const {
  return pb_playerofflinemsg_.size();
}
void SC_LandRecoveryPlayerCallScore::clear_pb_playerofflinemsg() {
  pb_playerofflinemsg_.Clear();
}
const ::pofflineMsg& SC_LandRecoveryPlayerCallScore::pb_playerofflinemsg(int index) const {
  // @@protoc_insertion_point(field_get:SC_LandRecoveryPlayerCallScore.pb_playerOfflineMsg)
  return pb_playerofflinemsg_.Get(index);
}
::pofflineMsg* SC_LandRecoveryPlayerCallScore::mutable_pb_playerofflinemsg(int index) {
  // @@protoc_insertion_point(field_mutable:SC_LandRecoveryPlayerCallScore.pb_playerOfflineMsg)
  return pb_playerofflinemsg_.Mutable(index);
}
::pofflineMsg* SC_LandRecoveryPlayerCallScore::add_pb_playerofflinemsg() {
  // @@protoc_insertion_point(field_add:SC_LandRecoveryPlayerCallScore.pb_playerOfflineMsg)
  return pb_playerofflinemsg_.Add();
}
::google::protobuf::RepeatedPtrField< ::pofflineMsg >*
SC_LandRecoveryPlayerCallScore::mutable_pb_playerofflinemsg() {
  // @@protoc_insertion_point(field_mutable_list:SC_LandRecoveryPlayerCallScore.pb_playerOfflineMsg)
  return &pb_playerofflinemsg_;
}
const ::google::protobuf::RepeatedPtrField< ::pofflineMsg >&
SC_LandRecoveryPlayerCallScore::pb_playerofflinemsg() const {
  // @@protoc_insertion_point(field_list:SC_LandRecoveryPlayerCallScore.pb_playerOfflineMsg)
  return pb_playerofflinemsg_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SC_LandCallScorePlayerOffline::kCurChairIdFieldNumber;
const int SC_LandCallScorePlayerOffline::kWaitTimeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SC_LandCallScorePlayerOffline::SC_LandCallScorePlayerOffline()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_public_5fland_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:SC_LandCallScorePlayerOffline)
}
SC_LandCallScorePlayerOffline::SC_LandCallScorePlayerOffline(const SC_LandCallScorePlayerOffline& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&cur_chair_id_, &from.cur_chair_id_,
    reinterpret_cast<char*>(&wait_time_) -
    reinterpret_cast<char*>(&cur_chair_id_) + sizeof(wait_time_));
  // @@protoc_insertion_point(copy_constructor:SC_LandCallScorePlayerOffline)
}

void SC_LandCallScorePlayerOffline::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&cur_chair_id_, 0, reinterpret_cast<char*>(&wait_time_) -
    reinterpret_cast<char*>(&cur_chair_id_) + sizeof(wait_time_));
}

SC_LandCallScorePlayerOffline::~SC_LandCallScorePlayerOffline() {
  // @@protoc_insertion_point(destructor:SC_LandCallScorePlayerOffline)
  SharedDtor();
}

void SC_LandCallScorePlayerOffline::SharedDtor() {
}

void SC_LandCallScorePlayerOffline::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SC_LandCallScorePlayerOffline::descriptor() {
  protobuf_public_5fland_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_public_5fland_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const SC_LandCallScorePlayerOffline& SC_LandCallScorePlayerOffline::default_instance() {
  protobuf_public_5fland_2eproto::InitDefaults();
  return *internal_default_instance();
}

SC_LandCallScorePlayerOffline* SC_LandCallScorePlayerOffline::New(::google::protobuf::Arena* arena) const {
  SC_LandCallScorePlayerOffline* n = new SC_LandCallScorePlayerOffline;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SC_LandCallScorePlayerOffline::Clear() {
// @@protoc_insertion_point(message_clear_start:SC_LandCallScorePlayerOffline)
  if (_has_bits_[0 / 32] & 3u) {
    ::memset(&cur_chair_id_, 0, reinterpret_cast<char*>(&wait_time_) -
      reinterpret_cast<char*>(&cur_chair_id_) + sizeof(wait_time_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool SC_LandCallScorePlayerOffline::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:SC_LandCallScorePlayerOffline)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 cur_chair_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_cur_chair_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &cur_chair_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 wait_time = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_wait_time();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &wait_time_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:SC_LandCallScorePlayerOffline)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:SC_LandCallScorePlayerOffline)
  return false;
#undef DO_
}

void SC_LandCallScorePlayerOffline::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:SC_LandCallScorePlayerOffline)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 cur_chair_id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->cur_chair_id(), output);
  }

  // optional int32 wait_time = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->wait_time(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:SC_LandCallScorePlayerOffline)
}

::google::protobuf::uint8* SC_LandCallScorePlayerOffline::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:SC_LandCallScorePlayerOffline)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 cur_chair_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->cur_chair_id(), target);
  }

  // optional int32 wait_time = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->wait_time(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SC_LandCallScorePlayerOffline)
  return target;
}

size_t SC_LandCallScorePlayerOffline::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SC_LandCallScorePlayerOffline)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 3u) {
    // optional int32 cur_chair_id = 1;
    if (has_cur_chair_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->cur_chair_id());
    }

    // optional int32 wait_time = 2;
    if (has_wait_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->wait_time());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SC_LandCallScorePlayerOffline::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:SC_LandCallScorePlayerOffline)
  GOOGLE_DCHECK_NE(&from, this);
  const SC_LandCallScorePlayerOffline* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SC_LandCallScorePlayerOffline>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:SC_LandCallScorePlayerOffline)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:SC_LandCallScorePlayerOffline)
    MergeFrom(*source);
  }
}

void SC_LandCallScorePlayerOffline::MergeFrom(const SC_LandCallScorePlayerOffline& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:SC_LandCallScorePlayerOffline)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      cur_chair_id_ = from.cur_chair_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      wait_time_ = from.wait_time_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void SC_LandCallScorePlayerOffline::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:SC_LandCallScorePlayerOffline)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SC_LandCallScorePlayerOffline::CopyFrom(const SC_LandCallScorePlayerOffline& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SC_LandCallScorePlayerOffline)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SC_LandCallScorePlayerOffline::IsInitialized() const {
  return true;
}

void SC_LandCallScorePlayerOffline::Swap(SC_LandCallScorePlayerOffline* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SC_LandCallScorePlayerOffline::InternalSwap(SC_LandCallScorePlayerOffline* other) {
  std::swap(cur_chair_id_, other->cur_chair_id_);
  std::swap(wait_time_, other->wait_time_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SC_LandCallScorePlayerOffline::GetMetadata() const {
  protobuf_public_5fland_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_public_5fland_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SC_LandCallScorePlayerOffline

// optional int32 cur_chair_id = 1;
bool SC_LandCallScorePlayerOffline::has_cur_chair_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void SC_LandCallScorePlayerOffline::set_has_cur_chair_id() {
  _has_bits_[0] |= 0x00000001u;
}
void SC_LandCallScorePlayerOffline::clear_has_cur_chair_id() {
  _has_bits_[0] &= ~0x00000001u;
}
void SC_LandCallScorePlayerOffline::clear_cur_chair_id() {
  cur_chair_id_ = 0;
  clear_has_cur_chair_id();
}
::google::protobuf::int32 SC_LandCallScorePlayerOffline::cur_chair_id() const {
  // @@protoc_insertion_point(field_get:SC_LandCallScorePlayerOffline.cur_chair_id)
  return cur_chair_id_;
}
void SC_LandCallScorePlayerOffline::set_cur_chair_id(::google::protobuf::int32 value) {
  set_has_cur_chair_id();
  cur_chair_id_ = value;
  // @@protoc_insertion_point(field_set:SC_LandCallScorePlayerOffline.cur_chair_id)
}

// optional int32 wait_time = 2;
bool SC_LandCallScorePlayerOffline::has_wait_time() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void SC_LandCallScorePlayerOffline::set_has_wait_time() {
  _has_bits_[0] |= 0x00000002u;
}
void SC_LandCallScorePlayerOffline::clear_has_wait_time() {
  _has_bits_[0] &= ~0x00000002u;
}
void SC_LandCallScorePlayerOffline::clear_wait_time() {
  wait_time_ = 0;
  clear_has_wait_time();
}
::google::protobuf::int32 SC_LandCallScorePlayerOffline::wait_time() const {
  // @@protoc_insertion_point(field_get:SC_LandCallScorePlayerOffline.wait_time)
  return wait_time_;
}
void SC_LandCallScorePlayerOffline::set_wait_time(::google::protobuf::int32 value) {
  set_has_wait_time();
  wait_time_ = value;
  // @@protoc_insertion_point(field_set:SC_LandCallScorePlayerOffline.wait_time)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CS_LandTrusteeship::CS_LandTrusteeship()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_public_5fland_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:CS_LandTrusteeship)
}
CS_LandTrusteeship::CS_LandTrusteeship(const CS_LandTrusteeship& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:CS_LandTrusteeship)
}

void CS_LandTrusteeship::SharedCtor() {
  _cached_size_ = 0;
}

CS_LandTrusteeship::~CS_LandTrusteeship() {
  // @@protoc_insertion_point(destructor:CS_LandTrusteeship)
  SharedDtor();
}

void CS_LandTrusteeship::SharedDtor() {
}

void CS_LandTrusteeship::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CS_LandTrusteeship::descriptor() {
  protobuf_public_5fland_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_public_5fland_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CS_LandTrusteeship& CS_LandTrusteeship::default_instance() {
  protobuf_public_5fland_2eproto::InitDefaults();
  return *internal_default_instance();
}

CS_LandTrusteeship* CS_LandTrusteeship::New(::google::protobuf::Arena* arena) const {
  CS_LandTrusteeship* n = new CS_LandTrusteeship;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CS_LandTrusteeship::Clear() {
// @@protoc_insertion_point(message_clear_start:CS_LandTrusteeship)
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CS_LandTrusteeship::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CS_LandTrusteeship)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:CS_LandTrusteeship)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CS_LandTrusteeship)
  return false;
#undef DO_
}

void CS_LandTrusteeship::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CS_LandTrusteeship)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CS_LandTrusteeship)
}

::google::protobuf::uint8* CS_LandTrusteeship::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CS_LandTrusteeship)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CS_LandTrusteeship)
  return target;
}

size_t CS_LandTrusteeship::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CS_LandTrusteeship)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CS_LandTrusteeship::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CS_LandTrusteeship)
  GOOGLE_DCHECK_NE(&from, this);
  const CS_LandTrusteeship* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CS_LandTrusteeship>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CS_LandTrusteeship)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CS_LandTrusteeship)
    MergeFrom(*source);
  }
}

void CS_LandTrusteeship::MergeFrom(const CS_LandTrusteeship& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CS_LandTrusteeship)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void CS_LandTrusteeship::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CS_LandTrusteeship)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CS_LandTrusteeship::CopyFrom(const CS_LandTrusteeship& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CS_LandTrusteeship)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CS_LandTrusteeship::IsInitialized() const {
  return true;
}

void CS_LandTrusteeship::Swap(CS_LandTrusteeship* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CS_LandTrusteeship::InternalSwap(CS_LandTrusteeship* other) {
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CS_LandTrusteeship::GetMetadata() const {
  protobuf_public_5fland_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_public_5fland_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CS_LandTrusteeship

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SC_LandTrusteeship::kChairIdFieldNumber;
const int SC_LandTrusteeship::kIsTrusteeshipFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SC_LandTrusteeship::SC_LandTrusteeship()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_public_5fland_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:SC_LandTrusteeship)
}
SC_LandTrusteeship::SC_LandTrusteeship(const SC_LandTrusteeship& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&chair_id_, &from.chair_id_,
    reinterpret_cast<char*>(&istrusteeship_) -
    reinterpret_cast<char*>(&chair_id_) + sizeof(istrusteeship_));
  // @@protoc_insertion_point(copy_constructor:SC_LandTrusteeship)
}

void SC_LandTrusteeship::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&chair_id_, 0, reinterpret_cast<char*>(&istrusteeship_) -
    reinterpret_cast<char*>(&chair_id_) + sizeof(istrusteeship_));
}

SC_LandTrusteeship::~SC_LandTrusteeship() {
  // @@protoc_insertion_point(destructor:SC_LandTrusteeship)
  SharedDtor();
}

void SC_LandTrusteeship::SharedDtor() {
}

void SC_LandTrusteeship::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SC_LandTrusteeship::descriptor() {
  protobuf_public_5fland_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_public_5fland_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const SC_LandTrusteeship& SC_LandTrusteeship::default_instance() {
  protobuf_public_5fland_2eproto::InitDefaults();
  return *internal_default_instance();
}

SC_LandTrusteeship* SC_LandTrusteeship::New(::google::protobuf::Arena* arena) const {
  SC_LandTrusteeship* n = new SC_LandTrusteeship;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SC_LandTrusteeship::Clear() {
// @@protoc_insertion_point(message_clear_start:SC_LandTrusteeship)
  if (_has_bits_[0 / 32] & 3u) {
    ::memset(&chair_id_, 0, reinterpret_cast<char*>(&istrusteeship_) -
      reinterpret_cast<char*>(&chair_id_) + sizeof(istrusteeship_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool SC_LandTrusteeship::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:SC_LandTrusteeship)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 chair_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_chair_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &chair_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool isTrusteeship = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_istrusteeship();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &istrusteeship_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:SC_LandTrusteeship)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:SC_LandTrusteeship)
  return false;
#undef DO_
}

void SC_LandTrusteeship::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:SC_LandTrusteeship)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 chair_id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->chair_id(), output);
  }

  // optional bool isTrusteeship = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->istrusteeship(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:SC_LandTrusteeship)
}

::google::protobuf::uint8* SC_LandTrusteeship::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:SC_LandTrusteeship)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 chair_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->chair_id(), target);
  }

  // optional bool isTrusteeship = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->istrusteeship(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SC_LandTrusteeship)
  return target;
}

size_t SC_LandTrusteeship::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SC_LandTrusteeship)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 3u) {
    // optional int32 chair_id = 1;
    if (has_chair_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->chair_id());
    }

    // optional bool isTrusteeship = 2;
    if (has_istrusteeship()) {
      total_size += 1 + 1;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SC_LandTrusteeship::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:SC_LandTrusteeship)
  GOOGLE_DCHECK_NE(&from, this);
  const SC_LandTrusteeship* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SC_LandTrusteeship>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:SC_LandTrusteeship)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:SC_LandTrusteeship)
    MergeFrom(*source);
  }
}

void SC_LandTrusteeship::MergeFrom(const SC_LandTrusteeship& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:SC_LandTrusteeship)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      chair_id_ = from.chair_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      istrusteeship_ = from.istrusteeship_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void SC_LandTrusteeship::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:SC_LandTrusteeship)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SC_LandTrusteeship::CopyFrom(const SC_LandTrusteeship& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SC_LandTrusteeship)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SC_LandTrusteeship::IsInitialized() const {
  return true;
}

void SC_LandTrusteeship::Swap(SC_LandTrusteeship* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SC_LandTrusteeship::InternalSwap(SC_LandTrusteeship* other) {
  std::swap(chair_id_, other->chair_id_);
  std::swap(istrusteeship_, other->istrusteeship_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SC_LandTrusteeship::GetMetadata() const {
  protobuf_public_5fland_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_public_5fland_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SC_LandTrusteeship

// optional int32 chair_id = 1;
bool SC_LandTrusteeship::has_chair_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void SC_LandTrusteeship::set_has_chair_id() {
  _has_bits_[0] |= 0x00000001u;
}
void SC_LandTrusteeship::clear_has_chair_id() {
  _has_bits_[0] &= ~0x00000001u;
}
void SC_LandTrusteeship::clear_chair_id() {
  chair_id_ = 0;
  clear_has_chair_id();
}
::google::protobuf::int32 SC_LandTrusteeship::chair_id() const {
  // @@protoc_insertion_point(field_get:SC_LandTrusteeship.chair_id)
  return chair_id_;
}
void SC_LandTrusteeship::set_chair_id(::google::protobuf::int32 value) {
  set_has_chair_id();
  chair_id_ = value;
  // @@protoc_insertion_point(field_set:SC_LandTrusteeship.chair_id)
}

// optional bool isTrusteeship = 2;
bool SC_LandTrusteeship::has_istrusteeship() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void SC_LandTrusteeship::set_has_istrusteeship() {
  _has_bits_[0] |= 0x00000002u;
}
void SC_LandTrusteeship::clear_has_istrusteeship() {
  _has_bits_[0] &= ~0x00000002u;
}
void SC_LandTrusteeship::clear_istrusteeship() {
  istrusteeship_ = false;
  clear_has_istrusteeship();
}
bool SC_LandTrusteeship::istrusteeship() const {
  // @@protoc_insertion_point(field_get:SC_LandTrusteeship.isTrusteeship)
  return istrusteeship_;
}
void SC_LandTrusteeship::set_istrusteeship(bool value) {
  set_has_istrusteeship();
  istrusteeship_ = value;
  // @@protoc_insertion_point(field_set:SC_LandTrusteeship.isTrusteeship)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CS_LandCallDouble::kIsDoubleFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CS_LandCallDouble::CS_LandCallDouble()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_public_5fland_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:CS_LandCallDouble)
}
CS_LandCallDouble::CS_LandCallDouble(const CS_LandCallDouble& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  is_double_ = from.is_double_;
  // @@protoc_insertion_point(copy_constructor:CS_LandCallDouble)
}

void CS_LandCallDouble::SharedCtor() {
  _cached_size_ = 0;
  is_double_ = 0;
}

CS_LandCallDouble::~CS_LandCallDouble() {
  // @@protoc_insertion_point(destructor:CS_LandCallDouble)
  SharedDtor();
}

void CS_LandCallDouble::SharedDtor() {
}

void CS_LandCallDouble::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CS_LandCallDouble::descriptor() {
  protobuf_public_5fland_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_public_5fland_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CS_LandCallDouble& CS_LandCallDouble::default_instance() {
  protobuf_public_5fland_2eproto::InitDefaults();
  return *internal_default_instance();
}

CS_LandCallDouble* CS_LandCallDouble::New(::google::protobuf::Arena* arena) const {
  CS_LandCallDouble* n = new CS_LandCallDouble;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CS_LandCallDouble::Clear() {
// @@protoc_insertion_point(message_clear_start:CS_LandCallDouble)
  is_double_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CS_LandCallDouble::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CS_LandCallDouble)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 is_double = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_is_double();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &is_double_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CS_LandCallDouble)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CS_LandCallDouble)
  return false;
#undef DO_
}

void CS_LandCallDouble::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CS_LandCallDouble)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 is_double = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->is_double(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CS_LandCallDouble)
}

::google::protobuf::uint8* CS_LandCallDouble::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CS_LandCallDouble)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 is_double = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->is_double(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CS_LandCallDouble)
  return target;
}

size_t CS_LandCallDouble::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CS_LandCallDouble)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // optional int32 is_double = 1;
  if (has_is_double()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->is_double());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CS_LandCallDouble::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CS_LandCallDouble)
  GOOGLE_DCHECK_NE(&from, this);
  const CS_LandCallDouble* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CS_LandCallDouble>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CS_LandCallDouble)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CS_LandCallDouble)
    MergeFrom(*source);
  }
}

void CS_LandCallDouble::MergeFrom(const CS_LandCallDouble& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CS_LandCallDouble)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_is_double()) {
    set_is_double(from.is_double());
  }
}

void CS_LandCallDouble::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CS_LandCallDouble)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CS_LandCallDouble::CopyFrom(const CS_LandCallDouble& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CS_LandCallDouble)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CS_LandCallDouble::IsInitialized() const {
  return true;
}

void CS_LandCallDouble::Swap(CS_LandCallDouble* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CS_LandCallDouble::InternalSwap(CS_LandCallDouble* other) {
  std::swap(is_double_, other->is_double_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CS_LandCallDouble::GetMetadata() const {
  protobuf_public_5fland_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_public_5fland_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CS_LandCallDouble

// optional int32 is_double = 1;
bool CS_LandCallDouble::has_is_double() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CS_LandCallDouble::set_has_is_double() {
  _has_bits_[0] |= 0x00000001u;
}
void CS_LandCallDouble::clear_has_is_double() {
  _has_bits_[0] &= ~0x00000001u;
}
void CS_LandCallDouble::clear_is_double() {
  is_double_ = 0;
  clear_has_is_double();
}
::google::protobuf::int32 CS_LandCallDouble::is_double() const {
  // @@protoc_insertion_point(field_get:CS_LandCallDouble.is_double)
  return is_double_;
}
void CS_LandCallDouble::set_is_double(::google::protobuf::int32 value) {
  set_has_is_double();
  is_double_ = value;
  // @@protoc_insertion_point(field_set:CS_LandCallDouble.is_double)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SC_LandCallDouble::kCallChairIdFieldNumber;
const int SC_LandCallDouble::kIsDoubleFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SC_LandCallDouble::SC_LandCallDouble()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_public_5fland_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:SC_LandCallDouble)
}
SC_LandCallDouble::SC_LandCallDouble(const SC_LandCallDouble& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&call_chair_id_, &from.call_chair_id_,
    reinterpret_cast<char*>(&is_double_) -
    reinterpret_cast<char*>(&call_chair_id_) + sizeof(is_double_));
  // @@protoc_insertion_point(copy_constructor:SC_LandCallDouble)
}

void SC_LandCallDouble::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&call_chair_id_, 0, reinterpret_cast<char*>(&is_double_) -
    reinterpret_cast<char*>(&call_chair_id_) + sizeof(is_double_));
}

SC_LandCallDouble::~SC_LandCallDouble() {
  // @@protoc_insertion_point(destructor:SC_LandCallDouble)
  SharedDtor();
}

void SC_LandCallDouble::SharedDtor() {
}

void SC_LandCallDouble::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SC_LandCallDouble::descriptor() {
  protobuf_public_5fland_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_public_5fland_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const SC_LandCallDouble& SC_LandCallDouble::default_instance() {
  protobuf_public_5fland_2eproto::InitDefaults();
  return *internal_default_instance();
}

SC_LandCallDouble* SC_LandCallDouble::New(::google::protobuf::Arena* arena) const {
  SC_LandCallDouble* n = new SC_LandCallDouble;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SC_LandCallDouble::Clear() {
// @@protoc_insertion_point(message_clear_start:SC_LandCallDouble)
  if (_has_bits_[0 / 32] & 3u) {
    ::memset(&call_chair_id_, 0, reinterpret_cast<char*>(&is_double_) -
      reinterpret_cast<char*>(&call_chair_id_) + sizeof(is_double_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool SC_LandCallDouble::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:SC_LandCallDouble)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 call_chair_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_call_chair_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &call_chair_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 is_double = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_is_double();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &is_double_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:SC_LandCallDouble)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:SC_LandCallDouble)
  return false;
#undef DO_
}

void SC_LandCallDouble::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:SC_LandCallDouble)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 call_chair_id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->call_chair_id(), output);
  }

  // optional int32 is_double = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->is_double(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:SC_LandCallDouble)
}

::google::protobuf::uint8* SC_LandCallDouble::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:SC_LandCallDouble)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 call_chair_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->call_chair_id(), target);
  }

  // optional int32 is_double = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->is_double(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SC_LandCallDouble)
  return target;
}

size_t SC_LandCallDouble::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SC_LandCallDouble)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 3u) {
    // optional int32 call_chair_id = 1;
    if (has_call_chair_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->call_chair_id());
    }

    // optional int32 is_double = 2;
    if (has_is_double()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->is_double());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SC_LandCallDouble::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:SC_LandCallDouble)
  GOOGLE_DCHECK_NE(&from, this);
  const SC_LandCallDouble* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SC_LandCallDouble>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:SC_LandCallDouble)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:SC_LandCallDouble)
    MergeFrom(*source);
  }
}

void SC_LandCallDouble::MergeFrom(const SC_LandCallDouble& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:SC_LandCallDouble)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      call_chair_id_ = from.call_chair_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      is_double_ = from.is_double_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void SC_LandCallDouble::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:SC_LandCallDouble)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SC_LandCallDouble::CopyFrom(const SC_LandCallDouble& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SC_LandCallDouble)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SC_LandCallDouble::IsInitialized() const {
  return true;
}

void SC_LandCallDouble::Swap(SC_LandCallDouble* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SC_LandCallDouble::InternalSwap(SC_LandCallDouble* other) {
  std::swap(call_chair_id_, other->call_chair_id_);
  std::swap(is_double_, other->is_double_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SC_LandCallDouble::GetMetadata() const {
  protobuf_public_5fland_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_public_5fland_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SC_LandCallDouble

// optional int32 call_chair_id = 1;
bool SC_LandCallDouble::has_call_chair_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void SC_LandCallDouble::set_has_call_chair_id() {
  _has_bits_[0] |= 0x00000001u;
}
void SC_LandCallDouble::clear_has_call_chair_id() {
  _has_bits_[0] &= ~0x00000001u;
}
void SC_LandCallDouble::clear_call_chair_id() {
  call_chair_id_ = 0;
  clear_has_call_chair_id();
}
::google::protobuf::int32 SC_LandCallDouble::call_chair_id() const {
  // @@protoc_insertion_point(field_get:SC_LandCallDouble.call_chair_id)
  return call_chair_id_;
}
void SC_LandCallDouble::set_call_chair_id(::google::protobuf::int32 value) {
  set_has_call_chair_id();
  call_chair_id_ = value;
  // @@protoc_insertion_point(field_set:SC_LandCallDouble.call_chair_id)
}

// optional int32 is_double = 2;
bool SC_LandCallDouble::has_is_double() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void SC_LandCallDouble::set_has_is_double() {
  _has_bits_[0] |= 0x00000002u;
}
void SC_LandCallDouble::clear_has_is_double() {
  _has_bits_[0] &= ~0x00000002u;
}
void SC_LandCallDouble::clear_is_double() {
  is_double_ = 0;
  clear_has_is_double();
}
::google::protobuf::int32 SC_LandCallDouble::is_double() const {
  // @@protoc_insertion_point(field_get:SC_LandCallDouble.is_double)
  return is_double_;
}
void SC_LandCallDouble::set_is_double(::google::protobuf::int32 value) {
  set_has_is_double();
  is_double_ = value;
  // @@protoc_insertion_point(field_set:SC_LandCallDouble.is_double)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SC_LandCallDoubleFinish::kLandChairIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SC_LandCallDoubleFinish::SC_LandCallDoubleFinish()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_public_5fland_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:SC_LandCallDoubleFinish)
}
SC_LandCallDoubleFinish::SC_LandCallDoubleFinish(const SC_LandCallDoubleFinish& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  land_chair_id_ = from.land_chair_id_;
  // @@protoc_insertion_point(copy_constructor:SC_LandCallDoubleFinish)
}

void SC_LandCallDoubleFinish::SharedCtor() {
  _cached_size_ = 0;
  land_chair_id_ = 0;
}

SC_LandCallDoubleFinish::~SC_LandCallDoubleFinish() {
  // @@protoc_insertion_point(destructor:SC_LandCallDoubleFinish)
  SharedDtor();
}

void SC_LandCallDoubleFinish::SharedDtor() {
}

void SC_LandCallDoubleFinish::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SC_LandCallDoubleFinish::descriptor() {
  protobuf_public_5fland_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_public_5fland_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const SC_LandCallDoubleFinish& SC_LandCallDoubleFinish::default_instance() {
  protobuf_public_5fland_2eproto::InitDefaults();
  return *internal_default_instance();
}

SC_LandCallDoubleFinish* SC_LandCallDoubleFinish::New(::google::protobuf::Arena* arena) const {
  SC_LandCallDoubleFinish* n = new SC_LandCallDoubleFinish;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SC_LandCallDoubleFinish::Clear() {
// @@protoc_insertion_point(message_clear_start:SC_LandCallDoubleFinish)
  land_chair_id_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool SC_LandCallDoubleFinish::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:SC_LandCallDoubleFinish)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 land_chair_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_land_chair_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &land_chair_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:SC_LandCallDoubleFinish)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:SC_LandCallDoubleFinish)
  return false;
#undef DO_
}

void SC_LandCallDoubleFinish::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:SC_LandCallDoubleFinish)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 land_chair_id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->land_chair_id(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:SC_LandCallDoubleFinish)
}

::google::protobuf::uint8* SC_LandCallDoubleFinish::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:SC_LandCallDoubleFinish)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 land_chair_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->land_chair_id(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SC_LandCallDoubleFinish)
  return target;
}

size_t SC_LandCallDoubleFinish::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SC_LandCallDoubleFinish)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // optional int32 land_chair_id = 1;
  if (has_land_chair_id()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->land_chair_id());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SC_LandCallDoubleFinish::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:SC_LandCallDoubleFinish)
  GOOGLE_DCHECK_NE(&from, this);
  const SC_LandCallDoubleFinish* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SC_LandCallDoubleFinish>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:SC_LandCallDoubleFinish)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:SC_LandCallDoubleFinish)
    MergeFrom(*source);
  }
}

void SC_LandCallDoubleFinish::MergeFrom(const SC_LandCallDoubleFinish& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:SC_LandCallDoubleFinish)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_land_chair_id()) {
    set_land_chair_id(from.land_chair_id());
  }
}

void SC_LandCallDoubleFinish::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:SC_LandCallDoubleFinish)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SC_LandCallDoubleFinish::CopyFrom(const SC_LandCallDoubleFinish& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SC_LandCallDoubleFinish)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SC_LandCallDoubleFinish::IsInitialized() const {
  return true;
}

void SC_LandCallDoubleFinish::Swap(SC_LandCallDoubleFinish* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SC_LandCallDoubleFinish::InternalSwap(SC_LandCallDoubleFinish* other) {
  std::swap(land_chair_id_, other->land_chair_id_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SC_LandCallDoubleFinish::GetMetadata() const {
  protobuf_public_5fland_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_public_5fland_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SC_LandCallDoubleFinish

// optional int32 land_chair_id = 1;
bool SC_LandCallDoubleFinish::has_land_chair_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void SC_LandCallDoubleFinish::set_has_land_chair_id() {
  _has_bits_[0] |= 0x00000001u;
}
void SC_LandCallDoubleFinish::clear_has_land_chair_id() {
  _has_bits_[0] &= ~0x00000001u;
}
void SC_LandCallDoubleFinish::clear_land_chair_id() {
  land_chair_id_ = 0;
  clear_has_land_chair_id();
}
::google::protobuf::int32 SC_LandCallDoubleFinish::land_chair_id() const {
  // @@protoc_insertion_point(field_get:SC_LandCallDoubleFinish.land_chair_id)
  return land_chair_id_;
}
void SC_LandCallDoubleFinish::set_land_chair_id(::google::protobuf::int32 value) {
  set_has_land_chair_id();
  land_chair_id_ = value;
  // @@protoc_insertion_point(field_set:SC_LandCallDoubleFinish.land_chair_id)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PlayerDoubleMsg::kChairIdFieldNumber;
const int PlayerDoubleMsg::kIsDoubleFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PlayerDoubleMsg::PlayerDoubleMsg()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_public_5fland_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:PlayerDoubleMsg)
}
PlayerDoubleMsg::PlayerDoubleMsg(const PlayerDoubleMsg& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&chair_id_, &from.chair_id_,
    reinterpret_cast<char*>(&is_double_) -
    reinterpret_cast<char*>(&chair_id_) + sizeof(is_double_));
  // @@protoc_insertion_point(copy_constructor:PlayerDoubleMsg)
}

void PlayerDoubleMsg::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&chair_id_, 0, reinterpret_cast<char*>(&is_double_) -
    reinterpret_cast<char*>(&chair_id_) + sizeof(is_double_));
}

PlayerDoubleMsg::~PlayerDoubleMsg() {
  // @@protoc_insertion_point(destructor:PlayerDoubleMsg)
  SharedDtor();
}

void PlayerDoubleMsg::SharedDtor() {
}

void PlayerDoubleMsg::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PlayerDoubleMsg::descriptor() {
  protobuf_public_5fland_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_public_5fland_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const PlayerDoubleMsg& PlayerDoubleMsg::default_instance() {
  protobuf_public_5fland_2eproto::InitDefaults();
  return *internal_default_instance();
}

PlayerDoubleMsg* PlayerDoubleMsg::New(::google::protobuf::Arena* arena) const {
  PlayerDoubleMsg* n = new PlayerDoubleMsg;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void PlayerDoubleMsg::Clear() {
// @@protoc_insertion_point(message_clear_start:PlayerDoubleMsg)
  if (_has_bits_[0 / 32] & 3u) {
    ::memset(&chair_id_, 0, reinterpret_cast<char*>(&is_double_) -
      reinterpret_cast<char*>(&chair_id_) + sizeof(is_double_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool PlayerDoubleMsg::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:PlayerDoubleMsg)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 chair_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_chair_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &chair_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 is_double = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_is_double();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &is_double_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:PlayerDoubleMsg)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:PlayerDoubleMsg)
  return false;
#undef DO_
}

void PlayerDoubleMsg::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:PlayerDoubleMsg)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 chair_id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->chair_id(), output);
  }

  // optional int32 is_double = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->is_double(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:PlayerDoubleMsg)
}

::google::protobuf::uint8* PlayerDoubleMsg::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:PlayerDoubleMsg)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 chair_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->chair_id(), target);
  }

  // optional int32 is_double = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->is_double(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:PlayerDoubleMsg)
  return target;
}

size_t PlayerDoubleMsg::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:PlayerDoubleMsg)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 3u) {
    // optional int32 chair_id = 1;
    if (has_chair_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->chair_id());
    }

    // optional int32 is_double = 2;
    if (has_is_double()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->is_double());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PlayerDoubleMsg::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:PlayerDoubleMsg)
  GOOGLE_DCHECK_NE(&from, this);
  const PlayerDoubleMsg* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const PlayerDoubleMsg>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:PlayerDoubleMsg)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:PlayerDoubleMsg)
    MergeFrom(*source);
  }
}

void PlayerDoubleMsg::MergeFrom(const PlayerDoubleMsg& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:PlayerDoubleMsg)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      chair_id_ = from.chair_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      is_double_ = from.is_double_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void PlayerDoubleMsg::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:PlayerDoubleMsg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PlayerDoubleMsg::CopyFrom(const PlayerDoubleMsg& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:PlayerDoubleMsg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PlayerDoubleMsg::IsInitialized() const {
  return true;
}

void PlayerDoubleMsg::Swap(PlayerDoubleMsg* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PlayerDoubleMsg::InternalSwap(PlayerDoubleMsg* other) {
  std::swap(chair_id_, other->chair_id_);
  std::swap(is_double_, other->is_double_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata PlayerDoubleMsg::GetMetadata() const {
  protobuf_public_5fland_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_public_5fland_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// PlayerDoubleMsg

// optional int32 chair_id = 1;
bool PlayerDoubleMsg::has_chair_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void PlayerDoubleMsg::set_has_chair_id() {
  _has_bits_[0] |= 0x00000001u;
}
void PlayerDoubleMsg::clear_has_chair_id() {
  _has_bits_[0] &= ~0x00000001u;
}
void PlayerDoubleMsg::clear_chair_id() {
  chair_id_ = 0;
  clear_has_chair_id();
}
::google::protobuf::int32 PlayerDoubleMsg::chair_id() const {
  // @@protoc_insertion_point(field_get:PlayerDoubleMsg.chair_id)
  return chair_id_;
}
void PlayerDoubleMsg::set_chair_id(::google::protobuf::int32 value) {
  set_has_chair_id();
  chair_id_ = value;
  // @@protoc_insertion_point(field_set:PlayerDoubleMsg.chair_id)
}

// optional int32 is_double = 2;
bool PlayerDoubleMsg::has_is_double() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void PlayerDoubleMsg::set_has_is_double() {
  _has_bits_[0] |= 0x00000002u;
}
void PlayerDoubleMsg::clear_has_is_double() {
  _has_bits_[0] &= ~0x00000002u;
}
void PlayerDoubleMsg::clear_is_double() {
  is_double_ = 0;
  clear_has_is_double();
}
::google::protobuf::int32 PlayerDoubleMsg::is_double() const {
  // @@protoc_insertion_point(field_get:PlayerDoubleMsg.is_double)
  return is_double_;
}
void PlayerDoubleMsg::set_is_double(::google::protobuf::int32 value) {
  set_has_is_double();
  is_double_ = value;
  // @@protoc_insertion_point(field_set:PlayerDoubleMsg.is_double)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SC_LandRecoveryPlayerDouble::kPbDoubleStateFieldNumber;
const int SC_LandRecoveryPlayerDouble::kDoubleCountDownFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SC_LandRecoveryPlayerDouble::SC_LandRecoveryPlayerDouble()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_public_5fland_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:SC_LandRecoveryPlayerDouble)
}
SC_LandRecoveryPlayerDouble::SC_LandRecoveryPlayerDouble(const SC_LandRecoveryPlayerDouble& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      pb_double_state_(from.pb_double_state_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  double_count_down_ = from.double_count_down_;
  // @@protoc_insertion_point(copy_constructor:SC_LandRecoveryPlayerDouble)
}

void SC_LandRecoveryPlayerDouble::SharedCtor() {
  _cached_size_ = 0;
  double_count_down_ = 0;
}

SC_LandRecoveryPlayerDouble::~SC_LandRecoveryPlayerDouble() {
  // @@protoc_insertion_point(destructor:SC_LandRecoveryPlayerDouble)
  SharedDtor();
}

void SC_LandRecoveryPlayerDouble::SharedDtor() {
}

void SC_LandRecoveryPlayerDouble::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SC_LandRecoveryPlayerDouble::descriptor() {
  protobuf_public_5fland_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_public_5fland_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const SC_LandRecoveryPlayerDouble& SC_LandRecoveryPlayerDouble::default_instance() {
  protobuf_public_5fland_2eproto::InitDefaults();
  return *internal_default_instance();
}

SC_LandRecoveryPlayerDouble* SC_LandRecoveryPlayerDouble::New(::google::protobuf::Arena* arena) const {
  SC_LandRecoveryPlayerDouble* n = new SC_LandRecoveryPlayerDouble;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SC_LandRecoveryPlayerDouble::Clear() {
// @@protoc_insertion_point(message_clear_start:SC_LandRecoveryPlayerDouble)
  pb_double_state_.Clear();
  double_count_down_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool SC_LandRecoveryPlayerDouble::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:SC_LandRecoveryPlayerDouble)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .PlayerDoubleMsg pb_double_state = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_pb_double_state()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 double_count_down = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_double_count_down();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &double_count_down_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:SC_LandRecoveryPlayerDouble)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:SC_LandRecoveryPlayerDouble)
  return false;
#undef DO_
}

void SC_LandRecoveryPlayerDouble::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:SC_LandRecoveryPlayerDouble)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .PlayerDoubleMsg pb_double_state = 1;
  for (unsigned int i = 0, n = this->pb_double_state_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->pb_double_state(i), output);
  }

  cached_has_bits = _has_bits_[0];
  // optional int32 double_count_down = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->double_count_down(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:SC_LandRecoveryPlayerDouble)
}

::google::protobuf::uint8* SC_LandRecoveryPlayerDouble::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:SC_LandRecoveryPlayerDouble)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .PlayerDoubleMsg pb_double_state = 1;
  for (unsigned int i = 0, n = this->pb_double_state_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, this->pb_double_state(i), deterministic, target);
  }

  cached_has_bits = _has_bits_[0];
  // optional int32 double_count_down = 2;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->double_count_down(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SC_LandRecoveryPlayerDouble)
  return target;
}

size_t SC_LandRecoveryPlayerDouble::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SC_LandRecoveryPlayerDouble)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // repeated .PlayerDoubleMsg pb_double_state = 1;
  {
    unsigned int count = this->pb_double_state_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->pb_double_state(i));
    }
  }

  // optional int32 double_count_down = 2;
  if (has_double_count_down()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->double_count_down());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SC_LandRecoveryPlayerDouble::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:SC_LandRecoveryPlayerDouble)
  GOOGLE_DCHECK_NE(&from, this);
  const SC_LandRecoveryPlayerDouble* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SC_LandRecoveryPlayerDouble>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:SC_LandRecoveryPlayerDouble)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:SC_LandRecoveryPlayerDouble)
    MergeFrom(*source);
  }
}

void SC_LandRecoveryPlayerDouble::MergeFrom(const SC_LandRecoveryPlayerDouble& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:SC_LandRecoveryPlayerDouble)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  pb_double_state_.MergeFrom(from.pb_double_state_);
  if (from.has_double_count_down()) {
    set_double_count_down(from.double_count_down());
  }
}

void SC_LandRecoveryPlayerDouble::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:SC_LandRecoveryPlayerDouble)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SC_LandRecoveryPlayerDouble::CopyFrom(const SC_LandRecoveryPlayerDouble& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SC_LandRecoveryPlayerDouble)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SC_LandRecoveryPlayerDouble::IsInitialized() const {
  return true;
}

void SC_LandRecoveryPlayerDouble::Swap(SC_LandRecoveryPlayerDouble* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SC_LandRecoveryPlayerDouble::InternalSwap(SC_LandRecoveryPlayerDouble* other) {
  pb_double_state_.InternalSwap(&other->pb_double_state_);
  std::swap(double_count_down_, other->double_count_down_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SC_LandRecoveryPlayerDouble::GetMetadata() const {
  protobuf_public_5fland_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_public_5fland_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SC_LandRecoveryPlayerDouble

// repeated .PlayerDoubleMsg pb_double_state = 1;
int SC_LandRecoveryPlayerDouble::pb_double_state_size() const {
  return pb_double_state_.size();
}
void SC_LandRecoveryPlayerDouble::clear_pb_double_state() {
  pb_double_state_.Clear();
}
const ::PlayerDoubleMsg& SC_LandRecoveryPlayerDouble::pb_double_state(int index) const {
  // @@protoc_insertion_point(field_get:SC_LandRecoveryPlayerDouble.pb_double_state)
  return pb_double_state_.Get(index);
}
::PlayerDoubleMsg* SC_LandRecoveryPlayerDouble::mutable_pb_double_state(int index) {
  // @@protoc_insertion_point(field_mutable:SC_LandRecoveryPlayerDouble.pb_double_state)
  return pb_double_state_.Mutable(index);
}
::PlayerDoubleMsg* SC_LandRecoveryPlayerDouble::add_pb_double_state() {
  // @@protoc_insertion_point(field_add:SC_LandRecoveryPlayerDouble.pb_double_state)
  return pb_double_state_.Add();
}
::google::protobuf::RepeatedPtrField< ::PlayerDoubleMsg >*
SC_LandRecoveryPlayerDouble::mutable_pb_double_state() {
  // @@protoc_insertion_point(field_mutable_list:SC_LandRecoveryPlayerDouble.pb_double_state)
  return &pb_double_state_;
}
const ::google::protobuf::RepeatedPtrField< ::PlayerDoubleMsg >&
SC_LandRecoveryPlayerDouble::pb_double_state() const {
  // @@protoc_insertion_point(field_list:SC_LandRecoveryPlayerDouble.pb_double_state)
  return pb_double_state_;
}

// optional int32 double_count_down = 2;
bool SC_LandRecoveryPlayerDouble::has_double_count_down() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void SC_LandRecoveryPlayerDouble::set_has_double_count_down() {
  _has_bits_[0] |= 0x00000001u;
}
void SC_LandRecoveryPlayerDouble::clear_has_double_count_down() {
  _has_bits_[0] &= ~0x00000001u;
}
void SC_LandRecoveryPlayerDouble::clear_double_count_down() {
  double_count_down_ = 0;
  clear_has_double_count_down();
}
::google::protobuf::int32 SC_LandRecoveryPlayerDouble::double_count_down() const {
  // @@protoc_insertion_point(field_get:SC_LandRecoveryPlayerDouble.double_count_down)
  return double_count_down_;
}
void SC_LandRecoveryPlayerDouble::set_double_count_down(::google::protobuf::int32 value) {
  set_has_double_count_down();
  double_count_down_ = value;
  // @@protoc_insertion_point(field_set:SC_LandRecoveryPlayerDouble.double_count_down)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CS_GetPrivateConfig::CS_GetPrivateConfig()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_public_5fland_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:CS_GetPrivateConfig)
}
CS_GetPrivateConfig::CS_GetPrivateConfig(const CS_GetPrivateConfig& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:CS_GetPrivateConfig)
}

void CS_GetPrivateConfig::SharedCtor() {
  _cached_size_ = 0;
}

CS_GetPrivateConfig::~CS_GetPrivateConfig() {
  // @@protoc_insertion_point(destructor:CS_GetPrivateConfig)
  SharedDtor();
}

void CS_GetPrivateConfig::SharedDtor() {
}

void CS_GetPrivateConfig::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CS_GetPrivateConfig::descriptor() {
  protobuf_public_5fland_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_public_5fland_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CS_GetPrivateConfig& CS_GetPrivateConfig::default_instance() {
  protobuf_public_5fland_2eproto::InitDefaults();
  return *internal_default_instance();
}

CS_GetPrivateConfig* CS_GetPrivateConfig::New(::google::protobuf::Arena* arena) const {
  CS_GetPrivateConfig* n = new CS_GetPrivateConfig;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CS_GetPrivateConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:CS_GetPrivateConfig)
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CS_GetPrivateConfig::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CS_GetPrivateConfig)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:CS_GetPrivateConfig)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CS_GetPrivateConfig)
  return false;
#undef DO_
}

void CS_GetPrivateConfig::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CS_GetPrivateConfig)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CS_GetPrivateConfig)
}

::google::protobuf::uint8* CS_GetPrivateConfig::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CS_GetPrivateConfig)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CS_GetPrivateConfig)
  return target;
}

size_t CS_GetPrivateConfig::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CS_GetPrivateConfig)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CS_GetPrivateConfig::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CS_GetPrivateConfig)
  GOOGLE_DCHECK_NE(&from, this);
  const CS_GetPrivateConfig* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CS_GetPrivateConfig>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CS_GetPrivateConfig)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CS_GetPrivateConfig)
    MergeFrom(*source);
  }
}

void CS_GetPrivateConfig::MergeFrom(const CS_GetPrivateConfig& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CS_GetPrivateConfig)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void CS_GetPrivateConfig::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CS_GetPrivateConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CS_GetPrivateConfig::CopyFrom(const CS_GetPrivateConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CS_GetPrivateConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CS_GetPrivateConfig::IsInitialized() const {
  return true;
}

void CS_GetPrivateConfig::Swap(CS_GetPrivateConfig* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CS_GetPrivateConfig::InternalSwap(CS_GetPrivateConfig* other) {
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CS_GetPrivateConfig::GetMetadata() const {
  protobuf_public_5fland_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_public_5fland_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CS_GetPrivateConfig

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CS_SetPrivateConfigChange::kNallowDoubleFieldNumber;
const int CS_SetPrivateConfigChange::kNlimitbeishuFieldNumber;
const int CS_SetPrivateConfigChange::kNallowYiXiaoBodaFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CS_SetPrivateConfigChange::CS_SetPrivateConfigChange()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_public_5fland_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:CS_SetPrivateConfigChange)
}
CS_SetPrivateConfigChange::CS_SetPrivateConfigChange(const CS_SetPrivateConfigChange& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&nallowdouble_, &from.nallowdouble_,
    reinterpret_cast<char*>(&nallowyixiaoboda_) -
    reinterpret_cast<char*>(&nallowdouble_) + sizeof(nallowyixiaoboda_));
  // @@protoc_insertion_point(copy_constructor:CS_SetPrivateConfigChange)
}

void CS_SetPrivateConfigChange::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&nallowdouble_, 0, reinterpret_cast<char*>(&nallowyixiaoboda_) -
    reinterpret_cast<char*>(&nallowdouble_) + sizeof(nallowyixiaoboda_));
}

CS_SetPrivateConfigChange::~CS_SetPrivateConfigChange() {
  // @@protoc_insertion_point(destructor:CS_SetPrivateConfigChange)
  SharedDtor();
}

void CS_SetPrivateConfigChange::SharedDtor() {
}

void CS_SetPrivateConfigChange::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CS_SetPrivateConfigChange::descriptor() {
  protobuf_public_5fland_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_public_5fland_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CS_SetPrivateConfigChange& CS_SetPrivateConfigChange::default_instance() {
  protobuf_public_5fland_2eproto::InitDefaults();
  return *internal_default_instance();
}

CS_SetPrivateConfigChange* CS_SetPrivateConfigChange::New(::google::protobuf::Arena* arena) const {
  CS_SetPrivateConfigChange* n = new CS_SetPrivateConfigChange;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CS_SetPrivateConfigChange::Clear() {
// @@protoc_insertion_point(message_clear_start:CS_SetPrivateConfigChange)
  if (_has_bits_[0 / 32] & 7u) {
    ::memset(&nallowdouble_, 0, reinterpret_cast<char*>(&nallowyixiaoboda_) -
      reinterpret_cast<char*>(&nallowdouble_) + sizeof(nallowyixiaoboda_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CS_SetPrivateConfigChange::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CS_SetPrivateConfigChange)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 nallowDouble = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_nallowdouble();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &nallowdouble_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 nlimitbeishu = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_nlimitbeishu();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &nlimitbeishu_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 nallowYiXiaoBoda = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {
          set_has_nallowyixiaoboda();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &nallowyixiaoboda_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CS_SetPrivateConfigChange)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CS_SetPrivateConfigChange)
  return false;
#undef DO_
}

void CS_SetPrivateConfigChange::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CS_SetPrivateConfigChange)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 nallowDouble = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->nallowdouble(), output);
  }

  // optional int32 nlimitbeishu = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->nlimitbeishu(), output);
  }

  // optional int32 nallowYiXiaoBoda = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->nallowyixiaoboda(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CS_SetPrivateConfigChange)
}

::google::protobuf::uint8* CS_SetPrivateConfigChange::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CS_SetPrivateConfigChange)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 nallowDouble = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->nallowdouble(), target);
  }

  // optional int32 nlimitbeishu = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->nlimitbeishu(), target);
  }

  // optional int32 nallowYiXiaoBoda = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->nallowyixiaoboda(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CS_SetPrivateConfigChange)
  return target;
}

size_t CS_SetPrivateConfigChange::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CS_SetPrivateConfigChange)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 7u) {
    // optional int32 nallowDouble = 1;
    if (has_nallowdouble()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->nallowdouble());
    }

    // optional int32 nlimitbeishu = 2;
    if (has_nlimitbeishu()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->nlimitbeishu());
    }

    // optional int32 nallowYiXiaoBoda = 3;
    if (has_nallowyixiaoboda()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->nallowyixiaoboda());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CS_SetPrivateConfigChange::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CS_SetPrivateConfigChange)
  GOOGLE_DCHECK_NE(&from, this);
  const CS_SetPrivateConfigChange* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CS_SetPrivateConfigChange>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CS_SetPrivateConfigChange)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CS_SetPrivateConfigChange)
    MergeFrom(*source);
  }
}

void CS_SetPrivateConfigChange::MergeFrom(const CS_SetPrivateConfigChange& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CS_SetPrivateConfigChange)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      nallowdouble_ = from.nallowdouble_;
    }
    if (cached_has_bits & 0x00000002u) {
      nlimitbeishu_ = from.nlimitbeishu_;
    }
    if (cached_has_bits & 0x00000004u) {
      nallowyixiaoboda_ = from.nallowyixiaoboda_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CS_SetPrivateConfigChange::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CS_SetPrivateConfigChange)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CS_SetPrivateConfigChange::CopyFrom(const CS_SetPrivateConfigChange& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CS_SetPrivateConfigChange)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CS_SetPrivateConfigChange::IsInitialized() const {
  return true;
}

void CS_SetPrivateConfigChange::Swap(CS_SetPrivateConfigChange* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CS_SetPrivateConfigChange::InternalSwap(CS_SetPrivateConfigChange* other) {
  std::swap(nallowdouble_, other->nallowdouble_);
  std::swap(nlimitbeishu_, other->nlimitbeishu_);
  std::swap(nallowyixiaoboda_, other->nallowyixiaoboda_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CS_SetPrivateConfigChange::GetMetadata() const {
  protobuf_public_5fland_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_public_5fland_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CS_SetPrivateConfigChange

// optional int32 nallowDouble = 1;
bool CS_SetPrivateConfigChange::has_nallowdouble() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CS_SetPrivateConfigChange::set_has_nallowdouble() {
  _has_bits_[0] |= 0x00000001u;
}
void CS_SetPrivateConfigChange::clear_has_nallowdouble() {
  _has_bits_[0] &= ~0x00000001u;
}
void CS_SetPrivateConfigChange::clear_nallowdouble() {
  nallowdouble_ = 0;
  clear_has_nallowdouble();
}
::google::protobuf::int32 CS_SetPrivateConfigChange::nallowdouble() const {
  // @@protoc_insertion_point(field_get:CS_SetPrivateConfigChange.nallowDouble)
  return nallowdouble_;
}
void CS_SetPrivateConfigChange::set_nallowdouble(::google::protobuf::int32 value) {
  set_has_nallowdouble();
  nallowdouble_ = value;
  // @@protoc_insertion_point(field_set:CS_SetPrivateConfigChange.nallowDouble)
}

// optional int32 nlimitbeishu = 2;
bool CS_SetPrivateConfigChange::has_nlimitbeishu() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CS_SetPrivateConfigChange::set_has_nlimitbeishu() {
  _has_bits_[0] |= 0x00000002u;
}
void CS_SetPrivateConfigChange::clear_has_nlimitbeishu() {
  _has_bits_[0] &= ~0x00000002u;
}
void CS_SetPrivateConfigChange::clear_nlimitbeishu() {
  nlimitbeishu_ = 0;
  clear_has_nlimitbeishu();
}
::google::protobuf::int32 CS_SetPrivateConfigChange::nlimitbeishu() const {
  // @@protoc_insertion_point(field_get:CS_SetPrivateConfigChange.nlimitbeishu)
  return nlimitbeishu_;
}
void CS_SetPrivateConfigChange::set_nlimitbeishu(::google::protobuf::int32 value) {
  set_has_nlimitbeishu();
  nlimitbeishu_ = value;
  // @@protoc_insertion_point(field_set:CS_SetPrivateConfigChange.nlimitbeishu)
}

// optional int32 nallowYiXiaoBoda = 3;
bool CS_SetPrivateConfigChange::has_nallowyixiaoboda() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void CS_SetPrivateConfigChange::set_has_nallowyixiaoboda() {
  _has_bits_[0] |= 0x00000004u;
}
void CS_SetPrivateConfigChange::clear_has_nallowyixiaoboda() {
  _has_bits_[0] &= ~0x00000004u;
}
void CS_SetPrivateConfigChange::clear_nallowyixiaoboda() {
  nallowyixiaoboda_ = 0;
  clear_has_nallowyixiaoboda();
}
::google::protobuf::int32 CS_SetPrivateConfigChange::nallowyixiaoboda() const {
  // @@protoc_insertion_point(field_get:CS_SetPrivateConfigChange.nallowYiXiaoBoda)
  return nallowyixiaoboda_;
}
void CS_SetPrivateConfigChange::set_nallowyixiaoboda(::google::protobuf::int32 value) {
  set_has_nallowyixiaoboda();
  nallowyixiaoboda_ = value;
  // @@protoc_insertion_point(field_set:CS_SetPrivateConfigChange.nallowYiXiaoBoda)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SC_PrivateConfigChange::kNallowDoubleFieldNumber;
const int SC_PrivateConfigChange::kNlimitbeishuFieldNumber;
const int SC_PrivateConfigChange::kNallowYiXiaoBodaFieldNumber;
const int SC_PrivateConfigChange::kNcellFieldNumber;
const int SC_PrivateConfigChange::kNlimitFieldNumber;
const int SC_PrivateConfigChange::kNhosterguidFieldNumber;
const int SC_PrivateConfigChange::kNstatuesFieldNumber;
const int SC_PrivateConfigChange::kNreasonFieldNumber;
const int SC_PrivateConfigChange::kPrivateRoomHasStartFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SC_PrivateConfigChange::SC_PrivateConfigChange()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_public_5fland_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:SC_PrivateConfigChange)
}
SC_PrivateConfigChange::SC_PrivateConfigChange(const SC_PrivateConfigChange& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&nallowdouble_, &from.nallowdouble_,
    reinterpret_cast<char*>(&private_room_has_start_) -
    reinterpret_cast<char*>(&nallowdouble_) + sizeof(private_room_has_start_));
  // @@protoc_insertion_point(copy_constructor:SC_PrivateConfigChange)
}

void SC_PrivateConfigChange::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&nallowdouble_, 0, reinterpret_cast<char*>(&private_room_has_start_) -
    reinterpret_cast<char*>(&nallowdouble_) + sizeof(private_room_has_start_));
}

SC_PrivateConfigChange::~SC_PrivateConfigChange() {
  // @@protoc_insertion_point(destructor:SC_PrivateConfigChange)
  SharedDtor();
}

void SC_PrivateConfigChange::SharedDtor() {
}

void SC_PrivateConfigChange::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SC_PrivateConfigChange::descriptor() {
  protobuf_public_5fland_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_public_5fland_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const SC_PrivateConfigChange& SC_PrivateConfigChange::default_instance() {
  protobuf_public_5fland_2eproto::InitDefaults();
  return *internal_default_instance();
}

SC_PrivateConfigChange* SC_PrivateConfigChange::New(::google::protobuf::Arena* arena) const {
  SC_PrivateConfigChange* n = new SC_PrivateConfigChange;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SC_PrivateConfigChange::Clear() {
// @@protoc_insertion_point(message_clear_start:SC_PrivateConfigChange)
  if (_has_bits_[0 / 32] & 255u) {
    ::memset(&nallowdouble_, 0, reinterpret_cast<char*>(&nreason_) -
      reinterpret_cast<char*>(&nallowdouble_) + sizeof(nreason_));
  }
  private_room_has_start_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool SC_PrivateConfigChange::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:SC_PrivateConfigChange)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 nallowDouble = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_nallowdouble();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &nallowdouble_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 nlimitbeishu = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_nlimitbeishu();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &nlimitbeishu_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 nallowYiXiaoBoda = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {
          set_has_nallowyixiaoboda();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &nallowyixiaoboda_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 ncell = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u)) {
          set_has_ncell();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ncell_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 nlimit = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u)) {
          set_has_nlimit();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &nlimit_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 nhosterguid = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u)) {
          set_has_nhosterguid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &nhosterguid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 nstatues = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u)) {
          set_has_nstatues();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &nstatues_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 nreason = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(64u)) {
          set_has_nreason();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &nreason_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 private_room_has_start = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(72u)) {
          set_has_private_room_has_start();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &private_room_has_start_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:SC_PrivateConfigChange)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:SC_PrivateConfigChange)
  return false;
#undef DO_
}

void SC_PrivateConfigChange::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:SC_PrivateConfigChange)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 nallowDouble = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->nallowdouble(), output);
  }

  // optional int32 nlimitbeishu = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->nlimitbeishu(), output);
  }

  // optional int32 nallowYiXiaoBoda = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->nallowyixiaoboda(), output);
  }

  // optional int32 ncell = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->ncell(), output);
  }

  // optional int32 nlimit = 5;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->nlimit(), output);
  }

  // optional int32 nhosterguid = 6;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->nhosterguid(), output);
  }

  // optional int32 nstatues = 7;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->nstatues(), output);
  }

  // optional int32 nreason = 8;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->nreason(), output);
  }

  // optional int32 private_room_has_start = 9;
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->private_room_has_start(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:SC_PrivateConfigChange)
}

::google::protobuf::uint8* SC_PrivateConfigChange::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:SC_PrivateConfigChange)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 nallowDouble = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->nallowdouble(), target);
  }

  // optional int32 nlimitbeishu = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->nlimitbeishu(), target);
  }

  // optional int32 nallowYiXiaoBoda = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->nallowyixiaoboda(), target);
  }

  // optional int32 ncell = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->ncell(), target);
  }

  // optional int32 nlimit = 5;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->nlimit(), target);
  }

  // optional int32 nhosterguid = 6;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->nhosterguid(), target);
  }

  // optional int32 nstatues = 7;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->nstatues(), target);
  }

  // optional int32 nreason = 8;
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->nreason(), target);
  }

  // optional int32 private_room_has_start = 9;
  if (cached_has_bits & 0x00000100u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->private_room_has_start(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SC_PrivateConfigChange)
  return target;
}

size_t SC_PrivateConfigChange::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SC_PrivateConfigChange)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 255u) {
    // optional int32 nallowDouble = 1;
    if (has_nallowdouble()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->nallowdouble());
    }

    // optional int32 nlimitbeishu = 2;
    if (has_nlimitbeishu()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->nlimitbeishu());
    }

    // optional int32 nallowYiXiaoBoda = 3;
    if (has_nallowyixiaoboda()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->nallowyixiaoboda());
    }

    // optional int32 ncell = 4;
    if (has_ncell()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ncell());
    }

    // optional int32 nlimit = 5;
    if (has_nlimit()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->nlimit());
    }

    // optional int32 nhosterguid = 6;
    if (has_nhosterguid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->nhosterguid());
    }

    // optional int32 nstatues = 7;
    if (has_nstatues()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->nstatues());
    }

    // optional int32 nreason = 8;
    if (has_nreason()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->nreason());
    }

  }
  // optional int32 private_room_has_start = 9;
  if (has_private_room_has_start()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->private_room_has_start());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SC_PrivateConfigChange::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:SC_PrivateConfigChange)
  GOOGLE_DCHECK_NE(&from, this);
  const SC_PrivateConfigChange* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SC_PrivateConfigChange>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:SC_PrivateConfigChange)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:SC_PrivateConfigChange)
    MergeFrom(*source);
  }
}

void SC_PrivateConfigChange::MergeFrom(const SC_PrivateConfigChange& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:SC_PrivateConfigChange)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      nallowdouble_ = from.nallowdouble_;
    }
    if (cached_has_bits & 0x00000002u) {
      nlimitbeishu_ = from.nlimitbeishu_;
    }
    if (cached_has_bits & 0x00000004u) {
      nallowyixiaoboda_ = from.nallowyixiaoboda_;
    }
    if (cached_has_bits & 0x00000008u) {
      ncell_ = from.ncell_;
    }
    if (cached_has_bits & 0x00000010u) {
      nlimit_ = from.nlimit_;
    }
    if (cached_has_bits & 0x00000020u) {
      nhosterguid_ = from.nhosterguid_;
    }
    if (cached_has_bits & 0x00000040u) {
      nstatues_ = from.nstatues_;
    }
    if (cached_has_bits & 0x00000080u) {
      nreason_ = from.nreason_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00000100u) {
    set_private_room_has_start(from.private_room_has_start());
  }
}

void SC_PrivateConfigChange::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:SC_PrivateConfigChange)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SC_PrivateConfigChange::CopyFrom(const SC_PrivateConfigChange& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SC_PrivateConfigChange)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SC_PrivateConfigChange::IsInitialized() const {
  return true;
}

void SC_PrivateConfigChange::Swap(SC_PrivateConfigChange* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SC_PrivateConfigChange::InternalSwap(SC_PrivateConfigChange* other) {
  std::swap(nallowdouble_, other->nallowdouble_);
  std::swap(nlimitbeishu_, other->nlimitbeishu_);
  std::swap(nallowyixiaoboda_, other->nallowyixiaoboda_);
  std::swap(ncell_, other->ncell_);
  std::swap(nlimit_, other->nlimit_);
  std::swap(nhosterguid_, other->nhosterguid_);
  std::swap(nstatues_, other->nstatues_);
  std::swap(nreason_, other->nreason_);
  std::swap(private_room_has_start_, other->private_room_has_start_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SC_PrivateConfigChange::GetMetadata() const {
  protobuf_public_5fland_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_public_5fland_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SC_PrivateConfigChange

// optional int32 nallowDouble = 1;
bool SC_PrivateConfigChange::has_nallowdouble() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void SC_PrivateConfigChange::set_has_nallowdouble() {
  _has_bits_[0] |= 0x00000001u;
}
void SC_PrivateConfigChange::clear_has_nallowdouble() {
  _has_bits_[0] &= ~0x00000001u;
}
void SC_PrivateConfigChange::clear_nallowdouble() {
  nallowdouble_ = 0;
  clear_has_nallowdouble();
}
::google::protobuf::int32 SC_PrivateConfigChange::nallowdouble() const {
  // @@protoc_insertion_point(field_get:SC_PrivateConfigChange.nallowDouble)
  return nallowdouble_;
}
void SC_PrivateConfigChange::set_nallowdouble(::google::protobuf::int32 value) {
  set_has_nallowdouble();
  nallowdouble_ = value;
  // @@protoc_insertion_point(field_set:SC_PrivateConfigChange.nallowDouble)
}

// optional int32 nlimitbeishu = 2;
bool SC_PrivateConfigChange::has_nlimitbeishu() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void SC_PrivateConfigChange::set_has_nlimitbeishu() {
  _has_bits_[0] |= 0x00000002u;
}
void SC_PrivateConfigChange::clear_has_nlimitbeishu() {
  _has_bits_[0] &= ~0x00000002u;
}
void SC_PrivateConfigChange::clear_nlimitbeishu() {
  nlimitbeishu_ = 0;
  clear_has_nlimitbeishu();
}
::google::protobuf::int32 SC_PrivateConfigChange::nlimitbeishu() const {
  // @@protoc_insertion_point(field_get:SC_PrivateConfigChange.nlimitbeishu)
  return nlimitbeishu_;
}
void SC_PrivateConfigChange::set_nlimitbeishu(::google::protobuf::int32 value) {
  set_has_nlimitbeishu();
  nlimitbeishu_ = value;
  // @@protoc_insertion_point(field_set:SC_PrivateConfigChange.nlimitbeishu)
}

// optional int32 nallowYiXiaoBoda = 3;
bool SC_PrivateConfigChange::has_nallowyixiaoboda() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void SC_PrivateConfigChange::set_has_nallowyixiaoboda() {
  _has_bits_[0] |= 0x00000004u;
}
void SC_PrivateConfigChange::clear_has_nallowyixiaoboda() {
  _has_bits_[0] &= ~0x00000004u;
}
void SC_PrivateConfigChange::clear_nallowyixiaoboda() {
  nallowyixiaoboda_ = 0;
  clear_has_nallowyixiaoboda();
}
::google::protobuf::int32 SC_PrivateConfigChange::nallowyixiaoboda() const {
  // @@protoc_insertion_point(field_get:SC_PrivateConfigChange.nallowYiXiaoBoda)
  return nallowyixiaoboda_;
}
void SC_PrivateConfigChange::set_nallowyixiaoboda(::google::protobuf::int32 value) {
  set_has_nallowyixiaoboda();
  nallowyixiaoboda_ = value;
  // @@protoc_insertion_point(field_set:SC_PrivateConfigChange.nallowYiXiaoBoda)
}

// optional int32 ncell = 4;
bool SC_PrivateConfigChange::has_ncell() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void SC_PrivateConfigChange::set_has_ncell() {
  _has_bits_[0] |= 0x00000008u;
}
void SC_PrivateConfigChange::clear_has_ncell() {
  _has_bits_[0] &= ~0x00000008u;
}
void SC_PrivateConfigChange::clear_ncell() {
  ncell_ = 0;
  clear_has_ncell();
}
::google::protobuf::int32 SC_PrivateConfigChange::ncell() const {
  // @@protoc_insertion_point(field_get:SC_PrivateConfigChange.ncell)
  return ncell_;
}
void SC_PrivateConfigChange::set_ncell(::google::protobuf::int32 value) {
  set_has_ncell();
  ncell_ = value;
  // @@protoc_insertion_point(field_set:SC_PrivateConfigChange.ncell)
}

// optional int32 nlimit = 5;
bool SC_PrivateConfigChange::has_nlimit() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void SC_PrivateConfigChange::set_has_nlimit() {
  _has_bits_[0] |= 0x00000010u;
}
void SC_PrivateConfigChange::clear_has_nlimit() {
  _has_bits_[0] &= ~0x00000010u;
}
void SC_PrivateConfigChange::clear_nlimit() {
  nlimit_ = 0;
  clear_has_nlimit();
}
::google::protobuf::int32 SC_PrivateConfigChange::nlimit() const {
  // @@protoc_insertion_point(field_get:SC_PrivateConfigChange.nlimit)
  return nlimit_;
}
void SC_PrivateConfigChange::set_nlimit(::google::protobuf::int32 value) {
  set_has_nlimit();
  nlimit_ = value;
  // @@protoc_insertion_point(field_set:SC_PrivateConfigChange.nlimit)
}

// optional int32 nhosterguid = 6;
bool SC_PrivateConfigChange::has_nhosterguid() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void SC_PrivateConfigChange::set_has_nhosterguid() {
  _has_bits_[0] |= 0x00000020u;
}
void SC_PrivateConfigChange::clear_has_nhosterguid() {
  _has_bits_[0] &= ~0x00000020u;
}
void SC_PrivateConfigChange::clear_nhosterguid() {
  nhosterguid_ = 0;
  clear_has_nhosterguid();
}
::google::protobuf::int32 SC_PrivateConfigChange::nhosterguid() const {
  // @@protoc_insertion_point(field_get:SC_PrivateConfigChange.nhosterguid)
  return nhosterguid_;
}
void SC_PrivateConfigChange::set_nhosterguid(::google::protobuf::int32 value) {
  set_has_nhosterguid();
  nhosterguid_ = value;
  // @@protoc_insertion_point(field_set:SC_PrivateConfigChange.nhosterguid)
}

// optional int32 nstatues = 7;
bool SC_PrivateConfigChange::has_nstatues() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void SC_PrivateConfigChange::set_has_nstatues() {
  _has_bits_[0] |= 0x00000040u;
}
void SC_PrivateConfigChange::clear_has_nstatues() {
  _has_bits_[0] &= ~0x00000040u;
}
void SC_PrivateConfigChange::clear_nstatues() {
  nstatues_ = 0;
  clear_has_nstatues();
}
::google::protobuf::int32 SC_PrivateConfigChange::nstatues() const {
  // @@protoc_insertion_point(field_get:SC_PrivateConfigChange.nstatues)
  return nstatues_;
}
void SC_PrivateConfigChange::set_nstatues(::google::protobuf::int32 value) {
  set_has_nstatues();
  nstatues_ = value;
  // @@protoc_insertion_point(field_set:SC_PrivateConfigChange.nstatues)
}

// optional int32 nreason = 8;
bool SC_PrivateConfigChange::has_nreason() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void SC_PrivateConfigChange::set_has_nreason() {
  _has_bits_[0] |= 0x00000080u;
}
void SC_PrivateConfigChange::clear_has_nreason() {
  _has_bits_[0] &= ~0x00000080u;
}
void SC_PrivateConfigChange::clear_nreason() {
  nreason_ = 0;
  clear_has_nreason();
}
::google::protobuf::int32 SC_PrivateConfigChange::nreason() const {
  // @@protoc_insertion_point(field_get:SC_PrivateConfigChange.nreason)
  return nreason_;
}
void SC_PrivateConfigChange::set_nreason(::google::protobuf::int32 value) {
  set_has_nreason();
  nreason_ = value;
  // @@protoc_insertion_point(field_set:SC_PrivateConfigChange.nreason)
}

// optional int32 private_room_has_start = 9;
bool SC_PrivateConfigChange::has_private_room_has_start() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
void SC_PrivateConfigChange::set_has_private_room_has_start() {
  _has_bits_[0] |= 0x00000100u;
}
void SC_PrivateConfigChange::clear_has_private_room_has_start() {
  _has_bits_[0] &= ~0x00000100u;
}
void SC_PrivateConfigChange::clear_private_room_has_start() {
  private_room_has_start_ = 0;
  clear_has_private_room_has_start();
}
::google::protobuf::int32 SC_PrivateConfigChange::private_room_has_start() const {
  // @@protoc_insertion_point(field_get:SC_PrivateConfigChange.private_room_has_start)
  return private_room_has_start_;
}
void SC_PrivateConfigChange::set_private_room_has_start(::google::protobuf::int32 value) {
  set_has_private_room_has_start();
  private_room_has_start_ = value;
  // @@protoc_insertion_point(field_set:SC_PrivateConfigChange.private_room_has_start)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CS_TabTiren::kChairIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CS_TabTiren::CS_TabTiren()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_public_5fland_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:CS_TabTiren)
}
CS_TabTiren::CS_TabTiren(const CS_TabTiren& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  chair_id_ = from.chair_id_;
  // @@protoc_insertion_point(copy_constructor:CS_TabTiren)
}

void CS_TabTiren::SharedCtor() {
  _cached_size_ = 0;
  chair_id_ = 0;
}

CS_TabTiren::~CS_TabTiren() {
  // @@protoc_insertion_point(destructor:CS_TabTiren)
  SharedDtor();
}

void CS_TabTiren::SharedDtor() {
}

void CS_TabTiren::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CS_TabTiren::descriptor() {
  protobuf_public_5fland_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_public_5fland_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CS_TabTiren& CS_TabTiren::default_instance() {
  protobuf_public_5fland_2eproto::InitDefaults();
  return *internal_default_instance();
}

CS_TabTiren* CS_TabTiren::New(::google::protobuf::Arena* arena) const {
  CS_TabTiren* n = new CS_TabTiren;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CS_TabTiren::Clear() {
// @@protoc_insertion_point(message_clear_start:CS_TabTiren)
  chair_id_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CS_TabTiren::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CS_TabTiren)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 chair_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_chair_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &chair_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CS_TabTiren)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CS_TabTiren)
  return false;
#undef DO_
}

void CS_TabTiren::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CS_TabTiren)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 chair_id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->chair_id(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CS_TabTiren)
}

::google::protobuf::uint8* CS_TabTiren::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CS_TabTiren)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 chair_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->chair_id(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CS_TabTiren)
  return target;
}

size_t CS_TabTiren::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CS_TabTiren)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // optional int32 chair_id = 1;
  if (has_chair_id()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->chair_id());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CS_TabTiren::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CS_TabTiren)
  GOOGLE_DCHECK_NE(&from, this);
  const CS_TabTiren* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CS_TabTiren>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CS_TabTiren)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CS_TabTiren)
    MergeFrom(*source);
  }
}

void CS_TabTiren::MergeFrom(const CS_TabTiren& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CS_TabTiren)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_chair_id()) {
    set_chair_id(from.chair_id());
  }
}

void CS_TabTiren::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CS_TabTiren)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CS_TabTiren::CopyFrom(const CS_TabTiren& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CS_TabTiren)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CS_TabTiren::IsInitialized() const {
  return true;
}

void CS_TabTiren::Swap(CS_TabTiren* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CS_TabTiren::InternalSwap(CS_TabTiren* other) {
  std::swap(chair_id_, other->chair_id_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CS_TabTiren::GetMetadata() const {
  protobuf_public_5fland_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_public_5fland_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CS_TabTiren

// optional int32 chair_id = 1;
bool CS_TabTiren::has_chair_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CS_TabTiren::set_has_chair_id() {
  _has_bits_[0] |= 0x00000001u;
}
void CS_TabTiren::clear_has_chair_id() {
  _has_bits_[0] &= ~0x00000001u;
}
void CS_TabTiren::clear_chair_id() {
  chair_id_ = 0;
  clear_has_chair_id();
}
::google::protobuf::int32 CS_TabTiren::chair_id() const {
  // @@protoc_insertion_point(field_get:CS_TabTiren.chair_id)
  return chair_id_;
}
void CS_TabTiren::set_chair_id(::google::protobuf::int32 value) {
  set_has_chair_id();
  chair_id_ = value;
  // @@protoc_insertion_point(field_set:CS_TabTiren.chair_id)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CS_TabVote::kBretFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CS_TabVote::CS_TabVote()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_public_5fland_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:CS_TabVote)
}
CS_TabVote::CS_TabVote(const CS_TabVote& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  bret_ = from.bret_;
  // @@protoc_insertion_point(copy_constructor:CS_TabVote)
}

void CS_TabVote::SharedCtor() {
  _cached_size_ = 0;
  bret_ = false;
}

CS_TabVote::~CS_TabVote() {
  // @@protoc_insertion_point(destructor:CS_TabVote)
  SharedDtor();
}

void CS_TabVote::SharedDtor() {
}

void CS_TabVote::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CS_TabVote::descriptor() {
  protobuf_public_5fland_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_public_5fland_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CS_TabVote& CS_TabVote::default_instance() {
  protobuf_public_5fland_2eproto::InitDefaults();
  return *internal_default_instance();
}

CS_TabVote* CS_TabVote::New(::google::protobuf::Arena* arena) const {
  CS_TabVote* n = new CS_TabVote;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CS_TabVote::Clear() {
// @@protoc_insertion_point(message_clear_start:CS_TabVote)
  bret_ = false;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CS_TabVote::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CS_TabVote)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bool bret = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_bret();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &bret_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CS_TabVote)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CS_TabVote)
  return false;
#undef DO_
}

void CS_TabVote::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CS_TabVote)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required bool bret = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->bret(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CS_TabVote)
}

::google::protobuf::uint8* CS_TabVote::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CS_TabVote)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required bool bret = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->bret(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CS_TabVote)
  return target;
}

size_t CS_TabVote::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CS_TabVote)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // required bool bret = 1;
  if (has_bret()) {
    total_size += 1 + 1;
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CS_TabVote::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CS_TabVote)
  GOOGLE_DCHECK_NE(&from, this);
  const CS_TabVote* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CS_TabVote>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CS_TabVote)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CS_TabVote)
    MergeFrom(*source);
  }
}

void CS_TabVote::MergeFrom(const CS_TabVote& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CS_TabVote)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_bret()) {
    set_bret(from.bret());
  }
}

void CS_TabVote::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CS_TabVote)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CS_TabVote::CopyFrom(const CS_TabVote& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CS_TabVote)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CS_TabVote::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  return true;
}

void CS_TabVote::Swap(CS_TabVote* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CS_TabVote::InternalSwap(CS_TabVote* other) {
  std::swap(bret_, other->bret_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CS_TabVote::GetMetadata() const {
  protobuf_public_5fland_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_public_5fland_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CS_TabVote

// required bool bret = 1;
bool CS_TabVote::has_bret() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CS_TabVote::set_has_bret() {
  _has_bits_[0] |= 0x00000001u;
}
void CS_TabVote::clear_has_bret() {
  _has_bits_[0] &= ~0x00000001u;
}
void CS_TabVote::clear_bret() {
  bret_ = false;
  clear_has_bret();
}
bool CS_TabVote::bret() const {
  // @@protoc_insertion_point(field_get:CS_TabVote.bret)
  return bret_;
}
void CS_TabVote::set_bret(bool value) {
  set_has_bret();
  bret_ = value;
  // @@protoc_insertion_point(field_set:CS_TabVote.bret)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SC_TabVoteInfo::kChairIdFieldNumber;
const int SC_TabVoteInfo::kBretFieldNumber;
const int SC_TabVoteInfo::kVoteChairidFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SC_TabVoteInfo::SC_TabVoteInfo()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_public_5fland_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:SC_TabVoteInfo)
}
SC_TabVoteInfo::SC_TabVoteInfo(const SC_TabVoteInfo& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&chair_id_, &from.chair_id_,
    reinterpret_cast<char*>(&vote_chairid_) -
    reinterpret_cast<char*>(&chair_id_) + sizeof(vote_chairid_));
  // @@protoc_insertion_point(copy_constructor:SC_TabVoteInfo)
}

void SC_TabVoteInfo::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&chair_id_, 0, reinterpret_cast<char*>(&vote_chairid_) -
    reinterpret_cast<char*>(&chair_id_) + sizeof(vote_chairid_));
}

SC_TabVoteInfo::~SC_TabVoteInfo() {
  // @@protoc_insertion_point(destructor:SC_TabVoteInfo)
  SharedDtor();
}

void SC_TabVoteInfo::SharedDtor() {
}

void SC_TabVoteInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SC_TabVoteInfo::descriptor() {
  protobuf_public_5fland_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_public_5fland_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const SC_TabVoteInfo& SC_TabVoteInfo::default_instance() {
  protobuf_public_5fland_2eproto::InitDefaults();
  return *internal_default_instance();
}

SC_TabVoteInfo* SC_TabVoteInfo::New(::google::protobuf::Arena* arena) const {
  SC_TabVoteInfo* n = new SC_TabVoteInfo;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SC_TabVoteInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:SC_TabVoteInfo)
  if (_has_bits_[0 / 32] & 7u) {
    ::memset(&chair_id_, 0, reinterpret_cast<char*>(&vote_chairid_) -
      reinterpret_cast<char*>(&chair_id_) + sizeof(vote_chairid_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool SC_TabVoteInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:SC_TabVoteInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 chair_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_chair_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &chair_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required bool bret = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_bret();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &bret_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 vote_chairid = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {
          set_has_vote_chairid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &vote_chairid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:SC_TabVoteInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:SC_TabVoteInfo)
  return false;
#undef DO_
}

void SC_TabVoteInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:SC_TabVoteInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 chair_id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->chair_id(), output);
  }

  // required bool bret = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->bret(), output);
  }

  // required int32 vote_chairid = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->vote_chairid(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:SC_TabVoteInfo)
}

::google::protobuf::uint8* SC_TabVoteInfo::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:SC_TabVoteInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 chair_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->chair_id(), target);
  }

  // required bool bret = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->bret(), target);
  }

  // required int32 vote_chairid = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->vote_chairid(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SC_TabVoteInfo)
  return target;
}

size_t SC_TabVoteInfo::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:SC_TabVoteInfo)
  size_t total_size = 0;

  if (has_bret()) {
    // required bool bret = 2;
    total_size += 1 + 1;
  }

  if (has_vote_chairid()) {
    // required int32 vote_chairid = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->vote_chairid());
  }

  return total_size;
}
size_t SC_TabVoteInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SC_TabVoteInfo)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000006) ^ 0x00000006) == 0) {  // All required fields are present.
    // required bool bret = 2;
    total_size += 1 + 1;

    // required int32 vote_chairid = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->vote_chairid());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  // optional int32 chair_id = 1;
  if (has_chair_id()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->chair_id());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SC_TabVoteInfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:SC_TabVoteInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const SC_TabVoteInfo* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SC_TabVoteInfo>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:SC_TabVoteInfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:SC_TabVoteInfo)
    MergeFrom(*source);
  }
}

void SC_TabVoteInfo::MergeFrom(const SC_TabVoteInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:SC_TabVoteInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      chair_id_ = from.chair_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      bret_ = from.bret_;
    }
    if (cached_has_bits & 0x00000004u) {
      vote_chairid_ = from.vote_chairid_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void SC_TabVoteInfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:SC_TabVoteInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SC_TabVoteInfo::CopyFrom(const SC_TabVoteInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SC_TabVoteInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SC_TabVoteInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000006) != 0x00000006) return false;
  return true;
}

void SC_TabVoteInfo::Swap(SC_TabVoteInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SC_TabVoteInfo::InternalSwap(SC_TabVoteInfo* other) {
  std::swap(chair_id_, other->chair_id_);
  std::swap(bret_, other->bret_);
  std::swap(vote_chairid_, other->vote_chairid_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SC_TabVoteInfo::GetMetadata() const {
  protobuf_public_5fland_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_public_5fland_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SC_TabVoteInfo

// optional int32 chair_id = 1;
bool SC_TabVoteInfo::has_chair_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void SC_TabVoteInfo::set_has_chair_id() {
  _has_bits_[0] |= 0x00000001u;
}
void SC_TabVoteInfo::clear_has_chair_id() {
  _has_bits_[0] &= ~0x00000001u;
}
void SC_TabVoteInfo::clear_chair_id() {
  chair_id_ = 0;
  clear_has_chair_id();
}
::google::protobuf::int32 SC_TabVoteInfo::chair_id() const {
  // @@protoc_insertion_point(field_get:SC_TabVoteInfo.chair_id)
  return chair_id_;
}
void SC_TabVoteInfo::set_chair_id(::google::protobuf::int32 value) {
  set_has_chair_id();
  chair_id_ = value;
  // @@protoc_insertion_point(field_set:SC_TabVoteInfo.chair_id)
}

// required bool bret = 2;
bool SC_TabVoteInfo::has_bret() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void SC_TabVoteInfo::set_has_bret() {
  _has_bits_[0] |= 0x00000002u;
}
void SC_TabVoteInfo::clear_has_bret() {
  _has_bits_[0] &= ~0x00000002u;
}
void SC_TabVoteInfo::clear_bret() {
  bret_ = false;
  clear_has_bret();
}
bool SC_TabVoteInfo::bret() const {
  // @@protoc_insertion_point(field_get:SC_TabVoteInfo.bret)
  return bret_;
}
void SC_TabVoteInfo::set_bret(bool value) {
  set_has_bret();
  bret_ = value;
  // @@protoc_insertion_point(field_set:SC_TabVoteInfo.bret)
}

// required int32 vote_chairid = 3;
bool SC_TabVoteInfo::has_vote_chairid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void SC_TabVoteInfo::set_has_vote_chairid() {
  _has_bits_[0] |= 0x00000004u;
}
void SC_TabVoteInfo::clear_has_vote_chairid() {
  _has_bits_[0] &= ~0x00000004u;
}
void SC_TabVoteInfo::clear_vote_chairid() {
  vote_chairid_ = 0;
  clear_has_vote_chairid();
}
::google::protobuf::int32 SC_TabVoteInfo::vote_chairid() const {
  // @@protoc_insertion_point(field_get:SC_TabVoteInfo.vote_chairid)
  return vote_chairid_;
}
void SC_TabVoteInfo::set_vote_chairid(::google::protobuf::int32 value) {
  set_has_vote_chairid();
  vote_chairid_ = value;
  // @@protoc_insertion_point(field_set:SC_TabVoteInfo.vote_chairid)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SC_TotalScoreInfo::kTotoalscoreFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SC_TotalScoreInfo::SC_TotalScoreInfo()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_public_5fland_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:SC_TotalScoreInfo)
}
SC_TotalScoreInfo::SC_TotalScoreInfo(const SC_TotalScoreInfo& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      totoalscore_(from.totoalscore_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:SC_TotalScoreInfo)
}

void SC_TotalScoreInfo::SharedCtor() {
  _cached_size_ = 0;
}

SC_TotalScoreInfo::~SC_TotalScoreInfo() {
  // @@protoc_insertion_point(destructor:SC_TotalScoreInfo)
  SharedDtor();
}

void SC_TotalScoreInfo::SharedDtor() {
}

void SC_TotalScoreInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SC_TotalScoreInfo::descriptor() {
  protobuf_public_5fland_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_public_5fland_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const SC_TotalScoreInfo& SC_TotalScoreInfo::default_instance() {
  protobuf_public_5fland_2eproto::InitDefaults();
  return *internal_default_instance();
}

SC_TotalScoreInfo* SC_TotalScoreInfo::New(::google::protobuf::Arena* arena) const {
  SC_TotalScoreInfo* n = new SC_TotalScoreInfo;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SC_TotalScoreInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:SC_TotalScoreInfo)
  totoalscore_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool SC_TotalScoreInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:SC_TotalScoreInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated int32 totoalscore = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 8u, input, this->mutable_totoalscore())));
        } else if (static_cast< ::google::protobuf::uint8>(tag) ==
                   static_cast< ::google::protobuf::uint8>(10u)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_totoalscore())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:SC_TotalScoreInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:SC_TotalScoreInfo)
  return false;
#undef DO_
}

void SC_TotalScoreInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:SC_TotalScoreInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated int32 totoalscore = 1;
  for (int i = 0, n = this->totoalscore_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      1, this->totoalscore(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:SC_TotalScoreInfo)
}

::google::protobuf::uint8* SC_TotalScoreInfo::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:SC_TotalScoreInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated int32 totoalscore = 1;
  target = ::google::protobuf::internal::WireFormatLite::
    WriteInt32ToArray(1, this->totoalscore_, target);

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SC_TotalScoreInfo)
  return target;
}

size_t SC_TotalScoreInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SC_TotalScoreInfo)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // repeated int32 totoalscore = 1;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      Int32Size(this->totoalscore_);
    total_size += 1 *
                  ::google::protobuf::internal::FromIntSize(this->totoalscore_size());
    total_size += data_size;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SC_TotalScoreInfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:SC_TotalScoreInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const SC_TotalScoreInfo* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SC_TotalScoreInfo>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:SC_TotalScoreInfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:SC_TotalScoreInfo)
    MergeFrom(*source);
  }
}

void SC_TotalScoreInfo::MergeFrom(const SC_TotalScoreInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:SC_TotalScoreInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  totoalscore_.MergeFrom(from.totoalscore_);
}

void SC_TotalScoreInfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:SC_TotalScoreInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SC_TotalScoreInfo::CopyFrom(const SC_TotalScoreInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SC_TotalScoreInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SC_TotalScoreInfo::IsInitialized() const {
  return true;
}

void SC_TotalScoreInfo::Swap(SC_TotalScoreInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SC_TotalScoreInfo::InternalSwap(SC_TotalScoreInfo* other) {
  totoalscore_.InternalSwap(&other->totoalscore_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SC_TotalScoreInfo::GetMetadata() const {
  protobuf_public_5fland_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_public_5fland_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SC_TotalScoreInfo

// repeated int32 totoalscore = 1;
int SC_TotalScoreInfo::totoalscore_size() const {
  return totoalscore_.size();
}
void SC_TotalScoreInfo::clear_totoalscore() {
  totoalscore_.Clear();
}
::google::protobuf::int32 SC_TotalScoreInfo::totoalscore(int index) const {
  // @@protoc_insertion_point(field_get:SC_TotalScoreInfo.totoalscore)
  return totoalscore_.Get(index);
}
void SC_TotalScoreInfo::set_totoalscore(int index, ::google::protobuf::int32 value) {
  totoalscore_.Set(index, value);
  // @@protoc_insertion_point(field_set:SC_TotalScoreInfo.totoalscore)
}
void SC_TotalScoreInfo::add_totoalscore(::google::protobuf::int32 value) {
  totoalscore_.Add(value);
  // @@protoc_insertion_point(field_add:SC_TotalScoreInfo.totoalscore)
}
const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
SC_TotalScoreInfo::totoalscore() const {
  // @@protoc_insertion_point(field_list:SC_TotalScoreInfo.totoalscore)
  return totoalscore_;
}
::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
SC_TotalScoreInfo::mutable_totoalscore() {
  // @@protoc_insertion_point(field_mutable_list:SC_TotalScoreInfo.totoalscore)
  return &totoalscore_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CS_GetTabVoteArray::CS_GetTabVoteArray()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_public_5fland_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:CS_GetTabVoteArray)
}
CS_GetTabVoteArray::CS_GetTabVoteArray(const CS_GetTabVoteArray& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:CS_GetTabVoteArray)
}

void CS_GetTabVoteArray::SharedCtor() {
  _cached_size_ = 0;
}

CS_GetTabVoteArray::~CS_GetTabVoteArray() {
  // @@protoc_insertion_point(destructor:CS_GetTabVoteArray)
  SharedDtor();
}

void CS_GetTabVoteArray::SharedDtor() {
}

void CS_GetTabVoteArray::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CS_GetTabVoteArray::descriptor() {
  protobuf_public_5fland_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_public_5fland_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CS_GetTabVoteArray& CS_GetTabVoteArray::default_instance() {
  protobuf_public_5fland_2eproto::InitDefaults();
  return *internal_default_instance();
}

CS_GetTabVoteArray* CS_GetTabVoteArray::New(::google::protobuf::Arena* arena) const {
  CS_GetTabVoteArray* n = new CS_GetTabVoteArray;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CS_GetTabVoteArray::Clear() {
// @@protoc_insertion_point(message_clear_start:CS_GetTabVoteArray)
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CS_GetTabVoteArray::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CS_GetTabVoteArray)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:CS_GetTabVoteArray)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CS_GetTabVoteArray)
  return false;
#undef DO_
}

void CS_GetTabVoteArray::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CS_GetTabVoteArray)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CS_GetTabVoteArray)
}

::google::protobuf::uint8* CS_GetTabVoteArray::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CS_GetTabVoteArray)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CS_GetTabVoteArray)
  return target;
}

size_t CS_GetTabVoteArray::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CS_GetTabVoteArray)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CS_GetTabVoteArray::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CS_GetTabVoteArray)
  GOOGLE_DCHECK_NE(&from, this);
  const CS_GetTabVoteArray* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CS_GetTabVoteArray>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CS_GetTabVoteArray)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CS_GetTabVoteArray)
    MergeFrom(*source);
  }
}

void CS_GetTabVoteArray::MergeFrom(const CS_GetTabVoteArray& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CS_GetTabVoteArray)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void CS_GetTabVoteArray::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CS_GetTabVoteArray)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CS_GetTabVoteArray::CopyFrom(const CS_GetTabVoteArray& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CS_GetTabVoteArray)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CS_GetTabVoteArray::IsInitialized() const {
  return true;
}

void CS_GetTabVoteArray::Swap(CS_GetTabVoteArray* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CS_GetTabVoteArray::InternalSwap(CS_GetTabVoteArray* other) {
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CS_GetTabVoteArray::GetMetadata() const {
  protobuf_public_5fland_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_public_5fland_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CS_GetTabVoteArray

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SC_TabVoteArray::kPbSctableinfoFieldNumber;
const int SC_TabVoteArray::kVotechairidFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SC_TabVoteArray::SC_TabVoteArray()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_public_5fland_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:SC_TabVoteArray)
}
SC_TabVoteArray::SC_TabVoteArray(const SC_TabVoteArray& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      pb_sctableinfo_(from.pb_sctableinfo_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  votechairid_ = from.votechairid_;
  // @@protoc_insertion_point(copy_constructor:SC_TabVoteArray)
}

void SC_TabVoteArray::SharedCtor() {
  _cached_size_ = 0;
  votechairid_ = 0;
}

SC_TabVoteArray::~SC_TabVoteArray() {
  // @@protoc_insertion_point(destructor:SC_TabVoteArray)
  SharedDtor();
}

void SC_TabVoteArray::SharedDtor() {
}

void SC_TabVoteArray::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SC_TabVoteArray::descriptor() {
  protobuf_public_5fland_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_public_5fland_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const SC_TabVoteArray& SC_TabVoteArray::default_instance() {
  protobuf_public_5fland_2eproto::InitDefaults();
  return *internal_default_instance();
}

SC_TabVoteArray* SC_TabVoteArray::New(::google::protobuf::Arena* arena) const {
  SC_TabVoteArray* n = new SC_TabVoteArray;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SC_TabVoteArray::Clear() {
// @@protoc_insertion_point(message_clear_start:SC_TabVoteArray)
  pb_sctableinfo_.Clear();
  votechairid_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool SC_TabVoteArray::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:SC_TabVoteArray)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .SC_TabVoteInfo pb_sctableinfo = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_pb_sctableinfo()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 votechairid = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_votechairid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &votechairid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:SC_TabVoteArray)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:SC_TabVoteArray)
  return false;
#undef DO_
}

void SC_TabVoteArray::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:SC_TabVoteArray)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .SC_TabVoteInfo pb_sctableinfo = 1;
  for (unsigned int i = 0, n = this->pb_sctableinfo_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->pb_sctableinfo(i), output);
  }

  cached_has_bits = _has_bits_[0];
  // optional int32 votechairid = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->votechairid(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:SC_TabVoteArray)
}

::google::protobuf::uint8* SC_TabVoteArray::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:SC_TabVoteArray)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .SC_TabVoteInfo pb_sctableinfo = 1;
  for (unsigned int i = 0, n = this->pb_sctableinfo_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, this->pb_sctableinfo(i), deterministic, target);
  }

  cached_has_bits = _has_bits_[0];
  // optional int32 votechairid = 2;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->votechairid(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SC_TabVoteArray)
  return target;
}

size_t SC_TabVoteArray::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SC_TabVoteArray)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // repeated .SC_TabVoteInfo pb_sctableinfo = 1;
  {
    unsigned int count = this->pb_sctableinfo_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->pb_sctableinfo(i));
    }
  }

  // optional int32 votechairid = 2;
  if (has_votechairid()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->votechairid());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SC_TabVoteArray::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:SC_TabVoteArray)
  GOOGLE_DCHECK_NE(&from, this);
  const SC_TabVoteArray* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SC_TabVoteArray>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:SC_TabVoteArray)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:SC_TabVoteArray)
    MergeFrom(*source);
  }
}

void SC_TabVoteArray::MergeFrom(const SC_TabVoteArray& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:SC_TabVoteArray)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  pb_sctableinfo_.MergeFrom(from.pb_sctableinfo_);
  if (from.has_votechairid()) {
    set_votechairid(from.votechairid());
  }
}

void SC_TabVoteArray::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:SC_TabVoteArray)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SC_TabVoteArray::CopyFrom(const SC_TabVoteArray& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SC_TabVoteArray)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SC_TabVoteArray::IsInitialized() const {
  if (!::google::protobuf::internal::AllAreInitialized(this->pb_sctableinfo())) return false;
  return true;
}

void SC_TabVoteArray::Swap(SC_TabVoteArray* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SC_TabVoteArray::InternalSwap(SC_TabVoteArray* other) {
  pb_sctableinfo_.InternalSwap(&other->pb_sctableinfo_);
  std::swap(votechairid_, other->votechairid_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SC_TabVoteArray::GetMetadata() const {
  protobuf_public_5fland_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_public_5fland_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SC_TabVoteArray

// repeated .SC_TabVoteInfo pb_sctableinfo = 1;
int SC_TabVoteArray::pb_sctableinfo_size() const {
  return pb_sctableinfo_.size();
}
void SC_TabVoteArray::clear_pb_sctableinfo() {
  pb_sctableinfo_.Clear();
}
const ::SC_TabVoteInfo& SC_TabVoteArray::pb_sctableinfo(int index) const {
  // @@protoc_insertion_point(field_get:SC_TabVoteArray.pb_sctableinfo)
  return pb_sctableinfo_.Get(index);
}
::SC_TabVoteInfo* SC_TabVoteArray::mutable_pb_sctableinfo(int index) {
  // @@protoc_insertion_point(field_mutable:SC_TabVoteArray.pb_sctableinfo)
  return pb_sctableinfo_.Mutable(index);
}
::SC_TabVoteInfo* SC_TabVoteArray::add_pb_sctableinfo() {
  // @@protoc_insertion_point(field_add:SC_TabVoteArray.pb_sctableinfo)
  return pb_sctableinfo_.Add();
}
::google::protobuf::RepeatedPtrField< ::SC_TabVoteInfo >*
SC_TabVoteArray::mutable_pb_sctableinfo() {
  // @@protoc_insertion_point(field_mutable_list:SC_TabVoteArray.pb_sctableinfo)
  return &pb_sctableinfo_;
}
const ::google::protobuf::RepeatedPtrField< ::SC_TabVoteInfo >&
SC_TabVoteArray::pb_sctableinfo() const {
  // @@protoc_insertion_point(field_list:SC_TabVoteArray.pb_sctableinfo)
  return pb_sctableinfo_;
}

// optional int32 votechairid = 2;
bool SC_TabVoteArray::has_votechairid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void SC_TabVoteArray::set_has_votechairid() {
  _has_bits_[0] |= 0x00000001u;
}
void SC_TabVoteArray::clear_has_votechairid() {
  _has_bits_[0] &= ~0x00000001u;
}
void SC_TabVoteArray::clear_votechairid() {
  votechairid_ = 0;
  clear_has_votechairid();
}
::google::protobuf::int32 SC_TabVoteArray::votechairid() const {
  // @@protoc_insertion_point(field_get:SC_TabVoteArray.votechairid)
  return votechairid_;
}
void SC_TabVoteArray::set_votechairid(::google::protobuf::int32 value) {
  set_has_votechairid();
  votechairid_ = value;
  // @@protoc_insertion_point(field_set:SC_TabVoteArray.votechairid)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SC_TickNotify::kTickchairidFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SC_TickNotify::SC_TickNotify()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_public_5fland_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:SC_TickNotify)
}
SC_TickNotify::SC_TickNotify(const SC_TickNotify& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  tickchairid_ = from.tickchairid_;
  // @@protoc_insertion_point(copy_constructor:SC_TickNotify)
}

void SC_TickNotify::SharedCtor() {
  _cached_size_ = 0;
  tickchairid_ = 0;
}

SC_TickNotify::~SC_TickNotify() {
  // @@protoc_insertion_point(destructor:SC_TickNotify)
  SharedDtor();
}

void SC_TickNotify::SharedDtor() {
}

void SC_TickNotify::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SC_TickNotify::descriptor() {
  protobuf_public_5fland_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_public_5fland_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const SC_TickNotify& SC_TickNotify::default_instance() {
  protobuf_public_5fland_2eproto::InitDefaults();
  return *internal_default_instance();
}

SC_TickNotify* SC_TickNotify::New(::google::protobuf::Arena* arena) const {
  SC_TickNotify* n = new SC_TickNotify;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SC_TickNotify::Clear() {
// @@protoc_insertion_point(message_clear_start:SC_TickNotify)
  tickchairid_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool SC_TickNotify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:SC_TickNotify)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 tickchairid = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_tickchairid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &tickchairid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:SC_TickNotify)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:SC_TickNotify)
  return false;
#undef DO_
}

void SC_TickNotify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:SC_TickNotify)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 tickchairid = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->tickchairid(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:SC_TickNotify)
}

::google::protobuf::uint8* SC_TickNotify::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:SC_TickNotify)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 tickchairid = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->tickchairid(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SC_TickNotify)
  return target;
}

size_t SC_TickNotify::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SC_TickNotify)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // optional int32 tickchairid = 1;
  if (has_tickchairid()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->tickchairid());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SC_TickNotify::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:SC_TickNotify)
  GOOGLE_DCHECK_NE(&from, this);
  const SC_TickNotify* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SC_TickNotify>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:SC_TickNotify)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:SC_TickNotify)
    MergeFrom(*source);
  }
}

void SC_TickNotify::MergeFrom(const SC_TickNotify& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:SC_TickNotify)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_tickchairid()) {
    set_tickchairid(from.tickchairid());
  }
}

void SC_TickNotify::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:SC_TickNotify)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SC_TickNotify::CopyFrom(const SC_TickNotify& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SC_TickNotify)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SC_TickNotify::IsInitialized() const {
  return true;
}

void SC_TickNotify::Swap(SC_TickNotify* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SC_TickNotify::InternalSwap(SC_TickNotify* other) {
  std::swap(tickchairid_, other->tickchairid_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SC_TickNotify::GetMetadata() const {
  protobuf_public_5fland_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_public_5fland_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SC_TickNotify

// optional int32 tickchairid = 1;
bool SC_TickNotify::has_tickchairid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void SC_TickNotify::set_has_tickchairid() {
  _has_bits_[0] |= 0x00000001u;
}
void SC_TickNotify::clear_has_tickchairid() {
  _has_bits_[0] &= ~0x00000001u;
}
void SC_TickNotify::clear_tickchairid() {
  tickchairid_ = 0;
  clear_has_tickchairid();
}
::google::protobuf::int32 SC_TickNotify::tickchairid() const {
  // @@protoc_insertion_point(field_get:SC_TickNotify.tickchairid)
  return tickchairid_;
}
void SC_TickNotify::set_tickchairid(::google::protobuf::int32 value) {
  set_has_tickchairid();
  tickchairid_ = value;
  // @@protoc_insertion_point(field_set:SC_TickNotify.tickchairid)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SC_Dismiss::kGuidFieldNumber;
const int SC_Dismiss::kChairIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SC_Dismiss::SC_Dismiss()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_public_5fland_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:SC_Dismiss)
}
SC_Dismiss::SC_Dismiss(const SC_Dismiss& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&guid_, &from.guid_,
    reinterpret_cast<char*>(&chair_id_) -
    reinterpret_cast<char*>(&guid_) + sizeof(chair_id_));
  // @@protoc_insertion_point(copy_constructor:SC_Dismiss)
}

void SC_Dismiss::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&guid_, 0, reinterpret_cast<char*>(&chair_id_) -
    reinterpret_cast<char*>(&guid_) + sizeof(chair_id_));
}

SC_Dismiss::~SC_Dismiss() {
  // @@protoc_insertion_point(destructor:SC_Dismiss)
  SharedDtor();
}

void SC_Dismiss::SharedDtor() {
}

void SC_Dismiss::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SC_Dismiss::descriptor() {
  protobuf_public_5fland_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_public_5fland_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const SC_Dismiss& SC_Dismiss::default_instance() {
  protobuf_public_5fland_2eproto::InitDefaults();
  return *internal_default_instance();
}

SC_Dismiss* SC_Dismiss::New(::google::protobuf::Arena* arena) const {
  SC_Dismiss* n = new SC_Dismiss;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SC_Dismiss::Clear() {
// @@protoc_insertion_point(message_clear_start:SC_Dismiss)
  if (_has_bits_[0 / 32] & 3u) {
    ::memset(&guid_, 0, reinterpret_cast<char*>(&chair_id_) -
      reinterpret_cast<char*>(&guid_) + sizeof(chair_id_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool SC_Dismiss::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:SC_Dismiss)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 guid = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_guid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &guid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 chair_id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_chair_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &chair_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:SC_Dismiss)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:SC_Dismiss)
  return false;
#undef DO_
}

void SC_Dismiss::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:SC_Dismiss)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 guid = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->guid(), output);
  }

  // optional int32 chair_id = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->chair_id(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:SC_Dismiss)
}

::google::protobuf::uint8* SC_Dismiss::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:SC_Dismiss)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 guid = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->guid(), target);
  }

  // optional int32 chair_id = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->chair_id(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SC_Dismiss)
  return target;
}

size_t SC_Dismiss::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SC_Dismiss)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 3u) {
    // optional int32 guid = 1;
    if (has_guid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->guid());
    }

    // optional int32 chair_id = 2;
    if (has_chair_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->chair_id());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SC_Dismiss::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:SC_Dismiss)
  GOOGLE_DCHECK_NE(&from, this);
  const SC_Dismiss* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SC_Dismiss>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:SC_Dismiss)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:SC_Dismiss)
    MergeFrom(*source);
  }
}

void SC_Dismiss::MergeFrom(const SC_Dismiss& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:SC_Dismiss)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      guid_ = from.guid_;
    }
    if (cached_has_bits & 0x00000002u) {
      chair_id_ = from.chair_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void SC_Dismiss::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:SC_Dismiss)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SC_Dismiss::CopyFrom(const SC_Dismiss& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SC_Dismiss)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SC_Dismiss::IsInitialized() const {
  return true;
}

void SC_Dismiss::Swap(SC_Dismiss* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SC_Dismiss::InternalSwap(SC_Dismiss* other) {
  std::swap(guid_, other->guid_);
  std::swap(chair_id_, other->chair_id_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SC_Dismiss::GetMetadata() const {
  protobuf_public_5fland_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_public_5fland_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SC_Dismiss

// optional int32 guid = 1;
bool SC_Dismiss::has_guid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void SC_Dismiss::set_has_guid() {
  _has_bits_[0] |= 0x00000001u;
}
void SC_Dismiss::clear_has_guid() {
  _has_bits_[0] &= ~0x00000001u;
}
void SC_Dismiss::clear_guid() {
  guid_ = 0;
  clear_has_guid();
}
::google::protobuf::int32 SC_Dismiss::guid() const {
  // @@protoc_insertion_point(field_get:SC_Dismiss.guid)
  return guid_;
}
void SC_Dismiss::set_guid(::google::protobuf::int32 value) {
  set_has_guid();
  guid_ = value;
  // @@protoc_insertion_point(field_set:SC_Dismiss.guid)
}

// optional int32 chair_id = 2;
bool SC_Dismiss::has_chair_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void SC_Dismiss::set_has_chair_id() {
  _has_bits_[0] |= 0x00000002u;
}
void SC_Dismiss::clear_has_chair_id() {
  _has_bits_[0] &= ~0x00000002u;
}
void SC_Dismiss::clear_chair_id() {
  chair_id_ = 0;
  clear_has_chair_id();
}
::google::protobuf::int32 SC_Dismiss::chair_id() const {
  // @@protoc_insertion_point(field_get:SC_Dismiss.chair_id)
  return chair_id_;
}
void SC_Dismiss::set_chair_id(::google::protobuf::int32 value) {
  set_has_chair_id();
  chair_id_ = value;
  // @@protoc_insertion_point(field_set:SC_Dismiss.chair_id)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SC_RecconectReady::SC_RecconectReady()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_public_5fland_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:SC_RecconectReady)
}
SC_RecconectReady::SC_RecconectReady(const SC_RecconectReady& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:SC_RecconectReady)
}

void SC_RecconectReady::SharedCtor() {
  _cached_size_ = 0;
}

SC_RecconectReady::~SC_RecconectReady() {
  // @@protoc_insertion_point(destructor:SC_RecconectReady)
  SharedDtor();
}

void SC_RecconectReady::SharedDtor() {
}

void SC_RecconectReady::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SC_RecconectReady::descriptor() {
  protobuf_public_5fland_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_public_5fland_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const SC_RecconectReady& SC_RecconectReady::default_instance() {
  protobuf_public_5fland_2eproto::InitDefaults();
  return *internal_default_instance();
}

SC_RecconectReady* SC_RecconectReady::New(::google::protobuf::Arena* arena) const {
  SC_RecconectReady* n = new SC_RecconectReady;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SC_RecconectReady::Clear() {
// @@protoc_insertion_point(message_clear_start:SC_RecconectReady)
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool SC_RecconectReady::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:SC_RecconectReady)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:SC_RecconectReady)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:SC_RecconectReady)
  return false;
#undef DO_
}

void SC_RecconectReady::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:SC_RecconectReady)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:SC_RecconectReady)
}

::google::protobuf::uint8* SC_RecconectReady::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:SC_RecconectReady)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SC_RecconectReady)
  return target;
}

size_t SC_RecconectReady::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SC_RecconectReady)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SC_RecconectReady::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:SC_RecconectReady)
  GOOGLE_DCHECK_NE(&from, this);
  const SC_RecconectReady* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SC_RecconectReady>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:SC_RecconectReady)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:SC_RecconectReady)
    MergeFrom(*source);
  }
}

void SC_RecconectReady::MergeFrom(const SC_RecconectReady& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:SC_RecconectReady)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void SC_RecconectReady::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:SC_RecconectReady)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SC_RecconectReady::CopyFrom(const SC_RecconectReady& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SC_RecconectReady)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SC_RecconectReady::IsInitialized() const {
  return true;
}

void SC_RecconectReady::Swap(SC_RecconectReady* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SC_RecconectReady::InternalSwap(SC_RecconectReady* other) {
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SC_RecconectReady::GetMetadata() const {
  protobuf_public_5fland_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_public_5fland_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SC_RecconectReady

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)
