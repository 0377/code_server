// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: public_fishing.proto

#ifndef PROTOBUF_public_5ffishing_2eproto__INCLUDED
#define PROTOBUF_public_5ffishing_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3003000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3003000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
class CS_ChangeCannon;
class CS_ChangeCannonDefaultTypeInternal;
extern CS_ChangeCannonDefaultTypeInternal _CS_ChangeCannon_default_instance_;
class CS_ChangeCannonSet;
class CS_ChangeCannonSetDefaultTypeInternal;
extern CS_ChangeCannonSetDefaultTypeInternal _CS_ChangeCannonSet_default_instance_;
class CS_ChangeScore;
class CS_ChangeScoreDefaultTypeInternal;
extern CS_ChangeScoreDefaultTypeInternal _CS_ChangeScore_default_instance_;
class CS_Fire;
class CS_FireDefaultTypeInternal;
extern CS_FireDefaultTypeInternal _CS_Fire_default_instance_;
class CS_LockFish;
class CS_LockFishDefaultTypeInternal;
extern CS_LockFishDefaultTypeInternal _CS_LockFish_default_instance_;
class CS_LockSpecFish;
class CS_LockSpecFishDefaultTypeInternal;
extern CS_LockSpecFishDefaultTypeInternal _CS_LockSpecFish_default_instance_;
class CS_Netcast;
class CS_NetcastDefaultTypeInternal;
extern CS_NetcastDefaultTypeInternal _CS_Netcast_default_instance_;
class CS_TimeSync;
class CS_TimeSyncDefaultTypeInternal;
extern CS_TimeSyncDefaultTypeInternal _CS_TimeSync_default_instance_;
class CS_TreasureEnd;
class CS_TreasureEndDefaultTypeInternal;
extern CS_TreasureEndDefaultTypeInternal _CS_TreasureEnd_default_instance_;
class SC_AddBuffer;
class SC_AddBufferDefaultTypeInternal;
extern SC_AddBufferDefaultTypeInternal _SC_AddBuffer_default_instance_;
class SC_AllowFire;
class SC_AllowFireDefaultTypeInternal;
extern SC_AllowFireDefaultTypeInternal _SC_AllowFire_default_instance_;
class SC_BulletSet;
class SC_BulletSetDefaultTypeInternal;
extern SC_BulletSetDefaultTypeInternal _SC_BulletSet_default_instance_;
class SC_BulletSet_List;
class SC_BulletSet_ListDefaultTypeInternal;
extern SC_BulletSet_ListDefaultTypeInternal _SC_BulletSet_List_default_instance_;
class SC_CannonSet;
class SC_CannonSetDefaultTypeInternal;
extern SC_CannonSetDefaultTypeInternal _SC_CannonSet_default_instance_;
class SC_ChangeScore;
class SC_ChangeScoreDefaultTypeInternal;
extern SC_ChangeScoreDefaultTypeInternal _SC_ChangeScore_default_instance_;
class SC_FishMul;
class SC_FishMulDefaultTypeInternal;
extern SC_FishMulDefaultTypeInternal _SC_FishMul_default_instance_;
class SC_Fly_Bullet_List;
class SC_Fly_Bullet_ListDefaultTypeInternal;
extern SC_Fly_Bullet_ListDefaultTypeInternal _SC_Fly_Bullet_List_default_instance_;
class SC_GameConfig;
class SC_GameConfigDefaultTypeInternal;
extern SC_GameConfigDefaultTypeInternal _SC_GameConfig_default_instance_;
class SC_KillBullet;
class SC_KillBulletDefaultTypeInternal;
extern SC_KillBulletDefaultTypeInternal _SC_KillBullet_default_instance_;
class SC_KillFish;
class SC_KillFishDefaultTypeInternal;
extern SC_KillFishDefaultTypeInternal _SC_KillFish_default_instance_;
class SC_LockFish;
class SC_LockFishDefaultTypeInternal;
extern SC_LockFishDefaultTypeInternal _SC_LockFish_default_instance_;
class SC_SendBullet;
class SC_SendBulletDefaultTypeInternal;
extern SC_SendBulletDefaultTypeInternal _SC_SendBullet_default_instance_;
class SC_SendDes;
class SC_SendDesDefaultTypeInternal;
extern SC_SendDesDefaultTypeInternal _SC_SendDes_default_instance_;
class SC_SendFish;
class SC_SendFishDefaultTypeInternal;
extern SC_SendFishDefaultTypeInternal _SC_SendFish_default_instance_;
class SC_SendFishList;
class SC_SendFishListDefaultTypeInternal;
extern SC_SendFishListDefaultTypeInternal _SC_SendFishList_default_instance_;
class SC_SwitchScene;
class SC_SwitchSceneDefaultTypeInternal;
extern SC_SwitchSceneDefaultTypeInternal _SC_SwitchScene_default_instance_;
class SC_SystemMessage;
class SC_SystemMessageDefaultTypeInternal;
extern SC_SystemMessageDefaultTypeInternal _SC_SystemMessage_default_instance_;
class SC_TimeSync;
class SC_TimeSyncDefaultTypeInternal;
extern SC_TimeSyncDefaultTypeInternal _SC_TimeSync_default_instance_;
class SC_UserInfo;
class SC_UserInfoDefaultTypeInternal;
extern SC_UserInfoDefaultTypeInternal _SC_UserInfo_default_instance_;

namespace protobuf_public_5ffishing_2eproto {
// Internal implementation detail -- do not call these.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[];
  static const ::google::protobuf::uint32 offsets[];
  static void InitDefaultsImpl();
  static void Shutdown();
};
void AddDescriptors();
void InitDefaults();
}  // namespace protobuf_public_5ffishing_2eproto

enum CS_TreasureEnd_MsgID {
  CS_TreasureEnd_MsgID_ID = 12000,
  CS_TreasureEnd_MsgID_Target = 2
};
bool CS_TreasureEnd_MsgID_IsValid(int value);
const CS_TreasureEnd_MsgID CS_TreasureEnd_MsgID_MsgID_MIN = CS_TreasureEnd_MsgID_Target;
const CS_TreasureEnd_MsgID CS_TreasureEnd_MsgID_MsgID_MAX = CS_TreasureEnd_MsgID_ID;
const int CS_TreasureEnd_MsgID_MsgID_ARRAYSIZE = CS_TreasureEnd_MsgID_MsgID_MAX + 1;

const ::google::protobuf::EnumDescriptor* CS_TreasureEnd_MsgID_descriptor();
inline const ::std::string& CS_TreasureEnd_MsgID_Name(CS_TreasureEnd_MsgID value) {
  return ::google::protobuf::internal::NameOfEnum(
    CS_TreasureEnd_MsgID_descriptor(), value);
}
inline bool CS_TreasureEnd_MsgID_Parse(
    const ::std::string& name, CS_TreasureEnd_MsgID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<CS_TreasureEnd_MsgID>(
    CS_TreasureEnd_MsgID_descriptor(), name, value);
}
enum CS_ChangeCannonSet_MsgID {
  CS_ChangeCannonSet_MsgID_ID = 12001,
  CS_ChangeCannonSet_MsgID_Target = 2
};
bool CS_ChangeCannonSet_MsgID_IsValid(int value);
const CS_ChangeCannonSet_MsgID CS_ChangeCannonSet_MsgID_MsgID_MIN = CS_ChangeCannonSet_MsgID_Target;
const CS_ChangeCannonSet_MsgID CS_ChangeCannonSet_MsgID_MsgID_MAX = CS_ChangeCannonSet_MsgID_ID;
const int CS_ChangeCannonSet_MsgID_MsgID_ARRAYSIZE = CS_ChangeCannonSet_MsgID_MsgID_MAX + 1;

const ::google::protobuf::EnumDescriptor* CS_ChangeCannonSet_MsgID_descriptor();
inline const ::std::string& CS_ChangeCannonSet_MsgID_Name(CS_ChangeCannonSet_MsgID value) {
  return ::google::protobuf::internal::NameOfEnum(
    CS_ChangeCannonSet_MsgID_descriptor(), value);
}
inline bool CS_ChangeCannonSet_MsgID_Parse(
    const ::std::string& name, CS_ChangeCannonSet_MsgID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<CS_ChangeCannonSet_MsgID>(
    CS_ChangeCannonSet_MsgID_descriptor(), name, value);
}
enum CS_Netcast_MsgID {
  CS_Netcast_MsgID_ID = 12002,
  CS_Netcast_MsgID_Target = 2
};
bool CS_Netcast_MsgID_IsValid(int value);
const CS_Netcast_MsgID CS_Netcast_MsgID_MsgID_MIN = CS_Netcast_MsgID_Target;
const CS_Netcast_MsgID CS_Netcast_MsgID_MsgID_MAX = CS_Netcast_MsgID_ID;
const int CS_Netcast_MsgID_MsgID_ARRAYSIZE = CS_Netcast_MsgID_MsgID_MAX + 1;

const ::google::protobuf::EnumDescriptor* CS_Netcast_MsgID_descriptor();
inline const ::std::string& CS_Netcast_MsgID_Name(CS_Netcast_MsgID value) {
  return ::google::protobuf::internal::NameOfEnum(
    CS_Netcast_MsgID_descriptor(), value);
}
inline bool CS_Netcast_MsgID_Parse(
    const ::std::string& name, CS_Netcast_MsgID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<CS_Netcast_MsgID>(
    CS_Netcast_MsgID_descriptor(), name, value);
}
enum CS_LockFish_MsgID {
  CS_LockFish_MsgID_ID = 12003,
  CS_LockFish_MsgID_Target = 2
};
bool CS_LockFish_MsgID_IsValid(int value);
const CS_LockFish_MsgID CS_LockFish_MsgID_MsgID_MIN = CS_LockFish_MsgID_Target;
const CS_LockFish_MsgID CS_LockFish_MsgID_MsgID_MAX = CS_LockFish_MsgID_ID;
const int CS_LockFish_MsgID_MsgID_ARRAYSIZE = CS_LockFish_MsgID_MsgID_MAX + 1;

const ::google::protobuf::EnumDescriptor* CS_LockFish_MsgID_descriptor();
inline const ::std::string& CS_LockFish_MsgID_Name(CS_LockFish_MsgID value) {
  return ::google::protobuf::internal::NameOfEnum(
    CS_LockFish_MsgID_descriptor(), value);
}
inline bool CS_LockFish_MsgID_Parse(
    const ::std::string& name, CS_LockFish_MsgID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<CS_LockFish_MsgID>(
    CS_LockFish_MsgID_descriptor(), name, value);
}
enum CS_LockSpecFish_MsgID {
  CS_LockSpecFish_MsgID_ID = 12120
};
bool CS_LockSpecFish_MsgID_IsValid(int value);
const CS_LockSpecFish_MsgID CS_LockSpecFish_MsgID_MsgID_MIN = CS_LockSpecFish_MsgID_ID;
const CS_LockSpecFish_MsgID CS_LockSpecFish_MsgID_MsgID_MAX = CS_LockSpecFish_MsgID_ID;
const int CS_LockSpecFish_MsgID_MsgID_ARRAYSIZE = CS_LockSpecFish_MsgID_MsgID_MAX + 1;

const ::google::protobuf::EnumDescriptor* CS_LockSpecFish_MsgID_descriptor();
inline const ::std::string& CS_LockSpecFish_MsgID_Name(CS_LockSpecFish_MsgID value) {
  return ::google::protobuf::internal::NameOfEnum(
    CS_LockSpecFish_MsgID_descriptor(), value);
}
inline bool CS_LockSpecFish_MsgID_Parse(
    const ::std::string& name, CS_LockSpecFish_MsgID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<CS_LockSpecFish_MsgID>(
    CS_LockSpecFish_MsgID_descriptor(), name, value);
}
enum CS_Fire_MsgID {
  CS_Fire_MsgID_ID = 12004,
  CS_Fire_MsgID_Target = 2
};
bool CS_Fire_MsgID_IsValid(int value);
const CS_Fire_MsgID CS_Fire_MsgID_MsgID_MIN = CS_Fire_MsgID_Target;
const CS_Fire_MsgID CS_Fire_MsgID_MsgID_MAX = CS_Fire_MsgID_ID;
const int CS_Fire_MsgID_MsgID_ARRAYSIZE = CS_Fire_MsgID_MsgID_MAX + 1;

const ::google::protobuf::EnumDescriptor* CS_Fire_MsgID_descriptor();
inline const ::std::string& CS_Fire_MsgID_Name(CS_Fire_MsgID value) {
  return ::google::protobuf::internal::NameOfEnum(
    CS_Fire_MsgID_descriptor(), value);
}
inline bool CS_Fire_MsgID_Parse(
    const ::std::string& name, CS_Fire_MsgID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<CS_Fire_MsgID>(
    CS_Fire_MsgID_descriptor(), name, value);
}
enum CS_ChangeCannon_MsgID {
  CS_ChangeCannon_MsgID_ID = 12005,
  CS_ChangeCannon_MsgID_Target = 2
};
bool CS_ChangeCannon_MsgID_IsValid(int value);
const CS_ChangeCannon_MsgID CS_ChangeCannon_MsgID_MsgID_MIN = CS_ChangeCannon_MsgID_Target;
const CS_ChangeCannon_MsgID CS_ChangeCannon_MsgID_MsgID_MAX = CS_ChangeCannon_MsgID_ID;
const int CS_ChangeCannon_MsgID_MsgID_ARRAYSIZE = CS_ChangeCannon_MsgID_MsgID_MAX + 1;

const ::google::protobuf::EnumDescriptor* CS_ChangeCannon_MsgID_descriptor();
inline const ::std::string& CS_ChangeCannon_MsgID_Name(CS_ChangeCannon_MsgID value) {
  return ::google::protobuf::internal::NameOfEnum(
    CS_ChangeCannon_MsgID_descriptor(), value);
}
inline bool CS_ChangeCannon_MsgID_Parse(
    const ::std::string& name, CS_ChangeCannon_MsgID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<CS_ChangeCannon_MsgID>(
    CS_ChangeCannon_MsgID_descriptor(), name, value);
}
enum CS_ChangeScore_MsgID {
  CS_ChangeScore_MsgID_ID = 12006,
  CS_ChangeScore_MsgID_Target = 2
};
bool CS_ChangeScore_MsgID_IsValid(int value);
const CS_ChangeScore_MsgID CS_ChangeScore_MsgID_MsgID_MIN = CS_ChangeScore_MsgID_Target;
const CS_ChangeScore_MsgID CS_ChangeScore_MsgID_MsgID_MAX = CS_ChangeScore_MsgID_ID;
const int CS_ChangeScore_MsgID_MsgID_ARRAYSIZE = CS_ChangeScore_MsgID_MsgID_MAX + 1;

const ::google::protobuf::EnumDescriptor* CS_ChangeScore_MsgID_descriptor();
inline const ::std::string& CS_ChangeScore_MsgID_Name(CS_ChangeScore_MsgID value) {
  return ::google::protobuf::internal::NameOfEnum(
    CS_ChangeScore_MsgID_descriptor(), value);
}
inline bool CS_ChangeScore_MsgID_Parse(
    const ::std::string& name, CS_ChangeScore_MsgID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<CS_ChangeScore_MsgID>(
    CS_ChangeScore_MsgID_descriptor(), name, value);
}
enum CS_TimeSync_MsgID {
  CS_TimeSync_MsgID_ID = 12007,
  CS_TimeSync_MsgID_Target = 2
};
bool CS_TimeSync_MsgID_IsValid(int value);
const CS_TimeSync_MsgID CS_TimeSync_MsgID_MsgID_MIN = CS_TimeSync_MsgID_Target;
const CS_TimeSync_MsgID CS_TimeSync_MsgID_MsgID_MAX = CS_TimeSync_MsgID_ID;
const int CS_TimeSync_MsgID_MsgID_ARRAYSIZE = CS_TimeSync_MsgID_MsgID_MAX + 1;

const ::google::protobuf::EnumDescriptor* CS_TimeSync_MsgID_descriptor();
inline const ::std::string& CS_TimeSync_MsgID_Name(CS_TimeSync_MsgID value) {
  return ::google::protobuf::internal::NameOfEnum(
    CS_TimeSync_MsgID_descriptor(), value);
}
inline bool CS_TimeSync_MsgID_Parse(
    const ::std::string& name, CS_TimeSync_MsgID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<CS_TimeSync_MsgID>(
    CS_TimeSync_MsgID_descriptor(), name, value);
}
enum SC_FishMul_MsgID {
  SC_FishMul_MsgID_ID = 12100
};
bool SC_FishMul_MsgID_IsValid(int value);
const SC_FishMul_MsgID SC_FishMul_MsgID_MsgID_MIN = SC_FishMul_MsgID_ID;
const SC_FishMul_MsgID SC_FishMul_MsgID_MsgID_MAX = SC_FishMul_MsgID_ID;
const int SC_FishMul_MsgID_MsgID_ARRAYSIZE = SC_FishMul_MsgID_MsgID_MAX + 1;

const ::google::protobuf::EnumDescriptor* SC_FishMul_MsgID_descriptor();
inline const ::std::string& SC_FishMul_MsgID_Name(SC_FishMul_MsgID value) {
  return ::google::protobuf::internal::NameOfEnum(
    SC_FishMul_MsgID_descriptor(), value);
}
inline bool SC_FishMul_MsgID_Parse(
    const ::std::string& name, SC_FishMul_MsgID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<SC_FishMul_MsgID>(
    SC_FishMul_MsgID_descriptor(), name, value);
}
enum SC_AddBuffer_MsgID {
  SC_AddBuffer_MsgID_ID = 12102
};
bool SC_AddBuffer_MsgID_IsValid(int value);
const SC_AddBuffer_MsgID SC_AddBuffer_MsgID_MsgID_MIN = SC_AddBuffer_MsgID_ID;
const SC_AddBuffer_MsgID SC_AddBuffer_MsgID_MsgID_MAX = SC_AddBuffer_MsgID_ID;
const int SC_AddBuffer_MsgID_MsgID_ARRAYSIZE = SC_AddBuffer_MsgID_MsgID_MAX + 1;

const ::google::protobuf::EnumDescriptor* SC_AddBuffer_MsgID_descriptor();
inline const ::std::string& SC_AddBuffer_MsgID_Name(SC_AddBuffer_MsgID value) {
  return ::google::protobuf::internal::NameOfEnum(
    SC_AddBuffer_MsgID_descriptor(), value);
}
inline bool SC_AddBuffer_MsgID_Parse(
    const ::std::string& name, SC_AddBuffer_MsgID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<SC_AddBuffer_MsgID>(
    SC_AddBuffer_MsgID_descriptor(), name, value);
}
enum SC_BulletSet_MsgID {
  SC_BulletSet_MsgID_ID = 12103
};
bool SC_BulletSet_MsgID_IsValid(int value);
const SC_BulletSet_MsgID SC_BulletSet_MsgID_MsgID_MIN = SC_BulletSet_MsgID_ID;
const SC_BulletSet_MsgID SC_BulletSet_MsgID_MsgID_MAX = SC_BulletSet_MsgID_ID;
const int SC_BulletSet_MsgID_MsgID_ARRAYSIZE = SC_BulletSet_MsgID_MsgID_MAX + 1;

const ::google::protobuf::EnumDescriptor* SC_BulletSet_MsgID_descriptor();
inline const ::std::string& SC_BulletSet_MsgID_Name(SC_BulletSet_MsgID value) {
  return ::google::protobuf::internal::NameOfEnum(
    SC_BulletSet_MsgID_descriptor(), value);
}
inline bool SC_BulletSet_MsgID_Parse(
    const ::std::string& name, SC_BulletSet_MsgID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<SC_BulletSet_MsgID>(
    SC_BulletSet_MsgID_descriptor(), name, value);
}
enum SC_BulletSet_List_MsgID {
  SC_BulletSet_List_MsgID_ID = 12121
};
bool SC_BulletSet_List_MsgID_IsValid(int value);
const SC_BulletSet_List_MsgID SC_BulletSet_List_MsgID_MsgID_MIN = SC_BulletSet_List_MsgID_ID;
const SC_BulletSet_List_MsgID SC_BulletSet_List_MsgID_MsgID_MAX = SC_BulletSet_List_MsgID_ID;
const int SC_BulletSet_List_MsgID_MsgID_ARRAYSIZE = SC_BulletSet_List_MsgID_MsgID_MAX + 1;

const ::google::protobuf::EnumDescriptor* SC_BulletSet_List_MsgID_descriptor();
inline const ::std::string& SC_BulletSet_List_MsgID_Name(SC_BulletSet_List_MsgID value) {
  return ::google::protobuf::internal::NameOfEnum(
    SC_BulletSet_List_MsgID_descriptor(), value);
}
inline bool SC_BulletSet_List_MsgID_Parse(
    const ::std::string& name, SC_BulletSet_List_MsgID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<SC_BulletSet_List_MsgID>(
    SC_BulletSet_List_MsgID_descriptor(), name, value);
}
enum SC_SendDes_MsgID {
  SC_SendDes_MsgID_ID = 12104
};
bool SC_SendDes_MsgID_IsValid(int value);
const SC_SendDes_MsgID SC_SendDes_MsgID_MsgID_MIN = SC_SendDes_MsgID_ID;
const SC_SendDes_MsgID SC_SendDes_MsgID_MsgID_MAX = SC_SendDes_MsgID_ID;
const int SC_SendDes_MsgID_MsgID_ARRAYSIZE = SC_SendDes_MsgID_MsgID_MAX + 1;

const ::google::protobuf::EnumDescriptor* SC_SendDes_MsgID_descriptor();
inline const ::std::string& SC_SendDes_MsgID_Name(SC_SendDes_MsgID value) {
  return ::google::protobuf::internal::NameOfEnum(
    SC_SendDes_MsgID_descriptor(), value);
}
inline bool SC_SendDes_MsgID_Parse(
    const ::std::string& name, SC_SendDes_MsgID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<SC_SendDes_MsgID>(
    SC_SendDes_MsgID_descriptor(), name, value);
}
enum SC_LockFish_MsgID {
  SC_LockFish_MsgID_ID = 12105
};
bool SC_LockFish_MsgID_IsValid(int value);
const SC_LockFish_MsgID SC_LockFish_MsgID_MsgID_MIN = SC_LockFish_MsgID_ID;
const SC_LockFish_MsgID SC_LockFish_MsgID_MsgID_MAX = SC_LockFish_MsgID_ID;
const int SC_LockFish_MsgID_MsgID_ARRAYSIZE = SC_LockFish_MsgID_MsgID_MAX + 1;

const ::google::protobuf::EnumDescriptor* SC_LockFish_MsgID_descriptor();
inline const ::std::string& SC_LockFish_MsgID_Name(SC_LockFish_MsgID value) {
  return ::google::protobuf::internal::NameOfEnum(
    SC_LockFish_MsgID_descriptor(), value);
}
inline bool SC_LockFish_MsgID_Parse(
    const ::std::string& name, SC_LockFish_MsgID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<SC_LockFish_MsgID>(
    SC_LockFish_MsgID_descriptor(), name, value);
}
enum SC_AllowFire_MsgID {
  SC_AllowFire_MsgID_ID = 12107
};
bool SC_AllowFire_MsgID_IsValid(int value);
const SC_AllowFire_MsgID SC_AllowFire_MsgID_MsgID_MIN = SC_AllowFire_MsgID_ID;
const SC_AllowFire_MsgID SC_AllowFire_MsgID_MsgID_MAX = SC_AllowFire_MsgID_ID;
const int SC_AllowFire_MsgID_MsgID_ARRAYSIZE = SC_AllowFire_MsgID_MsgID_MAX + 1;

const ::google::protobuf::EnumDescriptor* SC_AllowFire_MsgID_descriptor();
inline const ::std::string& SC_AllowFire_MsgID_Name(SC_AllowFire_MsgID value) {
  return ::google::protobuf::internal::NameOfEnum(
    SC_AllowFire_MsgID_descriptor(), value);
}
inline bool SC_AllowFire_MsgID_Parse(
    const ::std::string& name, SC_AllowFire_MsgID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<SC_AllowFire_MsgID>(
    SC_AllowFire_MsgID_descriptor(), name, value);
}
enum SC_SwitchScene_MsgID {
  SC_SwitchScene_MsgID_ID = 12108
};
bool SC_SwitchScene_MsgID_IsValid(int value);
const SC_SwitchScene_MsgID SC_SwitchScene_MsgID_MsgID_MIN = SC_SwitchScene_MsgID_ID;
const SC_SwitchScene_MsgID SC_SwitchScene_MsgID_MsgID_MAX = SC_SwitchScene_MsgID_ID;
const int SC_SwitchScene_MsgID_MsgID_ARRAYSIZE = SC_SwitchScene_MsgID_MsgID_MAX + 1;

const ::google::protobuf::EnumDescriptor* SC_SwitchScene_MsgID_descriptor();
inline const ::std::string& SC_SwitchScene_MsgID_Name(SC_SwitchScene_MsgID value) {
  return ::google::protobuf::internal::NameOfEnum(
    SC_SwitchScene_MsgID_descriptor(), value);
}
inline bool SC_SwitchScene_MsgID_Parse(
    const ::std::string& name, SC_SwitchScene_MsgID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<SC_SwitchScene_MsgID>(
    SC_SwitchScene_MsgID_descriptor(), name, value);
}
enum SC_KillBullet_MsgID {
  SC_KillBullet_MsgID_ID = 12109
};
bool SC_KillBullet_MsgID_IsValid(int value);
const SC_KillBullet_MsgID SC_KillBullet_MsgID_MsgID_MIN = SC_KillBullet_MsgID_ID;
const SC_KillBullet_MsgID SC_KillBullet_MsgID_MsgID_MAX = SC_KillBullet_MsgID_ID;
const int SC_KillBullet_MsgID_MsgID_ARRAYSIZE = SC_KillBullet_MsgID_MsgID_MAX + 1;

const ::google::protobuf::EnumDescriptor* SC_KillBullet_MsgID_descriptor();
inline const ::std::string& SC_KillBullet_MsgID_Name(SC_KillBullet_MsgID value) {
  return ::google::protobuf::internal::NameOfEnum(
    SC_KillBullet_MsgID_descriptor(), value);
}
inline bool SC_KillBullet_MsgID_Parse(
    const ::std::string& name, SC_KillBullet_MsgID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<SC_KillBullet_MsgID>(
    SC_KillBullet_MsgID_descriptor(), name, value);
}
enum SC_KillFish_MsgID {
  SC_KillFish_MsgID_ID = 12110
};
bool SC_KillFish_MsgID_IsValid(int value);
const SC_KillFish_MsgID SC_KillFish_MsgID_MsgID_MIN = SC_KillFish_MsgID_ID;
const SC_KillFish_MsgID SC_KillFish_MsgID_MsgID_MAX = SC_KillFish_MsgID_ID;
const int SC_KillFish_MsgID_MsgID_ARRAYSIZE = SC_KillFish_MsgID_MsgID_MAX + 1;

const ::google::protobuf::EnumDescriptor* SC_KillFish_MsgID_descriptor();
inline const ::std::string& SC_KillFish_MsgID_Name(SC_KillFish_MsgID value) {
  return ::google::protobuf::internal::NameOfEnum(
    SC_KillFish_MsgID_descriptor(), value);
}
inline bool SC_KillFish_MsgID_Parse(
    const ::std::string& name, SC_KillFish_MsgID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<SC_KillFish_MsgID>(
    SC_KillFish_MsgID_descriptor(), name, value);
}
enum SC_SendBullet_MsgID {
  SC_SendBullet_MsgID_ID = 12111
};
bool SC_SendBullet_MsgID_IsValid(int value);
const SC_SendBullet_MsgID SC_SendBullet_MsgID_MsgID_MIN = SC_SendBullet_MsgID_ID;
const SC_SendBullet_MsgID SC_SendBullet_MsgID_MsgID_MAX = SC_SendBullet_MsgID_ID;
const int SC_SendBullet_MsgID_MsgID_ARRAYSIZE = SC_SendBullet_MsgID_MsgID_MAX + 1;

const ::google::protobuf::EnumDescriptor* SC_SendBullet_MsgID_descriptor();
inline const ::std::string& SC_SendBullet_MsgID_Name(SC_SendBullet_MsgID value) {
  return ::google::protobuf::internal::NameOfEnum(
    SC_SendBullet_MsgID_descriptor(), value);
}
inline bool SC_SendBullet_MsgID_Parse(
    const ::std::string& name, SC_SendBullet_MsgID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<SC_SendBullet_MsgID>(
    SC_SendBullet_MsgID_descriptor(), name, value);
}
enum SC_Fly_Bullet_List_MsgID {
  SC_Fly_Bullet_List_MsgID_ID = 12122
};
bool SC_Fly_Bullet_List_MsgID_IsValid(int value);
const SC_Fly_Bullet_List_MsgID SC_Fly_Bullet_List_MsgID_MsgID_MIN = SC_Fly_Bullet_List_MsgID_ID;
const SC_Fly_Bullet_List_MsgID SC_Fly_Bullet_List_MsgID_MsgID_MAX = SC_Fly_Bullet_List_MsgID_ID;
const int SC_Fly_Bullet_List_MsgID_MsgID_ARRAYSIZE = SC_Fly_Bullet_List_MsgID_MsgID_MAX + 1;

const ::google::protobuf::EnumDescriptor* SC_Fly_Bullet_List_MsgID_descriptor();
inline const ::std::string& SC_Fly_Bullet_List_MsgID_Name(SC_Fly_Bullet_List_MsgID value) {
  return ::google::protobuf::internal::NameOfEnum(
    SC_Fly_Bullet_List_MsgID_descriptor(), value);
}
inline bool SC_Fly_Bullet_List_MsgID_Parse(
    const ::std::string& name, SC_Fly_Bullet_List_MsgID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<SC_Fly_Bullet_List_MsgID>(
    SC_Fly_Bullet_List_MsgID_descriptor(), name, value);
}
enum SC_CannonSet_MsgID {
  SC_CannonSet_MsgID_ID = 12112
};
bool SC_CannonSet_MsgID_IsValid(int value);
const SC_CannonSet_MsgID SC_CannonSet_MsgID_MsgID_MIN = SC_CannonSet_MsgID_ID;
const SC_CannonSet_MsgID SC_CannonSet_MsgID_MsgID_MAX = SC_CannonSet_MsgID_ID;
const int SC_CannonSet_MsgID_MsgID_ARRAYSIZE = SC_CannonSet_MsgID_MsgID_MAX + 1;

const ::google::protobuf::EnumDescriptor* SC_CannonSet_MsgID_descriptor();
inline const ::std::string& SC_CannonSet_MsgID_Name(SC_CannonSet_MsgID value) {
  return ::google::protobuf::internal::NameOfEnum(
    SC_CannonSet_MsgID_descriptor(), value);
}
inline bool SC_CannonSet_MsgID_Parse(
    const ::std::string& name, SC_CannonSet_MsgID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<SC_CannonSet_MsgID>(
    SC_CannonSet_MsgID_descriptor(), name, value);
}
enum SC_ChangeScore_MsgID {
  SC_ChangeScore_MsgID_ID = 12113
};
bool SC_ChangeScore_MsgID_IsValid(int value);
const SC_ChangeScore_MsgID SC_ChangeScore_MsgID_MsgID_MIN = SC_ChangeScore_MsgID_ID;
const SC_ChangeScore_MsgID SC_ChangeScore_MsgID_MsgID_MAX = SC_ChangeScore_MsgID_ID;
const int SC_ChangeScore_MsgID_MsgID_ARRAYSIZE = SC_ChangeScore_MsgID_MsgID_MAX + 1;

const ::google::protobuf::EnumDescriptor* SC_ChangeScore_MsgID_descriptor();
inline const ::std::string& SC_ChangeScore_MsgID_Name(SC_ChangeScore_MsgID value) {
  return ::google::protobuf::internal::NameOfEnum(
    SC_ChangeScore_MsgID_descriptor(), value);
}
inline bool SC_ChangeScore_MsgID_Parse(
    const ::std::string& name, SC_ChangeScore_MsgID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<SC_ChangeScore_MsgID>(
    SC_ChangeScore_MsgID_descriptor(), name, value);
}
enum SC_UserInfo_MsgID {
  SC_UserInfo_MsgID_ID = 12114
};
bool SC_UserInfo_MsgID_IsValid(int value);
const SC_UserInfo_MsgID SC_UserInfo_MsgID_MsgID_MIN = SC_UserInfo_MsgID_ID;
const SC_UserInfo_MsgID SC_UserInfo_MsgID_MsgID_MAX = SC_UserInfo_MsgID_ID;
const int SC_UserInfo_MsgID_MsgID_ARRAYSIZE = SC_UserInfo_MsgID_MsgID_MAX + 1;

const ::google::protobuf::EnumDescriptor* SC_UserInfo_MsgID_descriptor();
inline const ::std::string& SC_UserInfo_MsgID_Name(SC_UserInfo_MsgID value) {
  return ::google::protobuf::internal::NameOfEnum(
    SC_UserInfo_MsgID_descriptor(), value);
}
inline bool SC_UserInfo_MsgID_Parse(
    const ::std::string& name, SC_UserInfo_MsgID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<SC_UserInfo_MsgID>(
    SC_UserInfo_MsgID_descriptor(), name, value);
}
enum SC_SendFish_MsgID {
  SC_SendFish_MsgID_ID = 12115
};
bool SC_SendFish_MsgID_IsValid(int value);
const SC_SendFish_MsgID SC_SendFish_MsgID_MsgID_MIN = SC_SendFish_MsgID_ID;
const SC_SendFish_MsgID SC_SendFish_MsgID_MsgID_MAX = SC_SendFish_MsgID_ID;
const int SC_SendFish_MsgID_MsgID_ARRAYSIZE = SC_SendFish_MsgID_MsgID_MAX + 1;

const ::google::protobuf::EnumDescriptor* SC_SendFish_MsgID_descriptor();
inline const ::std::string& SC_SendFish_MsgID_Name(SC_SendFish_MsgID value) {
  return ::google::protobuf::internal::NameOfEnum(
    SC_SendFish_MsgID_descriptor(), value);
}
inline bool SC_SendFish_MsgID_Parse(
    const ::std::string& name, SC_SendFish_MsgID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<SC_SendFish_MsgID>(
    SC_SendFish_MsgID_descriptor(), name, value);
}
enum SC_SendFishList_MsgID {
  SC_SendFishList_MsgID_ID = 12116
};
bool SC_SendFishList_MsgID_IsValid(int value);
const SC_SendFishList_MsgID SC_SendFishList_MsgID_MsgID_MIN = SC_SendFishList_MsgID_ID;
const SC_SendFishList_MsgID SC_SendFishList_MsgID_MsgID_MAX = SC_SendFishList_MsgID_ID;
const int SC_SendFishList_MsgID_MsgID_ARRAYSIZE = SC_SendFishList_MsgID_MsgID_MAX + 1;

const ::google::protobuf::EnumDescriptor* SC_SendFishList_MsgID_descriptor();
inline const ::std::string& SC_SendFishList_MsgID_Name(SC_SendFishList_MsgID value) {
  return ::google::protobuf::internal::NameOfEnum(
    SC_SendFishList_MsgID_descriptor(), value);
}
inline bool SC_SendFishList_MsgID_Parse(
    const ::std::string& name, SC_SendFishList_MsgID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<SC_SendFishList_MsgID>(
    SC_SendFishList_MsgID_descriptor(), name, value);
}
enum SC_GameConfig_MsgID {
  SC_GameConfig_MsgID_ID = 12117
};
bool SC_GameConfig_MsgID_IsValid(int value);
const SC_GameConfig_MsgID SC_GameConfig_MsgID_MsgID_MIN = SC_GameConfig_MsgID_ID;
const SC_GameConfig_MsgID SC_GameConfig_MsgID_MsgID_MAX = SC_GameConfig_MsgID_ID;
const int SC_GameConfig_MsgID_MsgID_ARRAYSIZE = SC_GameConfig_MsgID_MsgID_MAX + 1;

const ::google::protobuf::EnumDescriptor* SC_GameConfig_MsgID_descriptor();
inline const ::std::string& SC_GameConfig_MsgID_Name(SC_GameConfig_MsgID value) {
  return ::google::protobuf::internal::NameOfEnum(
    SC_GameConfig_MsgID_descriptor(), value);
}
inline bool SC_GameConfig_MsgID_Parse(
    const ::std::string& name, SC_GameConfig_MsgID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<SC_GameConfig_MsgID>(
    SC_GameConfig_MsgID_descriptor(), name, value);
}
enum SC_TimeSync_MsgID {
  SC_TimeSync_MsgID_ID = 12118
};
bool SC_TimeSync_MsgID_IsValid(int value);
const SC_TimeSync_MsgID SC_TimeSync_MsgID_MsgID_MIN = SC_TimeSync_MsgID_ID;
const SC_TimeSync_MsgID SC_TimeSync_MsgID_MsgID_MAX = SC_TimeSync_MsgID_ID;
const int SC_TimeSync_MsgID_MsgID_ARRAYSIZE = SC_TimeSync_MsgID_MsgID_MAX + 1;

const ::google::protobuf::EnumDescriptor* SC_TimeSync_MsgID_descriptor();
inline const ::std::string& SC_TimeSync_MsgID_Name(SC_TimeSync_MsgID value) {
  return ::google::protobuf::internal::NameOfEnum(
    SC_TimeSync_MsgID_descriptor(), value);
}
inline bool SC_TimeSync_MsgID_Parse(
    const ::std::string& name, SC_TimeSync_MsgID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<SC_TimeSync_MsgID>(
    SC_TimeSync_MsgID_descriptor(), name, value);
}
enum SC_SystemMessage_MsgID {
  SC_SystemMessage_MsgID_ID = 12119
};
bool SC_SystemMessage_MsgID_IsValid(int value);
const SC_SystemMessage_MsgID SC_SystemMessage_MsgID_MsgID_MIN = SC_SystemMessage_MsgID_ID;
const SC_SystemMessage_MsgID SC_SystemMessage_MsgID_MsgID_MAX = SC_SystemMessage_MsgID_ID;
const int SC_SystemMessage_MsgID_MsgID_ARRAYSIZE = SC_SystemMessage_MsgID_MsgID_MAX + 1;

const ::google::protobuf::EnumDescriptor* SC_SystemMessage_MsgID_descriptor();
inline const ::std::string& SC_SystemMessage_MsgID_Name(SC_SystemMessage_MsgID value) {
  return ::google::protobuf::internal::NameOfEnum(
    SC_SystemMessage_MsgID_descriptor(), value);
}
inline bool SC_SystemMessage_MsgID_Parse(
    const ::std::string& name, SC_SystemMessage_MsgID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<SC_SystemMessage_MsgID>(
    SC_SystemMessage_MsgID_descriptor(), name, value);
}
enum SMT_TYPE {
  SMT_CHAT = 1,
  SMT_EJECT = 2,
  SMT_GLOBAL = 4,
  SMT_PROMPT = 8,
  SMT_TABLE_ROLL = 16,
  SMT_SCORE = 32
};
bool SMT_TYPE_IsValid(int value);
const SMT_TYPE SMT_TYPE_MIN = SMT_CHAT;
const SMT_TYPE SMT_TYPE_MAX = SMT_SCORE;
const int SMT_TYPE_ARRAYSIZE = SMT_TYPE_MAX + 1;

const ::google::protobuf::EnumDescriptor* SMT_TYPE_descriptor();
inline const ::std::string& SMT_TYPE_Name(SMT_TYPE value) {
  return ::google::protobuf::internal::NameOfEnum(
    SMT_TYPE_descriptor(), value);
}
inline bool SMT_TYPE_Parse(
    const ::std::string& name, SMT_TYPE* value) {
  return ::google::protobuf::internal::ParseNamedEnum<SMT_TYPE>(
    SMT_TYPE_descriptor(), name, value);
}
// ===================================================================

class CS_TreasureEnd : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:CS_TreasureEnd) */ {
 public:
  CS_TreasureEnd();
  virtual ~CS_TreasureEnd();

  CS_TreasureEnd(const CS_TreasureEnd& from);

  inline CS_TreasureEnd& operator=(const CS_TreasureEnd& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CS_TreasureEnd& default_instance();

  static inline const CS_TreasureEnd* internal_default_instance() {
    return reinterpret_cast<const CS_TreasureEnd*>(
               &_CS_TreasureEnd_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    0;

  void Swap(CS_TreasureEnd* other);

  // implements Message ----------------------------------------------

  inline CS_TreasureEnd* New() const PROTOBUF_FINAL { return New(NULL); }

  CS_TreasureEnd* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const CS_TreasureEnd& from);
  void MergeFrom(const CS_TreasureEnd& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(CS_TreasureEnd* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  typedef CS_TreasureEnd_MsgID MsgID;
  static const MsgID ID =
    CS_TreasureEnd_MsgID_ID;
  static const MsgID Target =
    CS_TreasureEnd_MsgID_Target;
  static inline bool MsgID_IsValid(int value) {
    return CS_TreasureEnd_MsgID_IsValid(value);
  }
  static const MsgID MsgID_MIN =
    CS_TreasureEnd_MsgID_MsgID_MIN;
  static const MsgID MsgID_MAX =
    CS_TreasureEnd_MsgID_MsgID_MAX;
  static const int MsgID_ARRAYSIZE =
    CS_TreasureEnd_MsgID_MsgID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  MsgID_descriptor() {
    return CS_TreasureEnd_MsgID_descriptor();
  }
  static inline const ::std::string& MsgID_Name(MsgID value) {
    return CS_TreasureEnd_MsgID_Name(value);
  }
  static inline bool MsgID_Parse(const ::std::string& name,
      MsgID* value) {
    return CS_TreasureEnd_MsgID_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // required int64 score = 2;
  bool has_score() const;
  void clear_score();
  static const int kScoreFieldNumber = 2;
  ::google::protobuf::int64 score() const;
  void set_score(::google::protobuf::int64 value);

  // required int32 chair_id = 1;
  bool has_chair_id() const;
  void clear_chair_id();
  static const int kChairIdFieldNumber = 1;
  ::google::protobuf::int32 chair_id() const;
  void set_chair_id(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:CS_TreasureEnd)
 private:
  void set_has_chair_id();
  void clear_has_chair_id();
  void set_has_score();
  void clear_has_score();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::int64 score_;
  ::google::protobuf::int32 chair_id_;
  friend struct protobuf_public_5ffishing_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class CS_ChangeCannonSet : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:CS_ChangeCannonSet) */ {
 public:
  CS_ChangeCannonSet();
  virtual ~CS_ChangeCannonSet();

  CS_ChangeCannonSet(const CS_ChangeCannonSet& from);

  inline CS_ChangeCannonSet& operator=(const CS_ChangeCannonSet& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CS_ChangeCannonSet& default_instance();

  static inline const CS_ChangeCannonSet* internal_default_instance() {
    return reinterpret_cast<const CS_ChangeCannonSet*>(
               &_CS_ChangeCannonSet_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    1;

  void Swap(CS_ChangeCannonSet* other);

  // implements Message ----------------------------------------------

  inline CS_ChangeCannonSet* New() const PROTOBUF_FINAL { return New(NULL); }

  CS_ChangeCannonSet* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const CS_ChangeCannonSet& from);
  void MergeFrom(const CS_ChangeCannonSet& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(CS_ChangeCannonSet* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  typedef CS_ChangeCannonSet_MsgID MsgID;
  static const MsgID ID =
    CS_ChangeCannonSet_MsgID_ID;
  static const MsgID Target =
    CS_ChangeCannonSet_MsgID_Target;
  static inline bool MsgID_IsValid(int value) {
    return CS_ChangeCannonSet_MsgID_IsValid(value);
  }
  static const MsgID MsgID_MIN =
    CS_ChangeCannonSet_MsgID_MsgID_MIN;
  static const MsgID MsgID_MAX =
    CS_ChangeCannonSet_MsgID_MsgID_MAX;
  static const int MsgID_ARRAYSIZE =
    CS_ChangeCannonSet_MsgID_MsgID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  MsgID_descriptor() {
    return CS_ChangeCannonSet_MsgID_descriptor();
  }
  static inline const ::std::string& MsgID_Name(MsgID value) {
    return CS_ChangeCannonSet_MsgID_Name(value);
  }
  static inline bool MsgID_Parse(const ::std::string& name,
      MsgID* value) {
    return CS_ChangeCannonSet_MsgID_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // required int32 chair_id = 1;
  bool has_chair_id() const;
  void clear_chair_id();
  static const int kChairIdFieldNumber = 1;
  ::google::protobuf::int32 chair_id() const;
  void set_chair_id(::google::protobuf::int32 value);

  // required int32 add = 2;
  bool has_add() const;
  void clear_add();
  static const int kAddFieldNumber = 2;
  ::google::protobuf::int32 add() const;
  void set_add(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:CS_ChangeCannonSet)
 private:
  void set_has_chair_id();
  void clear_has_chair_id();
  void set_has_add();
  void clear_has_add();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::int32 chair_id_;
  ::google::protobuf::int32 add_;
  friend struct protobuf_public_5ffishing_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class CS_Netcast : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:CS_Netcast) */ {
 public:
  CS_Netcast();
  virtual ~CS_Netcast();

  CS_Netcast(const CS_Netcast& from);

  inline CS_Netcast& operator=(const CS_Netcast& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CS_Netcast& default_instance();

  static inline const CS_Netcast* internal_default_instance() {
    return reinterpret_cast<const CS_Netcast*>(
               &_CS_Netcast_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    2;

  void Swap(CS_Netcast* other);

  // implements Message ----------------------------------------------

  inline CS_Netcast* New() const PROTOBUF_FINAL { return New(NULL); }

  CS_Netcast* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const CS_Netcast& from);
  void MergeFrom(const CS_Netcast& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(CS_Netcast* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  typedef CS_Netcast_MsgID MsgID;
  static const MsgID ID =
    CS_Netcast_MsgID_ID;
  static const MsgID Target =
    CS_Netcast_MsgID_Target;
  static inline bool MsgID_IsValid(int value) {
    return CS_Netcast_MsgID_IsValid(value);
  }
  static const MsgID MsgID_MIN =
    CS_Netcast_MsgID_MsgID_MIN;
  static const MsgID MsgID_MAX =
    CS_Netcast_MsgID_MsgID_MAX;
  static const int MsgID_ARRAYSIZE =
    CS_Netcast_MsgID_MsgID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  MsgID_descriptor() {
    return CS_Netcast_MsgID_descriptor();
  }
  static inline const ::std::string& MsgID_Name(MsgID value) {
    return CS_Netcast_MsgID_Name(value);
  }
  static inline bool MsgID_Parse(const ::std::string& name,
      MsgID* value) {
    return CS_Netcast_MsgID_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // required int32 bullet_id = 1;
  bool has_bullet_id() const;
  void clear_bullet_id();
  static const int kBulletIdFieldNumber = 1;
  ::google::protobuf::int32 bullet_id() const;
  void set_bullet_id(::google::protobuf::int32 value);

  // required int32 data = 2;
  bool has_data() const;
  void clear_data();
  static const int kDataFieldNumber = 2;
  ::google::protobuf::int32 data() const;
  void set_data(::google::protobuf::int32 value);

  // required int32 fish_id = 3;
  bool has_fish_id() const;
  void clear_fish_id();
  static const int kFishIdFieldNumber = 3;
  ::google::protobuf::int32 fish_id() const;
  void set_fish_id(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:CS_Netcast)
 private:
  void set_has_bullet_id();
  void clear_has_bullet_id();
  void set_has_data();
  void clear_has_data();
  void set_has_fish_id();
  void clear_has_fish_id();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::int32 bullet_id_;
  ::google::protobuf::int32 data_;
  ::google::protobuf::int32 fish_id_;
  friend struct protobuf_public_5ffishing_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class CS_LockFish : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:CS_LockFish) */ {
 public:
  CS_LockFish();
  virtual ~CS_LockFish();

  CS_LockFish(const CS_LockFish& from);

  inline CS_LockFish& operator=(const CS_LockFish& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CS_LockFish& default_instance();

  static inline const CS_LockFish* internal_default_instance() {
    return reinterpret_cast<const CS_LockFish*>(
               &_CS_LockFish_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    3;

  void Swap(CS_LockFish* other);

  // implements Message ----------------------------------------------

  inline CS_LockFish* New() const PROTOBUF_FINAL { return New(NULL); }

  CS_LockFish* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const CS_LockFish& from);
  void MergeFrom(const CS_LockFish& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(CS_LockFish* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  typedef CS_LockFish_MsgID MsgID;
  static const MsgID ID =
    CS_LockFish_MsgID_ID;
  static const MsgID Target =
    CS_LockFish_MsgID_Target;
  static inline bool MsgID_IsValid(int value) {
    return CS_LockFish_MsgID_IsValid(value);
  }
  static const MsgID MsgID_MIN =
    CS_LockFish_MsgID_MsgID_MIN;
  static const MsgID MsgID_MAX =
    CS_LockFish_MsgID_MsgID_MAX;
  static const int MsgID_ARRAYSIZE =
    CS_LockFish_MsgID_MsgID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  MsgID_descriptor() {
    return CS_LockFish_MsgID_descriptor();
  }
  static inline const ::std::string& MsgID_Name(MsgID value) {
    return CS_LockFish_MsgID_Name(value);
  }
  static inline bool MsgID_Parse(const ::std::string& name,
      MsgID* value) {
    return CS_LockFish_MsgID_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // required int32 chair_id = 1;
  bool has_chair_id() const;
  void clear_chair_id();
  static const int kChairIdFieldNumber = 1;
  ::google::protobuf::int32 chair_id() const;
  void set_chair_id(::google::protobuf::int32 value);

  // required int32 lock = 2;
  bool has_lock() const;
  void clear_lock();
  static const int kLockFieldNumber = 2;
  ::google::protobuf::int32 lock() const;
  void set_lock(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:CS_LockFish)
 private:
  void set_has_chair_id();
  void clear_has_chair_id();
  void set_has_lock();
  void clear_has_lock();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::int32 chair_id_;
  ::google::protobuf::int32 lock_;
  friend struct protobuf_public_5ffishing_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class CS_LockSpecFish : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:CS_LockSpecFish) */ {
 public:
  CS_LockSpecFish();
  virtual ~CS_LockSpecFish();

  CS_LockSpecFish(const CS_LockSpecFish& from);

  inline CS_LockSpecFish& operator=(const CS_LockSpecFish& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CS_LockSpecFish& default_instance();

  static inline const CS_LockSpecFish* internal_default_instance() {
    return reinterpret_cast<const CS_LockSpecFish*>(
               &_CS_LockSpecFish_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    4;

  void Swap(CS_LockSpecFish* other);

  // implements Message ----------------------------------------------

  inline CS_LockSpecFish* New() const PROTOBUF_FINAL { return New(NULL); }

  CS_LockSpecFish* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const CS_LockSpecFish& from);
  void MergeFrom(const CS_LockSpecFish& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(CS_LockSpecFish* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  typedef CS_LockSpecFish_MsgID MsgID;
  static const MsgID ID =
    CS_LockSpecFish_MsgID_ID;
  static inline bool MsgID_IsValid(int value) {
    return CS_LockSpecFish_MsgID_IsValid(value);
  }
  static const MsgID MsgID_MIN =
    CS_LockSpecFish_MsgID_MsgID_MIN;
  static const MsgID MsgID_MAX =
    CS_LockSpecFish_MsgID_MsgID_MAX;
  static const int MsgID_ARRAYSIZE =
    CS_LockSpecFish_MsgID_MsgID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  MsgID_descriptor() {
    return CS_LockSpecFish_MsgID_descriptor();
  }
  static inline const ::std::string& MsgID_Name(MsgID value) {
    return CS_LockSpecFish_MsgID_Name(value);
  }
  static inline bool MsgID_Parse(const ::std::string& name,
      MsgID* value) {
    return CS_LockSpecFish_MsgID_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // required int32 chair_id = 1;
  bool has_chair_id() const;
  void clear_chair_id();
  static const int kChairIdFieldNumber = 1;
  ::google::protobuf::int32 chair_id() const;
  void set_chair_id(::google::protobuf::int32 value);

  // required int32 fish_id = 2;
  bool has_fish_id() const;
  void clear_fish_id();
  static const int kFishIdFieldNumber = 2;
  ::google::protobuf::int32 fish_id() const;
  void set_fish_id(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:CS_LockSpecFish)
 private:
  void set_has_chair_id();
  void clear_has_chair_id();
  void set_has_fish_id();
  void clear_has_fish_id();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::int32 chair_id_;
  ::google::protobuf::int32 fish_id_;
  friend struct protobuf_public_5ffishing_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class CS_Fire : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:CS_Fire) */ {
 public:
  CS_Fire();
  virtual ~CS_Fire();

  CS_Fire(const CS_Fire& from);

  inline CS_Fire& operator=(const CS_Fire& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CS_Fire& default_instance();

  static inline const CS_Fire* internal_default_instance() {
    return reinterpret_cast<const CS_Fire*>(
               &_CS_Fire_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    5;

  void Swap(CS_Fire* other);

  // implements Message ----------------------------------------------

  inline CS_Fire* New() const PROTOBUF_FINAL { return New(NULL); }

  CS_Fire* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const CS_Fire& from);
  void MergeFrom(const CS_Fire& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(CS_Fire* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  typedef CS_Fire_MsgID MsgID;
  static const MsgID ID =
    CS_Fire_MsgID_ID;
  static const MsgID Target =
    CS_Fire_MsgID_Target;
  static inline bool MsgID_IsValid(int value) {
    return CS_Fire_MsgID_IsValid(value);
  }
  static const MsgID MsgID_MIN =
    CS_Fire_MsgID_MsgID_MIN;
  static const MsgID MsgID_MAX =
    CS_Fire_MsgID_MsgID_MAX;
  static const int MsgID_ARRAYSIZE =
    CS_Fire_MsgID_MsgID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  MsgID_descriptor() {
    return CS_Fire_MsgID_descriptor();
  }
  static inline const ::std::string& MsgID_Name(MsgID value) {
    return CS_Fire_MsgID_Name(value);
  }
  static inline bool MsgID_Parse(const ::std::string& name,
      MsgID* value) {
    return CS_Fire_MsgID_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // required int32 chair_id = 1;
  bool has_chair_id() const;
  void clear_chair_id();
  static const int kChairIdFieldNumber = 1;
  ::google::protobuf::int32 chair_id() const;
  void set_chair_id(::google::protobuf::int32 value);

  // required float direction = 2;
  bool has_direction() const;
  void clear_direction();
  static const int kDirectionFieldNumber = 2;
  float direction() const;
  void set_direction(float value);

  // required uint32 fire_time = 3;
  bool has_fire_time() const;
  void clear_fire_time();
  static const int kFireTimeFieldNumber = 3;
  ::google::protobuf::uint32 fire_time() const;
  void set_fire_time(::google::protobuf::uint32 value);

  // required int32 client_id = 4;
  bool has_client_id() const;
  void clear_client_id();
  static const int kClientIdFieldNumber = 4;
  ::google::protobuf::int32 client_id() const;
  void set_client_id(::google::protobuf::int32 value);

  // required float pos_x = 5;
  bool has_pos_x() const;
  void clear_pos_x();
  static const int kPosXFieldNumber = 5;
  float pos_x() const;
  void set_pos_x(float value);

  // required float pos_y = 6;
  bool has_pos_y() const;
  void clear_pos_y();
  static const int kPosYFieldNumber = 6;
  float pos_y() const;
  void set_pos_y(float value);

  // @@protoc_insertion_point(class_scope:CS_Fire)
 private:
  void set_has_chair_id();
  void clear_has_chair_id();
  void set_has_direction();
  void clear_has_direction();
  void set_has_fire_time();
  void clear_has_fire_time();
  void set_has_client_id();
  void clear_has_client_id();
  void set_has_pos_x();
  void clear_has_pos_x();
  void set_has_pos_y();
  void clear_has_pos_y();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::int32 chair_id_;
  float direction_;
  ::google::protobuf::uint32 fire_time_;
  ::google::protobuf::int32 client_id_;
  float pos_x_;
  float pos_y_;
  friend struct protobuf_public_5ffishing_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class CS_ChangeCannon : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:CS_ChangeCannon) */ {
 public:
  CS_ChangeCannon();
  virtual ~CS_ChangeCannon();

  CS_ChangeCannon(const CS_ChangeCannon& from);

  inline CS_ChangeCannon& operator=(const CS_ChangeCannon& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CS_ChangeCannon& default_instance();

  static inline const CS_ChangeCannon* internal_default_instance() {
    return reinterpret_cast<const CS_ChangeCannon*>(
               &_CS_ChangeCannon_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    6;

  void Swap(CS_ChangeCannon* other);

  // implements Message ----------------------------------------------

  inline CS_ChangeCannon* New() const PROTOBUF_FINAL { return New(NULL); }

  CS_ChangeCannon* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const CS_ChangeCannon& from);
  void MergeFrom(const CS_ChangeCannon& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(CS_ChangeCannon* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  typedef CS_ChangeCannon_MsgID MsgID;
  static const MsgID ID =
    CS_ChangeCannon_MsgID_ID;
  static const MsgID Target =
    CS_ChangeCannon_MsgID_Target;
  static inline bool MsgID_IsValid(int value) {
    return CS_ChangeCannon_MsgID_IsValid(value);
  }
  static const MsgID MsgID_MIN =
    CS_ChangeCannon_MsgID_MsgID_MIN;
  static const MsgID MsgID_MAX =
    CS_ChangeCannon_MsgID_MsgID_MAX;
  static const int MsgID_ARRAYSIZE =
    CS_ChangeCannon_MsgID_MsgID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  MsgID_descriptor() {
    return CS_ChangeCannon_MsgID_descriptor();
  }
  static inline const ::std::string& MsgID_Name(MsgID value) {
    return CS_ChangeCannon_MsgID_Name(value);
  }
  static inline bool MsgID_Parse(const ::std::string& name,
      MsgID* value) {
    return CS_ChangeCannon_MsgID_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // required int32 chair_id = 1;
  bool has_chair_id() const;
  void clear_chair_id();
  static const int kChairIdFieldNumber = 1;
  ::google::protobuf::int32 chair_id() const;
  void set_chair_id(::google::protobuf::int32 value);

  // required int32 add = 2;
  bool has_add() const;
  void clear_add();
  static const int kAddFieldNumber = 2;
  ::google::protobuf::int32 add() const;
  void set_add(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:CS_ChangeCannon)
 private:
  void set_has_chair_id();
  void clear_has_chair_id();
  void set_has_add();
  void clear_has_add();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::int32 chair_id_;
  ::google::protobuf::int32 add_;
  friend struct protobuf_public_5ffishing_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class CS_ChangeScore : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:CS_ChangeScore) */ {
 public:
  CS_ChangeScore();
  virtual ~CS_ChangeScore();

  CS_ChangeScore(const CS_ChangeScore& from);

  inline CS_ChangeScore& operator=(const CS_ChangeScore& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CS_ChangeScore& default_instance();

  static inline const CS_ChangeScore* internal_default_instance() {
    return reinterpret_cast<const CS_ChangeScore*>(
               &_CS_ChangeScore_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    7;

  void Swap(CS_ChangeScore* other);

  // implements Message ----------------------------------------------

  inline CS_ChangeScore* New() const PROTOBUF_FINAL { return New(NULL); }

  CS_ChangeScore* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const CS_ChangeScore& from);
  void MergeFrom(const CS_ChangeScore& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(CS_ChangeScore* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  typedef CS_ChangeScore_MsgID MsgID;
  static const MsgID ID =
    CS_ChangeScore_MsgID_ID;
  static const MsgID Target =
    CS_ChangeScore_MsgID_Target;
  static inline bool MsgID_IsValid(int value) {
    return CS_ChangeScore_MsgID_IsValid(value);
  }
  static const MsgID MsgID_MIN =
    CS_ChangeScore_MsgID_MsgID_MIN;
  static const MsgID MsgID_MAX =
    CS_ChangeScore_MsgID_MsgID_MAX;
  static const int MsgID_ARRAYSIZE =
    CS_ChangeScore_MsgID_MsgID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  MsgID_descriptor() {
    return CS_ChangeScore_MsgID_descriptor();
  }
  static inline const ::std::string& MsgID_Name(MsgID value) {
    return CS_ChangeScore_MsgID_Name(value);
  }
  static inline bool MsgID_Parse(const ::std::string& name,
      MsgID* value) {
    return CS_ChangeScore_MsgID_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // required int32 chair_id = 1;
  bool has_chair_id() const;
  void clear_chair_id();
  static const int kChairIdFieldNumber = 1;
  ::google::protobuf::int32 chair_id() const;
  void set_chair_id(::google::protobuf::int32 value);

  // required int32 add = 2;
  bool has_add() const;
  void clear_add();
  static const int kAddFieldNumber = 2;
  ::google::protobuf::int32 add() const;
  void set_add(::google::protobuf::int32 value);

  // required int32 add_all = 3;
  bool has_add_all() const;
  void clear_add_all();
  static const int kAddAllFieldNumber = 3;
  ::google::protobuf::int32 add_all() const;
  void set_add_all(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:CS_ChangeScore)
 private:
  void set_has_chair_id();
  void clear_has_chair_id();
  void set_has_add();
  void clear_has_add();
  void set_has_add_all();
  void clear_has_add_all();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::int32 chair_id_;
  ::google::protobuf::int32 add_;
  ::google::protobuf::int32 add_all_;
  friend struct protobuf_public_5ffishing_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class CS_TimeSync : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:CS_TimeSync) */ {
 public:
  CS_TimeSync();
  virtual ~CS_TimeSync();

  CS_TimeSync(const CS_TimeSync& from);

  inline CS_TimeSync& operator=(const CS_TimeSync& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CS_TimeSync& default_instance();

  static inline const CS_TimeSync* internal_default_instance() {
    return reinterpret_cast<const CS_TimeSync*>(
               &_CS_TimeSync_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    8;

  void Swap(CS_TimeSync* other);

  // implements Message ----------------------------------------------

  inline CS_TimeSync* New() const PROTOBUF_FINAL { return New(NULL); }

  CS_TimeSync* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const CS_TimeSync& from);
  void MergeFrom(const CS_TimeSync& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(CS_TimeSync* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  typedef CS_TimeSync_MsgID MsgID;
  static const MsgID ID =
    CS_TimeSync_MsgID_ID;
  static const MsgID Target =
    CS_TimeSync_MsgID_Target;
  static inline bool MsgID_IsValid(int value) {
    return CS_TimeSync_MsgID_IsValid(value);
  }
  static const MsgID MsgID_MIN =
    CS_TimeSync_MsgID_MsgID_MIN;
  static const MsgID MsgID_MAX =
    CS_TimeSync_MsgID_MsgID_MAX;
  static const int MsgID_ARRAYSIZE =
    CS_TimeSync_MsgID_MsgID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  MsgID_descriptor() {
    return CS_TimeSync_MsgID_descriptor();
  }
  static inline const ::std::string& MsgID_Name(MsgID value) {
    return CS_TimeSync_MsgID_Name(value);
  }
  static inline bool MsgID_Parse(const ::std::string& name,
      MsgID* value) {
    return CS_TimeSync_MsgID_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // required int32 chair_id = 1;
  bool has_chair_id() const;
  void clear_chair_id();
  static const int kChairIdFieldNumber = 1;
  ::google::protobuf::int32 chair_id() const;
  void set_chair_id(::google::protobuf::int32 value);

  // required uint32 client_tick = 2;
  bool has_client_tick() const;
  void clear_client_tick();
  static const int kClientTickFieldNumber = 2;
  ::google::protobuf::uint32 client_tick() const;
  void set_client_tick(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:CS_TimeSync)
 private:
  void set_has_chair_id();
  void clear_has_chair_id();
  void set_has_client_tick();
  void clear_has_client_tick();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::int32 chair_id_;
  ::google::protobuf::uint32 client_tick_;
  friend struct protobuf_public_5ffishing_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class SC_FishMul : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:SC_FishMul) */ {
 public:
  SC_FishMul();
  virtual ~SC_FishMul();

  SC_FishMul(const SC_FishMul& from);

  inline SC_FishMul& operator=(const SC_FishMul& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SC_FishMul& default_instance();

  static inline const SC_FishMul* internal_default_instance() {
    return reinterpret_cast<const SC_FishMul*>(
               &_SC_FishMul_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    9;

  void Swap(SC_FishMul* other);

  // implements Message ----------------------------------------------

  inline SC_FishMul* New() const PROTOBUF_FINAL { return New(NULL); }

  SC_FishMul* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const SC_FishMul& from);
  void MergeFrom(const SC_FishMul& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(SC_FishMul* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  typedef SC_FishMul_MsgID MsgID;
  static const MsgID ID =
    SC_FishMul_MsgID_ID;
  static inline bool MsgID_IsValid(int value) {
    return SC_FishMul_MsgID_IsValid(value);
  }
  static const MsgID MsgID_MIN =
    SC_FishMul_MsgID_MsgID_MIN;
  static const MsgID MsgID_MAX =
    SC_FishMul_MsgID_MsgID_MAX;
  static const int MsgID_ARRAYSIZE =
    SC_FishMul_MsgID_MsgID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  MsgID_descriptor() {
    return SC_FishMul_MsgID_descriptor();
  }
  static inline const ::std::string& MsgID_Name(MsgID value) {
    return SC_FishMul_MsgID_Name(value);
  }
  static inline bool MsgID_Parse(const ::std::string& name,
      MsgID* value) {
    return SC_FishMul_MsgID_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // required int32 fish_id = 1;
  bool has_fish_id() const;
  void clear_fish_id();
  static const int kFishIdFieldNumber = 1;
  ::google::protobuf::int32 fish_id() const;
  void set_fish_id(::google::protobuf::int32 value);

  // required int32 mul = 2;
  bool has_mul() const;
  void clear_mul();
  static const int kMulFieldNumber = 2;
  ::google::protobuf::int32 mul() const;
  void set_mul(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:SC_FishMul)
 private:
  void set_has_fish_id();
  void clear_has_fish_id();
  void set_has_mul();
  void clear_has_mul();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::int32 fish_id_;
  ::google::protobuf::int32 mul_;
  friend struct protobuf_public_5ffishing_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class SC_AddBuffer : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:SC_AddBuffer) */ {
 public:
  SC_AddBuffer();
  virtual ~SC_AddBuffer();

  SC_AddBuffer(const SC_AddBuffer& from);

  inline SC_AddBuffer& operator=(const SC_AddBuffer& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SC_AddBuffer& default_instance();

  static inline const SC_AddBuffer* internal_default_instance() {
    return reinterpret_cast<const SC_AddBuffer*>(
               &_SC_AddBuffer_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    10;

  void Swap(SC_AddBuffer* other);

  // implements Message ----------------------------------------------

  inline SC_AddBuffer* New() const PROTOBUF_FINAL { return New(NULL); }

  SC_AddBuffer* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const SC_AddBuffer& from);
  void MergeFrom(const SC_AddBuffer& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(SC_AddBuffer* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  typedef SC_AddBuffer_MsgID MsgID;
  static const MsgID ID =
    SC_AddBuffer_MsgID_ID;
  static inline bool MsgID_IsValid(int value) {
    return SC_AddBuffer_MsgID_IsValid(value);
  }
  static const MsgID MsgID_MIN =
    SC_AddBuffer_MsgID_MsgID_MIN;
  static const MsgID MsgID_MAX =
    SC_AddBuffer_MsgID_MsgID_MAX;
  static const int MsgID_ARRAYSIZE =
    SC_AddBuffer_MsgID_MsgID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  MsgID_descriptor() {
    return SC_AddBuffer_MsgID_descriptor();
  }
  static inline const ::std::string& MsgID_Name(MsgID value) {
    return SC_AddBuffer_MsgID_Name(value);
  }
  static inline bool MsgID_Parse(const ::std::string& name,
      MsgID* value) {
    return SC_AddBuffer_MsgID_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // required int32 buffer_type = 1;
  bool has_buffer_type() const;
  void clear_buffer_type();
  static const int kBufferTypeFieldNumber = 1;
  ::google::protobuf::int32 buffer_type() const;
  void set_buffer_type(::google::protobuf::int32 value);

  // required float buffer_param = 2;
  bool has_buffer_param() const;
  void clear_buffer_param();
  static const int kBufferParamFieldNumber = 2;
  float buffer_param() const;
  void set_buffer_param(float value);

  // required float buffer_time = 3;
  bool has_buffer_time() const;
  void clear_buffer_time();
  static const int kBufferTimeFieldNumber = 3;
  float buffer_time() const;
  void set_buffer_time(float value);

  // @@protoc_insertion_point(class_scope:SC_AddBuffer)
 private:
  void set_has_buffer_type();
  void clear_has_buffer_type();
  void set_has_buffer_param();
  void clear_has_buffer_param();
  void set_has_buffer_time();
  void clear_has_buffer_time();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::int32 buffer_type_;
  float buffer_param_;
  float buffer_time_;
  friend struct protobuf_public_5ffishing_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class SC_BulletSet : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:SC_BulletSet) */ {
 public:
  SC_BulletSet();
  virtual ~SC_BulletSet();

  SC_BulletSet(const SC_BulletSet& from);

  inline SC_BulletSet& operator=(const SC_BulletSet& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SC_BulletSet& default_instance();

  static inline const SC_BulletSet* internal_default_instance() {
    return reinterpret_cast<const SC_BulletSet*>(
               &_SC_BulletSet_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    11;

  void Swap(SC_BulletSet* other);

  // implements Message ----------------------------------------------

  inline SC_BulletSet* New() const PROTOBUF_FINAL { return New(NULL); }

  SC_BulletSet* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const SC_BulletSet& from);
  void MergeFrom(const SC_BulletSet& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(SC_BulletSet* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  typedef SC_BulletSet_MsgID MsgID;
  static const MsgID ID =
    SC_BulletSet_MsgID_ID;
  static inline bool MsgID_IsValid(int value) {
    return SC_BulletSet_MsgID_IsValid(value);
  }
  static const MsgID MsgID_MIN =
    SC_BulletSet_MsgID_MsgID_MIN;
  static const MsgID MsgID_MAX =
    SC_BulletSet_MsgID_MsgID_MAX;
  static const int MsgID_ARRAYSIZE =
    SC_BulletSet_MsgID_MsgID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  MsgID_descriptor() {
    return SC_BulletSet_MsgID_descriptor();
  }
  static inline const ::std::string& MsgID_Name(MsgID value) {
    return SC_BulletSet_MsgID_Name(value);
  }
  static inline bool MsgID_Parse(const ::std::string& name,
      MsgID* value) {
    return SC_BulletSet_MsgID_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // required int32 mulriple = 1;
  bool has_mulriple() const;
  void clear_mulriple();
  static const int kMulripleFieldNumber = 1;
  ::google::protobuf::int32 mulriple() const;
  void set_mulriple(::google::protobuf::int32 value);

  // required int32 speed = 2;
  bool has_speed() const;
  void clear_speed();
  static const int kSpeedFieldNumber = 2;
  ::google::protobuf::int32 speed() const;
  void set_speed(::google::protobuf::int32 value);

  // required int32 max_catch = 3;
  bool has_max_catch() const;
  void clear_max_catch();
  static const int kMaxCatchFieldNumber = 3;
  ::google::protobuf::int32 max_catch() const;
  void set_max_catch(::google::protobuf::int32 value);

  // required int32 bullet_size = 4;
  bool has_bullet_size() const;
  void clear_bullet_size();
  static const int kBulletSizeFieldNumber = 4;
  ::google::protobuf::int32 bullet_size() const;
  void set_bullet_size(::google::protobuf::int32 value);

  // required int32 catch_radio = 5;
  bool has_catch_radio() const;
  void clear_catch_radio();
  static const int kCatchRadioFieldNumber = 5;
  ::google::protobuf::int32 catch_radio() const;
  void set_catch_radio(::google::protobuf::int32 value);

  // required int32 cannon_type = 6;
  bool has_cannon_type() const;
  void clear_cannon_type();
  static const int kCannonTypeFieldNumber = 6;
  ::google::protobuf::int32 cannon_type() const;
  void set_cannon_type(::google::protobuf::int32 value);

  // required int32 first = 7;
  bool has_first() const;
  void clear_first();
  static const int kFirstFieldNumber = 7;
  ::google::protobuf::int32 first() const;
  void set_first(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:SC_BulletSet)
 private:
  void set_has_mulriple();
  void clear_has_mulriple();
  void set_has_speed();
  void clear_has_speed();
  void set_has_max_catch();
  void clear_has_max_catch();
  void set_has_bullet_size();
  void clear_has_bullet_size();
  void set_has_catch_radio();
  void clear_has_catch_radio();
  void set_has_cannon_type();
  void clear_has_cannon_type();
  void set_has_first();
  void clear_has_first();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::int32 mulriple_;
  ::google::protobuf::int32 speed_;
  ::google::protobuf::int32 max_catch_;
  ::google::protobuf::int32 bullet_size_;
  ::google::protobuf::int32 catch_radio_;
  ::google::protobuf::int32 cannon_type_;
  ::google::protobuf::int32 first_;
  friend struct protobuf_public_5ffishing_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class SC_BulletSet_List : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:SC_BulletSet_List) */ {
 public:
  SC_BulletSet_List();
  virtual ~SC_BulletSet_List();

  SC_BulletSet_List(const SC_BulletSet_List& from);

  inline SC_BulletSet_List& operator=(const SC_BulletSet_List& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SC_BulletSet_List& default_instance();

  static inline const SC_BulletSet_List* internal_default_instance() {
    return reinterpret_cast<const SC_BulletSet_List*>(
               &_SC_BulletSet_List_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    12;

  void Swap(SC_BulletSet_List* other);

  // implements Message ----------------------------------------------

  inline SC_BulletSet_List* New() const PROTOBUF_FINAL { return New(NULL); }

  SC_BulletSet_List* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const SC_BulletSet_List& from);
  void MergeFrom(const SC_BulletSet_List& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(SC_BulletSet_List* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  typedef SC_BulletSet_List_MsgID MsgID;
  static const MsgID ID =
    SC_BulletSet_List_MsgID_ID;
  static inline bool MsgID_IsValid(int value) {
    return SC_BulletSet_List_MsgID_IsValid(value);
  }
  static const MsgID MsgID_MIN =
    SC_BulletSet_List_MsgID_MsgID_MIN;
  static const MsgID MsgID_MAX =
    SC_BulletSet_List_MsgID_MsgID_MAX;
  static const int MsgID_ARRAYSIZE =
    SC_BulletSet_List_MsgID_MsgID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  MsgID_descriptor() {
    return SC_BulletSet_List_MsgID_descriptor();
  }
  static inline const ::std::string& MsgID_Name(MsgID value) {
    return SC_BulletSet_List_MsgID_Name(value);
  }
  static inline bool MsgID_Parse(const ::std::string& name,
      MsgID* value) {
    return SC_BulletSet_List_MsgID_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // repeated .SC_BulletSet pb_bullets = 1;
  int pb_bullets_size() const;
  void clear_pb_bullets();
  static const int kPbBulletsFieldNumber = 1;
  const ::SC_BulletSet& pb_bullets(int index) const;
  ::SC_BulletSet* mutable_pb_bullets(int index);
  ::SC_BulletSet* add_pb_bullets();
  ::google::protobuf::RepeatedPtrField< ::SC_BulletSet >*
      mutable_pb_bullets();
  const ::google::protobuf::RepeatedPtrField< ::SC_BulletSet >&
      pb_bullets() const;

  // @@protoc_insertion_point(class_scope:SC_BulletSet_List)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::SC_BulletSet > pb_bullets_;
  friend struct protobuf_public_5ffishing_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class SC_SendDes : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:SC_SendDes) */ {
 public:
  SC_SendDes();
  virtual ~SC_SendDes();

  SC_SendDes(const SC_SendDes& from);

  inline SC_SendDes& operator=(const SC_SendDes& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SC_SendDes& default_instance();

  static inline const SC_SendDes* internal_default_instance() {
    return reinterpret_cast<const SC_SendDes*>(
               &_SC_SendDes_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    13;

  void Swap(SC_SendDes* other);

  // implements Message ----------------------------------------------

  inline SC_SendDes* New() const PROTOBUF_FINAL { return New(NULL); }

  SC_SendDes* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const SC_SendDes& from);
  void MergeFrom(const SC_SendDes& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(SC_SendDes* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  typedef SC_SendDes_MsgID MsgID;
  static const MsgID ID =
    SC_SendDes_MsgID_ID;
  static inline bool MsgID_IsValid(int value) {
    return SC_SendDes_MsgID_IsValid(value);
  }
  static const MsgID MsgID_MIN =
    SC_SendDes_MsgID_MsgID_MIN;
  static const MsgID MsgID_MAX =
    SC_SendDes_MsgID_MsgID_MAX;
  static const int MsgID_ARRAYSIZE =
    SC_SendDes_MsgID_MsgID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  MsgID_descriptor() {
    return SC_SendDes_MsgID_descriptor();
  }
  static inline const ::std::string& MsgID_Name(MsgID value) {
    return SC_SendDes_MsgID_Name(value);
  }
  static inline bool MsgID_Parse(const ::std::string& name,
      MsgID* value) {
    return SC_SendDes_MsgID_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // repeated string des = 1;
  int des_size() const;
  void clear_des();
  static const int kDesFieldNumber = 1;
  const ::std::string& des(int index) const;
  ::std::string* mutable_des(int index);
  void set_des(int index, const ::std::string& value);
  #if LANG_CXX11
  void set_des(int index, ::std::string&& value);
  #endif
  void set_des(int index, const char* value);
  void set_des(int index, const char* value, size_t size);
  ::std::string* add_des();
  void add_des(const ::std::string& value);
  #if LANG_CXX11
  void add_des(::std::string&& value);
  #endif
  void add_des(const char* value);
  void add_des(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& des() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_des();

  // @@protoc_insertion_point(class_scope:SC_SendDes)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::std::string> des_;
  friend struct protobuf_public_5ffishing_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class SC_LockFish : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:SC_LockFish) */ {
 public:
  SC_LockFish();
  virtual ~SC_LockFish();

  SC_LockFish(const SC_LockFish& from);

  inline SC_LockFish& operator=(const SC_LockFish& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SC_LockFish& default_instance();

  static inline const SC_LockFish* internal_default_instance() {
    return reinterpret_cast<const SC_LockFish*>(
               &_SC_LockFish_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    14;

  void Swap(SC_LockFish* other);

  // implements Message ----------------------------------------------

  inline SC_LockFish* New() const PROTOBUF_FINAL { return New(NULL); }

  SC_LockFish* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const SC_LockFish& from);
  void MergeFrom(const SC_LockFish& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(SC_LockFish* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  typedef SC_LockFish_MsgID MsgID;
  static const MsgID ID =
    SC_LockFish_MsgID_ID;
  static inline bool MsgID_IsValid(int value) {
    return SC_LockFish_MsgID_IsValid(value);
  }
  static const MsgID MsgID_MIN =
    SC_LockFish_MsgID_MsgID_MIN;
  static const MsgID MsgID_MAX =
    SC_LockFish_MsgID_MsgID_MAX;
  static const int MsgID_ARRAYSIZE =
    SC_LockFish_MsgID_MsgID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  MsgID_descriptor() {
    return SC_LockFish_MsgID_descriptor();
  }
  static inline const ::std::string& MsgID_Name(MsgID value) {
    return SC_LockFish_MsgID_Name(value);
  }
  static inline bool MsgID_Parse(const ::std::string& name,
      MsgID* value) {
    return SC_LockFish_MsgID_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // required int32 chair_id = 1;
  bool has_chair_id() const;
  void clear_chair_id();
  static const int kChairIdFieldNumber = 1;
  ::google::protobuf::int32 chair_id() const;
  void set_chair_id(::google::protobuf::int32 value);

  // required int32 lock_id = 2 [default = 0];
  bool has_lock_id() const;
  void clear_lock_id();
  static const int kLockIdFieldNumber = 2;
  ::google::protobuf::int32 lock_id() const;
  void set_lock_id(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:SC_LockFish)
 private:
  void set_has_chair_id();
  void clear_has_chair_id();
  void set_has_lock_id();
  void clear_has_lock_id();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::int32 chair_id_;
  ::google::protobuf::int32 lock_id_;
  friend struct protobuf_public_5ffishing_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class SC_AllowFire : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:SC_AllowFire) */ {
 public:
  SC_AllowFire();
  virtual ~SC_AllowFire();

  SC_AllowFire(const SC_AllowFire& from);

  inline SC_AllowFire& operator=(const SC_AllowFire& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SC_AllowFire& default_instance();

  static inline const SC_AllowFire* internal_default_instance() {
    return reinterpret_cast<const SC_AllowFire*>(
               &_SC_AllowFire_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    15;

  void Swap(SC_AllowFire* other);

  // implements Message ----------------------------------------------

  inline SC_AllowFire* New() const PROTOBUF_FINAL { return New(NULL); }

  SC_AllowFire* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const SC_AllowFire& from);
  void MergeFrom(const SC_AllowFire& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(SC_AllowFire* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  typedef SC_AllowFire_MsgID MsgID;
  static const MsgID ID =
    SC_AllowFire_MsgID_ID;
  static inline bool MsgID_IsValid(int value) {
    return SC_AllowFire_MsgID_IsValid(value);
  }
  static const MsgID MsgID_MIN =
    SC_AllowFire_MsgID_MsgID_MIN;
  static const MsgID MsgID_MAX =
    SC_AllowFire_MsgID_MsgID_MAX;
  static const int MsgID_ARRAYSIZE =
    SC_AllowFire_MsgID_MsgID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  MsgID_descriptor() {
    return SC_AllowFire_MsgID_descriptor();
  }
  static inline const ::std::string& MsgID_Name(MsgID value) {
    return SC_AllowFire_MsgID_Name(value);
  }
  static inline bool MsgID_Parse(const ::std::string& name,
      MsgID* value) {
    return SC_AllowFire_MsgID_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // required int32 allow_fire = 1;
  bool has_allow_fire() const;
  void clear_allow_fire();
  static const int kAllowFireFieldNumber = 1;
  ::google::protobuf::int32 allow_fire() const;
  void set_allow_fire(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:SC_AllowFire)
 private:
  void set_has_allow_fire();
  void clear_has_allow_fire();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::int32 allow_fire_;
  friend struct protobuf_public_5ffishing_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class SC_SwitchScene : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:SC_SwitchScene) */ {
 public:
  SC_SwitchScene();
  virtual ~SC_SwitchScene();

  SC_SwitchScene(const SC_SwitchScene& from);

  inline SC_SwitchScene& operator=(const SC_SwitchScene& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SC_SwitchScene& default_instance();

  static inline const SC_SwitchScene* internal_default_instance() {
    return reinterpret_cast<const SC_SwitchScene*>(
               &_SC_SwitchScene_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    16;

  void Swap(SC_SwitchScene* other);

  // implements Message ----------------------------------------------

  inline SC_SwitchScene* New() const PROTOBUF_FINAL { return New(NULL); }

  SC_SwitchScene* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const SC_SwitchScene& from);
  void MergeFrom(const SC_SwitchScene& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(SC_SwitchScene* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  typedef SC_SwitchScene_MsgID MsgID;
  static const MsgID ID =
    SC_SwitchScene_MsgID_ID;
  static inline bool MsgID_IsValid(int value) {
    return SC_SwitchScene_MsgID_IsValid(value);
  }
  static const MsgID MsgID_MIN =
    SC_SwitchScene_MsgID_MsgID_MIN;
  static const MsgID MsgID_MAX =
    SC_SwitchScene_MsgID_MsgID_MAX;
  static const int MsgID_ARRAYSIZE =
    SC_SwitchScene_MsgID_MsgID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  MsgID_descriptor() {
    return SC_SwitchScene_MsgID_descriptor();
  }
  static inline const ::std::string& MsgID_Name(MsgID value) {
    return SC_SwitchScene_MsgID_Name(value);
  }
  static inline bool MsgID_Parse(const ::std::string& name,
      MsgID* value) {
    return SC_SwitchScene_MsgID_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // required int32 nst = 1;
  bool has_nst() const;
  void clear_nst();
  static const int kNstFieldNumber = 1;
  ::google::protobuf::int32 nst() const;
  void set_nst(::google::protobuf::int32 value);

  // required int32 switching = 2;
  bool has_switching() const;
  void clear_switching();
  static const int kSwitchingFieldNumber = 2;
  ::google::protobuf::int32 switching() const;
  void set_switching(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:SC_SwitchScene)
 private:
  void set_has_nst();
  void clear_has_nst();
  void set_has_switching();
  void clear_has_switching();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::int32 nst_;
  ::google::protobuf::int32 switching_;
  friend struct protobuf_public_5ffishing_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class SC_KillBullet : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:SC_KillBullet) */ {
 public:
  SC_KillBullet();
  virtual ~SC_KillBullet();

  SC_KillBullet(const SC_KillBullet& from);

  inline SC_KillBullet& operator=(const SC_KillBullet& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SC_KillBullet& default_instance();

  static inline const SC_KillBullet* internal_default_instance() {
    return reinterpret_cast<const SC_KillBullet*>(
               &_SC_KillBullet_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    17;

  void Swap(SC_KillBullet* other);

  // implements Message ----------------------------------------------

  inline SC_KillBullet* New() const PROTOBUF_FINAL { return New(NULL); }

  SC_KillBullet* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const SC_KillBullet& from);
  void MergeFrom(const SC_KillBullet& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(SC_KillBullet* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  typedef SC_KillBullet_MsgID MsgID;
  static const MsgID ID =
    SC_KillBullet_MsgID_ID;
  static inline bool MsgID_IsValid(int value) {
    return SC_KillBullet_MsgID_IsValid(value);
  }
  static const MsgID MsgID_MIN =
    SC_KillBullet_MsgID_MsgID_MIN;
  static const MsgID MsgID_MAX =
    SC_KillBullet_MsgID_MsgID_MAX;
  static const int MsgID_ARRAYSIZE =
    SC_KillBullet_MsgID_MsgID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  MsgID_descriptor() {
    return SC_KillBullet_MsgID_descriptor();
  }
  static inline const ::std::string& MsgID_Name(MsgID value) {
    return SC_KillBullet_MsgID_Name(value);
  }
  static inline bool MsgID_Parse(const ::std::string& name,
      MsgID* value) {
    return SC_KillBullet_MsgID_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // required int32 chair_id = 1;
  bool has_chair_id() const;
  void clear_chair_id();
  static const int kChairIdFieldNumber = 1;
  ::google::protobuf::int32 chair_id() const;
  void set_chair_id(::google::protobuf::int32 value);

  // required int32 bullet_id = 2;
  bool has_bullet_id() const;
  void clear_bullet_id();
  static const int kBulletIdFieldNumber = 2;
  ::google::protobuf::int32 bullet_id() const;
  void set_bullet_id(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:SC_KillBullet)
 private:
  void set_has_chair_id();
  void clear_has_chair_id();
  void set_has_bullet_id();
  void clear_has_bullet_id();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::int32 chair_id_;
  ::google::protobuf::int32 bullet_id_;
  friend struct protobuf_public_5ffishing_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class SC_KillFish : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:SC_KillFish) */ {
 public:
  SC_KillFish();
  virtual ~SC_KillFish();

  SC_KillFish(const SC_KillFish& from);

  inline SC_KillFish& operator=(const SC_KillFish& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SC_KillFish& default_instance();

  static inline const SC_KillFish* internal_default_instance() {
    return reinterpret_cast<const SC_KillFish*>(
               &_SC_KillFish_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    18;

  void Swap(SC_KillFish* other);

  // implements Message ----------------------------------------------

  inline SC_KillFish* New() const PROTOBUF_FINAL { return New(NULL); }

  SC_KillFish* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const SC_KillFish& from);
  void MergeFrom(const SC_KillFish& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(SC_KillFish* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  typedef SC_KillFish_MsgID MsgID;
  static const MsgID ID =
    SC_KillFish_MsgID_ID;
  static inline bool MsgID_IsValid(int value) {
    return SC_KillFish_MsgID_IsValid(value);
  }
  static const MsgID MsgID_MIN =
    SC_KillFish_MsgID_MsgID_MIN;
  static const MsgID MsgID_MAX =
    SC_KillFish_MsgID_MsgID_MAX;
  static const int MsgID_ARRAYSIZE =
    SC_KillFish_MsgID_MsgID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  MsgID_descriptor() {
    return SC_KillFish_MsgID_descriptor();
  }
  static inline const ::std::string& MsgID_Name(MsgID value) {
    return SC_KillFish_MsgID_Name(value);
  }
  static inline bool MsgID_Parse(const ::std::string& name,
      MsgID* value) {
    return SC_KillFish_MsgID_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // required int64 score = 2;
  bool has_score() const;
  void clear_score();
  static const int kScoreFieldNumber = 2;
  ::google::protobuf::int64 score() const;
  void set_score(::google::protobuf::int64 value);

  // required int32 chair_id = 1;
  bool has_chair_id() const;
  void clear_chair_id();
  static const int kChairIdFieldNumber = 1;
  ::google::protobuf::int32 chair_id() const;
  void set_chair_id(::google::protobuf::int32 value);

  // required int32 fish_id = 3;
  bool has_fish_id() const;
  void clear_fish_id();
  static const int kFishIdFieldNumber = 3;
  ::google::protobuf::int32 fish_id() const;
  void set_fish_id(::google::protobuf::int32 value);

  // required int32 bscoe = 4;
  bool has_bscoe() const;
  void clear_bscoe();
  static const int kBscoeFieldNumber = 4;
  ::google::protobuf::int32 bscoe() const;
  void set_bscoe(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:SC_KillFish)
 private:
  void set_has_chair_id();
  void clear_has_chair_id();
  void set_has_score();
  void clear_has_score();
  void set_has_fish_id();
  void clear_has_fish_id();
  void set_has_bscoe();
  void clear_has_bscoe();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::int64 score_;
  ::google::protobuf::int32 chair_id_;
  ::google::protobuf::int32 fish_id_;
  ::google::protobuf::int32 bscoe_;
  friend struct protobuf_public_5ffishing_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class SC_SendBullet : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:SC_SendBullet) */ {
 public:
  SC_SendBullet();
  virtual ~SC_SendBullet();

  SC_SendBullet(const SC_SendBullet& from);

  inline SC_SendBullet& operator=(const SC_SendBullet& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SC_SendBullet& default_instance();

  static inline const SC_SendBullet* internal_default_instance() {
    return reinterpret_cast<const SC_SendBullet*>(
               &_SC_SendBullet_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    19;

  void Swap(SC_SendBullet* other);

  // implements Message ----------------------------------------------

  inline SC_SendBullet* New() const PROTOBUF_FINAL { return New(NULL); }

  SC_SendBullet* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const SC_SendBullet& from);
  void MergeFrom(const SC_SendBullet& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(SC_SendBullet* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  typedef SC_SendBullet_MsgID MsgID;
  static const MsgID ID =
    SC_SendBullet_MsgID_ID;
  static inline bool MsgID_IsValid(int value) {
    return SC_SendBullet_MsgID_IsValid(value);
  }
  static const MsgID MsgID_MIN =
    SC_SendBullet_MsgID_MsgID_MIN;
  static const MsgID MsgID_MAX =
    SC_SendBullet_MsgID_MsgID_MAX;
  static const int MsgID_ARRAYSIZE =
    SC_SendBullet_MsgID_MsgID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  MsgID_descriptor() {
    return SC_SendBullet_MsgID_descriptor();
  }
  static inline const ::std::string& MsgID_Name(MsgID value) {
    return SC_SendBullet_MsgID_Name(value);
  }
  static inline bool MsgID_Parse(const ::std::string& name,
      MsgID* value) {
    return SC_SendBullet_MsgID_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // required int32 id = 1;
  bool has_id() const;
  void clear_id();
  static const int kIdFieldNumber = 1;
  ::google::protobuf::int32 id() const;
  void set_id(::google::protobuf::int32 value);

  // required int32 chair_id = 2;
  bool has_chair_id() const;
  void clear_chair_id();
  static const int kChairIdFieldNumber = 2;
  ::google::protobuf::int32 chair_id() const;
  void set_chair_id(::google::protobuf::int32 value);

  // required uint32 create_tick = 3;
  bool has_create_tick() const;
  void clear_create_tick();
  static const int kCreateTickFieldNumber = 3;
  ::google::protobuf::uint32 create_tick() const;
  void set_create_tick(::google::protobuf::uint32 value);

  // required float x_pos = 4;
  bool has_x_pos() const;
  void clear_x_pos();
  static const int kXPosFieldNumber = 4;
  float x_pos() const;
  void set_x_pos(float value);

  // required float y_pos = 5;
  bool has_y_pos() const;
  void clear_y_pos();
  static const int kYPosFieldNumber = 5;
  float y_pos() const;
  void set_y_pos(float value);

  // required int32 cannon_type = 6;
  bool has_cannon_type() const;
  void clear_cannon_type();
  static const int kCannonTypeFieldNumber = 6;
  ::google::protobuf::int32 cannon_type() const;
  void set_cannon_type(::google::protobuf::int32 value);

  // required int64 score = 8;
  bool has_score() const;
  void clear_score();
  static const int kScoreFieldNumber = 8;
  ::google::protobuf::int64 score() const;
  void set_score(::google::protobuf::int64 value);

  // required int32 multiply = 7;
  bool has_multiply() const;
  void clear_multiply();
  static const int kMultiplyFieldNumber = 7;
  ::google::protobuf::int32 multiply() const;
  void set_multiply(::google::protobuf::int32 value);

  // required float direction = 9;
  bool has_direction() const;
  void clear_direction();
  static const int kDirectionFieldNumber = 9;
  float direction() const;
  void set_direction(float value);

  // required int32 is_new = 10;
  bool has_is_new() const;
  void clear_is_new();
  static const int kIsNewFieldNumber = 10;
  ::google::protobuf::int32 is_new() const;
  void set_is_new(::google::protobuf::int32 value);

  // required uint32 server_tick = 11;
  bool has_server_tick() const;
  void clear_server_tick();
  static const int kServerTickFieldNumber = 11;
  ::google::protobuf::uint32 server_tick() const;
  void set_server_tick(::google::protobuf::uint32 value);

  // required int32 is_double = 12;
  bool has_is_double() const;
  void clear_is_double();
  static const int kIsDoubleFieldNumber = 12;
  ::google::protobuf::int32 is_double() const;
  void set_is_double(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:SC_SendBullet)
 private:
  void set_has_id();
  void clear_has_id();
  void set_has_chair_id();
  void clear_has_chair_id();
  void set_has_create_tick();
  void clear_has_create_tick();
  void set_has_x_pos();
  void clear_has_x_pos();
  void set_has_y_pos();
  void clear_has_y_pos();
  void set_has_cannon_type();
  void clear_has_cannon_type();
  void set_has_multiply();
  void clear_has_multiply();
  void set_has_score();
  void clear_has_score();
  void set_has_direction();
  void clear_has_direction();
  void set_has_is_new();
  void clear_has_is_new();
  void set_has_server_tick();
  void clear_has_server_tick();
  void set_has_is_double();
  void clear_has_is_double();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::int32 id_;
  ::google::protobuf::int32 chair_id_;
  ::google::protobuf::uint32 create_tick_;
  float x_pos_;
  float y_pos_;
  ::google::protobuf::int32 cannon_type_;
  ::google::protobuf::int64 score_;
  ::google::protobuf::int32 multiply_;
  float direction_;
  ::google::protobuf::int32 is_new_;
  ::google::protobuf::uint32 server_tick_;
  ::google::protobuf::int32 is_double_;
  friend struct protobuf_public_5ffishing_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class SC_Fly_Bullet_List : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:SC_Fly_Bullet_List) */ {
 public:
  SC_Fly_Bullet_List();
  virtual ~SC_Fly_Bullet_List();

  SC_Fly_Bullet_List(const SC_Fly_Bullet_List& from);

  inline SC_Fly_Bullet_List& operator=(const SC_Fly_Bullet_List& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SC_Fly_Bullet_List& default_instance();

  static inline const SC_Fly_Bullet_List* internal_default_instance() {
    return reinterpret_cast<const SC_Fly_Bullet_List*>(
               &_SC_Fly_Bullet_List_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    20;

  void Swap(SC_Fly_Bullet_List* other);

  // implements Message ----------------------------------------------

  inline SC_Fly_Bullet_List* New() const PROTOBUF_FINAL { return New(NULL); }

  SC_Fly_Bullet_List* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const SC_Fly_Bullet_List& from);
  void MergeFrom(const SC_Fly_Bullet_List& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(SC_Fly_Bullet_List* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  typedef SC_Fly_Bullet_List_MsgID MsgID;
  static const MsgID ID =
    SC_Fly_Bullet_List_MsgID_ID;
  static inline bool MsgID_IsValid(int value) {
    return SC_Fly_Bullet_List_MsgID_IsValid(value);
  }
  static const MsgID MsgID_MIN =
    SC_Fly_Bullet_List_MsgID_MsgID_MIN;
  static const MsgID MsgID_MAX =
    SC_Fly_Bullet_List_MsgID_MsgID_MAX;
  static const int MsgID_ARRAYSIZE =
    SC_Fly_Bullet_List_MsgID_MsgID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  MsgID_descriptor() {
    return SC_Fly_Bullet_List_MsgID_descriptor();
  }
  static inline const ::std::string& MsgID_Name(MsgID value) {
    return SC_Fly_Bullet_List_MsgID_Name(value);
  }
  static inline bool MsgID_Parse(const ::std::string& name,
      MsgID* value) {
    return SC_Fly_Bullet_List_MsgID_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // repeated .SC_SendBullet pb_fly_bullets = 1;
  int pb_fly_bullets_size() const;
  void clear_pb_fly_bullets();
  static const int kPbFlyBulletsFieldNumber = 1;
  const ::SC_SendBullet& pb_fly_bullets(int index) const;
  ::SC_SendBullet* mutable_pb_fly_bullets(int index);
  ::SC_SendBullet* add_pb_fly_bullets();
  ::google::protobuf::RepeatedPtrField< ::SC_SendBullet >*
      mutable_pb_fly_bullets();
  const ::google::protobuf::RepeatedPtrField< ::SC_SendBullet >&
      pb_fly_bullets() const;

  // @@protoc_insertion_point(class_scope:SC_Fly_Bullet_List)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::SC_SendBullet > pb_fly_bullets_;
  friend struct protobuf_public_5ffishing_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class SC_CannonSet : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:SC_CannonSet) */ {
 public:
  SC_CannonSet();
  virtual ~SC_CannonSet();

  SC_CannonSet(const SC_CannonSet& from);

  inline SC_CannonSet& operator=(const SC_CannonSet& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SC_CannonSet& default_instance();

  static inline const SC_CannonSet* internal_default_instance() {
    return reinterpret_cast<const SC_CannonSet*>(
               &_SC_CannonSet_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    21;

  void Swap(SC_CannonSet* other);

  // implements Message ----------------------------------------------

  inline SC_CannonSet* New() const PROTOBUF_FINAL { return New(NULL); }

  SC_CannonSet* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const SC_CannonSet& from);
  void MergeFrom(const SC_CannonSet& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(SC_CannonSet* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  typedef SC_CannonSet_MsgID MsgID;
  static const MsgID ID =
    SC_CannonSet_MsgID_ID;
  static inline bool MsgID_IsValid(int value) {
    return SC_CannonSet_MsgID_IsValid(value);
  }
  static const MsgID MsgID_MIN =
    SC_CannonSet_MsgID_MsgID_MIN;
  static const MsgID MsgID_MAX =
    SC_CannonSet_MsgID_MsgID_MAX;
  static const int MsgID_ARRAYSIZE =
    SC_CannonSet_MsgID_MsgID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  MsgID_descriptor() {
    return SC_CannonSet_MsgID_descriptor();
  }
  static inline const ::std::string& MsgID_Name(MsgID value) {
    return SC_CannonSet_MsgID_Name(value);
  }
  static inline bool MsgID_Parse(const ::std::string& name,
      MsgID* value) {
    return SC_CannonSet_MsgID_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // required int32 chair_id = 1;
  bool has_chair_id() const;
  void clear_chair_id();
  static const int kChairIdFieldNumber = 1;
  ::google::protobuf::int32 chair_id() const;
  void set_chair_id(::google::protobuf::int32 value);

  // required int32 cannon_type = 2;
  bool has_cannon_type() const;
  void clear_cannon_type();
  static const int kCannonTypeFieldNumber = 2;
  ::google::protobuf::int32 cannon_type() const;
  void set_cannon_type(::google::protobuf::int32 value);

  // required int32 cannon_mul = 3;
  bool has_cannon_mul() const;
  void clear_cannon_mul();
  static const int kCannonMulFieldNumber = 3;
  ::google::protobuf::int32 cannon_mul() const;
  void set_cannon_mul(::google::protobuf::int32 value);

  // required int32 cannon_set = 4;
  bool has_cannon_set() const;
  void clear_cannon_set();
  static const int kCannonSetFieldNumber = 4;
  ::google::protobuf::int32 cannon_set() const;
  void set_cannon_set(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:SC_CannonSet)
 private:
  void set_has_chair_id();
  void clear_has_chair_id();
  void set_has_cannon_type();
  void clear_has_cannon_type();
  void set_has_cannon_mul();
  void clear_has_cannon_mul();
  void set_has_cannon_set();
  void clear_has_cannon_set();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::int32 chair_id_;
  ::google::protobuf::int32 cannon_type_;
  ::google::protobuf::int32 cannon_mul_;
  ::google::protobuf::int32 cannon_set_;
  friend struct protobuf_public_5ffishing_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class SC_ChangeScore : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:SC_ChangeScore) */ {
 public:
  SC_ChangeScore();
  virtual ~SC_ChangeScore();

  SC_ChangeScore(const SC_ChangeScore& from);

  inline SC_ChangeScore& operator=(const SC_ChangeScore& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SC_ChangeScore& default_instance();

  static inline const SC_ChangeScore* internal_default_instance() {
    return reinterpret_cast<const SC_ChangeScore*>(
               &_SC_ChangeScore_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    22;

  void Swap(SC_ChangeScore* other);

  // implements Message ----------------------------------------------

  inline SC_ChangeScore* New() const PROTOBUF_FINAL { return New(NULL); }

  SC_ChangeScore* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const SC_ChangeScore& from);
  void MergeFrom(const SC_ChangeScore& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(SC_ChangeScore* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  typedef SC_ChangeScore_MsgID MsgID;
  static const MsgID ID =
    SC_ChangeScore_MsgID_ID;
  static inline bool MsgID_IsValid(int value) {
    return SC_ChangeScore_MsgID_IsValid(value);
  }
  static const MsgID MsgID_MIN =
    SC_ChangeScore_MsgID_MsgID_MIN;
  static const MsgID MsgID_MAX =
    SC_ChangeScore_MsgID_MsgID_MAX;
  static const int MsgID_ARRAYSIZE =
    SC_ChangeScore_MsgID_MsgID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  MsgID_descriptor() {
    return SC_ChangeScore_MsgID_descriptor();
  }
  static inline const ::std::string& MsgID_Name(MsgID value) {
    return SC_ChangeScore_MsgID_Name(value);
  }
  static inline bool MsgID_Parse(const ::std::string& name,
      MsgID* value) {
    return SC_ChangeScore_MsgID_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // required int64 fish_score = 2;
  bool has_fish_score() const;
  void clear_fish_score();
  static const int kFishScoreFieldNumber = 2;
  ::google::protobuf::int64 fish_score() const;
  void set_fish_score(::google::protobuf::int64 value);

  // required int64 wastage_score = 3;
  bool has_wastage_score() const;
  void clear_wastage_score();
  static const int kWastageScoreFieldNumber = 3;
  ::google::protobuf::int64 wastage_score() const;
  void set_wastage_score(::google::protobuf::int64 value);

  // required int32 chair_id = 1;
  bool has_chair_id() const;
  void clear_chair_id();
  static const int kChairIdFieldNumber = 1;
  ::google::protobuf::int32 chair_id() const;
  void set_chair_id(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:SC_ChangeScore)
 private:
  void set_has_chair_id();
  void clear_has_chair_id();
  void set_has_fish_score();
  void clear_has_fish_score();
  void set_has_wastage_score();
  void clear_has_wastage_score();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::int64 fish_score_;
  ::google::protobuf::int64 wastage_score_;
  ::google::protobuf::int32 chair_id_;
  friend struct protobuf_public_5ffishing_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class SC_UserInfo : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:SC_UserInfo) */ {
 public:
  SC_UserInfo();
  virtual ~SC_UserInfo();

  SC_UserInfo(const SC_UserInfo& from);

  inline SC_UserInfo& operator=(const SC_UserInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SC_UserInfo& default_instance();

  static inline const SC_UserInfo* internal_default_instance() {
    return reinterpret_cast<const SC_UserInfo*>(
               &_SC_UserInfo_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    23;

  void Swap(SC_UserInfo* other);

  // implements Message ----------------------------------------------

  inline SC_UserInfo* New() const PROTOBUF_FINAL { return New(NULL); }

  SC_UserInfo* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const SC_UserInfo& from);
  void MergeFrom(const SC_UserInfo& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(SC_UserInfo* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  typedef SC_UserInfo_MsgID MsgID;
  static const MsgID ID =
    SC_UserInfo_MsgID_ID;
  static inline bool MsgID_IsValid(int value) {
    return SC_UserInfo_MsgID_IsValid(value);
  }
  static const MsgID MsgID_MIN =
    SC_UserInfo_MsgID_MsgID_MIN;
  static const MsgID MsgID_MAX =
    SC_UserInfo_MsgID_MsgID_MAX;
  static const int MsgID_ARRAYSIZE =
    SC_UserInfo_MsgID_MsgID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  MsgID_descriptor() {
    return SC_UserInfo_MsgID_descriptor();
  }
  static inline const ::std::string& MsgID_Name(MsgID value) {
    return SC_UserInfo_MsgID_Name(value);
  }
  static inline bool MsgID_Parse(const ::std::string& name,
      MsgID* value) {
    return SC_UserInfo_MsgID_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // required int64 score = 2;
  bool has_score() const;
  void clear_score();
  static const int kScoreFieldNumber = 2;
  ::google::protobuf::int64 score() const;
  void set_score(::google::protobuf::int64 value);

  // required int32 chair_id = 1;
  bool has_chair_id() const;
  void clear_chair_id();
  static const int kChairIdFieldNumber = 1;
  ::google::protobuf::int32 chair_id() const;
  void set_chair_id(::google::protobuf::int32 value);

  // required int32 cannon_type = 3;
  bool has_cannon_type() const;
  void clear_cannon_type();
  static const int kCannonTypeFieldNumber = 3;
  ::google::protobuf::int32 cannon_type() const;
  void set_cannon_type(::google::protobuf::int32 value);

  // required int64 wastage = 5;
  bool has_wastage() const;
  void clear_wastage();
  static const int kWastageFieldNumber = 5;
  ::google::protobuf::int64 wastage() const;
  void set_wastage(::google::protobuf::int64 value);

  // required int32 cannon_mul = 4;
  bool has_cannon_mul() const;
  void clear_cannon_mul();
  static const int kCannonMulFieldNumber = 4;
  ::google::protobuf::int32 cannon_mul() const;
  void set_cannon_mul(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:SC_UserInfo)
 private:
  void set_has_chair_id();
  void clear_has_chair_id();
  void set_has_score();
  void clear_has_score();
  void set_has_cannon_type();
  void clear_has_cannon_type();
  void set_has_cannon_mul();
  void clear_has_cannon_mul();
  void set_has_wastage();
  void clear_has_wastage();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::int64 score_;
  ::google::protobuf::int32 chair_id_;
  ::google::protobuf::int32 cannon_type_;
  ::google::protobuf::int64 wastage_;
  ::google::protobuf::int32 cannon_mul_;
  friend struct protobuf_public_5ffishing_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class SC_SendFish : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:SC_SendFish) */ {
 public:
  SC_SendFish();
  virtual ~SC_SendFish();

  SC_SendFish(const SC_SendFish& from);

  inline SC_SendFish& operator=(const SC_SendFish& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SC_SendFish& default_instance();

  static inline const SC_SendFish* internal_default_instance() {
    return reinterpret_cast<const SC_SendFish*>(
               &_SC_SendFish_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    24;

  void Swap(SC_SendFish* other);

  // implements Message ----------------------------------------------

  inline SC_SendFish* New() const PROTOBUF_FINAL { return New(NULL); }

  SC_SendFish* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const SC_SendFish& from);
  void MergeFrom(const SC_SendFish& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(SC_SendFish* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  typedef SC_SendFish_MsgID MsgID;
  static const MsgID ID =
    SC_SendFish_MsgID_ID;
  static inline bool MsgID_IsValid(int value) {
    return SC_SendFish_MsgID_IsValid(value);
  }
  static const MsgID MsgID_MIN =
    SC_SendFish_MsgID_MsgID_MIN;
  static const MsgID MsgID_MAX =
    SC_SendFish_MsgID_MsgID_MAX;
  static const int MsgID_ARRAYSIZE =
    SC_SendFish_MsgID_MsgID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  MsgID_descriptor() {
    return SC_SendFish_MsgID_descriptor();
  }
  static inline const ::std::string& MsgID_Name(MsgID value) {
    return SC_SendFish_MsgID_Name(value);
  }
  static inline bool MsgID_Parse(const ::std::string& name,
      MsgID* value) {
    return SC_SendFish_MsgID_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // required int32 fish_id = 1;
  bool has_fish_id() const;
  void clear_fish_id();
  static const int kFishIdFieldNumber = 1;
  ::google::protobuf::int32 fish_id() const;
  void set_fish_id(::google::protobuf::int32 value);

  // required int32 type_id = 2;
  bool has_type_id() const;
  void clear_type_id();
  static const int kTypeIdFieldNumber = 2;
  ::google::protobuf::int32 type_id() const;
  void set_type_id(::google::protobuf::int32 value);

  // required int32 path_id = 3;
  bool has_path_id() const;
  void clear_path_id();
  static const int kPathIdFieldNumber = 3;
  ::google::protobuf::int32 path_id() const;
  void set_path_id(::google::protobuf::int32 value);

  // required uint32 create_tick = 4;
  bool has_create_tick() const;
  void clear_create_tick();
  static const int kCreateTickFieldNumber = 4;
  ::google::protobuf::uint32 create_tick() const;
  void set_create_tick(::google::protobuf::uint32 value);

  // required float offest_x = 5;
  bool has_offest_x() const;
  void clear_offest_x();
  static const int kOffestXFieldNumber = 5;
  float offest_x() const;
  void set_offest_x(float value);

  // required float offest_y = 6;
  bool has_offest_y() const;
  void clear_offest_y();
  static const int kOffestYFieldNumber = 6;
  float offest_y() const;
  void set_offest_y(float value);

  // required float dir = 7;
  bool has_dir() const;
  void clear_dir();
  static const int kDirFieldNumber = 7;
  float dir() const;
  void set_dir(float value);

  // required float delay = 8;
  bool has_delay() const;
  void clear_delay();
  static const int kDelayFieldNumber = 8;
  float delay() const;
  void set_delay(float value);

  // required uint32 server_tick = 9;
  bool has_server_tick() const;
  void clear_server_tick();
  static const int kServerTickFieldNumber = 9;
  ::google::protobuf::uint32 server_tick() const;
  void set_server_tick(::google::protobuf::uint32 value);

  // required float fish_speed = 10;
  bool has_fish_speed() const;
  void clear_fish_speed();
  static const int kFishSpeedFieldNumber = 10;
  float fish_speed() const;
  void set_fish_speed(float value);

  // required int32 fis_type = 11;
  bool has_fis_type() const;
  void clear_fis_type();
  static const int kFisTypeFieldNumber = 11;
  ::google::protobuf::int32 fis_type() const;
  void set_fis_type(::google::protobuf::int32 value);

  // required bool troop = 12;
  bool has_troop() const;
  void clear_troop();
  static const int kTroopFieldNumber = 12;
  bool troop() const;
  void set_troop(bool value);

  // required int32 refersh_id = 13;
  bool has_refersh_id() const;
  void clear_refersh_id();
  static const int kRefershIdFieldNumber = 13;
  ::google::protobuf::int32 refersh_id() const;
  void set_refersh_id(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:SC_SendFish)
 private:
  void set_has_fish_id();
  void clear_has_fish_id();
  void set_has_type_id();
  void clear_has_type_id();
  void set_has_path_id();
  void clear_has_path_id();
  void set_has_create_tick();
  void clear_has_create_tick();
  void set_has_offest_x();
  void clear_has_offest_x();
  void set_has_offest_y();
  void clear_has_offest_y();
  void set_has_dir();
  void clear_has_dir();
  void set_has_delay();
  void clear_has_delay();
  void set_has_server_tick();
  void clear_has_server_tick();
  void set_has_fish_speed();
  void clear_has_fish_speed();
  void set_has_fis_type();
  void clear_has_fis_type();
  void set_has_troop();
  void clear_has_troop();
  void set_has_refersh_id();
  void clear_has_refersh_id();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::int32 fish_id_;
  ::google::protobuf::int32 type_id_;
  ::google::protobuf::int32 path_id_;
  ::google::protobuf::uint32 create_tick_;
  float offest_x_;
  float offest_y_;
  float dir_;
  float delay_;
  ::google::protobuf::uint32 server_tick_;
  float fish_speed_;
  ::google::protobuf::int32 fis_type_;
  bool troop_;
  ::google::protobuf::int32 refersh_id_;
  friend struct protobuf_public_5ffishing_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class SC_SendFishList : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:SC_SendFishList) */ {
 public:
  SC_SendFishList();
  virtual ~SC_SendFishList();

  SC_SendFishList(const SC_SendFishList& from);

  inline SC_SendFishList& operator=(const SC_SendFishList& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SC_SendFishList& default_instance();

  static inline const SC_SendFishList* internal_default_instance() {
    return reinterpret_cast<const SC_SendFishList*>(
               &_SC_SendFishList_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    25;

  void Swap(SC_SendFishList* other);

  // implements Message ----------------------------------------------

  inline SC_SendFishList* New() const PROTOBUF_FINAL { return New(NULL); }

  SC_SendFishList* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const SC_SendFishList& from);
  void MergeFrom(const SC_SendFishList& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(SC_SendFishList* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  typedef SC_SendFishList_MsgID MsgID;
  static const MsgID ID =
    SC_SendFishList_MsgID_ID;
  static inline bool MsgID_IsValid(int value) {
    return SC_SendFishList_MsgID_IsValid(value);
  }
  static const MsgID MsgID_MIN =
    SC_SendFishList_MsgID_MsgID_MIN;
  static const MsgID MsgID_MAX =
    SC_SendFishList_MsgID_MsgID_MAX;
  static const int MsgID_ARRAYSIZE =
    SC_SendFishList_MsgID_MsgID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  MsgID_descriptor() {
    return SC_SendFishList_MsgID_descriptor();
  }
  static inline const ::std::string& MsgID_Name(MsgID value) {
    return SC_SendFishList_MsgID_Name(value);
  }
  static inline bool MsgID_Parse(const ::std::string& name,
      MsgID* value) {
    return SC_SendFishList_MsgID_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // repeated .SC_SendFish pb_fishes = 1;
  int pb_fishes_size() const;
  void clear_pb_fishes();
  static const int kPbFishesFieldNumber = 1;
  const ::SC_SendFish& pb_fishes(int index) const;
  ::SC_SendFish* mutable_pb_fishes(int index);
  ::SC_SendFish* add_pb_fishes();
  ::google::protobuf::RepeatedPtrField< ::SC_SendFish >*
      mutable_pb_fishes();
  const ::google::protobuf::RepeatedPtrField< ::SC_SendFish >&
      pb_fishes() const;

  // @@protoc_insertion_point(class_scope:SC_SendFishList)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::SC_SendFish > pb_fishes_;
  friend struct protobuf_public_5ffishing_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class SC_GameConfig : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:SC_GameConfig) */ {
 public:
  SC_GameConfig();
  virtual ~SC_GameConfig();

  SC_GameConfig(const SC_GameConfig& from);

  inline SC_GameConfig& operator=(const SC_GameConfig& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SC_GameConfig& default_instance();

  static inline const SC_GameConfig* internal_default_instance() {
    return reinterpret_cast<const SC_GameConfig*>(
               &_SC_GameConfig_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    26;

  void Swap(SC_GameConfig* other);

  // implements Message ----------------------------------------------

  inline SC_GameConfig* New() const PROTOBUF_FINAL { return New(NULL); }

  SC_GameConfig* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const SC_GameConfig& from);
  void MergeFrom(const SC_GameConfig& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(SC_GameConfig* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  typedef SC_GameConfig_MsgID MsgID;
  static const MsgID ID =
    SC_GameConfig_MsgID_ID;
  static inline bool MsgID_IsValid(int value) {
    return SC_GameConfig_MsgID_IsValid(value);
  }
  static const MsgID MsgID_MIN =
    SC_GameConfig_MsgID_MsgID_MIN;
  static const MsgID MsgID_MAX =
    SC_GameConfig_MsgID_MsgID_MAX;
  static const int MsgID_ARRAYSIZE =
    SC_GameConfig_MsgID_MsgID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  MsgID_descriptor() {
    return SC_GameConfig_MsgID_descriptor();
  }
  static inline const ::std::string& MsgID_Name(MsgID value) {
    return SC_GameConfig_MsgID_Name(value);
  }
  static inline bool MsgID_Parse(const ::std::string& name,
      MsgID* value) {
    return SC_GameConfig_MsgID_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // required int32 server_id = 1;
  bool has_server_id() const;
  void clear_server_id();
  static const int kServerIdFieldNumber = 1;
  ::google::protobuf::int32 server_id() const;
  void set_server_id(::google::protobuf::int32 value);

  // required int32 change_ratio_user_score = 2;
  bool has_change_ratio_user_score() const;
  void clear_change_ratio_user_score();
  static const int kChangeRatioUserScoreFieldNumber = 2;
  ::google::protobuf::int32 change_ratio_user_score() const;
  void set_change_ratio_user_score(::google::protobuf::int32 value);

  // required int32 change_ratio_fish_score = 3;
  bool has_change_ratio_fish_score() const;
  void clear_change_ratio_fish_score();
  static const int kChangeRatioFishScoreFieldNumber = 3;
  ::google::protobuf::int32 change_ratio_fish_score() const;
  void set_change_ratio_fish_score(::google::protobuf::int32 value);

  // required int32 exchange_once = 4;
  bool has_exchange_once() const;
  void clear_exchange_once();
  static const int kExchangeOnceFieldNumber = 4;
  ::google::protobuf::int32 exchange_once() const;
  void set_exchange_once(::google::protobuf::int32 value);

  // required int32 fire_interval = 5;
  bool has_fire_interval() const;
  void clear_fire_interval();
  static const int kFireIntervalFieldNumber = 5;
  ::google::protobuf::int32 fire_interval() const;
  void set_fire_interval(::google::protobuf::int32 value);

  // required int32 max_interval = 6;
  bool has_max_interval() const;
  void clear_max_interval();
  static const int kMaxIntervalFieldNumber = 6;
  ::google::protobuf::int32 max_interval() const;
  void set_max_interval(::google::protobuf::int32 value);

  // required int32 min_interval = 7;
  bool has_min_interval() const;
  void clear_min_interval();
  static const int kMinIntervalFieldNumber = 7;
  ::google::protobuf::int32 min_interval() const;
  void set_min_interval(::google::protobuf::int32 value);

  // required int32 show_gold_min_mul = 8;
  bool has_show_gold_min_mul() const;
  void clear_show_gold_min_mul();
  static const int kShowGoldMinMulFieldNumber = 8;
  ::google::protobuf::int32 show_gold_min_mul() const;
  void set_show_gold_min_mul(::google::protobuf::int32 value);

  // required int32 max_bullet_count = 9;
  bool has_max_bullet_count() const;
  void clear_max_bullet_count();
  static const int kMaxBulletCountFieldNumber = 9;
  ::google::protobuf::int32 max_bullet_count() const;
  void set_max_bullet_count(::google::protobuf::int32 value);

  // required int32 max_cannon = 10;
  bool has_max_cannon() const;
  void clear_max_cannon();
  static const int kMaxCannonFieldNumber = 10;
  ::google::protobuf::int32 max_cannon() const;
  void set_max_cannon(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:SC_GameConfig)
 private:
  void set_has_server_id();
  void clear_has_server_id();
  void set_has_change_ratio_user_score();
  void clear_has_change_ratio_user_score();
  void set_has_change_ratio_fish_score();
  void clear_has_change_ratio_fish_score();
  void set_has_exchange_once();
  void clear_has_exchange_once();
  void set_has_fire_interval();
  void clear_has_fire_interval();
  void set_has_max_interval();
  void clear_has_max_interval();
  void set_has_min_interval();
  void clear_has_min_interval();
  void set_has_show_gold_min_mul();
  void clear_has_show_gold_min_mul();
  void set_has_max_bullet_count();
  void clear_has_max_bullet_count();
  void set_has_max_cannon();
  void clear_has_max_cannon();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::int32 server_id_;
  ::google::protobuf::int32 change_ratio_user_score_;
  ::google::protobuf::int32 change_ratio_fish_score_;
  ::google::protobuf::int32 exchange_once_;
  ::google::protobuf::int32 fire_interval_;
  ::google::protobuf::int32 max_interval_;
  ::google::protobuf::int32 min_interval_;
  ::google::protobuf::int32 show_gold_min_mul_;
  ::google::protobuf::int32 max_bullet_count_;
  ::google::protobuf::int32 max_cannon_;
  friend struct protobuf_public_5ffishing_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class SC_TimeSync : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:SC_TimeSync) */ {
 public:
  SC_TimeSync();
  virtual ~SC_TimeSync();

  SC_TimeSync(const SC_TimeSync& from);

  inline SC_TimeSync& operator=(const SC_TimeSync& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SC_TimeSync& default_instance();

  static inline const SC_TimeSync* internal_default_instance() {
    return reinterpret_cast<const SC_TimeSync*>(
               &_SC_TimeSync_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    27;

  void Swap(SC_TimeSync* other);

  // implements Message ----------------------------------------------

  inline SC_TimeSync* New() const PROTOBUF_FINAL { return New(NULL); }

  SC_TimeSync* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const SC_TimeSync& from);
  void MergeFrom(const SC_TimeSync& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(SC_TimeSync* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  typedef SC_TimeSync_MsgID MsgID;
  static const MsgID ID =
    SC_TimeSync_MsgID_ID;
  static inline bool MsgID_IsValid(int value) {
    return SC_TimeSync_MsgID_IsValid(value);
  }
  static const MsgID MsgID_MIN =
    SC_TimeSync_MsgID_MsgID_MIN;
  static const MsgID MsgID_MAX =
    SC_TimeSync_MsgID_MsgID_MAX;
  static const int MsgID_ARRAYSIZE =
    SC_TimeSync_MsgID_MsgID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  MsgID_descriptor() {
    return SC_TimeSync_MsgID_descriptor();
  }
  static inline const ::std::string& MsgID_Name(MsgID value) {
    return SC_TimeSync_MsgID_Name(value);
  }
  static inline bool MsgID_Parse(const ::std::string& name,
      MsgID* value) {
    return SC_TimeSync_MsgID_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // required int32 chair_id = 1;
  bool has_chair_id() const;
  void clear_chair_id();
  static const int kChairIdFieldNumber = 1;
  ::google::protobuf::int32 chair_id() const;
  void set_chair_id(::google::protobuf::int32 value);

  // required uint32 server_tick = 2;
  bool has_server_tick() const;
  void clear_server_tick();
  static const int kServerTickFieldNumber = 2;
  ::google::protobuf::uint32 server_tick() const;
  void set_server_tick(::google::protobuf::uint32 value);

  // required uint32 client_tick = 3;
  bool has_client_tick() const;
  void clear_client_tick();
  static const int kClientTickFieldNumber = 3;
  ::google::protobuf::uint32 client_tick() const;
  void set_client_tick(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:SC_TimeSync)
 private:
  void set_has_chair_id();
  void clear_has_chair_id();
  void set_has_server_tick();
  void clear_has_server_tick();
  void set_has_client_tick();
  void clear_has_client_tick();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::int32 chair_id_;
  ::google::protobuf::uint32 server_tick_;
  ::google::protobuf::uint32 client_tick_;
  friend struct protobuf_public_5ffishing_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class SC_SystemMessage : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:SC_SystemMessage) */ {
 public:
  SC_SystemMessage();
  virtual ~SC_SystemMessage();

  SC_SystemMessage(const SC_SystemMessage& from);

  inline SC_SystemMessage& operator=(const SC_SystemMessage& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SC_SystemMessage& default_instance();

  static inline const SC_SystemMessage* internal_default_instance() {
    return reinterpret_cast<const SC_SystemMessage*>(
               &_SC_SystemMessage_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    28;

  void Swap(SC_SystemMessage* other);

  // implements Message ----------------------------------------------

  inline SC_SystemMessage* New() const PROTOBUF_FINAL { return New(NULL); }

  SC_SystemMessage* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const SC_SystemMessage& from);
  void MergeFrom(const SC_SystemMessage& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(SC_SystemMessage* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  typedef SC_SystemMessage_MsgID MsgID;
  static const MsgID ID =
    SC_SystemMessage_MsgID_ID;
  static inline bool MsgID_IsValid(int value) {
    return SC_SystemMessage_MsgID_IsValid(value);
  }
  static const MsgID MsgID_MIN =
    SC_SystemMessage_MsgID_MsgID_MIN;
  static const MsgID MsgID_MAX =
    SC_SystemMessage_MsgID_MsgID_MAX;
  static const int MsgID_ARRAYSIZE =
    SC_SystemMessage_MsgID_MsgID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  MsgID_descriptor() {
    return SC_SystemMessage_MsgID_descriptor();
  }
  static inline const ::std::string& MsgID_Name(MsgID value) {
    return SC_SystemMessage_MsgID_Name(value);
  }
  static inline bool MsgID_Parse(const ::std::string& name,
      MsgID* value) {
    return SC_SystemMessage_MsgID_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // required string szString = 2;
  bool has_szstring() const;
  void clear_szstring();
  static const int kSzStringFieldNumber = 2;
  const ::std::string& szstring() const;
  void set_szstring(const ::std::string& value);
  #if LANG_CXX11
  void set_szstring(::std::string&& value);
  #endif
  void set_szstring(const char* value);
  void set_szstring(const char* value, size_t size);
  ::std::string* mutable_szstring();
  ::std::string* release_szstring();
  void set_allocated_szstring(::std::string* szstring);

  // required int32 wType = 1;
  bool has_wtype() const;
  void clear_wtype();
  static const int kWTypeFieldNumber = 1;
  ::google::protobuf::int32 wtype() const;
  void set_wtype(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:SC_SystemMessage)
 private:
  void set_has_wtype();
  void clear_has_wtype();
  void set_has_szstring();
  void clear_has_szstring();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr szstring_;
  ::google::protobuf::int32 wtype_;
  friend struct protobuf_public_5ffishing_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
// CS_TreasureEnd

// required int32 chair_id = 1;
inline bool CS_TreasureEnd::has_chair_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CS_TreasureEnd::set_has_chair_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CS_TreasureEnd::clear_has_chair_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CS_TreasureEnd::clear_chair_id() {
  chair_id_ = 0;
  clear_has_chair_id();
}
inline ::google::protobuf::int32 CS_TreasureEnd::chair_id() const {
  // @@protoc_insertion_point(field_get:CS_TreasureEnd.chair_id)
  return chair_id_;
}
inline void CS_TreasureEnd::set_chair_id(::google::protobuf::int32 value) {
  set_has_chair_id();
  chair_id_ = value;
  // @@protoc_insertion_point(field_set:CS_TreasureEnd.chair_id)
}

// required int64 score = 2;
inline bool CS_TreasureEnd::has_score() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CS_TreasureEnd::set_has_score() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CS_TreasureEnd::clear_has_score() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CS_TreasureEnd::clear_score() {
  score_ = GOOGLE_LONGLONG(0);
  clear_has_score();
}
inline ::google::protobuf::int64 CS_TreasureEnd::score() const {
  // @@protoc_insertion_point(field_get:CS_TreasureEnd.score)
  return score_;
}
inline void CS_TreasureEnd::set_score(::google::protobuf::int64 value) {
  set_has_score();
  score_ = value;
  // @@protoc_insertion_point(field_set:CS_TreasureEnd.score)
}

// -------------------------------------------------------------------

// CS_ChangeCannonSet

// required int32 chair_id = 1;
inline bool CS_ChangeCannonSet::has_chair_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CS_ChangeCannonSet::set_has_chair_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CS_ChangeCannonSet::clear_has_chair_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CS_ChangeCannonSet::clear_chair_id() {
  chair_id_ = 0;
  clear_has_chair_id();
}
inline ::google::protobuf::int32 CS_ChangeCannonSet::chair_id() const {
  // @@protoc_insertion_point(field_get:CS_ChangeCannonSet.chair_id)
  return chair_id_;
}
inline void CS_ChangeCannonSet::set_chair_id(::google::protobuf::int32 value) {
  set_has_chair_id();
  chair_id_ = value;
  // @@protoc_insertion_point(field_set:CS_ChangeCannonSet.chair_id)
}

// required int32 add = 2;
inline bool CS_ChangeCannonSet::has_add() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CS_ChangeCannonSet::set_has_add() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CS_ChangeCannonSet::clear_has_add() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CS_ChangeCannonSet::clear_add() {
  add_ = 0;
  clear_has_add();
}
inline ::google::protobuf::int32 CS_ChangeCannonSet::add() const {
  // @@protoc_insertion_point(field_get:CS_ChangeCannonSet.add)
  return add_;
}
inline void CS_ChangeCannonSet::set_add(::google::protobuf::int32 value) {
  set_has_add();
  add_ = value;
  // @@protoc_insertion_point(field_set:CS_ChangeCannonSet.add)
}

// -------------------------------------------------------------------

// CS_Netcast

// required int32 bullet_id = 1;
inline bool CS_Netcast::has_bullet_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CS_Netcast::set_has_bullet_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CS_Netcast::clear_has_bullet_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CS_Netcast::clear_bullet_id() {
  bullet_id_ = 0;
  clear_has_bullet_id();
}
inline ::google::protobuf::int32 CS_Netcast::bullet_id() const {
  // @@protoc_insertion_point(field_get:CS_Netcast.bullet_id)
  return bullet_id_;
}
inline void CS_Netcast::set_bullet_id(::google::protobuf::int32 value) {
  set_has_bullet_id();
  bullet_id_ = value;
  // @@protoc_insertion_point(field_set:CS_Netcast.bullet_id)
}

// required int32 data = 2;
inline bool CS_Netcast::has_data() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CS_Netcast::set_has_data() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CS_Netcast::clear_has_data() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CS_Netcast::clear_data() {
  data_ = 0;
  clear_has_data();
}
inline ::google::protobuf::int32 CS_Netcast::data() const {
  // @@protoc_insertion_point(field_get:CS_Netcast.data)
  return data_;
}
inline void CS_Netcast::set_data(::google::protobuf::int32 value) {
  set_has_data();
  data_ = value;
  // @@protoc_insertion_point(field_set:CS_Netcast.data)
}

// required int32 fish_id = 3;
inline bool CS_Netcast::has_fish_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CS_Netcast::set_has_fish_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CS_Netcast::clear_has_fish_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CS_Netcast::clear_fish_id() {
  fish_id_ = 0;
  clear_has_fish_id();
}
inline ::google::protobuf::int32 CS_Netcast::fish_id() const {
  // @@protoc_insertion_point(field_get:CS_Netcast.fish_id)
  return fish_id_;
}
inline void CS_Netcast::set_fish_id(::google::protobuf::int32 value) {
  set_has_fish_id();
  fish_id_ = value;
  // @@protoc_insertion_point(field_set:CS_Netcast.fish_id)
}

// -------------------------------------------------------------------

// CS_LockFish

// required int32 chair_id = 1;
inline bool CS_LockFish::has_chair_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CS_LockFish::set_has_chair_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CS_LockFish::clear_has_chair_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CS_LockFish::clear_chair_id() {
  chair_id_ = 0;
  clear_has_chair_id();
}
inline ::google::protobuf::int32 CS_LockFish::chair_id() const {
  // @@protoc_insertion_point(field_get:CS_LockFish.chair_id)
  return chair_id_;
}
inline void CS_LockFish::set_chair_id(::google::protobuf::int32 value) {
  set_has_chair_id();
  chair_id_ = value;
  // @@protoc_insertion_point(field_set:CS_LockFish.chair_id)
}

// required int32 lock = 2;
inline bool CS_LockFish::has_lock() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CS_LockFish::set_has_lock() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CS_LockFish::clear_has_lock() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CS_LockFish::clear_lock() {
  lock_ = 0;
  clear_has_lock();
}
inline ::google::protobuf::int32 CS_LockFish::lock() const {
  // @@protoc_insertion_point(field_get:CS_LockFish.lock)
  return lock_;
}
inline void CS_LockFish::set_lock(::google::protobuf::int32 value) {
  set_has_lock();
  lock_ = value;
  // @@protoc_insertion_point(field_set:CS_LockFish.lock)
}

// -------------------------------------------------------------------

// CS_LockSpecFish

// required int32 chair_id = 1;
inline bool CS_LockSpecFish::has_chair_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CS_LockSpecFish::set_has_chair_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CS_LockSpecFish::clear_has_chair_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CS_LockSpecFish::clear_chair_id() {
  chair_id_ = 0;
  clear_has_chair_id();
}
inline ::google::protobuf::int32 CS_LockSpecFish::chair_id() const {
  // @@protoc_insertion_point(field_get:CS_LockSpecFish.chair_id)
  return chair_id_;
}
inline void CS_LockSpecFish::set_chair_id(::google::protobuf::int32 value) {
  set_has_chair_id();
  chair_id_ = value;
  // @@protoc_insertion_point(field_set:CS_LockSpecFish.chair_id)
}

// required int32 fish_id = 2;
inline bool CS_LockSpecFish::has_fish_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CS_LockSpecFish::set_has_fish_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CS_LockSpecFish::clear_has_fish_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CS_LockSpecFish::clear_fish_id() {
  fish_id_ = 0;
  clear_has_fish_id();
}
inline ::google::protobuf::int32 CS_LockSpecFish::fish_id() const {
  // @@protoc_insertion_point(field_get:CS_LockSpecFish.fish_id)
  return fish_id_;
}
inline void CS_LockSpecFish::set_fish_id(::google::protobuf::int32 value) {
  set_has_fish_id();
  fish_id_ = value;
  // @@protoc_insertion_point(field_set:CS_LockSpecFish.fish_id)
}

// -------------------------------------------------------------------

// CS_Fire

// required int32 chair_id = 1;
inline bool CS_Fire::has_chair_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CS_Fire::set_has_chair_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CS_Fire::clear_has_chair_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CS_Fire::clear_chair_id() {
  chair_id_ = 0;
  clear_has_chair_id();
}
inline ::google::protobuf::int32 CS_Fire::chair_id() const {
  // @@protoc_insertion_point(field_get:CS_Fire.chair_id)
  return chair_id_;
}
inline void CS_Fire::set_chair_id(::google::protobuf::int32 value) {
  set_has_chair_id();
  chair_id_ = value;
  // @@protoc_insertion_point(field_set:CS_Fire.chair_id)
}

// required float direction = 2;
inline bool CS_Fire::has_direction() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CS_Fire::set_has_direction() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CS_Fire::clear_has_direction() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CS_Fire::clear_direction() {
  direction_ = 0;
  clear_has_direction();
}
inline float CS_Fire::direction() const {
  // @@protoc_insertion_point(field_get:CS_Fire.direction)
  return direction_;
}
inline void CS_Fire::set_direction(float value) {
  set_has_direction();
  direction_ = value;
  // @@protoc_insertion_point(field_set:CS_Fire.direction)
}

// required uint32 fire_time = 3;
inline bool CS_Fire::has_fire_time() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CS_Fire::set_has_fire_time() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CS_Fire::clear_has_fire_time() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CS_Fire::clear_fire_time() {
  fire_time_ = 0u;
  clear_has_fire_time();
}
inline ::google::protobuf::uint32 CS_Fire::fire_time() const {
  // @@protoc_insertion_point(field_get:CS_Fire.fire_time)
  return fire_time_;
}
inline void CS_Fire::set_fire_time(::google::protobuf::uint32 value) {
  set_has_fire_time();
  fire_time_ = value;
  // @@protoc_insertion_point(field_set:CS_Fire.fire_time)
}

// required int32 client_id = 4;
inline bool CS_Fire::has_client_id() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void CS_Fire::set_has_client_id() {
  _has_bits_[0] |= 0x00000008u;
}
inline void CS_Fire::clear_has_client_id() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void CS_Fire::clear_client_id() {
  client_id_ = 0;
  clear_has_client_id();
}
inline ::google::protobuf::int32 CS_Fire::client_id() const {
  // @@protoc_insertion_point(field_get:CS_Fire.client_id)
  return client_id_;
}
inline void CS_Fire::set_client_id(::google::protobuf::int32 value) {
  set_has_client_id();
  client_id_ = value;
  // @@protoc_insertion_point(field_set:CS_Fire.client_id)
}

// required float pos_x = 5;
inline bool CS_Fire::has_pos_x() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void CS_Fire::set_has_pos_x() {
  _has_bits_[0] |= 0x00000010u;
}
inline void CS_Fire::clear_has_pos_x() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void CS_Fire::clear_pos_x() {
  pos_x_ = 0;
  clear_has_pos_x();
}
inline float CS_Fire::pos_x() const {
  // @@protoc_insertion_point(field_get:CS_Fire.pos_x)
  return pos_x_;
}
inline void CS_Fire::set_pos_x(float value) {
  set_has_pos_x();
  pos_x_ = value;
  // @@protoc_insertion_point(field_set:CS_Fire.pos_x)
}

// required float pos_y = 6;
inline bool CS_Fire::has_pos_y() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void CS_Fire::set_has_pos_y() {
  _has_bits_[0] |= 0x00000020u;
}
inline void CS_Fire::clear_has_pos_y() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void CS_Fire::clear_pos_y() {
  pos_y_ = 0;
  clear_has_pos_y();
}
inline float CS_Fire::pos_y() const {
  // @@protoc_insertion_point(field_get:CS_Fire.pos_y)
  return pos_y_;
}
inline void CS_Fire::set_pos_y(float value) {
  set_has_pos_y();
  pos_y_ = value;
  // @@protoc_insertion_point(field_set:CS_Fire.pos_y)
}

// -------------------------------------------------------------------

// CS_ChangeCannon

// required int32 chair_id = 1;
inline bool CS_ChangeCannon::has_chair_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CS_ChangeCannon::set_has_chair_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CS_ChangeCannon::clear_has_chair_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CS_ChangeCannon::clear_chair_id() {
  chair_id_ = 0;
  clear_has_chair_id();
}
inline ::google::protobuf::int32 CS_ChangeCannon::chair_id() const {
  // @@protoc_insertion_point(field_get:CS_ChangeCannon.chair_id)
  return chair_id_;
}
inline void CS_ChangeCannon::set_chair_id(::google::protobuf::int32 value) {
  set_has_chair_id();
  chair_id_ = value;
  // @@protoc_insertion_point(field_set:CS_ChangeCannon.chair_id)
}

// required int32 add = 2;
inline bool CS_ChangeCannon::has_add() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CS_ChangeCannon::set_has_add() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CS_ChangeCannon::clear_has_add() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CS_ChangeCannon::clear_add() {
  add_ = 0;
  clear_has_add();
}
inline ::google::protobuf::int32 CS_ChangeCannon::add() const {
  // @@protoc_insertion_point(field_get:CS_ChangeCannon.add)
  return add_;
}
inline void CS_ChangeCannon::set_add(::google::protobuf::int32 value) {
  set_has_add();
  add_ = value;
  // @@protoc_insertion_point(field_set:CS_ChangeCannon.add)
}

// -------------------------------------------------------------------

// CS_ChangeScore

// required int32 chair_id = 1;
inline bool CS_ChangeScore::has_chair_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CS_ChangeScore::set_has_chair_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CS_ChangeScore::clear_has_chair_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CS_ChangeScore::clear_chair_id() {
  chair_id_ = 0;
  clear_has_chair_id();
}
inline ::google::protobuf::int32 CS_ChangeScore::chair_id() const {
  // @@protoc_insertion_point(field_get:CS_ChangeScore.chair_id)
  return chair_id_;
}
inline void CS_ChangeScore::set_chair_id(::google::protobuf::int32 value) {
  set_has_chair_id();
  chair_id_ = value;
  // @@protoc_insertion_point(field_set:CS_ChangeScore.chair_id)
}

// required int32 add = 2;
inline bool CS_ChangeScore::has_add() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CS_ChangeScore::set_has_add() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CS_ChangeScore::clear_has_add() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CS_ChangeScore::clear_add() {
  add_ = 0;
  clear_has_add();
}
inline ::google::protobuf::int32 CS_ChangeScore::add() const {
  // @@protoc_insertion_point(field_get:CS_ChangeScore.add)
  return add_;
}
inline void CS_ChangeScore::set_add(::google::protobuf::int32 value) {
  set_has_add();
  add_ = value;
  // @@protoc_insertion_point(field_set:CS_ChangeScore.add)
}

// required int32 add_all = 3;
inline bool CS_ChangeScore::has_add_all() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CS_ChangeScore::set_has_add_all() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CS_ChangeScore::clear_has_add_all() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CS_ChangeScore::clear_add_all() {
  add_all_ = 0;
  clear_has_add_all();
}
inline ::google::protobuf::int32 CS_ChangeScore::add_all() const {
  // @@protoc_insertion_point(field_get:CS_ChangeScore.add_all)
  return add_all_;
}
inline void CS_ChangeScore::set_add_all(::google::protobuf::int32 value) {
  set_has_add_all();
  add_all_ = value;
  // @@protoc_insertion_point(field_set:CS_ChangeScore.add_all)
}

// -------------------------------------------------------------------

// CS_TimeSync

// required int32 chair_id = 1;
inline bool CS_TimeSync::has_chair_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CS_TimeSync::set_has_chair_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CS_TimeSync::clear_has_chair_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CS_TimeSync::clear_chair_id() {
  chair_id_ = 0;
  clear_has_chair_id();
}
inline ::google::protobuf::int32 CS_TimeSync::chair_id() const {
  // @@protoc_insertion_point(field_get:CS_TimeSync.chair_id)
  return chair_id_;
}
inline void CS_TimeSync::set_chair_id(::google::protobuf::int32 value) {
  set_has_chair_id();
  chair_id_ = value;
  // @@protoc_insertion_point(field_set:CS_TimeSync.chair_id)
}

// required uint32 client_tick = 2;
inline bool CS_TimeSync::has_client_tick() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CS_TimeSync::set_has_client_tick() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CS_TimeSync::clear_has_client_tick() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CS_TimeSync::clear_client_tick() {
  client_tick_ = 0u;
  clear_has_client_tick();
}
inline ::google::protobuf::uint32 CS_TimeSync::client_tick() const {
  // @@protoc_insertion_point(field_get:CS_TimeSync.client_tick)
  return client_tick_;
}
inline void CS_TimeSync::set_client_tick(::google::protobuf::uint32 value) {
  set_has_client_tick();
  client_tick_ = value;
  // @@protoc_insertion_point(field_set:CS_TimeSync.client_tick)
}

// -------------------------------------------------------------------

// SC_FishMul

// required int32 fish_id = 1;
inline bool SC_FishMul::has_fish_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SC_FishMul::set_has_fish_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SC_FishMul::clear_has_fish_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SC_FishMul::clear_fish_id() {
  fish_id_ = 0;
  clear_has_fish_id();
}
inline ::google::protobuf::int32 SC_FishMul::fish_id() const {
  // @@protoc_insertion_point(field_get:SC_FishMul.fish_id)
  return fish_id_;
}
inline void SC_FishMul::set_fish_id(::google::protobuf::int32 value) {
  set_has_fish_id();
  fish_id_ = value;
  // @@protoc_insertion_point(field_set:SC_FishMul.fish_id)
}

// required int32 mul = 2;
inline bool SC_FishMul::has_mul() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SC_FishMul::set_has_mul() {
  _has_bits_[0] |= 0x00000002u;
}
inline void SC_FishMul::clear_has_mul() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void SC_FishMul::clear_mul() {
  mul_ = 0;
  clear_has_mul();
}
inline ::google::protobuf::int32 SC_FishMul::mul() const {
  // @@protoc_insertion_point(field_get:SC_FishMul.mul)
  return mul_;
}
inline void SC_FishMul::set_mul(::google::protobuf::int32 value) {
  set_has_mul();
  mul_ = value;
  // @@protoc_insertion_point(field_set:SC_FishMul.mul)
}

// -------------------------------------------------------------------

// SC_AddBuffer

// required int32 buffer_type = 1;
inline bool SC_AddBuffer::has_buffer_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SC_AddBuffer::set_has_buffer_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SC_AddBuffer::clear_has_buffer_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SC_AddBuffer::clear_buffer_type() {
  buffer_type_ = 0;
  clear_has_buffer_type();
}
inline ::google::protobuf::int32 SC_AddBuffer::buffer_type() const {
  // @@protoc_insertion_point(field_get:SC_AddBuffer.buffer_type)
  return buffer_type_;
}
inline void SC_AddBuffer::set_buffer_type(::google::protobuf::int32 value) {
  set_has_buffer_type();
  buffer_type_ = value;
  // @@protoc_insertion_point(field_set:SC_AddBuffer.buffer_type)
}

// required float buffer_param = 2;
inline bool SC_AddBuffer::has_buffer_param() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SC_AddBuffer::set_has_buffer_param() {
  _has_bits_[0] |= 0x00000002u;
}
inline void SC_AddBuffer::clear_has_buffer_param() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void SC_AddBuffer::clear_buffer_param() {
  buffer_param_ = 0;
  clear_has_buffer_param();
}
inline float SC_AddBuffer::buffer_param() const {
  // @@protoc_insertion_point(field_get:SC_AddBuffer.buffer_param)
  return buffer_param_;
}
inline void SC_AddBuffer::set_buffer_param(float value) {
  set_has_buffer_param();
  buffer_param_ = value;
  // @@protoc_insertion_point(field_set:SC_AddBuffer.buffer_param)
}

// required float buffer_time = 3;
inline bool SC_AddBuffer::has_buffer_time() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void SC_AddBuffer::set_has_buffer_time() {
  _has_bits_[0] |= 0x00000004u;
}
inline void SC_AddBuffer::clear_has_buffer_time() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void SC_AddBuffer::clear_buffer_time() {
  buffer_time_ = 0;
  clear_has_buffer_time();
}
inline float SC_AddBuffer::buffer_time() const {
  // @@protoc_insertion_point(field_get:SC_AddBuffer.buffer_time)
  return buffer_time_;
}
inline void SC_AddBuffer::set_buffer_time(float value) {
  set_has_buffer_time();
  buffer_time_ = value;
  // @@protoc_insertion_point(field_set:SC_AddBuffer.buffer_time)
}

// -------------------------------------------------------------------

// SC_BulletSet

// required int32 mulriple = 1;
inline bool SC_BulletSet::has_mulriple() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SC_BulletSet::set_has_mulriple() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SC_BulletSet::clear_has_mulriple() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SC_BulletSet::clear_mulriple() {
  mulriple_ = 0;
  clear_has_mulriple();
}
inline ::google::protobuf::int32 SC_BulletSet::mulriple() const {
  // @@protoc_insertion_point(field_get:SC_BulletSet.mulriple)
  return mulriple_;
}
inline void SC_BulletSet::set_mulriple(::google::protobuf::int32 value) {
  set_has_mulriple();
  mulriple_ = value;
  // @@protoc_insertion_point(field_set:SC_BulletSet.mulriple)
}

// required int32 speed = 2;
inline bool SC_BulletSet::has_speed() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SC_BulletSet::set_has_speed() {
  _has_bits_[0] |= 0x00000002u;
}
inline void SC_BulletSet::clear_has_speed() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void SC_BulletSet::clear_speed() {
  speed_ = 0;
  clear_has_speed();
}
inline ::google::protobuf::int32 SC_BulletSet::speed() const {
  // @@protoc_insertion_point(field_get:SC_BulletSet.speed)
  return speed_;
}
inline void SC_BulletSet::set_speed(::google::protobuf::int32 value) {
  set_has_speed();
  speed_ = value;
  // @@protoc_insertion_point(field_set:SC_BulletSet.speed)
}

// required int32 max_catch = 3;
inline bool SC_BulletSet::has_max_catch() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void SC_BulletSet::set_has_max_catch() {
  _has_bits_[0] |= 0x00000004u;
}
inline void SC_BulletSet::clear_has_max_catch() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void SC_BulletSet::clear_max_catch() {
  max_catch_ = 0;
  clear_has_max_catch();
}
inline ::google::protobuf::int32 SC_BulletSet::max_catch() const {
  // @@protoc_insertion_point(field_get:SC_BulletSet.max_catch)
  return max_catch_;
}
inline void SC_BulletSet::set_max_catch(::google::protobuf::int32 value) {
  set_has_max_catch();
  max_catch_ = value;
  // @@protoc_insertion_point(field_set:SC_BulletSet.max_catch)
}

// required int32 bullet_size = 4;
inline bool SC_BulletSet::has_bullet_size() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void SC_BulletSet::set_has_bullet_size() {
  _has_bits_[0] |= 0x00000008u;
}
inline void SC_BulletSet::clear_has_bullet_size() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void SC_BulletSet::clear_bullet_size() {
  bullet_size_ = 0;
  clear_has_bullet_size();
}
inline ::google::protobuf::int32 SC_BulletSet::bullet_size() const {
  // @@protoc_insertion_point(field_get:SC_BulletSet.bullet_size)
  return bullet_size_;
}
inline void SC_BulletSet::set_bullet_size(::google::protobuf::int32 value) {
  set_has_bullet_size();
  bullet_size_ = value;
  // @@protoc_insertion_point(field_set:SC_BulletSet.bullet_size)
}

// required int32 catch_radio = 5;
inline bool SC_BulletSet::has_catch_radio() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void SC_BulletSet::set_has_catch_radio() {
  _has_bits_[0] |= 0x00000010u;
}
inline void SC_BulletSet::clear_has_catch_radio() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void SC_BulletSet::clear_catch_radio() {
  catch_radio_ = 0;
  clear_has_catch_radio();
}
inline ::google::protobuf::int32 SC_BulletSet::catch_radio() const {
  // @@protoc_insertion_point(field_get:SC_BulletSet.catch_radio)
  return catch_radio_;
}
inline void SC_BulletSet::set_catch_radio(::google::protobuf::int32 value) {
  set_has_catch_radio();
  catch_radio_ = value;
  // @@protoc_insertion_point(field_set:SC_BulletSet.catch_radio)
}

// required int32 cannon_type = 6;
inline bool SC_BulletSet::has_cannon_type() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void SC_BulletSet::set_has_cannon_type() {
  _has_bits_[0] |= 0x00000020u;
}
inline void SC_BulletSet::clear_has_cannon_type() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void SC_BulletSet::clear_cannon_type() {
  cannon_type_ = 0;
  clear_has_cannon_type();
}
inline ::google::protobuf::int32 SC_BulletSet::cannon_type() const {
  // @@protoc_insertion_point(field_get:SC_BulletSet.cannon_type)
  return cannon_type_;
}
inline void SC_BulletSet::set_cannon_type(::google::protobuf::int32 value) {
  set_has_cannon_type();
  cannon_type_ = value;
  // @@protoc_insertion_point(field_set:SC_BulletSet.cannon_type)
}

// required int32 first = 7;
inline bool SC_BulletSet::has_first() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void SC_BulletSet::set_has_first() {
  _has_bits_[0] |= 0x00000040u;
}
inline void SC_BulletSet::clear_has_first() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void SC_BulletSet::clear_first() {
  first_ = 0;
  clear_has_first();
}
inline ::google::protobuf::int32 SC_BulletSet::first() const {
  // @@protoc_insertion_point(field_get:SC_BulletSet.first)
  return first_;
}
inline void SC_BulletSet::set_first(::google::protobuf::int32 value) {
  set_has_first();
  first_ = value;
  // @@protoc_insertion_point(field_set:SC_BulletSet.first)
}

// -------------------------------------------------------------------

// SC_BulletSet_List

// repeated .SC_BulletSet pb_bullets = 1;
inline int SC_BulletSet_List::pb_bullets_size() const {
  return pb_bullets_.size();
}
inline void SC_BulletSet_List::clear_pb_bullets() {
  pb_bullets_.Clear();
}
inline const ::SC_BulletSet& SC_BulletSet_List::pb_bullets(int index) const {
  // @@protoc_insertion_point(field_get:SC_BulletSet_List.pb_bullets)
  return pb_bullets_.Get(index);
}
inline ::SC_BulletSet* SC_BulletSet_List::mutable_pb_bullets(int index) {
  // @@protoc_insertion_point(field_mutable:SC_BulletSet_List.pb_bullets)
  return pb_bullets_.Mutable(index);
}
inline ::SC_BulletSet* SC_BulletSet_List::add_pb_bullets() {
  // @@protoc_insertion_point(field_add:SC_BulletSet_List.pb_bullets)
  return pb_bullets_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::SC_BulletSet >*
SC_BulletSet_List::mutable_pb_bullets() {
  // @@protoc_insertion_point(field_mutable_list:SC_BulletSet_List.pb_bullets)
  return &pb_bullets_;
}
inline const ::google::protobuf::RepeatedPtrField< ::SC_BulletSet >&
SC_BulletSet_List::pb_bullets() const {
  // @@protoc_insertion_point(field_list:SC_BulletSet_List.pb_bullets)
  return pb_bullets_;
}

// -------------------------------------------------------------------

// SC_SendDes

// repeated string des = 1;
inline int SC_SendDes::des_size() const {
  return des_.size();
}
inline void SC_SendDes::clear_des() {
  des_.Clear();
}
inline const ::std::string& SC_SendDes::des(int index) const {
  // @@protoc_insertion_point(field_get:SC_SendDes.des)
  return des_.Get(index);
}
inline ::std::string* SC_SendDes::mutable_des(int index) {
  // @@protoc_insertion_point(field_mutable:SC_SendDes.des)
  return des_.Mutable(index);
}
inline void SC_SendDes::set_des(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:SC_SendDes.des)
  des_.Mutable(index)->assign(value);
}
#if LANG_CXX11
inline void SC_SendDes::set_des(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:SC_SendDes.des)
  des_.Mutable(index)->assign(std::move(value));
}
#endif
inline void SC_SendDes::set_des(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  des_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:SC_SendDes.des)
}
inline void SC_SendDes::set_des(int index, const char* value, size_t size) {
  des_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:SC_SendDes.des)
}
inline ::std::string* SC_SendDes::add_des() {
  // @@protoc_insertion_point(field_add_mutable:SC_SendDes.des)
  return des_.Add();
}
inline void SC_SendDes::add_des(const ::std::string& value) {
  des_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:SC_SendDes.des)
}
#if LANG_CXX11
inline void SC_SendDes::add_des(::std::string&& value) {
  des_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:SC_SendDes.des)
}
#endif
inline void SC_SendDes::add_des(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  des_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:SC_SendDes.des)
}
inline void SC_SendDes::add_des(const char* value, size_t size) {
  des_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:SC_SendDes.des)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
SC_SendDes::des() const {
  // @@protoc_insertion_point(field_list:SC_SendDes.des)
  return des_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
SC_SendDes::mutable_des() {
  // @@protoc_insertion_point(field_mutable_list:SC_SendDes.des)
  return &des_;
}

// -------------------------------------------------------------------

// SC_LockFish

// required int32 chair_id = 1;
inline bool SC_LockFish::has_chair_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SC_LockFish::set_has_chair_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SC_LockFish::clear_has_chair_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SC_LockFish::clear_chair_id() {
  chair_id_ = 0;
  clear_has_chair_id();
}
inline ::google::protobuf::int32 SC_LockFish::chair_id() const {
  // @@protoc_insertion_point(field_get:SC_LockFish.chair_id)
  return chair_id_;
}
inline void SC_LockFish::set_chair_id(::google::protobuf::int32 value) {
  set_has_chair_id();
  chair_id_ = value;
  // @@protoc_insertion_point(field_set:SC_LockFish.chair_id)
}

// required int32 lock_id = 2 [default = 0];
inline bool SC_LockFish::has_lock_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SC_LockFish::set_has_lock_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void SC_LockFish::clear_has_lock_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void SC_LockFish::clear_lock_id() {
  lock_id_ = 0;
  clear_has_lock_id();
}
inline ::google::protobuf::int32 SC_LockFish::lock_id() const {
  // @@protoc_insertion_point(field_get:SC_LockFish.lock_id)
  return lock_id_;
}
inline void SC_LockFish::set_lock_id(::google::protobuf::int32 value) {
  set_has_lock_id();
  lock_id_ = value;
  // @@protoc_insertion_point(field_set:SC_LockFish.lock_id)
}

// -------------------------------------------------------------------

// SC_AllowFire

// required int32 allow_fire = 1;
inline bool SC_AllowFire::has_allow_fire() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SC_AllowFire::set_has_allow_fire() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SC_AllowFire::clear_has_allow_fire() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SC_AllowFire::clear_allow_fire() {
  allow_fire_ = 0;
  clear_has_allow_fire();
}
inline ::google::protobuf::int32 SC_AllowFire::allow_fire() const {
  // @@protoc_insertion_point(field_get:SC_AllowFire.allow_fire)
  return allow_fire_;
}
inline void SC_AllowFire::set_allow_fire(::google::protobuf::int32 value) {
  set_has_allow_fire();
  allow_fire_ = value;
  // @@protoc_insertion_point(field_set:SC_AllowFire.allow_fire)
}

// -------------------------------------------------------------------

// SC_SwitchScene

// required int32 nst = 1;
inline bool SC_SwitchScene::has_nst() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SC_SwitchScene::set_has_nst() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SC_SwitchScene::clear_has_nst() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SC_SwitchScene::clear_nst() {
  nst_ = 0;
  clear_has_nst();
}
inline ::google::protobuf::int32 SC_SwitchScene::nst() const {
  // @@protoc_insertion_point(field_get:SC_SwitchScene.nst)
  return nst_;
}
inline void SC_SwitchScene::set_nst(::google::protobuf::int32 value) {
  set_has_nst();
  nst_ = value;
  // @@protoc_insertion_point(field_set:SC_SwitchScene.nst)
}

// required int32 switching = 2;
inline bool SC_SwitchScene::has_switching() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SC_SwitchScene::set_has_switching() {
  _has_bits_[0] |= 0x00000002u;
}
inline void SC_SwitchScene::clear_has_switching() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void SC_SwitchScene::clear_switching() {
  switching_ = 0;
  clear_has_switching();
}
inline ::google::protobuf::int32 SC_SwitchScene::switching() const {
  // @@protoc_insertion_point(field_get:SC_SwitchScene.switching)
  return switching_;
}
inline void SC_SwitchScene::set_switching(::google::protobuf::int32 value) {
  set_has_switching();
  switching_ = value;
  // @@protoc_insertion_point(field_set:SC_SwitchScene.switching)
}

// -------------------------------------------------------------------

// SC_KillBullet

// required int32 chair_id = 1;
inline bool SC_KillBullet::has_chair_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SC_KillBullet::set_has_chair_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SC_KillBullet::clear_has_chair_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SC_KillBullet::clear_chair_id() {
  chair_id_ = 0;
  clear_has_chair_id();
}
inline ::google::protobuf::int32 SC_KillBullet::chair_id() const {
  // @@protoc_insertion_point(field_get:SC_KillBullet.chair_id)
  return chair_id_;
}
inline void SC_KillBullet::set_chair_id(::google::protobuf::int32 value) {
  set_has_chair_id();
  chair_id_ = value;
  // @@protoc_insertion_point(field_set:SC_KillBullet.chair_id)
}

// required int32 bullet_id = 2;
inline bool SC_KillBullet::has_bullet_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SC_KillBullet::set_has_bullet_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void SC_KillBullet::clear_has_bullet_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void SC_KillBullet::clear_bullet_id() {
  bullet_id_ = 0;
  clear_has_bullet_id();
}
inline ::google::protobuf::int32 SC_KillBullet::bullet_id() const {
  // @@protoc_insertion_point(field_get:SC_KillBullet.bullet_id)
  return bullet_id_;
}
inline void SC_KillBullet::set_bullet_id(::google::protobuf::int32 value) {
  set_has_bullet_id();
  bullet_id_ = value;
  // @@protoc_insertion_point(field_set:SC_KillBullet.bullet_id)
}

// -------------------------------------------------------------------

// SC_KillFish

// required int32 chair_id = 1;
inline bool SC_KillFish::has_chair_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SC_KillFish::set_has_chair_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void SC_KillFish::clear_has_chair_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void SC_KillFish::clear_chair_id() {
  chair_id_ = 0;
  clear_has_chair_id();
}
inline ::google::protobuf::int32 SC_KillFish::chair_id() const {
  // @@protoc_insertion_point(field_get:SC_KillFish.chair_id)
  return chair_id_;
}
inline void SC_KillFish::set_chair_id(::google::protobuf::int32 value) {
  set_has_chair_id();
  chair_id_ = value;
  // @@protoc_insertion_point(field_set:SC_KillFish.chair_id)
}

// required int64 score = 2;
inline bool SC_KillFish::has_score() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SC_KillFish::set_has_score() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SC_KillFish::clear_has_score() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SC_KillFish::clear_score() {
  score_ = GOOGLE_LONGLONG(0);
  clear_has_score();
}
inline ::google::protobuf::int64 SC_KillFish::score() const {
  // @@protoc_insertion_point(field_get:SC_KillFish.score)
  return score_;
}
inline void SC_KillFish::set_score(::google::protobuf::int64 value) {
  set_has_score();
  score_ = value;
  // @@protoc_insertion_point(field_set:SC_KillFish.score)
}

// required int32 fish_id = 3;
inline bool SC_KillFish::has_fish_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void SC_KillFish::set_has_fish_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void SC_KillFish::clear_has_fish_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void SC_KillFish::clear_fish_id() {
  fish_id_ = 0;
  clear_has_fish_id();
}
inline ::google::protobuf::int32 SC_KillFish::fish_id() const {
  // @@protoc_insertion_point(field_get:SC_KillFish.fish_id)
  return fish_id_;
}
inline void SC_KillFish::set_fish_id(::google::protobuf::int32 value) {
  set_has_fish_id();
  fish_id_ = value;
  // @@protoc_insertion_point(field_set:SC_KillFish.fish_id)
}

// required int32 bscoe = 4;
inline bool SC_KillFish::has_bscoe() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void SC_KillFish::set_has_bscoe() {
  _has_bits_[0] |= 0x00000008u;
}
inline void SC_KillFish::clear_has_bscoe() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void SC_KillFish::clear_bscoe() {
  bscoe_ = 0;
  clear_has_bscoe();
}
inline ::google::protobuf::int32 SC_KillFish::bscoe() const {
  // @@protoc_insertion_point(field_get:SC_KillFish.bscoe)
  return bscoe_;
}
inline void SC_KillFish::set_bscoe(::google::protobuf::int32 value) {
  set_has_bscoe();
  bscoe_ = value;
  // @@protoc_insertion_point(field_set:SC_KillFish.bscoe)
}

// -------------------------------------------------------------------

// SC_SendBullet

// required int32 id = 1;
inline bool SC_SendBullet::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SC_SendBullet::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SC_SendBullet::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SC_SendBullet::clear_id() {
  id_ = 0;
  clear_has_id();
}
inline ::google::protobuf::int32 SC_SendBullet::id() const {
  // @@protoc_insertion_point(field_get:SC_SendBullet.id)
  return id_;
}
inline void SC_SendBullet::set_id(::google::protobuf::int32 value) {
  set_has_id();
  id_ = value;
  // @@protoc_insertion_point(field_set:SC_SendBullet.id)
}

// required int32 chair_id = 2;
inline bool SC_SendBullet::has_chair_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SC_SendBullet::set_has_chair_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void SC_SendBullet::clear_has_chair_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void SC_SendBullet::clear_chair_id() {
  chair_id_ = 0;
  clear_has_chair_id();
}
inline ::google::protobuf::int32 SC_SendBullet::chair_id() const {
  // @@protoc_insertion_point(field_get:SC_SendBullet.chair_id)
  return chair_id_;
}
inline void SC_SendBullet::set_chair_id(::google::protobuf::int32 value) {
  set_has_chair_id();
  chair_id_ = value;
  // @@protoc_insertion_point(field_set:SC_SendBullet.chair_id)
}

// required uint32 create_tick = 3;
inline bool SC_SendBullet::has_create_tick() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void SC_SendBullet::set_has_create_tick() {
  _has_bits_[0] |= 0x00000004u;
}
inline void SC_SendBullet::clear_has_create_tick() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void SC_SendBullet::clear_create_tick() {
  create_tick_ = 0u;
  clear_has_create_tick();
}
inline ::google::protobuf::uint32 SC_SendBullet::create_tick() const {
  // @@protoc_insertion_point(field_get:SC_SendBullet.create_tick)
  return create_tick_;
}
inline void SC_SendBullet::set_create_tick(::google::protobuf::uint32 value) {
  set_has_create_tick();
  create_tick_ = value;
  // @@protoc_insertion_point(field_set:SC_SendBullet.create_tick)
}

// required float x_pos = 4;
inline bool SC_SendBullet::has_x_pos() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void SC_SendBullet::set_has_x_pos() {
  _has_bits_[0] |= 0x00000008u;
}
inline void SC_SendBullet::clear_has_x_pos() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void SC_SendBullet::clear_x_pos() {
  x_pos_ = 0;
  clear_has_x_pos();
}
inline float SC_SendBullet::x_pos() const {
  // @@protoc_insertion_point(field_get:SC_SendBullet.x_pos)
  return x_pos_;
}
inline void SC_SendBullet::set_x_pos(float value) {
  set_has_x_pos();
  x_pos_ = value;
  // @@protoc_insertion_point(field_set:SC_SendBullet.x_pos)
}

// required float y_pos = 5;
inline bool SC_SendBullet::has_y_pos() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void SC_SendBullet::set_has_y_pos() {
  _has_bits_[0] |= 0x00000010u;
}
inline void SC_SendBullet::clear_has_y_pos() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void SC_SendBullet::clear_y_pos() {
  y_pos_ = 0;
  clear_has_y_pos();
}
inline float SC_SendBullet::y_pos() const {
  // @@protoc_insertion_point(field_get:SC_SendBullet.y_pos)
  return y_pos_;
}
inline void SC_SendBullet::set_y_pos(float value) {
  set_has_y_pos();
  y_pos_ = value;
  // @@protoc_insertion_point(field_set:SC_SendBullet.y_pos)
}

// required int32 cannon_type = 6;
inline bool SC_SendBullet::has_cannon_type() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void SC_SendBullet::set_has_cannon_type() {
  _has_bits_[0] |= 0x00000020u;
}
inline void SC_SendBullet::clear_has_cannon_type() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void SC_SendBullet::clear_cannon_type() {
  cannon_type_ = 0;
  clear_has_cannon_type();
}
inline ::google::protobuf::int32 SC_SendBullet::cannon_type() const {
  // @@protoc_insertion_point(field_get:SC_SendBullet.cannon_type)
  return cannon_type_;
}
inline void SC_SendBullet::set_cannon_type(::google::protobuf::int32 value) {
  set_has_cannon_type();
  cannon_type_ = value;
  // @@protoc_insertion_point(field_set:SC_SendBullet.cannon_type)
}

// required int32 multiply = 7;
inline bool SC_SendBullet::has_multiply() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void SC_SendBullet::set_has_multiply() {
  _has_bits_[0] |= 0x00000080u;
}
inline void SC_SendBullet::clear_has_multiply() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void SC_SendBullet::clear_multiply() {
  multiply_ = 0;
  clear_has_multiply();
}
inline ::google::protobuf::int32 SC_SendBullet::multiply() const {
  // @@protoc_insertion_point(field_get:SC_SendBullet.multiply)
  return multiply_;
}
inline void SC_SendBullet::set_multiply(::google::protobuf::int32 value) {
  set_has_multiply();
  multiply_ = value;
  // @@protoc_insertion_point(field_set:SC_SendBullet.multiply)
}

// required int64 score = 8;
inline bool SC_SendBullet::has_score() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void SC_SendBullet::set_has_score() {
  _has_bits_[0] |= 0x00000040u;
}
inline void SC_SendBullet::clear_has_score() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void SC_SendBullet::clear_score() {
  score_ = GOOGLE_LONGLONG(0);
  clear_has_score();
}
inline ::google::protobuf::int64 SC_SendBullet::score() const {
  // @@protoc_insertion_point(field_get:SC_SendBullet.score)
  return score_;
}
inline void SC_SendBullet::set_score(::google::protobuf::int64 value) {
  set_has_score();
  score_ = value;
  // @@protoc_insertion_point(field_set:SC_SendBullet.score)
}

// required float direction = 9;
inline bool SC_SendBullet::has_direction() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void SC_SendBullet::set_has_direction() {
  _has_bits_[0] |= 0x00000100u;
}
inline void SC_SendBullet::clear_has_direction() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void SC_SendBullet::clear_direction() {
  direction_ = 0;
  clear_has_direction();
}
inline float SC_SendBullet::direction() const {
  // @@protoc_insertion_point(field_get:SC_SendBullet.direction)
  return direction_;
}
inline void SC_SendBullet::set_direction(float value) {
  set_has_direction();
  direction_ = value;
  // @@protoc_insertion_point(field_set:SC_SendBullet.direction)
}

// required int32 is_new = 10;
inline bool SC_SendBullet::has_is_new() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void SC_SendBullet::set_has_is_new() {
  _has_bits_[0] |= 0x00000200u;
}
inline void SC_SendBullet::clear_has_is_new() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void SC_SendBullet::clear_is_new() {
  is_new_ = 0;
  clear_has_is_new();
}
inline ::google::protobuf::int32 SC_SendBullet::is_new() const {
  // @@protoc_insertion_point(field_get:SC_SendBullet.is_new)
  return is_new_;
}
inline void SC_SendBullet::set_is_new(::google::protobuf::int32 value) {
  set_has_is_new();
  is_new_ = value;
  // @@protoc_insertion_point(field_set:SC_SendBullet.is_new)
}

// required uint32 server_tick = 11;
inline bool SC_SendBullet::has_server_tick() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void SC_SendBullet::set_has_server_tick() {
  _has_bits_[0] |= 0x00000400u;
}
inline void SC_SendBullet::clear_has_server_tick() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void SC_SendBullet::clear_server_tick() {
  server_tick_ = 0u;
  clear_has_server_tick();
}
inline ::google::protobuf::uint32 SC_SendBullet::server_tick() const {
  // @@protoc_insertion_point(field_get:SC_SendBullet.server_tick)
  return server_tick_;
}
inline void SC_SendBullet::set_server_tick(::google::protobuf::uint32 value) {
  set_has_server_tick();
  server_tick_ = value;
  // @@protoc_insertion_point(field_set:SC_SendBullet.server_tick)
}

// required int32 is_double = 12;
inline bool SC_SendBullet::has_is_double() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void SC_SendBullet::set_has_is_double() {
  _has_bits_[0] |= 0x00000800u;
}
inline void SC_SendBullet::clear_has_is_double() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void SC_SendBullet::clear_is_double() {
  is_double_ = 0;
  clear_has_is_double();
}
inline ::google::protobuf::int32 SC_SendBullet::is_double() const {
  // @@protoc_insertion_point(field_get:SC_SendBullet.is_double)
  return is_double_;
}
inline void SC_SendBullet::set_is_double(::google::protobuf::int32 value) {
  set_has_is_double();
  is_double_ = value;
  // @@protoc_insertion_point(field_set:SC_SendBullet.is_double)
}

// -------------------------------------------------------------------

// SC_Fly_Bullet_List

// repeated .SC_SendBullet pb_fly_bullets = 1;
inline int SC_Fly_Bullet_List::pb_fly_bullets_size() const {
  return pb_fly_bullets_.size();
}
inline void SC_Fly_Bullet_List::clear_pb_fly_bullets() {
  pb_fly_bullets_.Clear();
}
inline const ::SC_SendBullet& SC_Fly_Bullet_List::pb_fly_bullets(int index) const {
  // @@protoc_insertion_point(field_get:SC_Fly_Bullet_List.pb_fly_bullets)
  return pb_fly_bullets_.Get(index);
}
inline ::SC_SendBullet* SC_Fly_Bullet_List::mutable_pb_fly_bullets(int index) {
  // @@protoc_insertion_point(field_mutable:SC_Fly_Bullet_List.pb_fly_bullets)
  return pb_fly_bullets_.Mutable(index);
}
inline ::SC_SendBullet* SC_Fly_Bullet_List::add_pb_fly_bullets() {
  // @@protoc_insertion_point(field_add:SC_Fly_Bullet_List.pb_fly_bullets)
  return pb_fly_bullets_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::SC_SendBullet >*
SC_Fly_Bullet_List::mutable_pb_fly_bullets() {
  // @@protoc_insertion_point(field_mutable_list:SC_Fly_Bullet_List.pb_fly_bullets)
  return &pb_fly_bullets_;
}
inline const ::google::protobuf::RepeatedPtrField< ::SC_SendBullet >&
SC_Fly_Bullet_List::pb_fly_bullets() const {
  // @@protoc_insertion_point(field_list:SC_Fly_Bullet_List.pb_fly_bullets)
  return pb_fly_bullets_;
}

// -------------------------------------------------------------------

// SC_CannonSet

// required int32 chair_id = 1;
inline bool SC_CannonSet::has_chair_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SC_CannonSet::set_has_chair_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SC_CannonSet::clear_has_chair_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SC_CannonSet::clear_chair_id() {
  chair_id_ = 0;
  clear_has_chair_id();
}
inline ::google::protobuf::int32 SC_CannonSet::chair_id() const {
  // @@protoc_insertion_point(field_get:SC_CannonSet.chair_id)
  return chair_id_;
}
inline void SC_CannonSet::set_chair_id(::google::protobuf::int32 value) {
  set_has_chair_id();
  chair_id_ = value;
  // @@protoc_insertion_point(field_set:SC_CannonSet.chair_id)
}

// required int32 cannon_type = 2;
inline bool SC_CannonSet::has_cannon_type() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SC_CannonSet::set_has_cannon_type() {
  _has_bits_[0] |= 0x00000002u;
}
inline void SC_CannonSet::clear_has_cannon_type() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void SC_CannonSet::clear_cannon_type() {
  cannon_type_ = 0;
  clear_has_cannon_type();
}
inline ::google::protobuf::int32 SC_CannonSet::cannon_type() const {
  // @@protoc_insertion_point(field_get:SC_CannonSet.cannon_type)
  return cannon_type_;
}
inline void SC_CannonSet::set_cannon_type(::google::protobuf::int32 value) {
  set_has_cannon_type();
  cannon_type_ = value;
  // @@protoc_insertion_point(field_set:SC_CannonSet.cannon_type)
}

// required int32 cannon_mul = 3;
inline bool SC_CannonSet::has_cannon_mul() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void SC_CannonSet::set_has_cannon_mul() {
  _has_bits_[0] |= 0x00000004u;
}
inline void SC_CannonSet::clear_has_cannon_mul() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void SC_CannonSet::clear_cannon_mul() {
  cannon_mul_ = 0;
  clear_has_cannon_mul();
}
inline ::google::protobuf::int32 SC_CannonSet::cannon_mul() const {
  // @@protoc_insertion_point(field_get:SC_CannonSet.cannon_mul)
  return cannon_mul_;
}
inline void SC_CannonSet::set_cannon_mul(::google::protobuf::int32 value) {
  set_has_cannon_mul();
  cannon_mul_ = value;
  // @@protoc_insertion_point(field_set:SC_CannonSet.cannon_mul)
}

// required int32 cannon_set = 4;
inline bool SC_CannonSet::has_cannon_set() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void SC_CannonSet::set_has_cannon_set() {
  _has_bits_[0] |= 0x00000008u;
}
inline void SC_CannonSet::clear_has_cannon_set() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void SC_CannonSet::clear_cannon_set() {
  cannon_set_ = 0;
  clear_has_cannon_set();
}
inline ::google::protobuf::int32 SC_CannonSet::cannon_set() const {
  // @@protoc_insertion_point(field_get:SC_CannonSet.cannon_set)
  return cannon_set_;
}
inline void SC_CannonSet::set_cannon_set(::google::protobuf::int32 value) {
  set_has_cannon_set();
  cannon_set_ = value;
  // @@protoc_insertion_point(field_set:SC_CannonSet.cannon_set)
}

// -------------------------------------------------------------------

// SC_ChangeScore

// required int32 chair_id = 1;
inline bool SC_ChangeScore::has_chair_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void SC_ChangeScore::set_has_chair_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void SC_ChangeScore::clear_has_chair_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void SC_ChangeScore::clear_chair_id() {
  chair_id_ = 0;
  clear_has_chair_id();
}
inline ::google::protobuf::int32 SC_ChangeScore::chair_id() const {
  // @@protoc_insertion_point(field_get:SC_ChangeScore.chair_id)
  return chair_id_;
}
inline void SC_ChangeScore::set_chair_id(::google::protobuf::int32 value) {
  set_has_chair_id();
  chair_id_ = value;
  // @@protoc_insertion_point(field_set:SC_ChangeScore.chair_id)
}

// required int64 fish_score = 2;
inline bool SC_ChangeScore::has_fish_score() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SC_ChangeScore::set_has_fish_score() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SC_ChangeScore::clear_has_fish_score() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SC_ChangeScore::clear_fish_score() {
  fish_score_ = GOOGLE_LONGLONG(0);
  clear_has_fish_score();
}
inline ::google::protobuf::int64 SC_ChangeScore::fish_score() const {
  // @@protoc_insertion_point(field_get:SC_ChangeScore.fish_score)
  return fish_score_;
}
inline void SC_ChangeScore::set_fish_score(::google::protobuf::int64 value) {
  set_has_fish_score();
  fish_score_ = value;
  // @@protoc_insertion_point(field_set:SC_ChangeScore.fish_score)
}

// required int64 wastage_score = 3;
inline bool SC_ChangeScore::has_wastage_score() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SC_ChangeScore::set_has_wastage_score() {
  _has_bits_[0] |= 0x00000002u;
}
inline void SC_ChangeScore::clear_has_wastage_score() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void SC_ChangeScore::clear_wastage_score() {
  wastage_score_ = GOOGLE_LONGLONG(0);
  clear_has_wastage_score();
}
inline ::google::protobuf::int64 SC_ChangeScore::wastage_score() const {
  // @@protoc_insertion_point(field_get:SC_ChangeScore.wastage_score)
  return wastage_score_;
}
inline void SC_ChangeScore::set_wastage_score(::google::protobuf::int64 value) {
  set_has_wastage_score();
  wastage_score_ = value;
  // @@protoc_insertion_point(field_set:SC_ChangeScore.wastage_score)
}

// -------------------------------------------------------------------

// SC_UserInfo

// required int32 chair_id = 1;
inline bool SC_UserInfo::has_chair_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SC_UserInfo::set_has_chair_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void SC_UserInfo::clear_has_chair_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void SC_UserInfo::clear_chair_id() {
  chair_id_ = 0;
  clear_has_chair_id();
}
inline ::google::protobuf::int32 SC_UserInfo::chair_id() const {
  // @@protoc_insertion_point(field_get:SC_UserInfo.chair_id)
  return chair_id_;
}
inline void SC_UserInfo::set_chair_id(::google::protobuf::int32 value) {
  set_has_chair_id();
  chair_id_ = value;
  // @@protoc_insertion_point(field_set:SC_UserInfo.chair_id)
}

// required int64 score = 2;
inline bool SC_UserInfo::has_score() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SC_UserInfo::set_has_score() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SC_UserInfo::clear_has_score() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SC_UserInfo::clear_score() {
  score_ = GOOGLE_LONGLONG(0);
  clear_has_score();
}
inline ::google::protobuf::int64 SC_UserInfo::score() const {
  // @@protoc_insertion_point(field_get:SC_UserInfo.score)
  return score_;
}
inline void SC_UserInfo::set_score(::google::protobuf::int64 value) {
  set_has_score();
  score_ = value;
  // @@protoc_insertion_point(field_set:SC_UserInfo.score)
}

// required int32 cannon_type = 3;
inline bool SC_UserInfo::has_cannon_type() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void SC_UserInfo::set_has_cannon_type() {
  _has_bits_[0] |= 0x00000004u;
}
inline void SC_UserInfo::clear_has_cannon_type() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void SC_UserInfo::clear_cannon_type() {
  cannon_type_ = 0;
  clear_has_cannon_type();
}
inline ::google::protobuf::int32 SC_UserInfo::cannon_type() const {
  // @@protoc_insertion_point(field_get:SC_UserInfo.cannon_type)
  return cannon_type_;
}
inline void SC_UserInfo::set_cannon_type(::google::protobuf::int32 value) {
  set_has_cannon_type();
  cannon_type_ = value;
  // @@protoc_insertion_point(field_set:SC_UserInfo.cannon_type)
}

// required int32 cannon_mul = 4;
inline bool SC_UserInfo::has_cannon_mul() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void SC_UserInfo::set_has_cannon_mul() {
  _has_bits_[0] |= 0x00000010u;
}
inline void SC_UserInfo::clear_has_cannon_mul() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void SC_UserInfo::clear_cannon_mul() {
  cannon_mul_ = 0;
  clear_has_cannon_mul();
}
inline ::google::protobuf::int32 SC_UserInfo::cannon_mul() const {
  // @@protoc_insertion_point(field_get:SC_UserInfo.cannon_mul)
  return cannon_mul_;
}
inline void SC_UserInfo::set_cannon_mul(::google::protobuf::int32 value) {
  set_has_cannon_mul();
  cannon_mul_ = value;
  // @@protoc_insertion_point(field_set:SC_UserInfo.cannon_mul)
}

// required int64 wastage = 5;
inline bool SC_UserInfo::has_wastage() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void SC_UserInfo::set_has_wastage() {
  _has_bits_[0] |= 0x00000008u;
}
inline void SC_UserInfo::clear_has_wastage() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void SC_UserInfo::clear_wastage() {
  wastage_ = GOOGLE_LONGLONG(0);
  clear_has_wastage();
}
inline ::google::protobuf::int64 SC_UserInfo::wastage() const {
  // @@protoc_insertion_point(field_get:SC_UserInfo.wastage)
  return wastage_;
}
inline void SC_UserInfo::set_wastage(::google::protobuf::int64 value) {
  set_has_wastage();
  wastage_ = value;
  // @@protoc_insertion_point(field_set:SC_UserInfo.wastage)
}

// -------------------------------------------------------------------

// SC_SendFish

// required int32 fish_id = 1;
inline bool SC_SendFish::has_fish_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SC_SendFish::set_has_fish_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SC_SendFish::clear_has_fish_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SC_SendFish::clear_fish_id() {
  fish_id_ = 0;
  clear_has_fish_id();
}
inline ::google::protobuf::int32 SC_SendFish::fish_id() const {
  // @@protoc_insertion_point(field_get:SC_SendFish.fish_id)
  return fish_id_;
}
inline void SC_SendFish::set_fish_id(::google::protobuf::int32 value) {
  set_has_fish_id();
  fish_id_ = value;
  // @@protoc_insertion_point(field_set:SC_SendFish.fish_id)
}

// required int32 type_id = 2;
inline bool SC_SendFish::has_type_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SC_SendFish::set_has_type_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void SC_SendFish::clear_has_type_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void SC_SendFish::clear_type_id() {
  type_id_ = 0;
  clear_has_type_id();
}
inline ::google::protobuf::int32 SC_SendFish::type_id() const {
  // @@protoc_insertion_point(field_get:SC_SendFish.type_id)
  return type_id_;
}
inline void SC_SendFish::set_type_id(::google::protobuf::int32 value) {
  set_has_type_id();
  type_id_ = value;
  // @@protoc_insertion_point(field_set:SC_SendFish.type_id)
}

// required int32 path_id = 3;
inline bool SC_SendFish::has_path_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void SC_SendFish::set_has_path_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void SC_SendFish::clear_has_path_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void SC_SendFish::clear_path_id() {
  path_id_ = 0;
  clear_has_path_id();
}
inline ::google::protobuf::int32 SC_SendFish::path_id() const {
  // @@protoc_insertion_point(field_get:SC_SendFish.path_id)
  return path_id_;
}
inline void SC_SendFish::set_path_id(::google::protobuf::int32 value) {
  set_has_path_id();
  path_id_ = value;
  // @@protoc_insertion_point(field_set:SC_SendFish.path_id)
}

// required uint32 create_tick = 4;
inline bool SC_SendFish::has_create_tick() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void SC_SendFish::set_has_create_tick() {
  _has_bits_[0] |= 0x00000008u;
}
inline void SC_SendFish::clear_has_create_tick() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void SC_SendFish::clear_create_tick() {
  create_tick_ = 0u;
  clear_has_create_tick();
}
inline ::google::protobuf::uint32 SC_SendFish::create_tick() const {
  // @@protoc_insertion_point(field_get:SC_SendFish.create_tick)
  return create_tick_;
}
inline void SC_SendFish::set_create_tick(::google::protobuf::uint32 value) {
  set_has_create_tick();
  create_tick_ = value;
  // @@protoc_insertion_point(field_set:SC_SendFish.create_tick)
}

// required float offest_x = 5;
inline bool SC_SendFish::has_offest_x() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void SC_SendFish::set_has_offest_x() {
  _has_bits_[0] |= 0x00000010u;
}
inline void SC_SendFish::clear_has_offest_x() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void SC_SendFish::clear_offest_x() {
  offest_x_ = 0;
  clear_has_offest_x();
}
inline float SC_SendFish::offest_x() const {
  // @@protoc_insertion_point(field_get:SC_SendFish.offest_x)
  return offest_x_;
}
inline void SC_SendFish::set_offest_x(float value) {
  set_has_offest_x();
  offest_x_ = value;
  // @@protoc_insertion_point(field_set:SC_SendFish.offest_x)
}

// required float offest_y = 6;
inline bool SC_SendFish::has_offest_y() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void SC_SendFish::set_has_offest_y() {
  _has_bits_[0] |= 0x00000020u;
}
inline void SC_SendFish::clear_has_offest_y() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void SC_SendFish::clear_offest_y() {
  offest_y_ = 0;
  clear_has_offest_y();
}
inline float SC_SendFish::offest_y() const {
  // @@protoc_insertion_point(field_get:SC_SendFish.offest_y)
  return offest_y_;
}
inline void SC_SendFish::set_offest_y(float value) {
  set_has_offest_y();
  offest_y_ = value;
  // @@protoc_insertion_point(field_set:SC_SendFish.offest_y)
}

// required float dir = 7;
inline bool SC_SendFish::has_dir() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void SC_SendFish::set_has_dir() {
  _has_bits_[0] |= 0x00000040u;
}
inline void SC_SendFish::clear_has_dir() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void SC_SendFish::clear_dir() {
  dir_ = 0;
  clear_has_dir();
}
inline float SC_SendFish::dir() const {
  // @@protoc_insertion_point(field_get:SC_SendFish.dir)
  return dir_;
}
inline void SC_SendFish::set_dir(float value) {
  set_has_dir();
  dir_ = value;
  // @@protoc_insertion_point(field_set:SC_SendFish.dir)
}

// required float delay = 8;
inline bool SC_SendFish::has_delay() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void SC_SendFish::set_has_delay() {
  _has_bits_[0] |= 0x00000080u;
}
inline void SC_SendFish::clear_has_delay() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void SC_SendFish::clear_delay() {
  delay_ = 0;
  clear_has_delay();
}
inline float SC_SendFish::delay() const {
  // @@protoc_insertion_point(field_get:SC_SendFish.delay)
  return delay_;
}
inline void SC_SendFish::set_delay(float value) {
  set_has_delay();
  delay_ = value;
  // @@protoc_insertion_point(field_set:SC_SendFish.delay)
}

// required uint32 server_tick = 9;
inline bool SC_SendFish::has_server_tick() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void SC_SendFish::set_has_server_tick() {
  _has_bits_[0] |= 0x00000100u;
}
inline void SC_SendFish::clear_has_server_tick() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void SC_SendFish::clear_server_tick() {
  server_tick_ = 0u;
  clear_has_server_tick();
}
inline ::google::protobuf::uint32 SC_SendFish::server_tick() const {
  // @@protoc_insertion_point(field_get:SC_SendFish.server_tick)
  return server_tick_;
}
inline void SC_SendFish::set_server_tick(::google::protobuf::uint32 value) {
  set_has_server_tick();
  server_tick_ = value;
  // @@protoc_insertion_point(field_set:SC_SendFish.server_tick)
}

// required float fish_speed = 10;
inline bool SC_SendFish::has_fish_speed() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void SC_SendFish::set_has_fish_speed() {
  _has_bits_[0] |= 0x00000200u;
}
inline void SC_SendFish::clear_has_fish_speed() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void SC_SendFish::clear_fish_speed() {
  fish_speed_ = 0;
  clear_has_fish_speed();
}
inline float SC_SendFish::fish_speed() const {
  // @@protoc_insertion_point(field_get:SC_SendFish.fish_speed)
  return fish_speed_;
}
inline void SC_SendFish::set_fish_speed(float value) {
  set_has_fish_speed();
  fish_speed_ = value;
  // @@protoc_insertion_point(field_set:SC_SendFish.fish_speed)
}

// required int32 fis_type = 11;
inline bool SC_SendFish::has_fis_type() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void SC_SendFish::set_has_fis_type() {
  _has_bits_[0] |= 0x00000400u;
}
inline void SC_SendFish::clear_has_fis_type() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void SC_SendFish::clear_fis_type() {
  fis_type_ = 0;
  clear_has_fis_type();
}
inline ::google::protobuf::int32 SC_SendFish::fis_type() const {
  // @@protoc_insertion_point(field_get:SC_SendFish.fis_type)
  return fis_type_;
}
inline void SC_SendFish::set_fis_type(::google::protobuf::int32 value) {
  set_has_fis_type();
  fis_type_ = value;
  // @@protoc_insertion_point(field_set:SC_SendFish.fis_type)
}

// required bool troop = 12;
inline bool SC_SendFish::has_troop() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void SC_SendFish::set_has_troop() {
  _has_bits_[0] |= 0x00000800u;
}
inline void SC_SendFish::clear_has_troop() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void SC_SendFish::clear_troop() {
  troop_ = false;
  clear_has_troop();
}
inline bool SC_SendFish::troop() const {
  // @@protoc_insertion_point(field_get:SC_SendFish.troop)
  return troop_;
}
inline void SC_SendFish::set_troop(bool value) {
  set_has_troop();
  troop_ = value;
  // @@protoc_insertion_point(field_set:SC_SendFish.troop)
}

// required int32 refersh_id = 13;
inline bool SC_SendFish::has_refersh_id() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void SC_SendFish::set_has_refersh_id() {
  _has_bits_[0] |= 0x00001000u;
}
inline void SC_SendFish::clear_has_refersh_id() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void SC_SendFish::clear_refersh_id() {
  refersh_id_ = 0;
  clear_has_refersh_id();
}
inline ::google::protobuf::int32 SC_SendFish::refersh_id() const {
  // @@protoc_insertion_point(field_get:SC_SendFish.refersh_id)
  return refersh_id_;
}
inline void SC_SendFish::set_refersh_id(::google::protobuf::int32 value) {
  set_has_refersh_id();
  refersh_id_ = value;
  // @@protoc_insertion_point(field_set:SC_SendFish.refersh_id)
}

// -------------------------------------------------------------------

// SC_SendFishList

// repeated .SC_SendFish pb_fishes = 1;
inline int SC_SendFishList::pb_fishes_size() const {
  return pb_fishes_.size();
}
inline void SC_SendFishList::clear_pb_fishes() {
  pb_fishes_.Clear();
}
inline const ::SC_SendFish& SC_SendFishList::pb_fishes(int index) const {
  // @@protoc_insertion_point(field_get:SC_SendFishList.pb_fishes)
  return pb_fishes_.Get(index);
}
inline ::SC_SendFish* SC_SendFishList::mutable_pb_fishes(int index) {
  // @@protoc_insertion_point(field_mutable:SC_SendFishList.pb_fishes)
  return pb_fishes_.Mutable(index);
}
inline ::SC_SendFish* SC_SendFishList::add_pb_fishes() {
  // @@protoc_insertion_point(field_add:SC_SendFishList.pb_fishes)
  return pb_fishes_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::SC_SendFish >*
SC_SendFishList::mutable_pb_fishes() {
  // @@protoc_insertion_point(field_mutable_list:SC_SendFishList.pb_fishes)
  return &pb_fishes_;
}
inline const ::google::protobuf::RepeatedPtrField< ::SC_SendFish >&
SC_SendFishList::pb_fishes() const {
  // @@protoc_insertion_point(field_list:SC_SendFishList.pb_fishes)
  return pb_fishes_;
}

// -------------------------------------------------------------------

// SC_GameConfig

// required int32 server_id = 1;
inline bool SC_GameConfig::has_server_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SC_GameConfig::set_has_server_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SC_GameConfig::clear_has_server_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SC_GameConfig::clear_server_id() {
  server_id_ = 0;
  clear_has_server_id();
}
inline ::google::protobuf::int32 SC_GameConfig::server_id() const {
  // @@protoc_insertion_point(field_get:SC_GameConfig.server_id)
  return server_id_;
}
inline void SC_GameConfig::set_server_id(::google::protobuf::int32 value) {
  set_has_server_id();
  server_id_ = value;
  // @@protoc_insertion_point(field_set:SC_GameConfig.server_id)
}

// required int32 change_ratio_user_score = 2;
inline bool SC_GameConfig::has_change_ratio_user_score() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SC_GameConfig::set_has_change_ratio_user_score() {
  _has_bits_[0] |= 0x00000002u;
}
inline void SC_GameConfig::clear_has_change_ratio_user_score() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void SC_GameConfig::clear_change_ratio_user_score() {
  change_ratio_user_score_ = 0;
  clear_has_change_ratio_user_score();
}
inline ::google::protobuf::int32 SC_GameConfig::change_ratio_user_score() const {
  // @@protoc_insertion_point(field_get:SC_GameConfig.change_ratio_user_score)
  return change_ratio_user_score_;
}
inline void SC_GameConfig::set_change_ratio_user_score(::google::protobuf::int32 value) {
  set_has_change_ratio_user_score();
  change_ratio_user_score_ = value;
  // @@protoc_insertion_point(field_set:SC_GameConfig.change_ratio_user_score)
}

// required int32 change_ratio_fish_score = 3;
inline bool SC_GameConfig::has_change_ratio_fish_score() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void SC_GameConfig::set_has_change_ratio_fish_score() {
  _has_bits_[0] |= 0x00000004u;
}
inline void SC_GameConfig::clear_has_change_ratio_fish_score() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void SC_GameConfig::clear_change_ratio_fish_score() {
  change_ratio_fish_score_ = 0;
  clear_has_change_ratio_fish_score();
}
inline ::google::protobuf::int32 SC_GameConfig::change_ratio_fish_score() const {
  // @@protoc_insertion_point(field_get:SC_GameConfig.change_ratio_fish_score)
  return change_ratio_fish_score_;
}
inline void SC_GameConfig::set_change_ratio_fish_score(::google::protobuf::int32 value) {
  set_has_change_ratio_fish_score();
  change_ratio_fish_score_ = value;
  // @@protoc_insertion_point(field_set:SC_GameConfig.change_ratio_fish_score)
}

// required int32 exchange_once = 4;
inline bool SC_GameConfig::has_exchange_once() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void SC_GameConfig::set_has_exchange_once() {
  _has_bits_[0] |= 0x00000008u;
}
inline void SC_GameConfig::clear_has_exchange_once() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void SC_GameConfig::clear_exchange_once() {
  exchange_once_ = 0;
  clear_has_exchange_once();
}
inline ::google::protobuf::int32 SC_GameConfig::exchange_once() const {
  // @@protoc_insertion_point(field_get:SC_GameConfig.exchange_once)
  return exchange_once_;
}
inline void SC_GameConfig::set_exchange_once(::google::protobuf::int32 value) {
  set_has_exchange_once();
  exchange_once_ = value;
  // @@protoc_insertion_point(field_set:SC_GameConfig.exchange_once)
}

// required int32 fire_interval = 5;
inline bool SC_GameConfig::has_fire_interval() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void SC_GameConfig::set_has_fire_interval() {
  _has_bits_[0] |= 0x00000010u;
}
inline void SC_GameConfig::clear_has_fire_interval() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void SC_GameConfig::clear_fire_interval() {
  fire_interval_ = 0;
  clear_has_fire_interval();
}
inline ::google::protobuf::int32 SC_GameConfig::fire_interval() const {
  // @@protoc_insertion_point(field_get:SC_GameConfig.fire_interval)
  return fire_interval_;
}
inline void SC_GameConfig::set_fire_interval(::google::protobuf::int32 value) {
  set_has_fire_interval();
  fire_interval_ = value;
  // @@protoc_insertion_point(field_set:SC_GameConfig.fire_interval)
}

// required int32 max_interval = 6;
inline bool SC_GameConfig::has_max_interval() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void SC_GameConfig::set_has_max_interval() {
  _has_bits_[0] |= 0x00000020u;
}
inline void SC_GameConfig::clear_has_max_interval() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void SC_GameConfig::clear_max_interval() {
  max_interval_ = 0;
  clear_has_max_interval();
}
inline ::google::protobuf::int32 SC_GameConfig::max_interval() const {
  // @@protoc_insertion_point(field_get:SC_GameConfig.max_interval)
  return max_interval_;
}
inline void SC_GameConfig::set_max_interval(::google::protobuf::int32 value) {
  set_has_max_interval();
  max_interval_ = value;
  // @@protoc_insertion_point(field_set:SC_GameConfig.max_interval)
}

// required int32 min_interval = 7;
inline bool SC_GameConfig::has_min_interval() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void SC_GameConfig::set_has_min_interval() {
  _has_bits_[0] |= 0x00000040u;
}
inline void SC_GameConfig::clear_has_min_interval() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void SC_GameConfig::clear_min_interval() {
  min_interval_ = 0;
  clear_has_min_interval();
}
inline ::google::protobuf::int32 SC_GameConfig::min_interval() const {
  // @@protoc_insertion_point(field_get:SC_GameConfig.min_interval)
  return min_interval_;
}
inline void SC_GameConfig::set_min_interval(::google::protobuf::int32 value) {
  set_has_min_interval();
  min_interval_ = value;
  // @@protoc_insertion_point(field_set:SC_GameConfig.min_interval)
}

// required int32 show_gold_min_mul = 8;
inline bool SC_GameConfig::has_show_gold_min_mul() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void SC_GameConfig::set_has_show_gold_min_mul() {
  _has_bits_[0] |= 0x00000080u;
}
inline void SC_GameConfig::clear_has_show_gold_min_mul() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void SC_GameConfig::clear_show_gold_min_mul() {
  show_gold_min_mul_ = 0;
  clear_has_show_gold_min_mul();
}
inline ::google::protobuf::int32 SC_GameConfig::show_gold_min_mul() const {
  // @@protoc_insertion_point(field_get:SC_GameConfig.show_gold_min_mul)
  return show_gold_min_mul_;
}
inline void SC_GameConfig::set_show_gold_min_mul(::google::protobuf::int32 value) {
  set_has_show_gold_min_mul();
  show_gold_min_mul_ = value;
  // @@protoc_insertion_point(field_set:SC_GameConfig.show_gold_min_mul)
}

// required int32 max_bullet_count = 9;
inline bool SC_GameConfig::has_max_bullet_count() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void SC_GameConfig::set_has_max_bullet_count() {
  _has_bits_[0] |= 0x00000100u;
}
inline void SC_GameConfig::clear_has_max_bullet_count() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void SC_GameConfig::clear_max_bullet_count() {
  max_bullet_count_ = 0;
  clear_has_max_bullet_count();
}
inline ::google::protobuf::int32 SC_GameConfig::max_bullet_count() const {
  // @@protoc_insertion_point(field_get:SC_GameConfig.max_bullet_count)
  return max_bullet_count_;
}
inline void SC_GameConfig::set_max_bullet_count(::google::protobuf::int32 value) {
  set_has_max_bullet_count();
  max_bullet_count_ = value;
  // @@protoc_insertion_point(field_set:SC_GameConfig.max_bullet_count)
}

// required int32 max_cannon = 10;
inline bool SC_GameConfig::has_max_cannon() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void SC_GameConfig::set_has_max_cannon() {
  _has_bits_[0] |= 0x00000200u;
}
inline void SC_GameConfig::clear_has_max_cannon() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void SC_GameConfig::clear_max_cannon() {
  max_cannon_ = 0;
  clear_has_max_cannon();
}
inline ::google::protobuf::int32 SC_GameConfig::max_cannon() const {
  // @@protoc_insertion_point(field_get:SC_GameConfig.max_cannon)
  return max_cannon_;
}
inline void SC_GameConfig::set_max_cannon(::google::protobuf::int32 value) {
  set_has_max_cannon();
  max_cannon_ = value;
  // @@protoc_insertion_point(field_set:SC_GameConfig.max_cannon)
}

// -------------------------------------------------------------------

// SC_TimeSync

// required int32 chair_id = 1;
inline bool SC_TimeSync::has_chair_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SC_TimeSync::set_has_chair_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SC_TimeSync::clear_has_chair_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SC_TimeSync::clear_chair_id() {
  chair_id_ = 0;
  clear_has_chair_id();
}
inline ::google::protobuf::int32 SC_TimeSync::chair_id() const {
  // @@protoc_insertion_point(field_get:SC_TimeSync.chair_id)
  return chair_id_;
}
inline void SC_TimeSync::set_chair_id(::google::protobuf::int32 value) {
  set_has_chair_id();
  chair_id_ = value;
  // @@protoc_insertion_point(field_set:SC_TimeSync.chair_id)
}

// required uint32 server_tick = 2;
inline bool SC_TimeSync::has_server_tick() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SC_TimeSync::set_has_server_tick() {
  _has_bits_[0] |= 0x00000002u;
}
inline void SC_TimeSync::clear_has_server_tick() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void SC_TimeSync::clear_server_tick() {
  server_tick_ = 0u;
  clear_has_server_tick();
}
inline ::google::protobuf::uint32 SC_TimeSync::server_tick() const {
  // @@protoc_insertion_point(field_get:SC_TimeSync.server_tick)
  return server_tick_;
}
inline void SC_TimeSync::set_server_tick(::google::protobuf::uint32 value) {
  set_has_server_tick();
  server_tick_ = value;
  // @@protoc_insertion_point(field_set:SC_TimeSync.server_tick)
}

// required uint32 client_tick = 3;
inline bool SC_TimeSync::has_client_tick() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void SC_TimeSync::set_has_client_tick() {
  _has_bits_[0] |= 0x00000004u;
}
inline void SC_TimeSync::clear_has_client_tick() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void SC_TimeSync::clear_client_tick() {
  client_tick_ = 0u;
  clear_has_client_tick();
}
inline ::google::protobuf::uint32 SC_TimeSync::client_tick() const {
  // @@protoc_insertion_point(field_get:SC_TimeSync.client_tick)
  return client_tick_;
}
inline void SC_TimeSync::set_client_tick(::google::protobuf::uint32 value) {
  set_has_client_tick();
  client_tick_ = value;
  // @@protoc_insertion_point(field_set:SC_TimeSync.client_tick)
}

// -------------------------------------------------------------------

// SC_SystemMessage

// required int32 wType = 1;
inline bool SC_SystemMessage::has_wtype() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SC_SystemMessage::set_has_wtype() {
  _has_bits_[0] |= 0x00000002u;
}
inline void SC_SystemMessage::clear_has_wtype() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void SC_SystemMessage::clear_wtype() {
  wtype_ = 0;
  clear_has_wtype();
}
inline ::google::protobuf::int32 SC_SystemMessage::wtype() const {
  // @@protoc_insertion_point(field_get:SC_SystemMessage.wType)
  return wtype_;
}
inline void SC_SystemMessage::set_wtype(::google::protobuf::int32 value) {
  set_has_wtype();
  wtype_ = value;
  // @@protoc_insertion_point(field_set:SC_SystemMessage.wType)
}

// required string szString = 2;
inline bool SC_SystemMessage::has_szstring() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SC_SystemMessage::set_has_szstring() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SC_SystemMessage::clear_has_szstring() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SC_SystemMessage::clear_szstring() {
  szstring_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_szstring();
}
inline const ::std::string& SC_SystemMessage::szstring() const {
  // @@protoc_insertion_point(field_get:SC_SystemMessage.szString)
  return szstring_.GetNoArena();
}
inline void SC_SystemMessage::set_szstring(const ::std::string& value) {
  set_has_szstring();
  szstring_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:SC_SystemMessage.szString)
}
#if LANG_CXX11
inline void SC_SystemMessage::set_szstring(::std::string&& value) {
  set_has_szstring();
  szstring_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:SC_SystemMessage.szString)
}
#endif
inline void SC_SystemMessage::set_szstring(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_szstring();
  szstring_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:SC_SystemMessage.szString)
}
inline void SC_SystemMessage::set_szstring(const char* value, size_t size) {
  set_has_szstring();
  szstring_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:SC_SystemMessage.szString)
}
inline ::std::string* SC_SystemMessage::mutable_szstring() {
  set_has_szstring();
  // @@protoc_insertion_point(field_mutable:SC_SystemMessage.szString)
  return szstring_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SC_SystemMessage::release_szstring() {
  // @@protoc_insertion_point(field_release:SC_SystemMessage.szString)
  clear_has_szstring();
  return szstring_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SC_SystemMessage::set_allocated_szstring(::std::string* szstring) {
  if (szstring != NULL) {
    set_has_szstring();
  } else {
    clear_has_szstring();
  }
  szstring_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), szstring);
  // @@protoc_insertion_point(field_set_allocated:SC_SystemMessage.szString)
}

#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)


#ifndef SWIG
namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::CS_TreasureEnd_MsgID> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::CS_TreasureEnd_MsgID>() {
  return ::CS_TreasureEnd_MsgID_descriptor();
}
template <> struct is_proto_enum< ::CS_ChangeCannonSet_MsgID> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::CS_ChangeCannonSet_MsgID>() {
  return ::CS_ChangeCannonSet_MsgID_descriptor();
}
template <> struct is_proto_enum< ::CS_Netcast_MsgID> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::CS_Netcast_MsgID>() {
  return ::CS_Netcast_MsgID_descriptor();
}
template <> struct is_proto_enum< ::CS_LockFish_MsgID> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::CS_LockFish_MsgID>() {
  return ::CS_LockFish_MsgID_descriptor();
}
template <> struct is_proto_enum< ::CS_LockSpecFish_MsgID> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::CS_LockSpecFish_MsgID>() {
  return ::CS_LockSpecFish_MsgID_descriptor();
}
template <> struct is_proto_enum< ::CS_Fire_MsgID> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::CS_Fire_MsgID>() {
  return ::CS_Fire_MsgID_descriptor();
}
template <> struct is_proto_enum< ::CS_ChangeCannon_MsgID> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::CS_ChangeCannon_MsgID>() {
  return ::CS_ChangeCannon_MsgID_descriptor();
}
template <> struct is_proto_enum< ::CS_ChangeScore_MsgID> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::CS_ChangeScore_MsgID>() {
  return ::CS_ChangeScore_MsgID_descriptor();
}
template <> struct is_proto_enum< ::CS_TimeSync_MsgID> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::CS_TimeSync_MsgID>() {
  return ::CS_TimeSync_MsgID_descriptor();
}
template <> struct is_proto_enum< ::SC_FishMul_MsgID> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::SC_FishMul_MsgID>() {
  return ::SC_FishMul_MsgID_descriptor();
}
template <> struct is_proto_enum< ::SC_AddBuffer_MsgID> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::SC_AddBuffer_MsgID>() {
  return ::SC_AddBuffer_MsgID_descriptor();
}
template <> struct is_proto_enum< ::SC_BulletSet_MsgID> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::SC_BulletSet_MsgID>() {
  return ::SC_BulletSet_MsgID_descriptor();
}
template <> struct is_proto_enum< ::SC_BulletSet_List_MsgID> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::SC_BulletSet_List_MsgID>() {
  return ::SC_BulletSet_List_MsgID_descriptor();
}
template <> struct is_proto_enum< ::SC_SendDes_MsgID> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::SC_SendDes_MsgID>() {
  return ::SC_SendDes_MsgID_descriptor();
}
template <> struct is_proto_enum< ::SC_LockFish_MsgID> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::SC_LockFish_MsgID>() {
  return ::SC_LockFish_MsgID_descriptor();
}
template <> struct is_proto_enum< ::SC_AllowFire_MsgID> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::SC_AllowFire_MsgID>() {
  return ::SC_AllowFire_MsgID_descriptor();
}
template <> struct is_proto_enum< ::SC_SwitchScene_MsgID> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::SC_SwitchScene_MsgID>() {
  return ::SC_SwitchScene_MsgID_descriptor();
}
template <> struct is_proto_enum< ::SC_KillBullet_MsgID> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::SC_KillBullet_MsgID>() {
  return ::SC_KillBullet_MsgID_descriptor();
}
template <> struct is_proto_enum< ::SC_KillFish_MsgID> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::SC_KillFish_MsgID>() {
  return ::SC_KillFish_MsgID_descriptor();
}
template <> struct is_proto_enum< ::SC_SendBullet_MsgID> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::SC_SendBullet_MsgID>() {
  return ::SC_SendBullet_MsgID_descriptor();
}
template <> struct is_proto_enum< ::SC_Fly_Bullet_List_MsgID> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::SC_Fly_Bullet_List_MsgID>() {
  return ::SC_Fly_Bullet_List_MsgID_descriptor();
}
template <> struct is_proto_enum< ::SC_CannonSet_MsgID> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::SC_CannonSet_MsgID>() {
  return ::SC_CannonSet_MsgID_descriptor();
}
template <> struct is_proto_enum< ::SC_ChangeScore_MsgID> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::SC_ChangeScore_MsgID>() {
  return ::SC_ChangeScore_MsgID_descriptor();
}
template <> struct is_proto_enum< ::SC_UserInfo_MsgID> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::SC_UserInfo_MsgID>() {
  return ::SC_UserInfo_MsgID_descriptor();
}
template <> struct is_proto_enum< ::SC_SendFish_MsgID> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::SC_SendFish_MsgID>() {
  return ::SC_SendFish_MsgID_descriptor();
}
template <> struct is_proto_enum< ::SC_SendFishList_MsgID> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::SC_SendFishList_MsgID>() {
  return ::SC_SendFishList_MsgID_descriptor();
}
template <> struct is_proto_enum< ::SC_GameConfig_MsgID> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::SC_GameConfig_MsgID>() {
  return ::SC_GameConfig_MsgID_descriptor();
}
template <> struct is_proto_enum< ::SC_TimeSync_MsgID> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::SC_TimeSync_MsgID>() {
  return ::SC_TimeSync_MsgID_descriptor();
}
template <> struct is_proto_enum< ::SC_SystemMessage_MsgID> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::SC_SystemMessage_MsgID>() {
  return ::SC_SystemMessage_MsgID_descriptor();
}
template <> struct is_proto_enum< ::SMT_TYPE> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::SMT_TYPE>() {
  return ::SMT_TYPE_descriptor();
}

}  // namespace protobuf
}  // namespace google
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_public_5ffishing_2eproto__INCLUDED
