// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: public_banker.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "public_banker.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
class BankerTableDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<BankerTable> {
} _BankerTable_default_instance_;
class BankerPlayerInfoDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<BankerPlayerInfo> {
} _BankerPlayerInfo_default_instance_;
class BankerGameEndPlayerInfoDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<BankerGameEndPlayerInfo> {
} _BankerGameEndPlayerInfo_default_instance_;
class BankerReconnectPlayerInfoDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<BankerReconnectPlayerInfo> {
} _BankerReconnectPlayerInfo_default_instance_;
class SC_BankerTableMatchingDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<SC_BankerTableMatching> {
} _SC_BankerTableMatching_default_instance_;
class SC_BankerSendCardsDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<SC_BankerSendCards> {
} _SC_BankerSendCards_default_instance_;
class SC_BankerBeginToContendDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<SC_BankerBeginToContend> {
} _SC_BankerBeginToContend_default_instance_;
class SC_BankerPlayerContendDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<SC_BankerPlayerContend> {
} _SC_BankerPlayerContend_default_instance_;
class SC_BankerChoosingBankerDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<SC_BankerChoosingBanker> {
} _SC_BankerChoosingBanker_default_instance_;
class SC_BankerPlayerBeginToBetDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<SC_BankerPlayerBeginToBet> {
} _SC_BankerPlayerBeginToBet_default_instance_;
class SC_BankerPlayerBetDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<SC_BankerPlayerBet> {
} _SC_BankerPlayerBet_default_instance_;
class SC_BankerShowOwnCardsDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<SC_BankerShowOwnCards> {
} _SC_BankerShowOwnCards_default_instance_;
class SC_BankerShowCardsDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<SC_BankerShowCards> {
} _SC_BankerShowCards_default_instance_;
class SC_BankerGameEndDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<SC_BankerGameEnd> {
} _SC_BankerGameEnd_default_instance_;
class SC_BankerForceToLeaveDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<SC_BankerForceToLeave> {
} _SC_BankerForceToLeave_default_instance_;
class SC_BankerReconnectInfoDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<SC_BankerReconnectInfo> {
} _SC_BankerReconnectInfo_default_instance_;
class SC_BankerPlayerSitDownDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<SC_BankerPlayerSitDown> {
} _SC_BankerPlayerSitDown_default_instance_;
class SC_BankerStartVoteDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<SC_BankerStartVote> {
} _SC_BankerStartVote_default_instance_;
class SC_BankerVoteResultDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<SC_BankerVoteResult> {
} _SC_BankerVoteResult_default_instance_;
class SC_ReEanter_Next_GameDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<SC_ReEanter_Next_Game> {
} _SC_ReEanter_Next_Game_default_instance_;
class SC_Next_Game_TimeDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<SC_Next_Game_Time> {
} _SC_Next_Game_Time_default_instance_;
class CS_BankerEnterDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CS_BankerEnter> {
} _CS_BankerEnter_default_instance_;
class CS_BankerLeaveDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CS_BankerLeave> {
} _CS_BankerLeave_default_instance_;
class CS_BankerContendDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CS_BankerContend> {
} _CS_BankerContend_default_instance_;
class CS_BankerPlayerBetDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CS_BankerPlayerBet> {
} _CS_BankerPlayerBet_default_instance_;
class CS_BankerPlayerGuessCardsDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CS_BankerPlayerGuessCards> {
} _CS_BankerPlayerGuessCards_default_instance_;
class CS_BankerNextGameDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CS_BankerNextGame> {
} _CS_BankerNextGame_default_instance_;
class CS_BankerVoteDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CS_BankerVote> {
} _CS_BankerVote_default_instance_;

namespace protobuf_public_5fbanker_2eproto {


namespace {

::google::protobuf::Metadata file_level_metadata[28];
const ::google::protobuf::EnumDescriptor* file_level_enum_descriptors[27];

}  // namespace

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTableField
    const TableStruct::entries[] = {
  {0, 0, 0, ::google::protobuf::internal::kInvalidMask, 0, 0},
};

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::AuxillaryParseTableField
    const TableStruct::aux[] = {
  ::google::protobuf::internal::AuxillaryParseTableField(),
};
PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTable const
    TableStruct::schema[] = {
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
};

const ::google::protobuf::uint32 TableStruct::offsets[] = {
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BankerTable, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BankerTable, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BankerTable, state_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BankerTable, bottom_bet_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BankerTable, chair_),
  2,
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BankerPlayerInfo, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BankerPlayerInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BankerPlayerInfo, guid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BankerPlayerInfo, chair_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BankerPlayerInfo, name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BankerPlayerInfo, icon_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BankerPlayerInfo, money_),
  2,
  3,
  0,
  1,
  4,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BankerGameEndPlayerInfo, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BankerGameEndPlayerInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BankerGameEndPlayerInfo, chair_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BankerGameEndPlayerInfo, money_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BankerGameEndPlayerInfo, tax_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BankerGameEndPlayerInfo, victory_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BankerGameEndPlayerInfo, increment_money_),
  1,
  0,
  3,
  2,
  4,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BankerReconnectPlayerInfo, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BankerReconnectPlayerInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BankerReconnectPlayerInfo, guid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BankerReconnectPlayerInfo, chair_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BankerReconnectPlayerInfo, name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BankerReconnectPlayerInfo, icon_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BankerReconnectPlayerInfo, money_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BankerReconnectPlayerInfo, ratio_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BankerReconnectPlayerInfo, position_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BankerReconnectPlayerInfo, bet_money_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BankerReconnectPlayerInfo, cards_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BankerReconnectPlayerInfo, cards_type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BankerReconnectPlayerInfo, flag_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BankerReconnectPlayerInfo, tax_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BankerReconnectPlayerInfo, victory_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BankerReconnectPlayerInfo, increment_money_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BankerReconnectPlayerInfo, status_),
  2,
  3,
  0,
  1,
  4,
  5,
  6,
  7,
  ~0u,
  8,
  9,
  10,
  12,
  11,
  13,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SC_BankerTableMatching, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SC_BankerTableMatching, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SC_BankerTableMatching, chair_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SC_BankerTableMatching, chair1_),
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SC_BankerSendCards, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SC_BankerSendCards, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SC_BankerSendCards, pb_table_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SC_BankerSendCards, pb_player_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SC_BankerSendCards, cards_),
  0,
  ~0u,
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SC_BankerBeginToContend, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SC_BankerBeginToContend, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SC_BankerBeginToContend, countdown_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SC_BankerBeginToContend, total_time_),
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SC_BankerPlayerContend, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SC_BankerPlayerContend, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SC_BankerPlayerContend, chair_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SC_BankerPlayerContend, ratio_),
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SC_BankerChoosingBanker, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SC_BankerChoosingBanker, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SC_BankerChoosingBanker, chairs_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SC_BankerChoosingBanker, banker_chair_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SC_BankerChoosingBanker, banker_ratio_),
  ~0u,
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SC_BankerPlayerBeginToBet, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SC_BankerPlayerBeginToBet, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SC_BankerPlayerBeginToBet, countdown_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SC_BankerPlayerBeginToBet, total_time_),
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SC_BankerPlayerBet, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SC_BankerPlayerBet, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SC_BankerPlayerBet, chair_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SC_BankerPlayerBet, bet_money_),
  1,
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SC_BankerShowOwnCards, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SC_BankerShowOwnCards, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SC_BankerShowOwnCards, cards_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SC_BankerShowOwnCards, cards_type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SC_BankerShowOwnCards, countdown_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SC_BankerShowOwnCards, total_time_),
  ~0u,
  0,
  1,
  2,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SC_BankerShowCards, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SC_BankerShowCards, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SC_BankerShowCards, chair_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SC_BankerShowCards, cards_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SC_BankerShowCards, cards_type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SC_BankerShowCards, flag_),
  0,
  ~0u,
  1,
  2,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SC_BankerGameEnd, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SC_BankerGameEnd, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SC_BankerGameEnd, pb_player_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SC_BankerGameEnd, pb_table_),
  ~0u,
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SC_BankerForceToLeave, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SC_BankerForceToLeave, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SC_BankerForceToLeave, reason_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SC_BankerForceToLeave, num_),
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SC_BankerReconnectInfo, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SC_BankerReconnectInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SC_BankerReconnectInfo, pb_table_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SC_BankerReconnectInfo, pb_player_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SC_BankerReconnectInfo, countdown_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SC_BankerReconnectInfo, total_time_),
  0,
  ~0u,
  1,
  2,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SC_BankerPlayerSitDown, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SC_BankerPlayerSitDown, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SC_BankerPlayerSitDown, pb_info_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SC_BankerPlayerSitDown, state_),
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SC_BankerStartVote, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SC_BankerStartVote, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SC_BankerStartVote, chair_id_),
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SC_BankerVoteResult, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SC_BankerVoteResult, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SC_BankerVoteResult, chair_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SC_BankerVoteResult, agree_),
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SC_ReEanter_Next_Game, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SC_ReEanter_Next_Game, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SC_ReEanter_Next_Game, chair_id_),
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SC_Next_Game_Time, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SC_Next_Game_Time, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SC_Next_Game_Time, time_num_),
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CS_BankerEnter, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CS_BankerEnter, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CS_BankerEnter, chair_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CS_BankerEnter, chair1_),
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CS_BankerLeave, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CS_BankerLeave, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CS_BankerContend, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CS_BankerContend, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CS_BankerContend, ratio_),
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CS_BankerPlayerBet, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CS_BankerPlayerBet, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CS_BankerPlayerBet, bet_money_),
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CS_BankerPlayerGuessCards, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CS_BankerPlayerGuessCards, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CS_BankerNextGame, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CS_BankerNextGame, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CS_BankerVote, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CS_BankerVote, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CS_BankerVote, agree_),
  0,
};

static const ::google::protobuf::internal::MigrationSchema schemas[] = {
  { 0, 8, sizeof(BankerTable)},
  { 11, 21, sizeof(BankerPlayerInfo)},
  { 26, 36, sizeof(BankerGameEndPlayerInfo)},
  { 41, 61, sizeof(BankerReconnectPlayerInfo)},
  { 76, 83, sizeof(SC_BankerTableMatching)},
  { 85, 93, sizeof(SC_BankerSendCards)},
  { 96, 103, sizeof(SC_BankerBeginToContend)},
  { 105, 112, sizeof(SC_BankerPlayerContend)},
  { 114, 122, sizeof(SC_BankerChoosingBanker)},
  { 125, 132, sizeof(SC_BankerPlayerBeginToBet)},
  { 134, 141, sizeof(SC_BankerPlayerBet)},
  { 143, 152, sizeof(SC_BankerShowOwnCards)},
  { 156, 165, sizeof(SC_BankerShowCards)},
  { 169, 176, sizeof(SC_BankerGameEnd)},
  { 178, 185, sizeof(SC_BankerForceToLeave)},
  { 187, 196, sizeof(SC_BankerReconnectInfo)},
  { 200, 207, sizeof(SC_BankerPlayerSitDown)},
  { 209, 215, sizeof(SC_BankerStartVote)},
  { 216, 223, sizeof(SC_BankerVoteResult)},
  { 225, 231, sizeof(SC_ReEanter_Next_Game)},
  { 232, 238, sizeof(SC_Next_Game_Time)},
  { 239, 246, sizeof(CS_BankerEnter)},
  { 248, 253, sizeof(CS_BankerLeave)},
  { 253, 259, sizeof(CS_BankerContend)},
  { 260, 266, sizeof(CS_BankerPlayerBet)},
  { 267, 272, sizeof(CS_BankerPlayerGuessCards)},
  { 272, 277, sizeof(CS_BankerNextGame)},
  { 277, 283, sizeof(CS_BankerVote)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&_BankerTable_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_BankerPlayerInfo_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_BankerGameEndPlayerInfo_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_BankerReconnectPlayerInfo_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_SC_BankerTableMatching_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_SC_BankerSendCards_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_SC_BankerBeginToContend_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_SC_BankerPlayerContend_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_SC_BankerChoosingBanker_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_SC_BankerPlayerBeginToBet_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_SC_BankerPlayerBet_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_SC_BankerShowOwnCards_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_SC_BankerShowCards_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_SC_BankerGameEnd_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_SC_BankerForceToLeave_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_SC_BankerReconnectInfo_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_SC_BankerPlayerSitDown_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_SC_BankerStartVote_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_SC_BankerVoteResult_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_SC_ReEanter_Next_Game_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_SC_Next_Game_Time_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CS_BankerEnter_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CS_BankerLeave_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CS_BankerContend_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CS_BankerPlayerBet_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CS_BankerPlayerGuessCards_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CS_BankerNextGame_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CS_BankerVote_default_instance_),
};

namespace {

void protobuf_AssignDescriptors() {
  AddDescriptors();
  ::google::protobuf::MessageFactory* factory = NULL;
  AssignDescriptors(
      "public_banker.proto", schemas, file_default_instances, TableStruct::offsets, factory,
      file_level_metadata, file_level_enum_descriptors, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 28);
}

}  // namespace

void TableStruct::Shutdown() {
  _BankerTable_default_instance_.Shutdown();
  delete file_level_metadata[0].reflection;
  _BankerPlayerInfo_default_instance_.Shutdown();
  delete file_level_metadata[1].reflection;
  _BankerGameEndPlayerInfo_default_instance_.Shutdown();
  delete file_level_metadata[2].reflection;
  _BankerReconnectPlayerInfo_default_instance_.Shutdown();
  delete file_level_metadata[3].reflection;
  _SC_BankerTableMatching_default_instance_.Shutdown();
  delete file_level_metadata[4].reflection;
  _SC_BankerSendCards_default_instance_.Shutdown();
  delete file_level_metadata[5].reflection;
  _SC_BankerBeginToContend_default_instance_.Shutdown();
  delete file_level_metadata[6].reflection;
  _SC_BankerPlayerContend_default_instance_.Shutdown();
  delete file_level_metadata[7].reflection;
  _SC_BankerChoosingBanker_default_instance_.Shutdown();
  delete file_level_metadata[8].reflection;
  _SC_BankerPlayerBeginToBet_default_instance_.Shutdown();
  delete file_level_metadata[9].reflection;
  _SC_BankerPlayerBet_default_instance_.Shutdown();
  delete file_level_metadata[10].reflection;
  _SC_BankerShowOwnCards_default_instance_.Shutdown();
  delete file_level_metadata[11].reflection;
  _SC_BankerShowCards_default_instance_.Shutdown();
  delete file_level_metadata[12].reflection;
  _SC_BankerGameEnd_default_instance_.Shutdown();
  delete file_level_metadata[13].reflection;
  _SC_BankerForceToLeave_default_instance_.Shutdown();
  delete file_level_metadata[14].reflection;
  _SC_BankerReconnectInfo_default_instance_.Shutdown();
  delete file_level_metadata[15].reflection;
  _SC_BankerPlayerSitDown_default_instance_.Shutdown();
  delete file_level_metadata[16].reflection;
  _SC_BankerStartVote_default_instance_.Shutdown();
  delete file_level_metadata[17].reflection;
  _SC_BankerVoteResult_default_instance_.Shutdown();
  delete file_level_metadata[18].reflection;
  _SC_ReEanter_Next_Game_default_instance_.Shutdown();
  delete file_level_metadata[19].reflection;
  _SC_Next_Game_Time_default_instance_.Shutdown();
  delete file_level_metadata[20].reflection;
  _CS_BankerEnter_default_instance_.Shutdown();
  delete file_level_metadata[21].reflection;
  _CS_BankerLeave_default_instance_.Shutdown();
  delete file_level_metadata[22].reflection;
  _CS_BankerContend_default_instance_.Shutdown();
  delete file_level_metadata[23].reflection;
  _CS_BankerPlayerBet_default_instance_.Shutdown();
  delete file_level_metadata[24].reflection;
  _CS_BankerPlayerGuessCards_default_instance_.Shutdown();
  delete file_level_metadata[25].reflection;
  _CS_BankerNextGame_default_instance_.Shutdown();
  delete file_level_metadata[26].reflection;
  _CS_BankerVote_default_instance_.Shutdown();
  delete file_level_metadata[27].reflection;
}

void TableStruct::InitDefaultsImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::internal::InitProtobufDefaults();
  _BankerTable_default_instance_.DefaultConstruct();
  _BankerPlayerInfo_default_instance_.DefaultConstruct();
  _BankerGameEndPlayerInfo_default_instance_.DefaultConstruct();
  _BankerReconnectPlayerInfo_default_instance_.DefaultConstruct();
  _SC_BankerTableMatching_default_instance_.DefaultConstruct();
  _SC_BankerSendCards_default_instance_.DefaultConstruct();
  _SC_BankerBeginToContend_default_instance_.DefaultConstruct();
  _SC_BankerPlayerContend_default_instance_.DefaultConstruct();
  _SC_BankerChoosingBanker_default_instance_.DefaultConstruct();
  _SC_BankerPlayerBeginToBet_default_instance_.DefaultConstruct();
  _SC_BankerPlayerBet_default_instance_.DefaultConstruct();
  _SC_BankerShowOwnCards_default_instance_.DefaultConstruct();
  _SC_BankerShowCards_default_instance_.DefaultConstruct();
  _SC_BankerGameEnd_default_instance_.DefaultConstruct();
  _SC_BankerForceToLeave_default_instance_.DefaultConstruct();
  _SC_BankerReconnectInfo_default_instance_.DefaultConstruct();
  _SC_BankerPlayerSitDown_default_instance_.DefaultConstruct();
  _SC_BankerStartVote_default_instance_.DefaultConstruct();
  _SC_BankerVoteResult_default_instance_.DefaultConstruct();
  _SC_ReEanter_Next_Game_default_instance_.DefaultConstruct();
  _SC_Next_Game_Time_default_instance_.DefaultConstruct();
  _CS_BankerEnter_default_instance_.DefaultConstruct();
  _CS_BankerLeave_default_instance_.DefaultConstruct();
  _CS_BankerContend_default_instance_.DefaultConstruct();
  _CS_BankerPlayerBet_default_instance_.DefaultConstruct();
  _CS_BankerPlayerGuessCards_default_instance_.DefaultConstruct();
  _CS_BankerNextGame_default_instance_.DefaultConstruct();
  _CS_BankerVote_default_instance_.DefaultConstruct();
  _SC_BankerSendCards_default_instance_.get_mutable()->pb_table_ = const_cast< ::BankerTable*>(
      ::BankerTable::internal_default_instance());
  _SC_BankerGameEnd_default_instance_.get_mutable()->pb_table_ = const_cast< ::BankerTable*>(
      ::BankerTable::internal_default_instance());
  _SC_BankerReconnectInfo_default_instance_.get_mutable()->pb_table_ = const_cast< ::BankerTable*>(
      ::BankerTable::internal_default_instance());
  _SC_BankerPlayerSitDown_default_instance_.get_mutable()->pb_info_ = const_cast< ::BankerPlayerInfo*>(
      ::BankerPlayerInfo::internal_default_instance());
}

void InitDefaults() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &TableStruct::InitDefaultsImpl);
}
void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] = {
      "\n\023public_banker.proto\"V\n\013BankerTable\022\021\n\005"
      "state\030\001 \001(\005:\002-1\022\022\n\nbottom_bet\030\002 \001(\003\022\r\n\005c"
      "hair\030\003 \001(\005\"\021\n\005MsgID\022\010\n\002ID\020\223\313\001\"Z\n\020BankerP"
      "layerInfo\022\014\n\004guid\030\001 \002(\005\022\r\n\005chair\030\002 \002(\005\022\014"
      "\n\004name\030\003 \001(\t\022\014\n\004icon\030\004 \001(\t\022\r\n\005money\030\005 \001("
      "\003\"n\n\027BankerGameEndPlayerInfo\022\r\n\005chair\030\001 "
      "\002(\005\022\r\n\005money\030\002 \001(\003\022\013\n\003tax\030\003 \001(\003\022\017\n\007victo"
      "ry\030\004 \001(\005\022\027\n\017increment_money\030\005 \002(\003\"\217\002\n\031Ba"
      "nkerReconnectPlayerInfo\022\014\n\004guid\030\001 \002(\005\022\r\n"
      "\005chair\030\002 \002(\005\022\014\n\004name\030\003 \001(\t\022\014\n\004icon\030\004 \001(\t"
      "\022\r\n\005money\030\005 \001(\003\022\r\n\005ratio\030\006 \001(\005\022\020\n\010positi"
      "on\030\007 \001(\005\022\021\n\tbet_money\030\010 \001(\003\022\r\n\005cards\030\t \003"
      "(\005\022\022\n\ncards_type\030\n \001(\005\022\014\n\004flag\030\013 \001(\005\022\013\n\003"
      "tax\030\014 \001(\003\022\017\n\007victory\030\r \001(\005\022\027\n\017increment_"
      "money\030\016 \002(\003\022\016\n\006status\030\017 \001(\005\"J\n\026SC_Banker"
      "TableMatching\022\r\n\005chair\030\001 \001(\005\022\016\n\006chair1\030\002"
      " \001(\005\"\021\n\005MsgID\022\010\n\002ID\020\220\313\001\"|\n\022SC_BankerSend"
      "Cards\022\036\n\010pb_table\030\001 \001(\0132\014.BankerTable\022$\n"
      "\tpb_player\030\002 \003(\0132\021.BankerPlayerInfo\022\r\n\005c"
      "ards\030\003 \003(\005\"\021\n\005MsgID\022\010\n\002ID\020\221\313\001\"S\n\027SC_Bank"
      "erBeginToContend\022\021\n\tcountdown\030\001 \002(\005\022\022\n\nt"
      "otal_time\030\002 \002(\005\"\021\n\005MsgID\022\010\n\002ID\020\222\313\001\"I\n\026SC"
      "_BankerPlayerContend\022\r\n\005chair\030\001 \001(\005\022\r\n\005r"
      "atio\030\002 \001(\005\"\021\n\005MsgID\022\010\n\002ID\020\223\313\001\"h\n\027SC_Bank"
      "erChoosingBanker\022\016\n\006chairs\030\001 \003(\005\022\024\n\014bank"
      "er_chair\030\002 \001(\005\022\024\n\014banker_ratio\030\003 \001(\005\"\021\n\005"
      "MsgID\022\010\n\002ID\020\224\313\001\"U\n\031SC_BankerPlayerBeginT"
      "oBet\022\021\n\tcountdown\030\001 \002(\005\022\022\n\ntotal_time\030\002 "
      "\002(\005\"\021\n\005MsgID\022\010\n\002ID\020\225\313\001\"I\n\022SC_BankerPlaye"
      "rBet\022\r\n\005chair\030\001 \001(\005\022\021\n\tbet_money\030\002 \002(\003\"\021"
      "\n\005MsgID\022\010\n\002ID\020\226\313\001\"t\n\025SC_BankerShowOwnCar"
      "ds\022\r\n\005cards\030\001 \003(\005\022\022\n\ncards_type\030\002 \001(\005\022\021\n"
      "\tcountdown\030\003 \002(\005\022\022\n\ntotal_time\030\004 \002(\005\"\021\n\005"
      "MsgID\022\010\n\002ID\020\227\313\001\"g\n\022SC_BankerShowCards\022\r\n"
      "\005chair\030\001 \001(\005\022\r\n\005cards\030\002 \003(\005\022\022\n\ncards_typ"
      "e\030\003 \001(\005\022\014\n\004flag\030\004 \001(\005\"\021\n\005MsgID\022\010\n\002ID\020\230\313\001"
      "\"r\n\020SC_BankerGameEnd\022+\n\tpb_player\030\001 \003(\0132"
      "\030.BankerGameEndPlayerInfo\022\036\n\010pb_table\030\002 "
      "\001(\0132\014.BankerTable\"\021\n\005MsgID\022\010\n\002ID\020\231\313\001\"G\n\025"
      "SC_BankerForceToLeave\022\016\n\006reason\030\001 \001(\t\022\013\n"
      "\003num\030\002 \001(\005\"\021\n\005MsgID\022\010\n\002ID\020\232\313\001\"\241\001\n\026SC_Ban"
      "kerReconnectInfo\022\036\n\010pb_table\030\001 \001(\0132\014.Ban"
      "kerTable\022-\n\tpb_player\030\002 \003(\0132\032.BankerReco"
      "nnectPlayerInfo\022\021\n\tcountdown\030\003 \001(\005\022\022\n\nto"
      "tal_time\030\004 \001(\005\"\021\n\005MsgID\022\010\n\002ID\020\233\313\001\"b\n\026SC_"
      "BankerPlayerSitDown\022\"\n\007pb_info\030\001 \001(\0132\021.B"
      "ankerPlayerInfo\022\021\n\005state\030\002 \001(\005:\002-1\"\021\n\005Ms"
      "gID\022\010\n\002ID\020\234\313\001\"9\n\022SC_BankerStartVote\022\020\n\010c"
      "hair_id\030\001 \001(\005\"\021\n\005MsgID\022\010\n\002ID\020\244\313\001\"I\n\023SC_B"
      "ankerVoteResult\022\020\n\010chair_id\030\001 \001(\005\022\r\n\005agr"
      "ee\030\002 \001(\010\"\021\n\005MsgID\022\010\n\002ID\020\245\313\001\"@\n\025SC_ReEant"
      "er_Next_Game\022\024\n\010chair_id\030\001 \001(\005:\002-1\"\021\n\005Ms"
      "gID\022\010\n\002ID\020\246\313\001\"<\n\021SC_Next_Game_Time\022\024\n\010ti"
      "me_num\030\001 \001(\005:\002-1\"\021\n\005MsgID\022\010\n\002ID\020\247\313\001\"B\n\016C"
      "S_BankerEnter\022\r\n\005chair\030\001 \001(\005\022\016\n\006chair1\030\002"
      " \001(\005\"\021\n\005MsgID\022\010\n\002ID\020\221\313\001\"#\n\016CS_BankerLeav"
      "e\"\021\n\005MsgID\022\010\n\002ID\020\366\313\001\"4\n\020CS_BankerContend"
      "\022\r\n\005ratio\030\001 \001(\005\"\021\n\005MsgID\022\010\n\002ID\020\367\313\001\":\n\022CS"
      "_BankerPlayerBet\022\021\n\tbet_money\030\001 \002(\003\"\021\n\005M"
      "sgID\022\010\n\002ID\020\370\313\001\".\n\031CS_BankerPlayerGuessCa"
      "rds\"\021\n\005MsgID\022\010\n\002ID\020\371\313\001\"&\n\021CS_BankerNextG"
      "ame\"\021\n\005MsgID\022\010\n\002ID\020\372\313\001\"1\n\rCS_BankerVote\022"
      "\r\n\005agree\030\001 \001(\010\"\021\n\005MsgID\022\010\n\002ID\020\376\313\001*\335\003\n\020BA"
      "NKER_CARD_TYPE\022\031\n\025BANKER_CARD_TYPE_NONE\020"
      "d\022\030\n\024BANKER_CARD_TYPE_ONE\020e\022\030\n\024BANKER_CA"
      "RD_TYPE_TWO\020f\022\032\n\026BANKER_CARD_TYPE_THREE\020"
      "g\022\031\n\025BANKER_CARD_TYPE_FOUR\020h\022\031\n\025BANKER_C"
      "ARD_TYPE_FIVE\020i\022\030\n\024BANKER_CARD_TYPE_SIX\020"
      "j\022\032\n\026BANKER_CARD_TYPE_SEVEN\020k\022\032\n\026BANKER_"
      "CARD_TYPE_EIGHT\020l\022\032\n\026BANKER_CARD_TYPE_NI"
      "GHT\020m\022\030\n\024BANKER_CARD_TYPE_TEN\020n\022\037\n\032BANKE"
      "R_CARD_TYPE_FOUR_KING\020\311\001\022\037\n\032BANKER_CARD_"
      "TYPE_FIVE_KING\020\312\001\022 \n\033BANKER_CARD_TYPE_FO"
      "UR_SAMES\020\313\001\022 \n\033BANKER_CARD_TYPE_FIVE_SAM"
      "LL\020\314\001\022\032\n\026BANKER_CARD_TYPE_ERROR\020\001*\246\001\n\006St"
      "atus\022\022\n\016STATUS_WAITING\020\000\022\025\n\021STATUS_SEND_"
      "CARDS\020\001\022\031\n\025STATUS_CONTEND_BANKER\020\002\022\032\n\026ST"
      "ATUS_DICISION_BANKER\020\003\022\016\n\nSTATUS_BET\020\004\022\024"
      "\n\020STATUS_SHOW_CARD\020\005\022\024\n\020STATUS_SHOW_DOWN"
      "\020\006"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 3162);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "public_banker.proto", &protobuf_RegisterTypes);
  ::google::protobuf::internal::OnShutdown(&TableStruct::Shutdown);
}

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;

}  // namespace protobuf_public_5fbanker_2eproto

const ::google::protobuf::EnumDescriptor* BankerTable_MsgID_descriptor() {
  protobuf_public_5fbanker_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_public_5fbanker_2eproto::file_level_enum_descriptors[0];
}
bool BankerTable_MsgID_IsValid(int value) {
  switch (value) {
    case 26003:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const BankerTable_MsgID BankerTable::ID;
const BankerTable_MsgID BankerTable::MsgID_MIN;
const BankerTable_MsgID BankerTable::MsgID_MAX;
const int BankerTable::MsgID_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* SC_BankerTableMatching_MsgID_descriptor() {
  protobuf_public_5fbanker_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_public_5fbanker_2eproto::file_level_enum_descriptors[1];
}
bool SC_BankerTableMatching_MsgID_IsValid(int value) {
  switch (value) {
    case 26000:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const SC_BankerTableMatching_MsgID SC_BankerTableMatching::ID;
const SC_BankerTableMatching_MsgID SC_BankerTableMatching::MsgID_MIN;
const SC_BankerTableMatching_MsgID SC_BankerTableMatching::MsgID_MAX;
const int SC_BankerTableMatching::MsgID_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* SC_BankerSendCards_MsgID_descriptor() {
  protobuf_public_5fbanker_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_public_5fbanker_2eproto::file_level_enum_descriptors[2];
}
bool SC_BankerSendCards_MsgID_IsValid(int value) {
  switch (value) {
    case 26001:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const SC_BankerSendCards_MsgID SC_BankerSendCards::ID;
const SC_BankerSendCards_MsgID SC_BankerSendCards::MsgID_MIN;
const SC_BankerSendCards_MsgID SC_BankerSendCards::MsgID_MAX;
const int SC_BankerSendCards::MsgID_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* SC_BankerBeginToContend_MsgID_descriptor() {
  protobuf_public_5fbanker_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_public_5fbanker_2eproto::file_level_enum_descriptors[3];
}
bool SC_BankerBeginToContend_MsgID_IsValid(int value) {
  switch (value) {
    case 26002:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const SC_BankerBeginToContend_MsgID SC_BankerBeginToContend::ID;
const SC_BankerBeginToContend_MsgID SC_BankerBeginToContend::MsgID_MIN;
const SC_BankerBeginToContend_MsgID SC_BankerBeginToContend::MsgID_MAX;
const int SC_BankerBeginToContend::MsgID_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* SC_BankerPlayerContend_MsgID_descriptor() {
  protobuf_public_5fbanker_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_public_5fbanker_2eproto::file_level_enum_descriptors[4];
}
bool SC_BankerPlayerContend_MsgID_IsValid(int value) {
  switch (value) {
    case 26003:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const SC_BankerPlayerContend_MsgID SC_BankerPlayerContend::ID;
const SC_BankerPlayerContend_MsgID SC_BankerPlayerContend::MsgID_MIN;
const SC_BankerPlayerContend_MsgID SC_BankerPlayerContend::MsgID_MAX;
const int SC_BankerPlayerContend::MsgID_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* SC_BankerChoosingBanker_MsgID_descriptor() {
  protobuf_public_5fbanker_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_public_5fbanker_2eproto::file_level_enum_descriptors[5];
}
bool SC_BankerChoosingBanker_MsgID_IsValid(int value) {
  switch (value) {
    case 26004:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const SC_BankerChoosingBanker_MsgID SC_BankerChoosingBanker::ID;
const SC_BankerChoosingBanker_MsgID SC_BankerChoosingBanker::MsgID_MIN;
const SC_BankerChoosingBanker_MsgID SC_BankerChoosingBanker::MsgID_MAX;
const int SC_BankerChoosingBanker::MsgID_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* SC_BankerPlayerBeginToBet_MsgID_descriptor() {
  protobuf_public_5fbanker_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_public_5fbanker_2eproto::file_level_enum_descriptors[6];
}
bool SC_BankerPlayerBeginToBet_MsgID_IsValid(int value) {
  switch (value) {
    case 26005:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const SC_BankerPlayerBeginToBet_MsgID SC_BankerPlayerBeginToBet::ID;
const SC_BankerPlayerBeginToBet_MsgID SC_BankerPlayerBeginToBet::MsgID_MIN;
const SC_BankerPlayerBeginToBet_MsgID SC_BankerPlayerBeginToBet::MsgID_MAX;
const int SC_BankerPlayerBeginToBet::MsgID_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* SC_BankerPlayerBet_MsgID_descriptor() {
  protobuf_public_5fbanker_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_public_5fbanker_2eproto::file_level_enum_descriptors[7];
}
bool SC_BankerPlayerBet_MsgID_IsValid(int value) {
  switch (value) {
    case 26006:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const SC_BankerPlayerBet_MsgID SC_BankerPlayerBet::ID;
const SC_BankerPlayerBet_MsgID SC_BankerPlayerBet::MsgID_MIN;
const SC_BankerPlayerBet_MsgID SC_BankerPlayerBet::MsgID_MAX;
const int SC_BankerPlayerBet::MsgID_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* SC_BankerShowOwnCards_MsgID_descriptor() {
  protobuf_public_5fbanker_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_public_5fbanker_2eproto::file_level_enum_descriptors[8];
}
bool SC_BankerShowOwnCards_MsgID_IsValid(int value) {
  switch (value) {
    case 26007:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const SC_BankerShowOwnCards_MsgID SC_BankerShowOwnCards::ID;
const SC_BankerShowOwnCards_MsgID SC_BankerShowOwnCards::MsgID_MIN;
const SC_BankerShowOwnCards_MsgID SC_BankerShowOwnCards::MsgID_MAX;
const int SC_BankerShowOwnCards::MsgID_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* SC_BankerShowCards_MsgID_descriptor() {
  protobuf_public_5fbanker_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_public_5fbanker_2eproto::file_level_enum_descriptors[9];
}
bool SC_BankerShowCards_MsgID_IsValid(int value) {
  switch (value) {
    case 26008:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const SC_BankerShowCards_MsgID SC_BankerShowCards::ID;
const SC_BankerShowCards_MsgID SC_BankerShowCards::MsgID_MIN;
const SC_BankerShowCards_MsgID SC_BankerShowCards::MsgID_MAX;
const int SC_BankerShowCards::MsgID_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* SC_BankerGameEnd_MsgID_descriptor() {
  protobuf_public_5fbanker_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_public_5fbanker_2eproto::file_level_enum_descriptors[10];
}
bool SC_BankerGameEnd_MsgID_IsValid(int value) {
  switch (value) {
    case 26009:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const SC_BankerGameEnd_MsgID SC_BankerGameEnd::ID;
const SC_BankerGameEnd_MsgID SC_BankerGameEnd::MsgID_MIN;
const SC_BankerGameEnd_MsgID SC_BankerGameEnd::MsgID_MAX;
const int SC_BankerGameEnd::MsgID_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* SC_BankerForceToLeave_MsgID_descriptor() {
  protobuf_public_5fbanker_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_public_5fbanker_2eproto::file_level_enum_descriptors[11];
}
bool SC_BankerForceToLeave_MsgID_IsValid(int value) {
  switch (value) {
    case 26010:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const SC_BankerForceToLeave_MsgID SC_BankerForceToLeave::ID;
const SC_BankerForceToLeave_MsgID SC_BankerForceToLeave::MsgID_MIN;
const SC_BankerForceToLeave_MsgID SC_BankerForceToLeave::MsgID_MAX;
const int SC_BankerForceToLeave::MsgID_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* SC_BankerReconnectInfo_MsgID_descriptor() {
  protobuf_public_5fbanker_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_public_5fbanker_2eproto::file_level_enum_descriptors[12];
}
bool SC_BankerReconnectInfo_MsgID_IsValid(int value) {
  switch (value) {
    case 26011:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const SC_BankerReconnectInfo_MsgID SC_BankerReconnectInfo::ID;
const SC_BankerReconnectInfo_MsgID SC_BankerReconnectInfo::MsgID_MIN;
const SC_BankerReconnectInfo_MsgID SC_BankerReconnectInfo::MsgID_MAX;
const int SC_BankerReconnectInfo::MsgID_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* SC_BankerPlayerSitDown_MsgID_descriptor() {
  protobuf_public_5fbanker_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_public_5fbanker_2eproto::file_level_enum_descriptors[13];
}
bool SC_BankerPlayerSitDown_MsgID_IsValid(int value) {
  switch (value) {
    case 26012:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const SC_BankerPlayerSitDown_MsgID SC_BankerPlayerSitDown::ID;
const SC_BankerPlayerSitDown_MsgID SC_BankerPlayerSitDown::MsgID_MIN;
const SC_BankerPlayerSitDown_MsgID SC_BankerPlayerSitDown::MsgID_MAX;
const int SC_BankerPlayerSitDown::MsgID_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* SC_BankerStartVote_MsgID_descriptor() {
  protobuf_public_5fbanker_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_public_5fbanker_2eproto::file_level_enum_descriptors[14];
}
bool SC_BankerStartVote_MsgID_IsValid(int value) {
  switch (value) {
    case 26020:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const SC_BankerStartVote_MsgID SC_BankerStartVote::ID;
const SC_BankerStartVote_MsgID SC_BankerStartVote::MsgID_MIN;
const SC_BankerStartVote_MsgID SC_BankerStartVote::MsgID_MAX;
const int SC_BankerStartVote::MsgID_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* SC_BankerVoteResult_MsgID_descriptor() {
  protobuf_public_5fbanker_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_public_5fbanker_2eproto::file_level_enum_descriptors[15];
}
bool SC_BankerVoteResult_MsgID_IsValid(int value) {
  switch (value) {
    case 26021:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const SC_BankerVoteResult_MsgID SC_BankerVoteResult::ID;
const SC_BankerVoteResult_MsgID SC_BankerVoteResult::MsgID_MIN;
const SC_BankerVoteResult_MsgID SC_BankerVoteResult::MsgID_MAX;
const int SC_BankerVoteResult::MsgID_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* SC_ReEanter_Next_Game_MsgID_descriptor() {
  protobuf_public_5fbanker_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_public_5fbanker_2eproto::file_level_enum_descriptors[16];
}
bool SC_ReEanter_Next_Game_MsgID_IsValid(int value) {
  switch (value) {
    case 26022:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const SC_ReEanter_Next_Game_MsgID SC_ReEanter_Next_Game::ID;
const SC_ReEanter_Next_Game_MsgID SC_ReEanter_Next_Game::MsgID_MIN;
const SC_ReEanter_Next_Game_MsgID SC_ReEanter_Next_Game::MsgID_MAX;
const int SC_ReEanter_Next_Game::MsgID_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* SC_Next_Game_Time_MsgID_descriptor() {
  protobuf_public_5fbanker_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_public_5fbanker_2eproto::file_level_enum_descriptors[17];
}
bool SC_Next_Game_Time_MsgID_IsValid(int value) {
  switch (value) {
    case 26023:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const SC_Next_Game_Time_MsgID SC_Next_Game_Time::ID;
const SC_Next_Game_Time_MsgID SC_Next_Game_Time::MsgID_MIN;
const SC_Next_Game_Time_MsgID SC_Next_Game_Time::MsgID_MAX;
const int SC_Next_Game_Time::MsgID_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* CS_BankerEnter_MsgID_descriptor() {
  protobuf_public_5fbanker_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_public_5fbanker_2eproto::file_level_enum_descriptors[18];
}
bool CS_BankerEnter_MsgID_IsValid(int value) {
  switch (value) {
    case 26001:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const CS_BankerEnter_MsgID CS_BankerEnter::ID;
const CS_BankerEnter_MsgID CS_BankerEnter::MsgID_MIN;
const CS_BankerEnter_MsgID CS_BankerEnter::MsgID_MAX;
const int CS_BankerEnter::MsgID_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* CS_BankerLeave_MsgID_descriptor() {
  protobuf_public_5fbanker_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_public_5fbanker_2eproto::file_level_enum_descriptors[19];
}
bool CS_BankerLeave_MsgID_IsValid(int value) {
  switch (value) {
    case 26102:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const CS_BankerLeave_MsgID CS_BankerLeave::ID;
const CS_BankerLeave_MsgID CS_BankerLeave::MsgID_MIN;
const CS_BankerLeave_MsgID CS_BankerLeave::MsgID_MAX;
const int CS_BankerLeave::MsgID_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* CS_BankerContend_MsgID_descriptor() {
  protobuf_public_5fbanker_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_public_5fbanker_2eproto::file_level_enum_descriptors[20];
}
bool CS_BankerContend_MsgID_IsValid(int value) {
  switch (value) {
    case 26103:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const CS_BankerContend_MsgID CS_BankerContend::ID;
const CS_BankerContend_MsgID CS_BankerContend::MsgID_MIN;
const CS_BankerContend_MsgID CS_BankerContend::MsgID_MAX;
const int CS_BankerContend::MsgID_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* CS_BankerPlayerBet_MsgID_descriptor() {
  protobuf_public_5fbanker_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_public_5fbanker_2eproto::file_level_enum_descriptors[21];
}
bool CS_BankerPlayerBet_MsgID_IsValid(int value) {
  switch (value) {
    case 26104:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const CS_BankerPlayerBet_MsgID CS_BankerPlayerBet::ID;
const CS_BankerPlayerBet_MsgID CS_BankerPlayerBet::MsgID_MIN;
const CS_BankerPlayerBet_MsgID CS_BankerPlayerBet::MsgID_MAX;
const int CS_BankerPlayerBet::MsgID_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* CS_BankerPlayerGuessCards_MsgID_descriptor() {
  protobuf_public_5fbanker_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_public_5fbanker_2eproto::file_level_enum_descriptors[22];
}
bool CS_BankerPlayerGuessCards_MsgID_IsValid(int value) {
  switch (value) {
    case 26105:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const CS_BankerPlayerGuessCards_MsgID CS_BankerPlayerGuessCards::ID;
const CS_BankerPlayerGuessCards_MsgID CS_BankerPlayerGuessCards::MsgID_MIN;
const CS_BankerPlayerGuessCards_MsgID CS_BankerPlayerGuessCards::MsgID_MAX;
const int CS_BankerPlayerGuessCards::MsgID_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* CS_BankerNextGame_MsgID_descriptor() {
  protobuf_public_5fbanker_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_public_5fbanker_2eproto::file_level_enum_descriptors[23];
}
bool CS_BankerNextGame_MsgID_IsValid(int value) {
  switch (value) {
    case 26106:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const CS_BankerNextGame_MsgID CS_BankerNextGame::ID;
const CS_BankerNextGame_MsgID CS_BankerNextGame::MsgID_MIN;
const CS_BankerNextGame_MsgID CS_BankerNextGame::MsgID_MAX;
const int CS_BankerNextGame::MsgID_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* CS_BankerVote_MsgID_descriptor() {
  protobuf_public_5fbanker_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_public_5fbanker_2eproto::file_level_enum_descriptors[24];
}
bool CS_BankerVote_MsgID_IsValid(int value) {
  switch (value) {
    case 26110:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const CS_BankerVote_MsgID CS_BankerVote::ID;
const CS_BankerVote_MsgID CS_BankerVote::MsgID_MIN;
const CS_BankerVote_MsgID CS_BankerVote::MsgID_MAX;
const int CS_BankerVote::MsgID_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* BANKER_CARD_TYPE_descriptor() {
  protobuf_public_5fbanker_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_public_5fbanker_2eproto::file_level_enum_descriptors[25];
}
bool BANKER_CARD_TYPE_IsValid(int value) {
  switch (value) {
    case 1:
    case 100:
    case 101:
    case 102:
    case 103:
    case 104:
    case 105:
    case 106:
    case 107:
    case 108:
    case 109:
    case 110:
    case 201:
    case 202:
    case 203:
    case 204:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* Status_descriptor() {
  protobuf_public_5fbanker_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_public_5fbanker_2eproto::file_level_enum_descriptors[26];
}
bool Status_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
      return true;
    default:
      return false;
  }
}


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int BankerTable::kStateFieldNumber;
const int BankerTable::kBottomBetFieldNumber;
const int BankerTable::kChairFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

BankerTable::BankerTable()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_public_5fbanker_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:BankerTable)
}
BankerTable::BankerTable(const BankerTable& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&bottom_bet_, &from.bottom_bet_,
    reinterpret_cast<char*>(&state_) -
    reinterpret_cast<char*>(&bottom_bet_) + sizeof(state_));
  // @@protoc_insertion_point(copy_constructor:BankerTable)
}

void BankerTable::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&bottom_bet_, 0, reinterpret_cast<char*>(&chair_) -
    reinterpret_cast<char*>(&bottom_bet_) + sizeof(chair_));
  state_ = -1;
}

BankerTable::~BankerTable() {
  // @@protoc_insertion_point(destructor:BankerTable)
  SharedDtor();
}

void BankerTable::SharedDtor() {
}

void BankerTable::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BankerTable::descriptor() {
  protobuf_public_5fbanker_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_public_5fbanker_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const BankerTable& BankerTable::default_instance() {
  protobuf_public_5fbanker_2eproto::InitDefaults();
  return *internal_default_instance();
}

BankerTable* BankerTable::New(::google::protobuf::Arena* arena) const {
  BankerTable* n = new BankerTable;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void BankerTable::Clear() {
// @@protoc_insertion_point(message_clear_start:BankerTable)
  if (_has_bits_[0 / 32] & 7u) {
    ::memset(&bottom_bet_, 0, reinterpret_cast<char*>(&chair_) -
      reinterpret_cast<char*>(&bottom_bet_) + sizeof(chair_));
    state_ = -1;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool BankerTable::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:BankerTable)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 state = 1 [default = -1];
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_state();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &state_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 bottom_bet = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_bottom_bet();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &bottom_bet_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 chair = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {
          set_has_chair();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &chair_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:BankerTable)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:BankerTable)
  return false;
#undef DO_
}

void BankerTable::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:BankerTable)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 state = 1 [default = -1];
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->state(), output);
  }

  // optional int64 bottom_bet = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->bottom_bet(), output);
  }

  // optional int32 chair = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->chair(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:BankerTable)
}

::google::protobuf::uint8* BankerTable::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:BankerTable)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 state = 1 [default = -1];
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->state(), target);
  }

  // optional int64 bottom_bet = 2;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->bottom_bet(), target);
  }

  // optional int32 chair = 3;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->chair(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:BankerTable)
  return target;
}

size_t BankerTable::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:BankerTable)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 7u) {
    // optional int64 bottom_bet = 2;
    if (has_bottom_bet()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->bottom_bet());
    }

    // optional int32 chair = 3;
    if (has_chair()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->chair());
    }

    // optional int32 state = 1 [default = -1];
    if (has_state()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->state());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BankerTable::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:BankerTable)
  GOOGLE_DCHECK_NE(&from, this);
  const BankerTable* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const BankerTable>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:BankerTable)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:BankerTable)
    MergeFrom(*source);
  }
}

void BankerTable::MergeFrom(const BankerTable& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:BankerTable)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      bottom_bet_ = from.bottom_bet_;
    }
    if (cached_has_bits & 0x00000002u) {
      chair_ = from.chair_;
    }
    if (cached_has_bits & 0x00000004u) {
      state_ = from.state_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void BankerTable::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:BankerTable)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BankerTable::CopyFrom(const BankerTable& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:BankerTable)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BankerTable::IsInitialized() const {
  return true;
}

void BankerTable::Swap(BankerTable* other) {
  if (other == this) return;
  InternalSwap(other);
}
void BankerTable::InternalSwap(BankerTable* other) {
  std::swap(bottom_bet_, other->bottom_bet_);
  std::swap(chair_, other->chair_);
  std::swap(state_, other->state_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata BankerTable::GetMetadata() const {
  protobuf_public_5fbanker_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_public_5fbanker_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// BankerTable

// optional int32 state = 1 [default = -1];
bool BankerTable::has_state() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void BankerTable::set_has_state() {
  _has_bits_[0] |= 0x00000004u;
}
void BankerTable::clear_has_state() {
  _has_bits_[0] &= ~0x00000004u;
}
void BankerTable::clear_state() {
  state_ = -1;
  clear_has_state();
}
::google::protobuf::int32 BankerTable::state() const {
  // @@protoc_insertion_point(field_get:BankerTable.state)
  return state_;
}
void BankerTable::set_state(::google::protobuf::int32 value) {
  set_has_state();
  state_ = value;
  // @@protoc_insertion_point(field_set:BankerTable.state)
}

// optional int64 bottom_bet = 2;
bool BankerTable::has_bottom_bet() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void BankerTable::set_has_bottom_bet() {
  _has_bits_[0] |= 0x00000001u;
}
void BankerTable::clear_has_bottom_bet() {
  _has_bits_[0] &= ~0x00000001u;
}
void BankerTable::clear_bottom_bet() {
  bottom_bet_ = GOOGLE_LONGLONG(0);
  clear_has_bottom_bet();
}
::google::protobuf::int64 BankerTable::bottom_bet() const {
  // @@protoc_insertion_point(field_get:BankerTable.bottom_bet)
  return bottom_bet_;
}
void BankerTable::set_bottom_bet(::google::protobuf::int64 value) {
  set_has_bottom_bet();
  bottom_bet_ = value;
  // @@protoc_insertion_point(field_set:BankerTable.bottom_bet)
}

// optional int32 chair = 3;
bool BankerTable::has_chair() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void BankerTable::set_has_chair() {
  _has_bits_[0] |= 0x00000002u;
}
void BankerTable::clear_has_chair() {
  _has_bits_[0] &= ~0x00000002u;
}
void BankerTable::clear_chair() {
  chair_ = 0;
  clear_has_chair();
}
::google::protobuf::int32 BankerTable::chair() const {
  // @@protoc_insertion_point(field_get:BankerTable.chair)
  return chair_;
}
void BankerTable::set_chair(::google::protobuf::int32 value) {
  set_has_chair();
  chair_ = value;
  // @@protoc_insertion_point(field_set:BankerTable.chair)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int BankerPlayerInfo::kGuidFieldNumber;
const int BankerPlayerInfo::kChairFieldNumber;
const int BankerPlayerInfo::kNameFieldNumber;
const int BankerPlayerInfo::kIconFieldNumber;
const int BankerPlayerInfo::kMoneyFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

BankerPlayerInfo::BankerPlayerInfo()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_public_5fbanker_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:BankerPlayerInfo)
}
BankerPlayerInfo::BankerPlayerInfo(const BankerPlayerInfo& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_name()) {
    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  icon_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_icon()) {
    icon_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.icon_);
  }
  ::memcpy(&guid_, &from.guid_,
    reinterpret_cast<char*>(&money_) -
    reinterpret_cast<char*>(&guid_) + sizeof(money_));
  // @@protoc_insertion_point(copy_constructor:BankerPlayerInfo)
}

void BankerPlayerInfo::SharedCtor() {
  _cached_size_ = 0;
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  icon_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&guid_, 0, reinterpret_cast<char*>(&money_) -
    reinterpret_cast<char*>(&guid_) + sizeof(money_));
}

BankerPlayerInfo::~BankerPlayerInfo() {
  // @@protoc_insertion_point(destructor:BankerPlayerInfo)
  SharedDtor();
}

void BankerPlayerInfo::SharedDtor() {
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  icon_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void BankerPlayerInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BankerPlayerInfo::descriptor() {
  protobuf_public_5fbanker_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_public_5fbanker_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const BankerPlayerInfo& BankerPlayerInfo::default_instance() {
  protobuf_public_5fbanker_2eproto::InitDefaults();
  return *internal_default_instance();
}

BankerPlayerInfo* BankerPlayerInfo::New(::google::protobuf::Arena* arena) const {
  BankerPlayerInfo* n = new BankerPlayerInfo;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void BankerPlayerInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:BankerPlayerInfo)
  if (_has_bits_[0 / 32] & 3u) {
    if (has_name()) {
      GOOGLE_DCHECK(!name_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*name_.UnsafeRawStringPointer())->clear();
    }
    if (has_icon()) {
      GOOGLE_DCHECK(!icon_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*icon_.UnsafeRawStringPointer())->clear();
    }
  }
  if (_has_bits_[0 / 32] & 28u) {
    ::memset(&guid_, 0, reinterpret_cast<char*>(&money_) -
      reinterpret_cast<char*>(&guid_) + sizeof(money_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool BankerPlayerInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:BankerPlayerInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 guid = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_guid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &guid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 chair = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_chair();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &chair_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string name = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "BankerPlayerInfo.name");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string icon = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_icon()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->icon().data(), this->icon().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "BankerPlayerInfo.icon");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 money = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u)) {
          set_has_money();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &money_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:BankerPlayerInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:BankerPlayerInfo)
  return false;
#undef DO_
}

void BankerPlayerInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:BankerPlayerInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 guid = 1;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->guid(), output);
  }

  // required int32 chair = 2;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->chair(), output);
  }

  // optional string name = 3;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "BankerPlayerInfo.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->name(), output);
  }

  // optional string icon = 4;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->icon().data(), this->icon().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "BankerPlayerInfo.icon");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->icon(), output);
  }

  // optional int64 money = 5;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(5, this->money(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:BankerPlayerInfo)
}

::google::protobuf::uint8* BankerPlayerInfo::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:BankerPlayerInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 guid = 1;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->guid(), target);
  }

  // required int32 chair = 2;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->chair(), target);
  }

  // optional string name = 3;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "BankerPlayerInfo.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->name(), target);
  }

  // optional string icon = 4;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->icon().data(), this->icon().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "BankerPlayerInfo.icon");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->icon(), target);
  }

  // optional int64 money = 5;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(5, this->money(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:BankerPlayerInfo)
  return target;
}

size_t BankerPlayerInfo::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:BankerPlayerInfo)
  size_t total_size = 0;

  if (has_guid()) {
    // required int32 guid = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->guid());
  }

  if (has_chair()) {
    // required int32 chair = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->chair());
  }

  return total_size;
}
size_t BankerPlayerInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:BankerPlayerInfo)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (((_has_bits_[0] & 0x0000000c) ^ 0x0000000c) == 0) {  // All required fields are present.
    // required int32 guid = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->guid());

    // required int32 chair = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->chair());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  if (_has_bits_[0 / 32] & 3u) {
    // optional string name = 3;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional string icon = 4;
    if (has_icon()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->icon());
    }

  }
  // optional int64 money = 5;
  if (has_money()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->money());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BankerPlayerInfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:BankerPlayerInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const BankerPlayerInfo* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const BankerPlayerInfo>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:BankerPlayerInfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:BankerPlayerInfo)
    MergeFrom(*source);
  }
}

void BankerPlayerInfo::MergeFrom(const BankerPlayerInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:BankerPlayerInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 31u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_name();
      name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_icon();
      icon_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.icon_);
    }
    if (cached_has_bits & 0x00000004u) {
      guid_ = from.guid_;
    }
    if (cached_has_bits & 0x00000008u) {
      chair_ = from.chair_;
    }
    if (cached_has_bits & 0x00000010u) {
      money_ = from.money_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void BankerPlayerInfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:BankerPlayerInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BankerPlayerInfo::CopyFrom(const BankerPlayerInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:BankerPlayerInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BankerPlayerInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000c) != 0x0000000c) return false;
  return true;
}

void BankerPlayerInfo::Swap(BankerPlayerInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void BankerPlayerInfo::InternalSwap(BankerPlayerInfo* other) {
  name_.Swap(&other->name_);
  icon_.Swap(&other->icon_);
  std::swap(guid_, other->guid_);
  std::swap(chair_, other->chair_);
  std::swap(money_, other->money_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata BankerPlayerInfo::GetMetadata() const {
  protobuf_public_5fbanker_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_public_5fbanker_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// BankerPlayerInfo

// required int32 guid = 1;
bool BankerPlayerInfo::has_guid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void BankerPlayerInfo::set_has_guid() {
  _has_bits_[0] |= 0x00000004u;
}
void BankerPlayerInfo::clear_has_guid() {
  _has_bits_[0] &= ~0x00000004u;
}
void BankerPlayerInfo::clear_guid() {
  guid_ = 0;
  clear_has_guid();
}
::google::protobuf::int32 BankerPlayerInfo::guid() const {
  // @@protoc_insertion_point(field_get:BankerPlayerInfo.guid)
  return guid_;
}
void BankerPlayerInfo::set_guid(::google::protobuf::int32 value) {
  set_has_guid();
  guid_ = value;
  // @@protoc_insertion_point(field_set:BankerPlayerInfo.guid)
}

// required int32 chair = 2;
bool BankerPlayerInfo::has_chair() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void BankerPlayerInfo::set_has_chair() {
  _has_bits_[0] |= 0x00000008u;
}
void BankerPlayerInfo::clear_has_chair() {
  _has_bits_[0] &= ~0x00000008u;
}
void BankerPlayerInfo::clear_chair() {
  chair_ = 0;
  clear_has_chair();
}
::google::protobuf::int32 BankerPlayerInfo::chair() const {
  // @@protoc_insertion_point(field_get:BankerPlayerInfo.chair)
  return chair_;
}
void BankerPlayerInfo::set_chair(::google::protobuf::int32 value) {
  set_has_chair();
  chair_ = value;
  // @@protoc_insertion_point(field_set:BankerPlayerInfo.chair)
}

// optional string name = 3;
bool BankerPlayerInfo::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void BankerPlayerInfo::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
void BankerPlayerInfo::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
void BankerPlayerInfo::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_name();
}
const ::std::string& BankerPlayerInfo::name() const {
  // @@protoc_insertion_point(field_get:BankerPlayerInfo.name)
  return name_.GetNoArena();
}
void BankerPlayerInfo::set_name(const ::std::string& value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:BankerPlayerInfo.name)
}
#if LANG_CXX11
void BankerPlayerInfo::set_name(::std::string&& value) {
  set_has_name();
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:BankerPlayerInfo.name)
}
#endif
void BankerPlayerInfo::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:BankerPlayerInfo.name)
}
void BankerPlayerInfo::set_name(const char* value, size_t size) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:BankerPlayerInfo.name)
}
::std::string* BankerPlayerInfo::mutable_name() {
  set_has_name();
  // @@protoc_insertion_point(field_mutable:BankerPlayerInfo.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* BankerPlayerInfo::release_name() {
  // @@protoc_insertion_point(field_release:BankerPlayerInfo.name)
  clear_has_name();
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void BankerPlayerInfo::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    set_has_name();
  } else {
    clear_has_name();
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:BankerPlayerInfo.name)
}

// optional string icon = 4;
bool BankerPlayerInfo::has_icon() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void BankerPlayerInfo::set_has_icon() {
  _has_bits_[0] |= 0x00000002u;
}
void BankerPlayerInfo::clear_has_icon() {
  _has_bits_[0] &= ~0x00000002u;
}
void BankerPlayerInfo::clear_icon() {
  icon_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_icon();
}
const ::std::string& BankerPlayerInfo::icon() const {
  // @@protoc_insertion_point(field_get:BankerPlayerInfo.icon)
  return icon_.GetNoArena();
}
void BankerPlayerInfo::set_icon(const ::std::string& value) {
  set_has_icon();
  icon_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:BankerPlayerInfo.icon)
}
#if LANG_CXX11
void BankerPlayerInfo::set_icon(::std::string&& value) {
  set_has_icon();
  icon_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:BankerPlayerInfo.icon)
}
#endif
void BankerPlayerInfo::set_icon(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_icon();
  icon_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:BankerPlayerInfo.icon)
}
void BankerPlayerInfo::set_icon(const char* value, size_t size) {
  set_has_icon();
  icon_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:BankerPlayerInfo.icon)
}
::std::string* BankerPlayerInfo::mutable_icon() {
  set_has_icon();
  // @@protoc_insertion_point(field_mutable:BankerPlayerInfo.icon)
  return icon_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* BankerPlayerInfo::release_icon() {
  // @@protoc_insertion_point(field_release:BankerPlayerInfo.icon)
  clear_has_icon();
  return icon_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void BankerPlayerInfo::set_allocated_icon(::std::string* icon) {
  if (icon != NULL) {
    set_has_icon();
  } else {
    clear_has_icon();
  }
  icon_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), icon);
  // @@protoc_insertion_point(field_set_allocated:BankerPlayerInfo.icon)
}

// optional int64 money = 5;
bool BankerPlayerInfo::has_money() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void BankerPlayerInfo::set_has_money() {
  _has_bits_[0] |= 0x00000010u;
}
void BankerPlayerInfo::clear_has_money() {
  _has_bits_[0] &= ~0x00000010u;
}
void BankerPlayerInfo::clear_money() {
  money_ = GOOGLE_LONGLONG(0);
  clear_has_money();
}
::google::protobuf::int64 BankerPlayerInfo::money() const {
  // @@protoc_insertion_point(field_get:BankerPlayerInfo.money)
  return money_;
}
void BankerPlayerInfo::set_money(::google::protobuf::int64 value) {
  set_has_money();
  money_ = value;
  // @@protoc_insertion_point(field_set:BankerPlayerInfo.money)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int BankerGameEndPlayerInfo::kChairFieldNumber;
const int BankerGameEndPlayerInfo::kMoneyFieldNumber;
const int BankerGameEndPlayerInfo::kTaxFieldNumber;
const int BankerGameEndPlayerInfo::kVictoryFieldNumber;
const int BankerGameEndPlayerInfo::kIncrementMoneyFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

BankerGameEndPlayerInfo::BankerGameEndPlayerInfo()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_public_5fbanker_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:BankerGameEndPlayerInfo)
}
BankerGameEndPlayerInfo::BankerGameEndPlayerInfo(const BankerGameEndPlayerInfo& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&money_, &from.money_,
    reinterpret_cast<char*>(&increment_money_) -
    reinterpret_cast<char*>(&money_) + sizeof(increment_money_));
  // @@protoc_insertion_point(copy_constructor:BankerGameEndPlayerInfo)
}

void BankerGameEndPlayerInfo::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&money_, 0, reinterpret_cast<char*>(&increment_money_) -
    reinterpret_cast<char*>(&money_) + sizeof(increment_money_));
}

BankerGameEndPlayerInfo::~BankerGameEndPlayerInfo() {
  // @@protoc_insertion_point(destructor:BankerGameEndPlayerInfo)
  SharedDtor();
}

void BankerGameEndPlayerInfo::SharedDtor() {
}

void BankerGameEndPlayerInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BankerGameEndPlayerInfo::descriptor() {
  protobuf_public_5fbanker_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_public_5fbanker_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const BankerGameEndPlayerInfo& BankerGameEndPlayerInfo::default_instance() {
  protobuf_public_5fbanker_2eproto::InitDefaults();
  return *internal_default_instance();
}

BankerGameEndPlayerInfo* BankerGameEndPlayerInfo::New(::google::protobuf::Arena* arena) const {
  BankerGameEndPlayerInfo* n = new BankerGameEndPlayerInfo;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void BankerGameEndPlayerInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:BankerGameEndPlayerInfo)
  if (_has_bits_[0 / 32] & 31u) {
    ::memset(&money_, 0, reinterpret_cast<char*>(&increment_money_) -
      reinterpret_cast<char*>(&money_) + sizeof(increment_money_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool BankerGameEndPlayerInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:BankerGameEndPlayerInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 chair = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_chair();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &chair_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 money = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_money();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &money_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 tax = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {
          set_has_tax();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &tax_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 victory = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u)) {
          set_has_victory();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &victory_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int64 increment_money = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u)) {
          set_has_increment_money();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &increment_money_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:BankerGameEndPlayerInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:BankerGameEndPlayerInfo)
  return false;
#undef DO_
}

void BankerGameEndPlayerInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:BankerGameEndPlayerInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 chair = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->chair(), output);
  }

  // optional int64 money = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->money(), output);
  }

  // optional int64 tax = 3;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->tax(), output);
  }

  // optional int32 victory = 4;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->victory(), output);
  }

  // required int64 increment_money = 5;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(5, this->increment_money(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:BankerGameEndPlayerInfo)
}

::google::protobuf::uint8* BankerGameEndPlayerInfo::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:BankerGameEndPlayerInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 chair = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->chair(), target);
  }

  // optional int64 money = 2;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->money(), target);
  }

  // optional int64 tax = 3;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->tax(), target);
  }

  // optional int32 victory = 4;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->victory(), target);
  }

  // required int64 increment_money = 5;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(5, this->increment_money(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:BankerGameEndPlayerInfo)
  return target;
}

size_t BankerGameEndPlayerInfo::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:BankerGameEndPlayerInfo)
  size_t total_size = 0;

  if (has_chair()) {
    // required int32 chair = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->chair());
  }

  if (has_increment_money()) {
    // required int64 increment_money = 5;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->increment_money());
  }

  return total_size;
}
size_t BankerGameEndPlayerInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:BankerGameEndPlayerInfo)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000012) ^ 0x00000012) == 0) {  // All required fields are present.
    // required int32 chair = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->chair());

    // required int64 increment_money = 5;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->increment_money());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  // optional int64 money = 2;
  if (has_money()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->money());
  }

  if (_has_bits_[0 / 32] & 12u) {
    // optional int32 victory = 4;
    if (has_victory()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->victory());
    }

    // optional int64 tax = 3;
    if (has_tax()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->tax());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BankerGameEndPlayerInfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:BankerGameEndPlayerInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const BankerGameEndPlayerInfo* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const BankerGameEndPlayerInfo>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:BankerGameEndPlayerInfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:BankerGameEndPlayerInfo)
    MergeFrom(*source);
  }
}

void BankerGameEndPlayerInfo::MergeFrom(const BankerGameEndPlayerInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:BankerGameEndPlayerInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 31u) {
    if (cached_has_bits & 0x00000001u) {
      money_ = from.money_;
    }
    if (cached_has_bits & 0x00000002u) {
      chair_ = from.chair_;
    }
    if (cached_has_bits & 0x00000004u) {
      victory_ = from.victory_;
    }
    if (cached_has_bits & 0x00000008u) {
      tax_ = from.tax_;
    }
    if (cached_has_bits & 0x00000010u) {
      increment_money_ = from.increment_money_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void BankerGameEndPlayerInfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:BankerGameEndPlayerInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BankerGameEndPlayerInfo::CopyFrom(const BankerGameEndPlayerInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:BankerGameEndPlayerInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BankerGameEndPlayerInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000012) != 0x00000012) return false;
  return true;
}

void BankerGameEndPlayerInfo::Swap(BankerGameEndPlayerInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void BankerGameEndPlayerInfo::InternalSwap(BankerGameEndPlayerInfo* other) {
  std::swap(money_, other->money_);
  std::swap(chair_, other->chair_);
  std::swap(victory_, other->victory_);
  std::swap(tax_, other->tax_);
  std::swap(increment_money_, other->increment_money_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata BankerGameEndPlayerInfo::GetMetadata() const {
  protobuf_public_5fbanker_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_public_5fbanker_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// BankerGameEndPlayerInfo

// required int32 chair = 1;
bool BankerGameEndPlayerInfo::has_chair() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void BankerGameEndPlayerInfo::set_has_chair() {
  _has_bits_[0] |= 0x00000002u;
}
void BankerGameEndPlayerInfo::clear_has_chair() {
  _has_bits_[0] &= ~0x00000002u;
}
void BankerGameEndPlayerInfo::clear_chair() {
  chair_ = 0;
  clear_has_chair();
}
::google::protobuf::int32 BankerGameEndPlayerInfo::chair() const {
  // @@protoc_insertion_point(field_get:BankerGameEndPlayerInfo.chair)
  return chair_;
}
void BankerGameEndPlayerInfo::set_chair(::google::protobuf::int32 value) {
  set_has_chair();
  chair_ = value;
  // @@protoc_insertion_point(field_set:BankerGameEndPlayerInfo.chair)
}

// optional int64 money = 2;
bool BankerGameEndPlayerInfo::has_money() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void BankerGameEndPlayerInfo::set_has_money() {
  _has_bits_[0] |= 0x00000001u;
}
void BankerGameEndPlayerInfo::clear_has_money() {
  _has_bits_[0] &= ~0x00000001u;
}
void BankerGameEndPlayerInfo::clear_money() {
  money_ = GOOGLE_LONGLONG(0);
  clear_has_money();
}
::google::protobuf::int64 BankerGameEndPlayerInfo::money() const {
  // @@protoc_insertion_point(field_get:BankerGameEndPlayerInfo.money)
  return money_;
}
void BankerGameEndPlayerInfo::set_money(::google::protobuf::int64 value) {
  set_has_money();
  money_ = value;
  // @@protoc_insertion_point(field_set:BankerGameEndPlayerInfo.money)
}

// optional int64 tax = 3;
bool BankerGameEndPlayerInfo::has_tax() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void BankerGameEndPlayerInfo::set_has_tax() {
  _has_bits_[0] |= 0x00000008u;
}
void BankerGameEndPlayerInfo::clear_has_tax() {
  _has_bits_[0] &= ~0x00000008u;
}
void BankerGameEndPlayerInfo::clear_tax() {
  tax_ = GOOGLE_LONGLONG(0);
  clear_has_tax();
}
::google::protobuf::int64 BankerGameEndPlayerInfo::tax() const {
  // @@protoc_insertion_point(field_get:BankerGameEndPlayerInfo.tax)
  return tax_;
}
void BankerGameEndPlayerInfo::set_tax(::google::protobuf::int64 value) {
  set_has_tax();
  tax_ = value;
  // @@protoc_insertion_point(field_set:BankerGameEndPlayerInfo.tax)
}

// optional int32 victory = 4;
bool BankerGameEndPlayerInfo::has_victory() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void BankerGameEndPlayerInfo::set_has_victory() {
  _has_bits_[0] |= 0x00000004u;
}
void BankerGameEndPlayerInfo::clear_has_victory() {
  _has_bits_[0] &= ~0x00000004u;
}
void BankerGameEndPlayerInfo::clear_victory() {
  victory_ = 0;
  clear_has_victory();
}
::google::protobuf::int32 BankerGameEndPlayerInfo::victory() const {
  // @@protoc_insertion_point(field_get:BankerGameEndPlayerInfo.victory)
  return victory_;
}
void BankerGameEndPlayerInfo::set_victory(::google::protobuf::int32 value) {
  set_has_victory();
  victory_ = value;
  // @@protoc_insertion_point(field_set:BankerGameEndPlayerInfo.victory)
}

// required int64 increment_money = 5;
bool BankerGameEndPlayerInfo::has_increment_money() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void BankerGameEndPlayerInfo::set_has_increment_money() {
  _has_bits_[0] |= 0x00000010u;
}
void BankerGameEndPlayerInfo::clear_has_increment_money() {
  _has_bits_[0] &= ~0x00000010u;
}
void BankerGameEndPlayerInfo::clear_increment_money() {
  increment_money_ = GOOGLE_LONGLONG(0);
  clear_has_increment_money();
}
::google::protobuf::int64 BankerGameEndPlayerInfo::increment_money() const {
  // @@protoc_insertion_point(field_get:BankerGameEndPlayerInfo.increment_money)
  return increment_money_;
}
void BankerGameEndPlayerInfo::set_increment_money(::google::protobuf::int64 value) {
  set_has_increment_money();
  increment_money_ = value;
  // @@protoc_insertion_point(field_set:BankerGameEndPlayerInfo.increment_money)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int BankerReconnectPlayerInfo::kGuidFieldNumber;
const int BankerReconnectPlayerInfo::kChairFieldNumber;
const int BankerReconnectPlayerInfo::kNameFieldNumber;
const int BankerReconnectPlayerInfo::kIconFieldNumber;
const int BankerReconnectPlayerInfo::kMoneyFieldNumber;
const int BankerReconnectPlayerInfo::kRatioFieldNumber;
const int BankerReconnectPlayerInfo::kPositionFieldNumber;
const int BankerReconnectPlayerInfo::kBetMoneyFieldNumber;
const int BankerReconnectPlayerInfo::kCardsFieldNumber;
const int BankerReconnectPlayerInfo::kCardsTypeFieldNumber;
const int BankerReconnectPlayerInfo::kFlagFieldNumber;
const int BankerReconnectPlayerInfo::kTaxFieldNumber;
const int BankerReconnectPlayerInfo::kVictoryFieldNumber;
const int BankerReconnectPlayerInfo::kIncrementMoneyFieldNumber;
const int BankerReconnectPlayerInfo::kStatusFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

BankerReconnectPlayerInfo::BankerReconnectPlayerInfo()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_public_5fbanker_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:BankerReconnectPlayerInfo)
}
BankerReconnectPlayerInfo::BankerReconnectPlayerInfo(const BankerReconnectPlayerInfo& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      cards_(from.cards_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_name()) {
    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  icon_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_icon()) {
    icon_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.icon_);
  }
  ::memcpy(&guid_, &from.guid_,
    reinterpret_cast<char*>(&status_) -
    reinterpret_cast<char*>(&guid_) + sizeof(status_));
  // @@protoc_insertion_point(copy_constructor:BankerReconnectPlayerInfo)
}

void BankerReconnectPlayerInfo::SharedCtor() {
  _cached_size_ = 0;
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  icon_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&guid_, 0, reinterpret_cast<char*>(&status_) -
    reinterpret_cast<char*>(&guid_) + sizeof(status_));
}

BankerReconnectPlayerInfo::~BankerReconnectPlayerInfo() {
  // @@protoc_insertion_point(destructor:BankerReconnectPlayerInfo)
  SharedDtor();
}

void BankerReconnectPlayerInfo::SharedDtor() {
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  icon_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void BankerReconnectPlayerInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BankerReconnectPlayerInfo::descriptor() {
  protobuf_public_5fbanker_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_public_5fbanker_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const BankerReconnectPlayerInfo& BankerReconnectPlayerInfo::default_instance() {
  protobuf_public_5fbanker_2eproto::InitDefaults();
  return *internal_default_instance();
}

BankerReconnectPlayerInfo* BankerReconnectPlayerInfo::New(::google::protobuf::Arena* arena) const {
  BankerReconnectPlayerInfo* n = new BankerReconnectPlayerInfo;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void BankerReconnectPlayerInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:BankerReconnectPlayerInfo)
  cards_.Clear();
  if (_has_bits_[0 / 32] & 3u) {
    if (has_name()) {
      GOOGLE_DCHECK(!name_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*name_.UnsafeRawStringPointer())->clear();
    }
    if (has_icon()) {
      GOOGLE_DCHECK(!icon_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*icon_.UnsafeRawStringPointer())->clear();
    }
  }
  if (_has_bits_[0 / 32] & 252u) {
    ::memset(&guid_, 0, reinterpret_cast<char*>(&bet_money_) -
      reinterpret_cast<char*>(&guid_) + sizeof(bet_money_));
  }
  if (_has_bits_[8 / 32] & 16128u) {
    ::memset(&cards_type_, 0, reinterpret_cast<char*>(&status_) -
      reinterpret_cast<char*>(&cards_type_) + sizeof(status_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool BankerReconnectPlayerInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:BankerReconnectPlayerInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 guid = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_guid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &guid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 chair = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_chair();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &chair_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string name = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "BankerReconnectPlayerInfo.name");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string icon = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_icon()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->icon().data(), this->icon().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "BankerReconnectPlayerInfo.icon");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 money = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u)) {
          set_has_money();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &money_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 ratio = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u)) {
          set_has_ratio();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ratio_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 position = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u)) {
          set_has_position();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &position_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 bet_money = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(64u)) {
          set_has_bet_money();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &bet_money_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated int32 cards = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(72u)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 72u, input, this->mutable_cards())));
        } else if (static_cast< ::google::protobuf::uint8>(tag) ==
                   static_cast< ::google::protobuf::uint8>(74u)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_cards())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 cards_type = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(80u)) {
          set_has_cards_type();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &cards_type_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 flag = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(88u)) {
          set_has_flag();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &flag_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 tax = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(96u)) {
          set_has_tax();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &tax_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 victory = 13;
      case 13: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(104u)) {
          set_has_victory();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &victory_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int64 increment_money = 14;
      case 14: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(112u)) {
          set_has_increment_money();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &increment_money_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 status = 15;
      case 15: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(120u)) {
          set_has_status();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &status_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:BankerReconnectPlayerInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:BankerReconnectPlayerInfo)
  return false;
#undef DO_
}

void BankerReconnectPlayerInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:BankerReconnectPlayerInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 guid = 1;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->guid(), output);
  }

  // required int32 chair = 2;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->chair(), output);
  }

  // optional string name = 3;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "BankerReconnectPlayerInfo.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->name(), output);
  }

  // optional string icon = 4;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->icon().data(), this->icon().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "BankerReconnectPlayerInfo.icon");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->icon(), output);
  }

  // optional int64 money = 5;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(5, this->money(), output);
  }

  // optional int32 ratio = 6;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->ratio(), output);
  }

  // optional int32 position = 7;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->position(), output);
  }

  // optional int64 bet_money = 8;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(8, this->bet_money(), output);
  }

  // repeated int32 cards = 9;
  for (int i = 0, n = this->cards_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      9, this->cards(i), output);
  }

  // optional int32 cards_type = 10;
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->cards_type(), output);
  }

  // optional int32 flag = 11;
  if (cached_has_bits & 0x00000200u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(11, this->flag(), output);
  }

  // optional int64 tax = 12;
  if (cached_has_bits & 0x00000400u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(12, this->tax(), output);
  }

  // optional int32 victory = 13;
  if (cached_has_bits & 0x00001000u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(13, this->victory(), output);
  }

  // required int64 increment_money = 14;
  if (cached_has_bits & 0x00000800u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(14, this->increment_money(), output);
  }

  // optional int32 status = 15;
  if (cached_has_bits & 0x00002000u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(15, this->status(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:BankerReconnectPlayerInfo)
}

::google::protobuf::uint8* BankerReconnectPlayerInfo::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:BankerReconnectPlayerInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 guid = 1;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->guid(), target);
  }

  // required int32 chair = 2;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->chair(), target);
  }

  // optional string name = 3;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "BankerReconnectPlayerInfo.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->name(), target);
  }

  // optional string icon = 4;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->icon().data(), this->icon().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "BankerReconnectPlayerInfo.icon");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->icon(), target);
  }

  // optional int64 money = 5;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(5, this->money(), target);
  }

  // optional int32 ratio = 6;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->ratio(), target);
  }

  // optional int32 position = 7;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->position(), target);
  }

  // optional int64 bet_money = 8;
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(8, this->bet_money(), target);
  }

  // repeated int32 cards = 9;
  target = ::google::protobuf::internal::WireFormatLite::
    WriteInt32ToArray(9, this->cards_, target);

  // optional int32 cards_type = 10;
  if (cached_has_bits & 0x00000100u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(10, this->cards_type(), target);
  }

  // optional int32 flag = 11;
  if (cached_has_bits & 0x00000200u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(11, this->flag(), target);
  }

  // optional int64 tax = 12;
  if (cached_has_bits & 0x00000400u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(12, this->tax(), target);
  }

  // optional int32 victory = 13;
  if (cached_has_bits & 0x00001000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(13, this->victory(), target);
  }

  // required int64 increment_money = 14;
  if (cached_has_bits & 0x00000800u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(14, this->increment_money(), target);
  }

  // optional int32 status = 15;
  if (cached_has_bits & 0x00002000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(15, this->status(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:BankerReconnectPlayerInfo)
  return target;
}

size_t BankerReconnectPlayerInfo::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:BankerReconnectPlayerInfo)
  size_t total_size = 0;

  if (has_guid()) {
    // required int32 guid = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->guid());
  }

  if (has_chair()) {
    // required int32 chair = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->chair());
  }

  if (has_increment_money()) {
    // required int64 increment_money = 14;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->increment_money());
  }

  return total_size;
}
size_t BankerReconnectPlayerInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:BankerReconnectPlayerInfo)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (((_has_bits_[0] & 0x0000080c) ^ 0x0000080c) == 0) {  // All required fields are present.
    // required int32 guid = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->guid());

    // required int32 chair = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->chair());

    // required int64 increment_money = 14;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->increment_money());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  // repeated int32 cards = 9;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      Int32Size(this->cards_);
    total_size += 1 *
                  ::google::protobuf::internal::FromIntSize(this->cards_size());
    total_size += data_size;
  }

  if (_has_bits_[0 / 32] & 3u) {
    // optional string name = 3;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional string icon = 4;
    if (has_icon()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->icon());
    }

  }
  if (_has_bits_[0 / 32] & 240u) {
    // optional int64 money = 5;
    if (has_money()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->money());
    }

    // optional int32 ratio = 6;
    if (has_ratio()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ratio());
    }

    // optional int32 position = 7;
    if (has_position()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->position());
    }

    // optional int64 bet_money = 8;
    if (has_bet_money()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->bet_money());
    }

  }
  if (_has_bits_[8 / 32] & 1792u) {
    // optional int32 cards_type = 10;
    if (has_cards_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->cards_type());
    }

    // optional int32 flag = 11;
    if (has_flag()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->flag());
    }

    // optional int64 tax = 12;
    if (has_tax()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->tax());
    }

  }
  if (_has_bits_[8 / 32] & 12288u) {
    // optional int32 victory = 13;
    if (has_victory()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->victory());
    }

    // optional int32 status = 15;
    if (has_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->status());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BankerReconnectPlayerInfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:BankerReconnectPlayerInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const BankerReconnectPlayerInfo* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const BankerReconnectPlayerInfo>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:BankerReconnectPlayerInfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:BankerReconnectPlayerInfo)
    MergeFrom(*source);
  }
}

void BankerReconnectPlayerInfo::MergeFrom(const BankerReconnectPlayerInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:BankerReconnectPlayerInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cards_.MergeFrom(from.cards_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_name();
      name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_icon();
      icon_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.icon_);
    }
    if (cached_has_bits & 0x00000004u) {
      guid_ = from.guid_;
    }
    if (cached_has_bits & 0x00000008u) {
      chair_ = from.chair_;
    }
    if (cached_has_bits & 0x00000010u) {
      money_ = from.money_;
    }
    if (cached_has_bits & 0x00000020u) {
      ratio_ = from.ratio_;
    }
    if (cached_has_bits & 0x00000040u) {
      position_ = from.position_;
    }
    if (cached_has_bits & 0x00000080u) {
      bet_money_ = from.bet_money_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 16128u) {
    if (cached_has_bits & 0x00000100u) {
      cards_type_ = from.cards_type_;
    }
    if (cached_has_bits & 0x00000200u) {
      flag_ = from.flag_;
    }
    if (cached_has_bits & 0x00000400u) {
      tax_ = from.tax_;
    }
    if (cached_has_bits & 0x00000800u) {
      increment_money_ = from.increment_money_;
    }
    if (cached_has_bits & 0x00001000u) {
      victory_ = from.victory_;
    }
    if (cached_has_bits & 0x00002000u) {
      status_ = from.status_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void BankerReconnectPlayerInfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:BankerReconnectPlayerInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BankerReconnectPlayerInfo::CopyFrom(const BankerReconnectPlayerInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:BankerReconnectPlayerInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BankerReconnectPlayerInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000080c) != 0x0000080c) return false;
  return true;
}

void BankerReconnectPlayerInfo::Swap(BankerReconnectPlayerInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void BankerReconnectPlayerInfo::InternalSwap(BankerReconnectPlayerInfo* other) {
  cards_.InternalSwap(&other->cards_);
  name_.Swap(&other->name_);
  icon_.Swap(&other->icon_);
  std::swap(guid_, other->guid_);
  std::swap(chair_, other->chair_);
  std::swap(money_, other->money_);
  std::swap(ratio_, other->ratio_);
  std::swap(position_, other->position_);
  std::swap(bet_money_, other->bet_money_);
  std::swap(cards_type_, other->cards_type_);
  std::swap(flag_, other->flag_);
  std::swap(tax_, other->tax_);
  std::swap(increment_money_, other->increment_money_);
  std::swap(victory_, other->victory_);
  std::swap(status_, other->status_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata BankerReconnectPlayerInfo::GetMetadata() const {
  protobuf_public_5fbanker_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_public_5fbanker_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// BankerReconnectPlayerInfo

// required int32 guid = 1;
bool BankerReconnectPlayerInfo::has_guid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void BankerReconnectPlayerInfo::set_has_guid() {
  _has_bits_[0] |= 0x00000004u;
}
void BankerReconnectPlayerInfo::clear_has_guid() {
  _has_bits_[0] &= ~0x00000004u;
}
void BankerReconnectPlayerInfo::clear_guid() {
  guid_ = 0;
  clear_has_guid();
}
::google::protobuf::int32 BankerReconnectPlayerInfo::guid() const {
  // @@protoc_insertion_point(field_get:BankerReconnectPlayerInfo.guid)
  return guid_;
}
void BankerReconnectPlayerInfo::set_guid(::google::protobuf::int32 value) {
  set_has_guid();
  guid_ = value;
  // @@protoc_insertion_point(field_set:BankerReconnectPlayerInfo.guid)
}

// required int32 chair = 2;
bool BankerReconnectPlayerInfo::has_chair() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void BankerReconnectPlayerInfo::set_has_chair() {
  _has_bits_[0] |= 0x00000008u;
}
void BankerReconnectPlayerInfo::clear_has_chair() {
  _has_bits_[0] &= ~0x00000008u;
}
void BankerReconnectPlayerInfo::clear_chair() {
  chair_ = 0;
  clear_has_chair();
}
::google::protobuf::int32 BankerReconnectPlayerInfo::chair() const {
  // @@protoc_insertion_point(field_get:BankerReconnectPlayerInfo.chair)
  return chair_;
}
void BankerReconnectPlayerInfo::set_chair(::google::protobuf::int32 value) {
  set_has_chair();
  chair_ = value;
  // @@protoc_insertion_point(field_set:BankerReconnectPlayerInfo.chair)
}

// optional string name = 3;
bool BankerReconnectPlayerInfo::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void BankerReconnectPlayerInfo::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
void BankerReconnectPlayerInfo::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
void BankerReconnectPlayerInfo::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_name();
}
const ::std::string& BankerReconnectPlayerInfo::name() const {
  // @@protoc_insertion_point(field_get:BankerReconnectPlayerInfo.name)
  return name_.GetNoArena();
}
void BankerReconnectPlayerInfo::set_name(const ::std::string& value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:BankerReconnectPlayerInfo.name)
}
#if LANG_CXX11
void BankerReconnectPlayerInfo::set_name(::std::string&& value) {
  set_has_name();
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:BankerReconnectPlayerInfo.name)
}
#endif
void BankerReconnectPlayerInfo::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:BankerReconnectPlayerInfo.name)
}
void BankerReconnectPlayerInfo::set_name(const char* value, size_t size) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:BankerReconnectPlayerInfo.name)
}
::std::string* BankerReconnectPlayerInfo::mutable_name() {
  set_has_name();
  // @@protoc_insertion_point(field_mutable:BankerReconnectPlayerInfo.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* BankerReconnectPlayerInfo::release_name() {
  // @@protoc_insertion_point(field_release:BankerReconnectPlayerInfo.name)
  clear_has_name();
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void BankerReconnectPlayerInfo::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    set_has_name();
  } else {
    clear_has_name();
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:BankerReconnectPlayerInfo.name)
}

// optional string icon = 4;
bool BankerReconnectPlayerInfo::has_icon() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void BankerReconnectPlayerInfo::set_has_icon() {
  _has_bits_[0] |= 0x00000002u;
}
void BankerReconnectPlayerInfo::clear_has_icon() {
  _has_bits_[0] &= ~0x00000002u;
}
void BankerReconnectPlayerInfo::clear_icon() {
  icon_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_icon();
}
const ::std::string& BankerReconnectPlayerInfo::icon() const {
  // @@protoc_insertion_point(field_get:BankerReconnectPlayerInfo.icon)
  return icon_.GetNoArena();
}
void BankerReconnectPlayerInfo::set_icon(const ::std::string& value) {
  set_has_icon();
  icon_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:BankerReconnectPlayerInfo.icon)
}
#if LANG_CXX11
void BankerReconnectPlayerInfo::set_icon(::std::string&& value) {
  set_has_icon();
  icon_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:BankerReconnectPlayerInfo.icon)
}
#endif
void BankerReconnectPlayerInfo::set_icon(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_icon();
  icon_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:BankerReconnectPlayerInfo.icon)
}
void BankerReconnectPlayerInfo::set_icon(const char* value, size_t size) {
  set_has_icon();
  icon_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:BankerReconnectPlayerInfo.icon)
}
::std::string* BankerReconnectPlayerInfo::mutable_icon() {
  set_has_icon();
  // @@protoc_insertion_point(field_mutable:BankerReconnectPlayerInfo.icon)
  return icon_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* BankerReconnectPlayerInfo::release_icon() {
  // @@protoc_insertion_point(field_release:BankerReconnectPlayerInfo.icon)
  clear_has_icon();
  return icon_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void BankerReconnectPlayerInfo::set_allocated_icon(::std::string* icon) {
  if (icon != NULL) {
    set_has_icon();
  } else {
    clear_has_icon();
  }
  icon_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), icon);
  // @@protoc_insertion_point(field_set_allocated:BankerReconnectPlayerInfo.icon)
}

// optional int64 money = 5;
bool BankerReconnectPlayerInfo::has_money() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void BankerReconnectPlayerInfo::set_has_money() {
  _has_bits_[0] |= 0x00000010u;
}
void BankerReconnectPlayerInfo::clear_has_money() {
  _has_bits_[0] &= ~0x00000010u;
}
void BankerReconnectPlayerInfo::clear_money() {
  money_ = GOOGLE_LONGLONG(0);
  clear_has_money();
}
::google::protobuf::int64 BankerReconnectPlayerInfo::money() const {
  // @@protoc_insertion_point(field_get:BankerReconnectPlayerInfo.money)
  return money_;
}
void BankerReconnectPlayerInfo::set_money(::google::protobuf::int64 value) {
  set_has_money();
  money_ = value;
  // @@protoc_insertion_point(field_set:BankerReconnectPlayerInfo.money)
}

// optional int32 ratio = 6;
bool BankerReconnectPlayerInfo::has_ratio() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void BankerReconnectPlayerInfo::set_has_ratio() {
  _has_bits_[0] |= 0x00000020u;
}
void BankerReconnectPlayerInfo::clear_has_ratio() {
  _has_bits_[0] &= ~0x00000020u;
}
void BankerReconnectPlayerInfo::clear_ratio() {
  ratio_ = 0;
  clear_has_ratio();
}
::google::protobuf::int32 BankerReconnectPlayerInfo::ratio() const {
  // @@protoc_insertion_point(field_get:BankerReconnectPlayerInfo.ratio)
  return ratio_;
}
void BankerReconnectPlayerInfo::set_ratio(::google::protobuf::int32 value) {
  set_has_ratio();
  ratio_ = value;
  // @@protoc_insertion_point(field_set:BankerReconnectPlayerInfo.ratio)
}

// optional int32 position = 7;
bool BankerReconnectPlayerInfo::has_position() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void BankerReconnectPlayerInfo::set_has_position() {
  _has_bits_[0] |= 0x00000040u;
}
void BankerReconnectPlayerInfo::clear_has_position() {
  _has_bits_[0] &= ~0x00000040u;
}
void BankerReconnectPlayerInfo::clear_position() {
  position_ = 0;
  clear_has_position();
}
::google::protobuf::int32 BankerReconnectPlayerInfo::position() const {
  // @@protoc_insertion_point(field_get:BankerReconnectPlayerInfo.position)
  return position_;
}
void BankerReconnectPlayerInfo::set_position(::google::protobuf::int32 value) {
  set_has_position();
  position_ = value;
  // @@protoc_insertion_point(field_set:BankerReconnectPlayerInfo.position)
}

// optional int64 bet_money = 8;
bool BankerReconnectPlayerInfo::has_bet_money() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void BankerReconnectPlayerInfo::set_has_bet_money() {
  _has_bits_[0] |= 0x00000080u;
}
void BankerReconnectPlayerInfo::clear_has_bet_money() {
  _has_bits_[0] &= ~0x00000080u;
}
void BankerReconnectPlayerInfo::clear_bet_money() {
  bet_money_ = GOOGLE_LONGLONG(0);
  clear_has_bet_money();
}
::google::protobuf::int64 BankerReconnectPlayerInfo::bet_money() const {
  // @@protoc_insertion_point(field_get:BankerReconnectPlayerInfo.bet_money)
  return bet_money_;
}
void BankerReconnectPlayerInfo::set_bet_money(::google::protobuf::int64 value) {
  set_has_bet_money();
  bet_money_ = value;
  // @@protoc_insertion_point(field_set:BankerReconnectPlayerInfo.bet_money)
}

// repeated int32 cards = 9;
int BankerReconnectPlayerInfo::cards_size() const {
  return cards_.size();
}
void BankerReconnectPlayerInfo::clear_cards() {
  cards_.Clear();
}
::google::protobuf::int32 BankerReconnectPlayerInfo::cards(int index) const {
  // @@protoc_insertion_point(field_get:BankerReconnectPlayerInfo.cards)
  return cards_.Get(index);
}
void BankerReconnectPlayerInfo::set_cards(int index, ::google::protobuf::int32 value) {
  cards_.Set(index, value);
  // @@protoc_insertion_point(field_set:BankerReconnectPlayerInfo.cards)
}
void BankerReconnectPlayerInfo::add_cards(::google::protobuf::int32 value) {
  cards_.Add(value);
  // @@protoc_insertion_point(field_add:BankerReconnectPlayerInfo.cards)
}
const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
BankerReconnectPlayerInfo::cards() const {
  // @@protoc_insertion_point(field_list:BankerReconnectPlayerInfo.cards)
  return cards_;
}
::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
BankerReconnectPlayerInfo::mutable_cards() {
  // @@protoc_insertion_point(field_mutable_list:BankerReconnectPlayerInfo.cards)
  return &cards_;
}

// optional int32 cards_type = 10;
bool BankerReconnectPlayerInfo::has_cards_type() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
void BankerReconnectPlayerInfo::set_has_cards_type() {
  _has_bits_[0] |= 0x00000100u;
}
void BankerReconnectPlayerInfo::clear_has_cards_type() {
  _has_bits_[0] &= ~0x00000100u;
}
void BankerReconnectPlayerInfo::clear_cards_type() {
  cards_type_ = 0;
  clear_has_cards_type();
}
::google::protobuf::int32 BankerReconnectPlayerInfo::cards_type() const {
  // @@protoc_insertion_point(field_get:BankerReconnectPlayerInfo.cards_type)
  return cards_type_;
}
void BankerReconnectPlayerInfo::set_cards_type(::google::protobuf::int32 value) {
  set_has_cards_type();
  cards_type_ = value;
  // @@protoc_insertion_point(field_set:BankerReconnectPlayerInfo.cards_type)
}

// optional int32 flag = 11;
bool BankerReconnectPlayerInfo::has_flag() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
void BankerReconnectPlayerInfo::set_has_flag() {
  _has_bits_[0] |= 0x00000200u;
}
void BankerReconnectPlayerInfo::clear_has_flag() {
  _has_bits_[0] &= ~0x00000200u;
}
void BankerReconnectPlayerInfo::clear_flag() {
  flag_ = 0;
  clear_has_flag();
}
::google::protobuf::int32 BankerReconnectPlayerInfo::flag() const {
  // @@protoc_insertion_point(field_get:BankerReconnectPlayerInfo.flag)
  return flag_;
}
void BankerReconnectPlayerInfo::set_flag(::google::protobuf::int32 value) {
  set_has_flag();
  flag_ = value;
  // @@protoc_insertion_point(field_set:BankerReconnectPlayerInfo.flag)
}

// optional int64 tax = 12;
bool BankerReconnectPlayerInfo::has_tax() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
void BankerReconnectPlayerInfo::set_has_tax() {
  _has_bits_[0] |= 0x00000400u;
}
void BankerReconnectPlayerInfo::clear_has_tax() {
  _has_bits_[0] &= ~0x00000400u;
}
void BankerReconnectPlayerInfo::clear_tax() {
  tax_ = GOOGLE_LONGLONG(0);
  clear_has_tax();
}
::google::protobuf::int64 BankerReconnectPlayerInfo::tax() const {
  // @@protoc_insertion_point(field_get:BankerReconnectPlayerInfo.tax)
  return tax_;
}
void BankerReconnectPlayerInfo::set_tax(::google::protobuf::int64 value) {
  set_has_tax();
  tax_ = value;
  // @@protoc_insertion_point(field_set:BankerReconnectPlayerInfo.tax)
}

// optional int32 victory = 13;
bool BankerReconnectPlayerInfo::has_victory() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
void BankerReconnectPlayerInfo::set_has_victory() {
  _has_bits_[0] |= 0x00001000u;
}
void BankerReconnectPlayerInfo::clear_has_victory() {
  _has_bits_[0] &= ~0x00001000u;
}
void BankerReconnectPlayerInfo::clear_victory() {
  victory_ = 0;
  clear_has_victory();
}
::google::protobuf::int32 BankerReconnectPlayerInfo::victory() const {
  // @@protoc_insertion_point(field_get:BankerReconnectPlayerInfo.victory)
  return victory_;
}
void BankerReconnectPlayerInfo::set_victory(::google::protobuf::int32 value) {
  set_has_victory();
  victory_ = value;
  // @@protoc_insertion_point(field_set:BankerReconnectPlayerInfo.victory)
}

// required int64 increment_money = 14;
bool BankerReconnectPlayerInfo::has_increment_money() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
void BankerReconnectPlayerInfo::set_has_increment_money() {
  _has_bits_[0] |= 0x00000800u;
}
void BankerReconnectPlayerInfo::clear_has_increment_money() {
  _has_bits_[0] &= ~0x00000800u;
}
void BankerReconnectPlayerInfo::clear_increment_money() {
  increment_money_ = GOOGLE_LONGLONG(0);
  clear_has_increment_money();
}
::google::protobuf::int64 BankerReconnectPlayerInfo::increment_money() const {
  // @@protoc_insertion_point(field_get:BankerReconnectPlayerInfo.increment_money)
  return increment_money_;
}
void BankerReconnectPlayerInfo::set_increment_money(::google::protobuf::int64 value) {
  set_has_increment_money();
  increment_money_ = value;
  // @@protoc_insertion_point(field_set:BankerReconnectPlayerInfo.increment_money)
}

// optional int32 status = 15;
bool BankerReconnectPlayerInfo::has_status() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
void BankerReconnectPlayerInfo::set_has_status() {
  _has_bits_[0] |= 0x00002000u;
}
void BankerReconnectPlayerInfo::clear_has_status() {
  _has_bits_[0] &= ~0x00002000u;
}
void BankerReconnectPlayerInfo::clear_status() {
  status_ = 0;
  clear_has_status();
}
::google::protobuf::int32 BankerReconnectPlayerInfo::status() const {
  // @@protoc_insertion_point(field_get:BankerReconnectPlayerInfo.status)
  return status_;
}
void BankerReconnectPlayerInfo::set_status(::google::protobuf::int32 value) {
  set_has_status();
  status_ = value;
  // @@protoc_insertion_point(field_set:BankerReconnectPlayerInfo.status)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SC_BankerTableMatching::kChairFieldNumber;
const int SC_BankerTableMatching::kChair1FieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SC_BankerTableMatching::SC_BankerTableMatching()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_public_5fbanker_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:SC_BankerTableMatching)
}
SC_BankerTableMatching::SC_BankerTableMatching(const SC_BankerTableMatching& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&chair_, &from.chair_,
    reinterpret_cast<char*>(&chair1_) -
    reinterpret_cast<char*>(&chair_) + sizeof(chair1_));
  // @@protoc_insertion_point(copy_constructor:SC_BankerTableMatching)
}

void SC_BankerTableMatching::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&chair_, 0, reinterpret_cast<char*>(&chair1_) -
    reinterpret_cast<char*>(&chair_) + sizeof(chair1_));
}

SC_BankerTableMatching::~SC_BankerTableMatching() {
  // @@protoc_insertion_point(destructor:SC_BankerTableMatching)
  SharedDtor();
}

void SC_BankerTableMatching::SharedDtor() {
}

void SC_BankerTableMatching::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SC_BankerTableMatching::descriptor() {
  protobuf_public_5fbanker_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_public_5fbanker_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const SC_BankerTableMatching& SC_BankerTableMatching::default_instance() {
  protobuf_public_5fbanker_2eproto::InitDefaults();
  return *internal_default_instance();
}

SC_BankerTableMatching* SC_BankerTableMatching::New(::google::protobuf::Arena* arena) const {
  SC_BankerTableMatching* n = new SC_BankerTableMatching;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SC_BankerTableMatching::Clear() {
// @@protoc_insertion_point(message_clear_start:SC_BankerTableMatching)
  if (_has_bits_[0 / 32] & 3u) {
    ::memset(&chair_, 0, reinterpret_cast<char*>(&chair1_) -
      reinterpret_cast<char*>(&chair_) + sizeof(chair1_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool SC_BankerTableMatching::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:SC_BankerTableMatching)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 chair = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_chair();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &chair_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 chair1 = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_chair1();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &chair1_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:SC_BankerTableMatching)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:SC_BankerTableMatching)
  return false;
#undef DO_
}

void SC_BankerTableMatching::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:SC_BankerTableMatching)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 chair = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->chair(), output);
  }

  // optional int32 chair1 = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->chair1(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:SC_BankerTableMatching)
}

::google::protobuf::uint8* SC_BankerTableMatching::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:SC_BankerTableMatching)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 chair = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->chair(), target);
  }

  // optional int32 chair1 = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->chair1(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SC_BankerTableMatching)
  return target;
}

size_t SC_BankerTableMatching::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SC_BankerTableMatching)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 3u) {
    // optional int32 chair = 1;
    if (has_chair()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->chair());
    }

    // optional int32 chair1 = 2;
    if (has_chair1()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->chair1());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SC_BankerTableMatching::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:SC_BankerTableMatching)
  GOOGLE_DCHECK_NE(&from, this);
  const SC_BankerTableMatching* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SC_BankerTableMatching>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:SC_BankerTableMatching)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:SC_BankerTableMatching)
    MergeFrom(*source);
  }
}

void SC_BankerTableMatching::MergeFrom(const SC_BankerTableMatching& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:SC_BankerTableMatching)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      chair_ = from.chair_;
    }
    if (cached_has_bits & 0x00000002u) {
      chair1_ = from.chair1_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void SC_BankerTableMatching::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:SC_BankerTableMatching)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SC_BankerTableMatching::CopyFrom(const SC_BankerTableMatching& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SC_BankerTableMatching)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SC_BankerTableMatching::IsInitialized() const {
  return true;
}

void SC_BankerTableMatching::Swap(SC_BankerTableMatching* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SC_BankerTableMatching::InternalSwap(SC_BankerTableMatching* other) {
  std::swap(chair_, other->chair_);
  std::swap(chair1_, other->chair1_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SC_BankerTableMatching::GetMetadata() const {
  protobuf_public_5fbanker_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_public_5fbanker_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SC_BankerTableMatching

// optional int32 chair = 1;
bool SC_BankerTableMatching::has_chair() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void SC_BankerTableMatching::set_has_chair() {
  _has_bits_[0] |= 0x00000001u;
}
void SC_BankerTableMatching::clear_has_chair() {
  _has_bits_[0] &= ~0x00000001u;
}
void SC_BankerTableMatching::clear_chair() {
  chair_ = 0;
  clear_has_chair();
}
::google::protobuf::int32 SC_BankerTableMatching::chair() const {
  // @@protoc_insertion_point(field_get:SC_BankerTableMatching.chair)
  return chair_;
}
void SC_BankerTableMatching::set_chair(::google::protobuf::int32 value) {
  set_has_chair();
  chair_ = value;
  // @@protoc_insertion_point(field_set:SC_BankerTableMatching.chair)
}

// optional int32 chair1 = 2;
bool SC_BankerTableMatching::has_chair1() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void SC_BankerTableMatching::set_has_chair1() {
  _has_bits_[0] |= 0x00000002u;
}
void SC_BankerTableMatching::clear_has_chair1() {
  _has_bits_[0] &= ~0x00000002u;
}
void SC_BankerTableMatching::clear_chair1() {
  chair1_ = 0;
  clear_has_chair1();
}
::google::protobuf::int32 SC_BankerTableMatching::chair1() const {
  // @@protoc_insertion_point(field_get:SC_BankerTableMatching.chair1)
  return chair1_;
}
void SC_BankerTableMatching::set_chair1(::google::protobuf::int32 value) {
  set_has_chair1();
  chair1_ = value;
  // @@protoc_insertion_point(field_set:SC_BankerTableMatching.chair1)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SC_BankerSendCards::kPbTableFieldNumber;
const int SC_BankerSendCards::kPbPlayerFieldNumber;
const int SC_BankerSendCards::kCardsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SC_BankerSendCards::SC_BankerSendCards()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_public_5fbanker_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:SC_BankerSendCards)
}
SC_BankerSendCards::SC_BankerSendCards(const SC_BankerSendCards& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      pb_player_(from.pb_player_),
      cards_(from.cards_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_pb_table()) {
    pb_table_ = new ::BankerTable(*from.pb_table_);
  } else {
    pb_table_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:SC_BankerSendCards)
}

void SC_BankerSendCards::SharedCtor() {
  _cached_size_ = 0;
  pb_table_ = NULL;
}

SC_BankerSendCards::~SC_BankerSendCards() {
  // @@protoc_insertion_point(destructor:SC_BankerSendCards)
  SharedDtor();
}

void SC_BankerSendCards::SharedDtor() {
  if (this != internal_default_instance()) {
    delete pb_table_;
  }
}

void SC_BankerSendCards::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SC_BankerSendCards::descriptor() {
  protobuf_public_5fbanker_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_public_5fbanker_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const SC_BankerSendCards& SC_BankerSendCards::default_instance() {
  protobuf_public_5fbanker_2eproto::InitDefaults();
  return *internal_default_instance();
}

SC_BankerSendCards* SC_BankerSendCards::New(::google::protobuf::Arena* arena) const {
  SC_BankerSendCards* n = new SC_BankerSendCards;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SC_BankerSendCards::Clear() {
// @@protoc_insertion_point(message_clear_start:SC_BankerSendCards)
  pb_player_.Clear();
  cards_.Clear();
  if (has_pb_table()) {
    GOOGLE_DCHECK(pb_table_ != NULL);
    pb_table_->::BankerTable::Clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool SC_BankerSendCards::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:SC_BankerSendCards)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .BankerTable pb_table = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_pb_table()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .BankerPlayerInfo pb_player = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_pb_player()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated int32 cards = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 24u, input, this->mutable_cards())));
        } else if (static_cast< ::google::protobuf::uint8>(tag) ==
                   static_cast< ::google::protobuf::uint8>(26u)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_cards())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:SC_BankerSendCards)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:SC_BankerSendCards)
  return false;
#undef DO_
}

void SC_BankerSendCards::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:SC_BankerSendCards)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .BankerTable pb_table = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->pb_table_, output);
  }

  // repeated .BankerPlayerInfo pb_player = 2;
  for (unsigned int i = 0, n = this->pb_player_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->pb_player(i), output);
  }

  // repeated int32 cards = 3;
  for (int i = 0, n = this->cards_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      3, this->cards(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:SC_BankerSendCards)
}

::google::protobuf::uint8* SC_BankerSendCards::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:SC_BankerSendCards)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .BankerTable pb_table = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->pb_table_, deterministic, target);
  }

  // repeated .BankerPlayerInfo pb_player = 2;
  for (unsigned int i = 0, n = this->pb_player_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, this->pb_player(i), deterministic, target);
  }

  // repeated int32 cards = 3;
  target = ::google::protobuf::internal::WireFormatLite::
    WriteInt32ToArray(3, this->cards_, target);

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SC_BankerSendCards)
  return target;
}

size_t SC_BankerSendCards::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SC_BankerSendCards)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // repeated .BankerPlayerInfo pb_player = 2;
  {
    unsigned int count = this->pb_player_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->pb_player(i));
    }
  }

  // repeated int32 cards = 3;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      Int32Size(this->cards_);
    total_size += 1 *
                  ::google::protobuf::internal::FromIntSize(this->cards_size());
    total_size += data_size;
  }

  // optional .BankerTable pb_table = 1;
  if (has_pb_table()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->pb_table_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SC_BankerSendCards::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:SC_BankerSendCards)
  GOOGLE_DCHECK_NE(&from, this);
  const SC_BankerSendCards* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SC_BankerSendCards>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:SC_BankerSendCards)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:SC_BankerSendCards)
    MergeFrom(*source);
  }
}

void SC_BankerSendCards::MergeFrom(const SC_BankerSendCards& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:SC_BankerSendCards)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  pb_player_.MergeFrom(from.pb_player_);
  cards_.MergeFrom(from.cards_);
  if (from.has_pb_table()) {
    mutable_pb_table()->::BankerTable::MergeFrom(from.pb_table());
  }
}

void SC_BankerSendCards::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:SC_BankerSendCards)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SC_BankerSendCards::CopyFrom(const SC_BankerSendCards& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SC_BankerSendCards)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SC_BankerSendCards::IsInitialized() const {
  if (!::google::protobuf::internal::AllAreInitialized(this->pb_player())) return false;
  return true;
}

void SC_BankerSendCards::Swap(SC_BankerSendCards* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SC_BankerSendCards::InternalSwap(SC_BankerSendCards* other) {
  pb_player_.InternalSwap(&other->pb_player_);
  cards_.InternalSwap(&other->cards_);
  std::swap(pb_table_, other->pb_table_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SC_BankerSendCards::GetMetadata() const {
  protobuf_public_5fbanker_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_public_5fbanker_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SC_BankerSendCards

// optional .BankerTable pb_table = 1;
bool SC_BankerSendCards::has_pb_table() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void SC_BankerSendCards::set_has_pb_table() {
  _has_bits_[0] |= 0x00000001u;
}
void SC_BankerSendCards::clear_has_pb_table() {
  _has_bits_[0] &= ~0x00000001u;
}
void SC_BankerSendCards::clear_pb_table() {
  if (pb_table_ != NULL) pb_table_->::BankerTable::Clear();
  clear_has_pb_table();
}
const ::BankerTable& SC_BankerSendCards::pb_table() const {
  // @@protoc_insertion_point(field_get:SC_BankerSendCards.pb_table)
  return pb_table_ != NULL ? *pb_table_
                         : *::BankerTable::internal_default_instance();
}
::BankerTable* SC_BankerSendCards::mutable_pb_table() {
  set_has_pb_table();
  if (pb_table_ == NULL) {
    pb_table_ = new ::BankerTable;
  }
  // @@protoc_insertion_point(field_mutable:SC_BankerSendCards.pb_table)
  return pb_table_;
}
::BankerTable* SC_BankerSendCards::release_pb_table() {
  // @@protoc_insertion_point(field_release:SC_BankerSendCards.pb_table)
  clear_has_pb_table();
  ::BankerTable* temp = pb_table_;
  pb_table_ = NULL;
  return temp;
}
void SC_BankerSendCards::set_allocated_pb_table(::BankerTable* pb_table) {
  delete pb_table_;
  pb_table_ = pb_table;
  if (pb_table) {
    set_has_pb_table();
  } else {
    clear_has_pb_table();
  }
  // @@protoc_insertion_point(field_set_allocated:SC_BankerSendCards.pb_table)
}

// repeated .BankerPlayerInfo pb_player = 2;
int SC_BankerSendCards::pb_player_size() const {
  return pb_player_.size();
}
void SC_BankerSendCards::clear_pb_player() {
  pb_player_.Clear();
}
const ::BankerPlayerInfo& SC_BankerSendCards::pb_player(int index) const {
  // @@protoc_insertion_point(field_get:SC_BankerSendCards.pb_player)
  return pb_player_.Get(index);
}
::BankerPlayerInfo* SC_BankerSendCards::mutable_pb_player(int index) {
  // @@protoc_insertion_point(field_mutable:SC_BankerSendCards.pb_player)
  return pb_player_.Mutable(index);
}
::BankerPlayerInfo* SC_BankerSendCards::add_pb_player() {
  // @@protoc_insertion_point(field_add:SC_BankerSendCards.pb_player)
  return pb_player_.Add();
}
::google::protobuf::RepeatedPtrField< ::BankerPlayerInfo >*
SC_BankerSendCards::mutable_pb_player() {
  // @@protoc_insertion_point(field_mutable_list:SC_BankerSendCards.pb_player)
  return &pb_player_;
}
const ::google::protobuf::RepeatedPtrField< ::BankerPlayerInfo >&
SC_BankerSendCards::pb_player() const {
  // @@protoc_insertion_point(field_list:SC_BankerSendCards.pb_player)
  return pb_player_;
}

// repeated int32 cards = 3;
int SC_BankerSendCards::cards_size() const {
  return cards_.size();
}
void SC_BankerSendCards::clear_cards() {
  cards_.Clear();
}
::google::protobuf::int32 SC_BankerSendCards::cards(int index) const {
  // @@protoc_insertion_point(field_get:SC_BankerSendCards.cards)
  return cards_.Get(index);
}
void SC_BankerSendCards::set_cards(int index, ::google::protobuf::int32 value) {
  cards_.Set(index, value);
  // @@protoc_insertion_point(field_set:SC_BankerSendCards.cards)
}
void SC_BankerSendCards::add_cards(::google::protobuf::int32 value) {
  cards_.Add(value);
  // @@protoc_insertion_point(field_add:SC_BankerSendCards.cards)
}
const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
SC_BankerSendCards::cards() const {
  // @@protoc_insertion_point(field_list:SC_BankerSendCards.cards)
  return cards_;
}
::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
SC_BankerSendCards::mutable_cards() {
  // @@protoc_insertion_point(field_mutable_list:SC_BankerSendCards.cards)
  return &cards_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SC_BankerBeginToContend::kCountdownFieldNumber;
const int SC_BankerBeginToContend::kTotalTimeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SC_BankerBeginToContend::SC_BankerBeginToContend()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_public_5fbanker_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:SC_BankerBeginToContend)
}
SC_BankerBeginToContend::SC_BankerBeginToContend(const SC_BankerBeginToContend& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&countdown_, &from.countdown_,
    reinterpret_cast<char*>(&total_time_) -
    reinterpret_cast<char*>(&countdown_) + sizeof(total_time_));
  // @@protoc_insertion_point(copy_constructor:SC_BankerBeginToContend)
}

void SC_BankerBeginToContend::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&countdown_, 0, reinterpret_cast<char*>(&total_time_) -
    reinterpret_cast<char*>(&countdown_) + sizeof(total_time_));
}

SC_BankerBeginToContend::~SC_BankerBeginToContend() {
  // @@protoc_insertion_point(destructor:SC_BankerBeginToContend)
  SharedDtor();
}

void SC_BankerBeginToContend::SharedDtor() {
}

void SC_BankerBeginToContend::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SC_BankerBeginToContend::descriptor() {
  protobuf_public_5fbanker_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_public_5fbanker_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const SC_BankerBeginToContend& SC_BankerBeginToContend::default_instance() {
  protobuf_public_5fbanker_2eproto::InitDefaults();
  return *internal_default_instance();
}

SC_BankerBeginToContend* SC_BankerBeginToContend::New(::google::protobuf::Arena* arena) const {
  SC_BankerBeginToContend* n = new SC_BankerBeginToContend;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SC_BankerBeginToContend::Clear() {
// @@protoc_insertion_point(message_clear_start:SC_BankerBeginToContend)
  if (_has_bits_[0 / 32] & 3u) {
    ::memset(&countdown_, 0, reinterpret_cast<char*>(&total_time_) -
      reinterpret_cast<char*>(&countdown_) + sizeof(total_time_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool SC_BankerBeginToContend::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:SC_BankerBeginToContend)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 countdown = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_countdown();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &countdown_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 total_time = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_total_time();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &total_time_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:SC_BankerBeginToContend)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:SC_BankerBeginToContend)
  return false;
#undef DO_
}

void SC_BankerBeginToContend::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:SC_BankerBeginToContend)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 countdown = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->countdown(), output);
  }

  // required int32 total_time = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->total_time(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:SC_BankerBeginToContend)
}

::google::protobuf::uint8* SC_BankerBeginToContend::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:SC_BankerBeginToContend)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 countdown = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->countdown(), target);
  }

  // required int32 total_time = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->total_time(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SC_BankerBeginToContend)
  return target;
}

size_t SC_BankerBeginToContend::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:SC_BankerBeginToContend)
  size_t total_size = 0;

  if (has_countdown()) {
    // required int32 countdown = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->countdown());
  }

  if (has_total_time()) {
    // required int32 total_time = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->total_time());
  }

  return total_size;
}
size_t SC_BankerBeginToContend::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SC_BankerBeginToContend)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required int32 countdown = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->countdown());

    // required int32 total_time = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->total_time());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SC_BankerBeginToContend::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:SC_BankerBeginToContend)
  GOOGLE_DCHECK_NE(&from, this);
  const SC_BankerBeginToContend* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SC_BankerBeginToContend>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:SC_BankerBeginToContend)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:SC_BankerBeginToContend)
    MergeFrom(*source);
  }
}

void SC_BankerBeginToContend::MergeFrom(const SC_BankerBeginToContend& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:SC_BankerBeginToContend)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      countdown_ = from.countdown_;
    }
    if (cached_has_bits & 0x00000002u) {
      total_time_ = from.total_time_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void SC_BankerBeginToContend::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:SC_BankerBeginToContend)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SC_BankerBeginToContend::CopyFrom(const SC_BankerBeginToContend& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SC_BankerBeginToContend)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SC_BankerBeginToContend::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  return true;
}

void SC_BankerBeginToContend::Swap(SC_BankerBeginToContend* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SC_BankerBeginToContend::InternalSwap(SC_BankerBeginToContend* other) {
  std::swap(countdown_, other->countdown_);
  std::swap(total_time_, other->total_time_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SC_BankerBeginToContend::GetMetadata() const {
  protobuf_public_5fbanker_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_public_5fbanker_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SC_BankerBeginToContend

// required int32 countdown = 1;
bool SC_BankerBeginToContend::has_countdown() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void SC_BankerBeginToContend::set_has_countdown() {
  _has_bits_[0] |= 0x00000001u;
}
void SC_BankerBeginToContend::clear_has_countdown() {
  _has_bits_[0] &= ~0x00000001u;
}
void SC_BankerBeginToContend::clear_countdown() {
  countdown_ = 0;
  clear_has_countdown();
}
::google::protobuf::int32 SC_BankerBeginToContend::countdown() const {
  // @@protoc_insertion_point(field_get:SC_BankerBeginToContend.countdown)
  return countdown_;
}
void SC_BankerBeginToContend::set_countdown(::google::protobuf::int32 value) {
  set_has_countdown();
  countdown_ = value;
  // @@protoc_insertion_point(field_set:SC_BankerBeginToContend.countdown)
}

// required int32 total_time = 2;
bool SC_BankerBeginToContend::has_total_time() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void SC_BankerBeginToContend::set_has_total_time() {
  _has_bits_[0] |= 0x00000002u;
}
void SC_BankerBeginToContend::clear_has_total_time() {
  _has_bits_[0] &= ~0x00000002u;
}
void SC_BankerBeginToContend::clear_total_time() {
  total_time_ = 0;
  clear_has_total_time();
}
::google::protobuf::int32 SC_BankerBeginToContend::total_time() const {
  // @@protoc_insertion_point(field_get:SC_BankerBeginToContend.total_time)
  return total_time_;
}
void SC_BankerBeginToContend::set_total_time(::google::protobuf::int32 value) {
  set_has_total_time();
  total_time_ = value;
  // @@protoc_insertion_point(field_set:SC_BankerBeginToContend.total_time)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SC_BankerPlayerContend::kChairFieldNumber;
const int SC_BankerPlayerContend::kRatioFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SC_BankerPlayerContend::SC_BankerPlayerContend()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_public_5fbanker_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:SC_BankerPlayerContend)
}
SC_BankerPlayerContend::SC_BankerPlayerContend(const SC_BankerPlayerContend& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&chair_, &from.chair_,
    reinterpret_cast<char*>(&ratio_) -
    reinterpret_cast<char*>(&chair_) + sizeof(ratio_));
  // @@protoc_insertion_point(copy_constructor:SC_BankerPlayerContend)
}

void SC_BankerPlayerContend::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&chair_, 0, reinterpret_cast<char*>(&ratio_) -
    reinterpret_cast<char*>(&chair_) + sizeof(ratio_));
}

SC_BankerPlayerContend::~SC_BankerPlayerContend() {
  // @@protoc_insertion_point(destructor:SC_BankerPlayerContend)
  SharedDtor();
}

void SC_BankerPlayerContend::SharedDtor() {
}

void SC_BankerPlayerContend::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SC_BankerPlayerContend::descriptor() {
  protobuf_public_5fbanker_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_public_5fbanker_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const SC_BankerPlayerContend& SC_BankerPlayerContend::default_instance() {
  protobuf_public_5fbanker_2eproto::InitDefaults();
  return *internal_default_instance();
}

SC_BankerPlayerContend* SC_BankerPlayerContend::New(::google::protobuf::Arena* arena) const {
  SC_BankerPlayerContend* n = new SC_BankerPlayerContend;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SC_BankerPlayerContend::Clear() {
// @@protoc_insertion_point(message_clear_start:SC_BankerPlayerContend)
  if (_has_bits_[0 / 32] & 3u) {
    ::memset(&chair_, 0, reinterpret_cast<char*>(&ratio_) -
      reinterpret_cast<char*>(&chair_) + sizeof(ratio_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool SC_BankerPlayerContend::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:SC_BankerPlayerContend)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 chair = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_chair();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &chair_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 ratio = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_ratio();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ratio_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:SC_BankerPlayerContend)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:SC_BankerPlayerContend)
  return false;
#undef DO_
}

void SC_BankerPlayerContend::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:SC_BankerPlayerContend)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 chair = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->chair(), output);
  }

  // optional int32 ratio = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->ratio(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:SC_BankerPlayerContend)
}

::google::protobuf::uint8* SC_BankerPlayerContend::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:SC_BankerPlayerContend)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 chair = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->chair(), target);
  }

  // optional int32 ratio = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->ratio(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SC_BankerPlayerContend)
  return target;
}

size_t SC_BankerPlayerContend::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SC_BankerPlayerContend)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 3u) {
    // optional int32 chair = 1;
    if (has_chair()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->chair());
    }

    // optional int32 ratio = 2;
    if (has_ratio()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ratio());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SC_BankerPlayerContend::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:SC_BankerPlayerContend)
  GOOGLE_DCHECK_NE(&from, this);
  const SC_BankerPlayerContend* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SC_BankerPlayerContend>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:SC_BankerPlayerContend)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:SC_BankerPlayerContend)
    MergeFrom(*source);
  }
}

void SC_BankerPlayerContend::MergeFrom(const SC_BankerPlayerContend& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:SC_BankerPlayerContend)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      chair_ = from.chair_;
    }
    if (cached_has_bits & 0x00000002u) {
      ratio_ = from.ratio_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void SC_BankerPlayerContend::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:SC_BankerPlayerContend)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SC_BankerPlayerContend::CopyFrom(const SC_BankerPlayerContend& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SC_BankerPlayerContend)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SC_BankerPlayerContend::IsInitialized() const {
  return true;
}

void SC_BankerPlayerContend::Swap(SC_BankerPlayerContend* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SC_BankerPlayerContend::InternalSwap(SC_BankerPlayerContend* other) {
  std::swap(chair_, other->chair_);
  std::swap(ratio_, other->ratio_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SC_BankerPlayerContend::GetMetadata() const {
  protobuf_public_5fbanker_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_public_5fbanker_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SC_BankerPlayerContend

// optional int32 chair = 1;
bool SC_BankerPlayerContend::has_chair() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void SC_BankerPlayerContend::set_has_chair() {
  _has_bits_[0] |= 0x00000001u;
}
void SC_BankerPlayerContend::clear_has_chair() {
  _has_bits_[0] &= ~0x00000001u;
}
void SC_BankerPlayerContend::clear_chair() {
  chair_ = 0;
  clear_has_chair();
}
::google::protobuf::int32 SC_BankerPlayerContend::chair() const {
  // @@protoc_insertion_point(field_get:SC_BankerPlayerContend.chair)
  return chair_;
}
void SC_BankerPlayerContend::set_chair(::google::protobuf::int32 value) {
  set_has_chair();
  chair_ = value;
  // @@protoc_insertion_point(field_set:SC_BankerPlayerContend.chair)
}

// optional int32 ratio = 2;
bool SC_BankerPlayerContend::has_ratio() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void SC_BankerPlayerContend::set_has_ratio() {
  _has_bits_[0] |= 0x00000002u;
}
void SC_BankerPlayerContend::clear_has_ratio() {
  _has_bits_[0] &= ~0x00000002u;
}
void SC_BankerPlayerContend::clear_ratio() {
  ratio_ = 0;
  clear_has_ratio();
}
::google::protobuf::int32 SC_BankerPlayerContend::ratio() const {
  // @@protoc_insertion_point(field_get:SC_BankerPlayerContend.ratio)
  return ratio_;
}
void SC_BankerPlayerContend::set_ratio(::google::protobuf::int32 value) {
  set_has_ratio();
  ratio_ = value;
  // @@protoc_insertion_point(field_set:SC_BankerPlayerContend.ratio)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SC_BankerChoosingBanker::kChairsFieldNumber;
const int SC_BankerChoosingBanker::kBankerChairFieldNumber;
const int SC_BankerChoosingBanker::kBankerRatioFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SC_BankerChoosingBanker::SC_BankerChoosingBanker()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_public_5fbanker_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:SC_BankerChoosingBanker)
}
SC_BankerChoosingBanker::SC_BankerChoosingBanker(const SC_BankerChoosingBanker& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      chairs_(from.chairs_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&banker_chair_, &from.banker_chair_,
    reinterpret_cast<char*>(&banker_ratio_) -
    reinterpret_cast<char*>(&banker_chair_) + sizeof(banker_ratio_));
  // @@protoc_insertion_point(copy_constructor:SC_BankerChoosingBanker)
}

void SC_BankerChoosingBanker::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&banker_chair_, 0, reinterpret_cast<char*>(&banker_ratio_) -
    reinterpret_cast<char*>(&banker_chair_) + sizeof(banker_ratio_));
}

SC_BankerChoosingBanker::~SC_BankerChoosingBanker() {
  // @@protoc_insertion_point(destructor:SC_BankerChoosingBanker)
  SharedDtor();
}

void SC_BankerChoosingBanker::SharedDtor() {
}

void SC_BankerChoosingBanker::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SC_BankerChoosingBanker::descriptor() {
  protobuf_public_5fbanker_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_public_5fbanker_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const SC_BankerChoosingBanker& SC_BankerChoosingBanker::default_instance() {
  protobuf_public_5fbanker_2eproto::InitDefaults();
  return *internal_default_instance();
}

SC_BankerChoosingBanker* SC_BankerChoosingBanker::New(::google::protobuf::Arena* arena) const {
  SC_BankerChoosingBanker* n = new SC_BankerChoosingBanker;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SC_BankerChoosingBanker::Clear() {
// @@protoc_insertion_point(message_clear_start:SC_BankerChoosingBanker)
  chairs_.Clear();
  if (_has_bits_[0 / 32] & 3u) {
    ::memset(&banker_chair_, 0, reinterpret_cast<char*>(&banker_ratio_) -
      reinterpret_cast<char*>(&banker_chair_) + sizeof(banker_ratio_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool SC_BankerChoosingBanker::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:SC_BankerChoosingBanker)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated int32 chairs = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 8u, input, this->mutable_chairs())));
        } else if (static_cast< ::google::protobuf::uint8>(tag) ==
                   static_cast< ::google::protobuf::uint8>(10u)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_chairs())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 banker_chair = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_banker_chair();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &banker_chair_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 banker_ratio = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {
          set_has_banker_ratio();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &banker_ratio_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:SC_BankerChoosingBanker)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:SC_BankerChoosingBanker)
  return false;
#undef DO_
}

void SC_BankerChoosingBanker::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:SC_BankerChoosingBanker)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated int32 chairs = 1;
  for (int i = 0, n = this->chairs_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      1, this->chairs(i), output);
  }

  cached_has_bits = _has_bits_[0];
  // optional int32 banker_chair = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->banker_chair(), output);
  }

  // optional int32 banker_ratio = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->banker_ratio(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:SC_BankerChoosingBanker)
}

::google::protobuf::uint8* SC_BankerChoosingBanker::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:SC_BankerChoosingBanker)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated int32 chairs = 1;
  target = ::google::protobuf::internal::WireFormatLite::
    WriteInt32ToArray(1, this->chairs_, target);

  cached_has_bits = _has_bits_[0];
  // optional int32 banker_chair = 2;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->banker_chair(), target);
  }

  // optional int32 banker_ratio = 3;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->banker_ratio(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SC_BankerChoosingBanker)
  return target;
}

size_t SC_BankerChoosingBanker::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SC_BankerChoosingBanker)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // repeated int32 chairs = 1;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      Int32Size(this->chairs_);
    total_size += 1 *
                  ::google::protobuf::internal::FromIntSize(this->chairs_size());
    total_size += data_size;
  }

  if (_has_bits_[0 / 32] & 3u) {
    // optional int32 banker_chair = 2;
    if (has_banker_chair()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->banker_chair());
    }

    // optional int32 banker_ratio = 3;
    if (has_banker_ratio()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->banker_ratio());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SC_BankerChoosingBanker::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:SC_BankerChoosingBanker)
  GOOGLE_DCHECK_NE(&from, this);
  const SC_BankerChoosingBanker* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SC_BankerChoosingBanker>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:SC_BankerChoosingBanker)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:SC_BankerChoosingBanker)
    MergeFrom(*source);
  }
}

void SC_BankerChoosingBanker::MergeFrom(const SC_BankerChoosingBanker& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:SC_BankerChoosingBanker)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  chairs_.MergeFrom(from.chairs_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      banker_chair_ = from.banker_chair_;
    }
    if (cached_has_bits & 0x00000002u) {
      banker_ratio_ = from.banker_ratio_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void SC_BankerChoosingBanker::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:SC_BankerChoosingBanker)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SC_BankerChoosingBanker::CopyFrom(const SC_BankerChoosingBanker& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SC_BankerChoosingBanker)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SC_BankerChoosingBanker::IsInitialized() const {
  return true;
}

void SC_BankerChoosingBanker::Swap(SC_BankerChoosingBanker* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SC_BankerChoosingBanker::InternalSwap(SC_BankerChoosingBanker* other) {
  chairs_.InternalSwap(&other->chairs_);
  std::swap(banker_chair_, other->banker_chair_);
  std::swap(banker_ratio_, other->banker_ratio_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SC_BankerChoosingBanker::GetMetadata() const {
  protobuf_public_5fbanker_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_public_5fbanker_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SC_BankerChoosingBanker

// repeated int32 chairs = 1;
int SC_BankerChoosingBanker::chairs_size() const {
  return chairs_.size();
}
void SC_BankerChoosingBanker::clear_chairs() {
  chairs_.Clear();
}
::google::protobuf::int32 SC_BankerChoosingBanker::chairs(int index) const {
  // @@protoc_insertion_point(field_get:SC_BankerChoosingBanker.chairs)
  return chairs_.Get(index);
}
void SC_BankerChoosingBanker::set_chairs(int index, ::google::protobuf::int32 value) {
  chairs_.Set(index, value);
  // @@protoc_insertion_point(field_set:SC_BankerChoosingBanker.chairs)
}
void SC_BankerChoosingBanker::add_chairs(::google::protobuf::int32 value) {
  chairs_.Add(value);
  // @@protoc_insertion_point(field_add:SC_BankerChoosingBanker.chairs)
}
const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
SC_BankerChoosingBanker::chairs() const {
  // @@protoc_insertion_point(field_list:SC_BankerChoosingBanker.chairs)
  return chairs_;
}
::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
SC_BankerChoosingBanker::mutable_chairs() {
  // @@protoc_insertion_point(field_mutable_list:SC_BankerChoosingBanker.chairs)
  return &chairs_;
}

// optional int32 banker_chair = 2;
bool SC_BankerChoosingBanker::has_banker_chair() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void SC_BankerChoosingBanker::set_has_banker_chair() {
  _has_bits_[0] |= 0x00000001u;
}
void SC_BankerChoosingBanker::clear_has_banker_chair() {
  _has_bits_[0] &= ~0x00000001u;
}
void SC_BankerChoosingBanker::clear_banker_chair() {
  banker_chair_ = 0;
  clear_has_banker_chair();
}
::google::protobuf::int32 SC_BankerChoosingBanker::banker_chair() const {
  // @@protoc_insertion_point(field_get:SC_BankerChoosingBanker.banker_chair)
  return banker_chair_;
}
void SC_BankerChoosingBanker::set_banker_chair(::google::protobuf::int32 value) {
  set_has_banker_chair();
  banker_chair_ = value;
  // @@protoc_insertion_point(field_set:SC_BankerChoosingBanker.banker_chair)
}

// optional int32 banker_ratio = 3;
bool SC_BankerChoosingBanker::has_banker_ratio() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void SC_BankerChoosingBanker::set_has_banker_ratio() {
  _has_bits_[0] |= 0x00000002u;
}
void SC_BankerChoosingBanker::clear_has_banker_ratio() {
  _has_bits_[0] &= ~0x00000002u;
}
void SC_BankerChoosingBanker::clear_banker_ratio() {
  banker_ratio_ = 0;
  clear_has_banker_ratio();
}
::google::protobuf::int32 SC_BankerChoosingBanker::banker_ratio() const {
  // @@protoc_insertion_point(field_get:SC_BankerChoosingBanker.banker_ratio)
  return banker_ratio_;
}
void SC_BankerChoosingBanker::set_banker_ratio(::google::protobuf::int32 value) {
  set_has_banker_ratio();
  banker_ratio_ = value;
  // @@protoc_insertion_point(field_set:SC_BankerChoosingBanker.banker_ratio)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SC_BankerPlayerBeginToBet::kCountdownFieldNumber;
const int SC_BankerPlayerBeginToBet::kTotalTimeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SC_BankerPlayerBeginToBet::SC_BankerPlayerBeginToBet()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_public_5fbanker_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:SC_BankerPlayerBeginToBet)
}
SC_BankerPlayerBeginToBet::SC_BankerPlayerBeginToBet(const SC_BankerPlayerBeginToBet& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&countdown_, &from.countdown_,
    reinterpret_cast<char*>(&total_time_) -
    reinterpret_cast<char*>(&countdown_) + sizeof(total_time_));
  // @@protoc_insertion_point(copy_constructor:SC_BankerPlayerBeginToBet)
}

void SC_BankerPlayerBeginToBet::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&countdown_, 0, reinterpret_cast<char*>(&total_time_) -
    reinterpret_cast<char*>(&countdown_) + sizeof(total_time_));
}

SC_BankerPlayerBeginToBet::~SC_BankerPlayerBeginToBet() {
  // @@protoc_insertion_point(destructor:SC_BankerPlayerBeginToBet)
  SharedDtor();
}

void SC_BankerPlayerBeginToBet::SharedDtor() {
}

void SC_BankerPlayerBeginToBet::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SC_BankerPlayerBeginToBet::descriptor() {
  protobuf_public_5fbanker_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_public_5fbanker_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const SC_BankerPlayerBeginToBet& SC_BankerPlayerBeginToBet::default_instance() {
  protobuf_public_5fbanker_2eproto::InitDefaults();
  return *internal_default_instance();
}

SC_BankerPlayerBeginToBet* SC_BankerPlayerBeginToBet::New(::google::protobuf::Arena* arena) const {
  SC_BankerPlayerBeginToBet* n = new SC_BankerPlayerBeginToBet;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SC_BankerPlayerBeginToBet::Clear() {
// @@protoc_insertion_point(message_clear_start:SC_BankerPlayerBeginToBet)
  if (_has_bits_[0 / 32] & 3u) {
    ::memset(&countdown_, 0, reinterpret_cast<char*>(&total_time_) -
      reinterpret_cast<char*>(&countdown_) + sizeof(total_time_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool SC_BankerPlayerBeginToBet::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:SC_BankerPlayerBeginToBet)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 countdown = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_countdown();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &countdown_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 total_time = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_total_time();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &total_time_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:SC_BankerPlayerBeginToBet)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:SC_BankerPlayerBeginToBet)
  return false;
#undef DO_
}

void SC_BankerPlayerBeginToBet::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:SC_BankerPlayerBeginToBet)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 countdown = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->countdown(), output);
  }

  // required int32 total_time = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->total_time(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:SC_BankerPlayerBeginToBet)
}

::google::protobuf::uint8* SC_BankerPlayerBeginToBet::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:SC_BankerPlayerBeginToBet)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 countdown = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->countdown(), target);
  }

  // required int32 total_time = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->total_time(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SC_BankerPlayerBeginToBet)
  return target;
}

size_t SC_BankerPlayerBeginToBet::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:SC_BankerPlayerBeginToBet)
  size_t total_size = 0;

  if (has_countdown()) {
    // required int32 countdown = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->countdown());
  }

  if (has_total_time()) {
    // required int32 total_time = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->total_time());
  }

  return total_size;
}
size_t SC_BankerPlayerBeginToBet::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SC_BankerPlayerBeginToBet)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required int32 countdown = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->countdown());

    // required int32 total_time = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->total_time());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SC_BankerPlayerBeginToBet::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:SC_BankerPlayerBeginToBet)
  GOOGLE_DCHECK_NE(&from, this);
  const SC_BankerPlayerBeginToBet* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SC_BankerPlayerBeginToBet>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:SC_BankerPlayerBeginToBet)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:SC_BankerPlayerBeginToBet)
    MergeFrom(*source);
  }
}

void SC_BankerPlayerBeginToBet::MergeFrom(const SC_BankerPlayerBeginToBet& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:SC_BankerPlayerBeginToBet)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      countdown_ = from.countdown_;
    }
    if (cached_has_bits & 0x00000002u) {
      total_time_ = from.total_time_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void SC_BankerPlayerBeginToBet::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:SC_BankerPlayerBeginToBet)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SC_BankerPlayerBeginToBet::CopyFrom(const SC_BankerPlayerBeginToBet& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SC_BankerPlayerBeginToBet)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SC_BankerPlayerBeginToBet::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  return true;
}

void SC_BankerPlayerBeginToBet::Swap(SC_BankerPlayerBeginToBet* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SC_BankerPlayerBeginToBet::InternalSwap(SC_BankerPlayerBeginToBet* other) {
  std::swap(countdown_, other->countdown_);
  std::swap(total_time_, other->total_time_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SC_BankerPlayerBeginToBet::GetMetadata() const {
  protobuf_public_5fbanker_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_public_5fbanker_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SC_BankerPlayerBeginToBet

// required int32 countdown = 1;
bool SC_BankerPlayerBeginToBet::has_countdown() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void SC_BankerPlayerBeginToBet::set_has_countdown() {
  _has_bits_[0] |= 0x00000001u;
}
void SC_BankerPlayerBeginToBet::clear_has_countdown() {
  _has_bits_[0] &= ~0x00000001u;
}
void SC_BankerPlayerBeginToBet::clear_countdown() {
  countdown_ = 0;
  clear_has_countdown();
}
::google::protobuf::int32 SC_BankerPlayerBeginToBet::countdown() const {
  // @@protoc_insertion_point(field_get:SC_BankerPlayerBeginToBet.countdown)
  return countdown_;
}
void SC_BankerPlayerBeginToBet::set_countdown(::google::protobuf::int32 value) {
  set_has_countdown();
  countdown_ = value;
  // @@protoc_insertion_point(field_set:SC_BankerPlayerBeginToBet.countdown)
}

// required int32 total_time = 2;
bool SC_BankerPlayerBeginToBet::has_total_time() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void SC_BankerPlayerBeginToBet::set_has_total_time() {
  _has_bits_[0] |= 0x00000002u;
}
void SC_BankerPlayerBeginToBet::clear_has_total_time() {
  _has_bits_[0] &= ~0x00000002u;
}
void SC_BankerPlayerBeginToBet::clear_total_time() {
  total_time_ = 0;
  clear_has_total_time();
}
::google::protobuf::int32 SC_BankerPlayerBeginToBet::total_time() const {
  // @@protoc_insertion_point(field_get:SC_BankerPlayerBeginToBet.total_time)
  return total_time_;
}
void SC_BankerPlayerBeginToBet::set_total_time(::google::protobuf::int32 value) {
  set_has_total_time();
  total_time_ = value;
  // @@protoc_insertion_point(field_set:SC_BankerPlayerBeginToBet.total_time)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SC_BankerPlayerBet::kChairFieldNumber;
const int SC_BankerPlayerBet::kBetMoneyFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SC_BankerPlayerBet::SC_BankerPlayerBet()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_public_5fbanker_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:SC_BankerPlayerBet)
}
SC_BankerPlayerBet::SC_BankerPlayerBet(const SC_BankerPlayerBet& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&bet_money_, &from.bet_money_,
    reinterpret_cast<char*>(&chair_) -
    reinterpret_cast<char*>(&bet_money_) + sizeof(chair_));
  // @@protoc_insertion_point(copy_constructor:SC_BankerPlayerBet)
}

void SC_BankerPlayerBet::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&bet_money_, 0, reinterpret_cast<char*>(&chair_) -
    reinterpret_cast<char*>(&bet_money_) + sizeof(chair_));
}

SC_BankerPlayerBet::~SC_BankerPlayerBet() {
  // @@protoc_insertion_point(destructor:SC_BankerPlayerBet)
  SharedDtor();
}

void SC_BankerPlayerBet::SharedDtor() {
}

void SC_BankerPlayerBet::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SC_BankerPlayerBet::descriptor() {
  protobuf_public_5fbanker_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_public_5fbanker_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const SC_BankerPlayerBet& SC_BankerPlayerBet::default_instance() {
  protobuf_public_5fbanker_2eproto::InitDefaults();
  return *internal_default_instance();
}

SC_BankerPlayerBet* SC_BankerPlayerBet::New(::google::protobuf::Arena* arena) const {
  SC_BankerPlayerBet* n = new SC_BankerPlayerBet;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SC_BankerPlayerBet::Clear() {
// @@protoc_insertion_point(message_clear_start:SC_BankerPlayerBet)
  if (_has_bits_[0 / 32] & 3u) {
    ::memset(&bet_money_, 0, reinterpret_cast<char*>(&chair_) -
      reinterpret_cast<char*>(&bet_money_) + sizeof(chair_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool SC_BankerPlayerBet::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:SC_BankerPlayerBet)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 chair = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_chair();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &chair_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int64 bet_money = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_bet_money();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &bet_money_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:SC_BankerPlayerBet)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:SC_BankerPlayerBet)
  return false;
#undef DO_
}

void SC_BankerPlayerBet::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:SC_BankerPlayerBet)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 chair = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->chair(), output);
  }

  // required int64 bet_money = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->bet_money(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:SC_BankerPlayerBet)
}

::google::protobuf::uint8* SC_BankerPlayerBet::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:SC_BankerPlayerBet)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 chair = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->chair(), target);
  }

  // required int64 bet_money = 2;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->bet_money(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SC_BankerPlayerBet)
  return target;
}

size_t SC_BankerPlayerBet::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SC_BankerPlayerBet)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // required int64 bet_money = 2;
  if (has_bet_money()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->bet_money());
  }
  // optional int32 chair = 1;
  if (has_chair()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->chair());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SC_BankerPlayerBet::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:SC_BankerPlayerBet)
  GOOGLE_DCHECK_NE(&from, this);
  const SC_BankerPlayerBet* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SC_BankerPlayerBet>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:SC_BankerPlayerBet)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:SC_BankerPlayerBet)
    MergeFrom(*source);
  }
}

void SC_BankerPlayerBet::MergeFrom(const SC_BankerPlayerBet& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:SC_BankerPlayerBet)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      bet_money_ = from.bet_money_;
    }
    if (cached_has_bits & 0x00000002u) {
      chair_ = from.chair_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void SC_BankerPlayerBet::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:SC_BankerPlayerBet)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SC_BankerPlayerBet::CopyFrom(const SC_BankerPlayerBet& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SC_BankerPlayerBet)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SC_BankerPlayerBet::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  return true;
}

void SC_BankerPlayerBet::Swap(SC_BankerPlayerBet* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SC_BankerPlayerBet::InternalSwap(SC_BankerPlayerBet* other) {
  std::swap(bet_money_, other->bet_money_);
  std::swap(chair_, other->chair_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SC_BankerPlayerBet::GetMetadata() const {
  protobuf_public_5fbanker_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_public_5fbanker_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SC_BankerPlayerBet

// optional int32 chair = 1;
bool SC_BankerPlayerBet::has_chair() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void SC_BankerPlayerBet::set_has_chair() {
  _has_bits_[0] |= 0x00000002u;
}
void SC_BankerPlayerBet::clear_has_chair() {
  _has_bits_[0] &= ~0x00000002u;
}
void SC_BankerPlayerBet::clear_chair() {
  chair_ = 0;
  clear_has_chair();
}
::google::protobuf::int32 SC_BankerPlayerBet::chair() const {
  // @@protoc_insertion_point(field_get:SC_BankerPlayerBet.chair)
  return chair_;
}
void SC_BankerPlayerBet::set_chair(::google::protobuf::int32 value) {
  set_has_chair();
  chair_ = value;
  // @@protoc_insertion_point(field_set:SC_BankerPlayerBet.chair)
}

// required int64 bet_money = 2;
bool SC_BankerPlayerBet::has_bet_money() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void SC_BankerPlayerBet::set_has_bet_money() {
  _has_bits_[0] |= 0x00000001u;
}
void SC_BankerPlayerBet::clear_has_bet_money() {
  _has_bits_[0] &= ~0x00000001u;
}
void SC_BankerPlayerBet::clear_bet_money() {
  bet_money_ = GOOGLE_LONGLONG(0);
  clear_has_bet_money();
}
::google::protobuf::int64 SC_BankerPlayerBet::bet_money() const {
  // @@protoc_insertion_point(field_get:SC_BankerPlayerBet.bet_money)
  return bet_money_;
}
void SC_BankerPlayerBet::set_bet_money(::google::protobuf::int64 value) {
  set_has_bet_money();
  bet_money_ = value;
  // @@protoc_insertion_point(field_set:SC_BankerPlayerBet.bet_money)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SC_BankerShowOwnCards::kCardsFieldNumber;
const int SC_BankerShowOwnCards::kCardsTypeFieldNumber;
const int SC_BankerShowOwnCards::kCountdownFieldNumber;
const int SC_BankerShowOwnCards::kTotalTimeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SC_BankerShowOwnCards::SC_BankerShowOwnCards()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_public_5fbanker_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:SC_BankerShowOwnCards)
}
SC_BankerShowOwnCards::SC_BankerShowOwnCards(const SC_BankerShowOwnCards& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      cards_(from.cards_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&cards_type_, &from.cards_type_,
    reinterpret_cast<char*>(&total_time_) -
    reinterpret_cast<char*>(&cards_type_) + sizeof(total_time_));
  // @@protoc_insertion_point(copy_constructor:SC_BankerShowOwnCards)
}

void SC_BankerShowOwnCards::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&cards_type_, 0, reinterpret_cast<char*>(&total_time_) -
    reinterpret_cast<char*>(&cards_type_) + sizeof(total_time_));
}

SC_BankerShowOwnCards::~SC_BankerShowOwnCards() {
  // @@protoc_insertion_point(destructor:SC_BankerShowOwnCards)
  SharedDtor();
}

void SC_BankerShowOwnCards::SharedDtor() {
}

void SC_BankerShowOwnCards::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SC_BankerShowOwnCards::descriptor() {
  protobuf_public_5fbanker_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_public_5fbanker_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const SC_BankerShowOwnCards& SC_BankerShowOwnCards::default_instance() {
  protobuf_public_5fbanker_2eproto::InitDefaults();
  return *internal_default_instance();
}

SC_BankerShowOwnCards* SC_BankerShowOwnCards::New(::google::protobuf::Arena* arena) const {
  SC_BankerShowOwnCards* n = new SC_BankerShowOwnCards;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SC_BankerShowOwnCards::Clear() {
// @@protoc_insertion_point(message_clear_start:SC_BankerShowOwnCards)
  cards_.Clear();
  if (_has_bits_[0 / 32] & 7u) {
    ::memset(&cards_type_, 0, reinterpret_cast<char*>(&total_time_) -
      reinterpret_cast<char*>(&cards_type_) + sizeof(total_time_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool SC_BankerShowOwnCards::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:SC_BankerShowOwnCards)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated int32 cards = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 8u, input, this->mutable_cards())));
        } else if (static_cast< ::google::protobuf::uint8>(tag) ==
                   static_cast< ::google::protobuf::uint8>(10u)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_cards())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 cards_type = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_cards_type();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &cards_type_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 countdown = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {
          set_has_countdown();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &countdown_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 total_time = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u)) {
          set_has_total_time();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &total_time_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:SC_BankerShowOwnCards)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:SC_BankerShowOwnCards)
  return false;
#undef DO_
}

void SC_BankerShowOwnCards::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:SC_BankerShowOwnCards)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated int32 cards = 1;
  for (int i = 0, n = this->cards_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      1, this->cards(i), output);
  }

  cached_has_bits = _has_bits_[0];
  // optional int32 cards_type = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->cards_type(), output);
  }

  // required int32 countdown = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->countdown(), output);
  }

  // required int32 total_time = 4;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->total_time(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:SC_BankerShowOwnCards)
}

::google::protobuf::uint8* SC_BankerShowOwnCards::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:SC_BankerShowOwnCards)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated int32 cards = 1;
  target = ::google::protobuf::internal::WireFormatLite::
    WriteInt32ToArray(1, this->cards_, target);

  cached_has_bits = _has_bits_[0];
  // optional int32 cards_type = 2;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->cards_type(), target);
  }

  // required int32 countdown = 3;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->countdown(), target);
  }

  // required int32 total_time = 4;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->total_time(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SC_BankerShowOwnCards)
  return target;
}

size_t SC_BankerShowOwnCards::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:SC_BankerShowOwnCards)
  size_t total_size = 0;

  if (has_countdown()) {
    // required int32 countdown = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->countdown());
  }

  if (has_total_time()) {
    // required int32 total_time = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->total_time());
  }

  return total_size;
}
size_t SC_BankerShowOwnCards::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SC_BankerShowOwnCards)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000006) ^ 0x00000006) == 0) {  // All required fields are present.
    // required int32 countdown = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->countdown());

    // required int32 total_time = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->total_time());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  // repeated int32 cards = 1;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      Int32Size(this->cards_);
    total_size += 1 *
                  ::google::protobuf::internal::FromIntSize(this->cards_size());
    total_size += data_size;
  }

  // optional int32 cards_type = 2;
  if (has_cards_type()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->cards_type());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SC_BankerShowOwnCards::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:SC_BankerShowOwnCards)
  GOOGLE_DCHECK_NE(&from, this);
  const SC_BankerShowOwnCards* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SC_BankerShowOwnCards>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:SC_BankerShowOwnCards)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:SC_BankerShowOwnCards)
    MergeFrom(*source);
  }
}

void SC_BankerShowOwnCards::MergeFrom(const SC_BankerShowOwnCards& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:SC_BankerShowOwnCards)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cards_.MergeFrom(from.cards_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      cards_type_ = from.cards_type_;
    }
    if (cached_has_bits & 0x00000002u) {
      countdown_ = from.countdown_;
    }
    if (cached_has_bits & 0x00000004u) {
      total_time_ = from.total_time_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void SC_BankerShowOwnCards::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:SC_BankerShowOwnCards)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SC_BankerShowOwnCards::CopyFrom(const SC_BankerShowOwnCards& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SC_BankerShowOwnCards)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SC_BankerShowOwnCards::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000006) != 0x00000006) return false;
  return true;
}

void SC_BankerShowOwnCards::Swap(SC_BankerShowOwnCards* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SC_BankerShowOwnCards::InternalSwap(SC_BankerShowOwnCards* other) {
  cards_.InternalSwap(&other->cards_);
  std::swap(cards_type_, other->cards_type_);
  std::swap(countdown_, other->countdown_);
  std::swap(total_time_, other->total_time_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SC_BankerShowOwnCards::GetMetadata() const {
  protobuf_public_5fbanker_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_public_5fbanker_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SC_BankerShowOwnCards

// repeated int32 cards = 1;
int SC_BankerShowOwnCards::cards_size() const {
  return cards_.size();
}
void SC_BankerShowOwnCards::clear_cards() {
  cards_.Clear();
}
::google::protobuf::int32 SC_BankerShowOwnCards::cards(int index) const {
  // @@protoc_insertion_point(field_get:SC_BankerShowOwnCards.cards)
  return cards_.Get(index);
}
void SC_BankerShowOwnCards::set_cards(int index, ::google::protobuf::int32 value) {
  cards_.Set(index, value);
  // @@protoc_insertion_point(field_set:SC_BankerShowOwnCards.cards)
}
void SC_BankerShowOwnCards::add_cards(::google::protobuf::int32 value) {
  cards_.Add(value);
  // @@protoc_insertion_point(field_add:SC_BankerShowOwnCards.cards)
}
const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
SC_BankerShowOwnCards::cards() const {
  // @@protoc_insertion_point(field_list:SC_BankerShowOwnCards.cards)
  return cards_;
}
::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
SC_BankerShowOwnCards::mutable_cards() {
  // @@protoc_insertion_point(field_mutable_list:SC_BankerShowOwnCards.cards)
  return &cards_;
}

// optional int32 cards_type = 2;
bool SC_BankerShowOwnCards::has_cards_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void SC_BankerShowOwnCards::set_has_cards_type() {
  _has_bits_[0] |= 0x00000001u;
}
void SC_BankerShowOwnCards::clear_has_cards_type() {
  _has_bits_[0] &= ~0x00000001u;
}
void SC_BankerShowOwnCards::clear_cards_type() {
  cards_type_ = 0;
  clear_has_cards_type();
}
::google::protobuf::int32 SC_BankerShowOwnCards::cards_type() const {
  // @@protoc_insertion_point(field_get:SC_BankerShowOwnCards.cards_type)
  return cards_type_;
}
void SC_BankerShowOwnCards::set_cards_type(::google::protobuf::int32 value) {
  set_has_cards_type();
  cards_type_ = value;
  // @@protoc_insertion_point(field_set:SC_BankerShowOwnCards.cards_type)
}

// required int32 countdown = 3;
bool SC_BankerShowOwnCards::has_countdown() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void SC_BankerShowOwnCards::set_has_countdown() {
  _has_bits_[0] |= 0x00000002u;
}
void SC_BankerShowOwnCards::clear_has_countdown() {
  _has_bits_[0] &= ~0x00000002u;
}
void SC_BankerShowOwnCards::clear_countdown() {
  countdown_ = 0;
  clear_has_countdown();
}
::google::protobuf::int32 SC_BankerShowOwnCards::countdown() const {
  // @@protoc_insertion_point(field_get:SC_BankerShowOwnCards.countdown)
  return countdown_;
}
void SC_BankerShowOwnCards::set_countdown(::google::protobuf::int32 value) {
  set_has_countdown();
  countdown_ = value;
  // @@protoc_insertion_point(field_set:SC_BankerShowOwnCards.countdown)
}

// required int32 total_time = 4;
bool SC_BankerShowOwnCards::has_total_time() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void SC_BankerShowOwnCards::set_has_total_time() {
  _has_bits_[0] |= 0x00000004u;
}
void SC_BankerShowOwnCards::clear_has_total_time() {
  _has_bits_[0] &= ~0x00000004u;
}
void SC_BankerShowOwnCards::clear_total_time() {
  total_time_ = 0;
  clear_has_total_time();
}
::google::protobuf::int32 SC_BankerShowOwnCards::total_time() const {
  // @@protoc_insertion_point(field_get:SC_BankerShowOwnCards.total_time)
  return total_time_;
}
void SC_BankerShowOwnCards::set_total_time(::google::protobuf::int32 value) {
  set_has_total_time();
  total_time_ = value;
  // @@protoc_insertion_point(field_set:SC_BankerShowOwnCards.total_time)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SC_BankerShowCards::kChairFieldNumber;
const int SC_BankerShowCards::kCardsFieldNumber;
const int SC_BankerShowCards::kCardsTypeFieldNumber;
const int SC_BankerShowCards::kFlagFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SC_BankerShowCards::SC_BankerShowCards()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_public_5fbanker_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:SC_BankerShowCards)
}
SC_BankerShowCards::SC_BankerShowCards(const SC_BankerShowCards& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      cards_(from.cards_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&chair_, &from.chair_,
    reinterpret_cast<char*>(&flag_) -
    reinterpret_cast<char*>(&chair_) + sizeof(flag_));
  // @@protoc_insertion_point(copy_constructor:SC_BankerShowCards)
}

void SC_BankerShowCards::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&chair_, 0, reinterpret_cast<char*>(&flag_) -
    reinterpret_cast<char*>(&chair_) + sizeof(flag_));
}

SC_BankerShowCards::~SC_BankerShowCards() {
  // @@protoc_insertion_point(destructor:SC_BankerShowCards)
  SharedDtor();
}

void SC_BankerShowCards::SharedDtor() {
}

void SC_BankerShowCards::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SC_BankerShowCards::descriptor() {
  protobuf_public_5fbanker_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_public_5fbanker_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const SC_BankerShowCards& SC_BankerShowCards::default_instance() {
  protobuf_public_5fbanker_2eproto::InitDefaults();
  return *internal_default_instance();
}

SC_BankerShowCards* SC_BankerShowCards::New(::google::protobuf::Arena* arena) const {
  SC_BankerShowCards* n = new SC_BankerShowCards;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SC_BankerShowCards::Clear() {
// @@protoc_insertion_point(message_clear_start:SC_BankerShowCards)
  cards_.Clear();
  if (_has_bits_[0 / 32] & 7u) {
    ::memset(&chair_, 0, reinterpret_cast<char*>(&flag_) -
      reinterpret_cast<char*>(&chair_) + sizeof(flag_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool SC_BankerShowCards::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:SC_BankerShowCards)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 chair = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_chair();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &chair_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated int32 cards = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 16u, input, this->mutable_cards())));
        } else if (static_cast< ::google::protobuf::uint8>(tag) ==
                   static_cast< ::google::protobuf::uint8>(18u)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_cards())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 cards_type = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {
          set_has_cards_type();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &cards_type_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 flag = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u)) {
          set_has_flag();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &flag_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:SC_BankerShowCards)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:SC_BankerShowCards)
  return false;
#undef DO_
}

void SC_BankerShowCards::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:SC_BankerShowCards)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 chair = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->chair(), output);
  }

  // repeated int32 cards = 2;
  for (int i = 0, n = this->cards_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      2, this->cards(i), output);
  }

  // optional int32 cards_type = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->cards_type(), output);
  }

  // optional int32 flag = 4;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->flag(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:SC_BankerShowCards)
}

::google::protobuf::uint8* SC_BankerShowCards::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:SC_BankerShowCards)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 chair = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->chair(), target);
  }

  // repeated int32 cards = 2;
  target = ::google::protobuf::internal::WireFormatLite::
    WriteInt32ToArray(2, this->cards_, target);

  // optional int32 cards_type = 3;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->cards_type(), target);
  }

  // optional int32 flag = 4;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->flag(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SC_BankerShowCards)
  return target;
}

size_t SC_BankerShowCards::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SC_BankerShowCards)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // repeated int32 cards = 2;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      Int32Size(this->cards_);
    total_size += 1 *
                  ::google::protobuf::internal::FromIntSize(this->cards_size());
    total_size += data_size;
  }

  if (_has_bits_[0 / 32] & 7u) {
    // optional int32 chair = 1;
    if (has_chair()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->chair());
    }

    // optional int32 cards_type = 3;
    if (has_cards_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->cards_type());
    }

    // optional int32 flag = 4;
    if (has_flag()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->flag());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SC_BankerShowCards::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:SC_BankerShowCards)
  GOOGLE_DCHECK_NE(&from, this);
  const SC_BankerShowCards* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SC_BankerShowCards>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:SC_BankerShowCards)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:SC_BankerShowCards)
    MergeFrom(*source);
  }
}

void SC_BankerShowCards::MergeFrom(const SC_BankerShowCards& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:SC_BankerShowCards)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cards_.MergeFrom(from.cards_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      chair_ = from.chair_;
    }
    if (cached_has_bits & 0x00000002u) {
      cards_type_ = from.cards_type_;
    }
    if (cached_has_bits & 0x00000004u) {
      flag_ = from.flag_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void SC_BankerShowCards::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:SC_BankerShowCards)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SC_BankerShowCards::CopyFrom(const SC_BankerShowCards& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SC_BankerShowCards)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SC_BankerShowCards::IsInitialized() const {
  return true;
}

void SC_BankerShowCards::Swap(SC_BankerShowCards* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SC_BankerShowCards::InternalSwap(SC_BankerShowCards* other) {
  cards_.InternalSwap(&other->cards_);
  std::swap(chair_, other->chair_);
  std::swap(cards_type_, other->cards_type_);
  std::swap(flag_, other->flag_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SC_BankerShowCards::GetMetadata() const {
  protobuf_public_5fbanker_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_public_5fbanker_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SC_BankerShowCards

// optional int32 chair = 1;
bool SC_BankerShowCards::has_chair() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void SC_BankerShowCards::set_has_chair() {
  _has_bits_[0] |= 0x00000001u;
}
void SC_BankerShowCards::clear_has_chair() {
  _has_bits_[0] &= ~0x00000001u;
}
void SC_BankerShowCards::clear_chair() {
  chair_ = 0;
  clear_has_chair();
}
::google::protobuf::int32 SC_BankerShowCards::chair() const {
  // @@protoc_insertion_point(field_get:SC_BankerShowCards.chair)
  return chair_;
}
void SC_BankerShowCards::set_chair(::google::protobuf::int32 value) {
  set_has_chair();
  chair_ = value;
  // @@protoc_insertion_point(field_set:SC_BankerShowCards.chair)
}

// repeated int32 cards = 2;
int SC_BankerShowCards::cards_size() const {
  return cards_.size();
}
void SC_BankerShowCards::clear_cards() {
  cards_.Clear();
}
::google::protobuf::int32 SC_BankerShowCards::cards(int index) const {
  // @@protoc_insertion_point(field_get:SC_BankerShowCards.cards)
  return cards_.Get(index);
}
void SC_BankerShowCards::set_cards(int index, ::google::protobuf::int32 value) {
  cards_.Set(index, value);
  // @@protoc_insertion_point(field_set:SC_BankerShowCards.cards)
}
void SC_BankerShowCards::add_cards(::google::protobuf::int32 value) {
  cards_.Add(value);
  // @@protoc_insertion_point(field_add:SC_BankerShowCards.cards)
}
const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
SC_BankerShowCards::cards() const {
  // @@protoc_insertion_point(field_list:SC_BankerShowCards.cards)
  return cards_;
}
::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
SC_BankerShowCards::mutable_cards() {
  // @@protoc_insertion_point(field_mutable_list:SC_BankerShowCards.cards)
  return &cards_;
}

// optional int32 cards_type = 3;
bool SC_BankerShowCards::has_cards_type() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void SC_BankerShowCards::set_has_cards_type() {
  _has_bits_[0] |= 0x00000002u;
}
void SC_BankerShowCards::clear_has_cards_type() {
  _has_bits_[0] &= ~0x00000002u;
}
void SC_BankerShowCards::clear_cards_type() {
  cards_type_ = 0;
  clear_has_cards_type();
}
::google::protobuf::int32 SC_BankerShowCards::cards_type() const {
  // @@protoc_insertion_point(field_get:SC_BankerShowCards.cards_type)
  return cards_type_;
}
void SC_BankerShowCards::set_cards_type(::google::protobuf::int32 value) {
  set_has_cards_type();
  cards_type_ = value;
  // @@protoc_insertion_point(field_set:SC_BankerShowCards.cards_type)
}

// optional int32 flag = 4;
bool SC_BankerShowCards::has_flag() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void SC_BankerShowCards::set_has_flag() {
  _has_bits_[0] |= 0x00000004u;
}
void SC_BankerShowCards::clear_has_flag() {
  _has_bits_[0] &= ~0x00000004u;
}
void SC_BankerShowCards::clear_flag() {
  flag_ = 0;
  clear_has_flag();
}
::google::protobuf::int32 SC_BankerShowCards::flag() const {
  // @@protoc_insertion_point(field_get:SC_BankerShowCards.flag)
  return flag_;
}
void SC_BankerShowCards::set_flag(::google::protobuf::int32 value) {
  set_has_flag();
  flag_ = value;
  // @@protoc_insertion_point(field_set:SC_BankerShowCards.flag)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SC_BankerGameEnd::kPbPlayerFieldNumber;
const int SC_BankerGameEnd::kPbTableFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SC_BankerGameEnd::SC_BankerGameEnd()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_public_5fbanker_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:SC_BankerGameEnd)
}
SC_BankerGameEnd::SC_BankerGameEnd(const SC_BankerGameEnd& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      pb_player_(from.pb_player_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_pb_table()) {
    pb_table_ = new ::BankerTable(*from.pb_table_);
  } else {
    pb_table_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:SC_BankerGameEnd)
}

void SC_BankerGameEnd::SharedCtor() {
  _cached_size_ = 0;
  pb_table_ = NULL;
}

SC_BankerGameEnd::~SC_BankerGameEnd() {
  // @@protoc_insertion_point(destructor:SC_BankerGameEnd)
  SharedDtor();
}

void SC_BankerGameEnd::SharedDtor() {
  if (this != internal_default_instance()) {
    delete pb_table_;
  }
}

void SC_BankerGameEnd::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SC_BankerGameEnd::descriptor() {
  protobuf_public_5fbanker_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_public_5fbanker_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const SC_BankerGameEnd& SC_BankerGameEnd::default_instance() {
  protobuf_public_5fbanker_2eproto::InitDefaults();
  return *internal_default_instance();
}

SC_BankerGameEnd* SC_BankerGameEnd::New(::google::protobuf::Arena* arena) const {
  SC_BankerGameEnd* n = new SC_BankerGameEnd;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SC_BankerGameEnd::Clear() {
// @@protoc_insertion_point(message_clear_start:SC_BankerGameEnd)
  pb_player_.Clear();
  if (has_pb_table()) {
    GOOGLE_DCHECK(pb_table_ != NULL);
    pb_table_->::BankerTable::Clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool SC_BankerGameEnd::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:SC_BankerGameEnd)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .BankerGameEndPlayerInfo pb_player = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_pb_player()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .BankerTable pb_table = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_pb_table()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:SC_BankerGameEnd)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:SC_BankerGameEnd)
  return false;
#undef DO_
}

void SC_BankerGameEnd::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:SC_BankerGameEnd)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .BankerGameEndPlayerInfo pb_player = 1;
  for (unsigned int i = 0, n = this->pb_player_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->pb_player(i), output);
  }

  cached_has_bits = _has_bits_[0];
  // optional .BankerTable pb_table = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->pb_table_, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:SC_BankerGameEnd)
}

::google::protobuf::uint8* SC_BankerGameEnd::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:SC_BankerGameEnd)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .BankerGameEndPlayerInfo pb_player = 1;
  for (unsigned int i = 0, n = this->pb_player_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, this->pb_player(i), deterministic, target);
  }

  cached_has_bits = _has_bits_[0];
  // optional .BankerTable pb_table = 2;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->pb_table_, deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SC_BankerGameEnd)
  return target;
}

size_t SC_BankerGameEnd::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SC_BankerGameEnd)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // repeated .BankerGameEndPlayerInfo pb_player = 1;
  {
    unsigned int count = this->pb_player_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->pb_player(i));
    }
  }

  // optional .BankerTable pb_table = 2;
  if (has_pb_table()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->pb_table_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SC_BankerGameEnd::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:SC_BankerGameEnd)
  GOOGLE_DCHECK_NE(&from, this);
  const SC_BankerGameEnd* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SC_BankerGameEnd>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:SC_BankerGameEnd)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:SC_BankerGameEnd)
    MergeFrom(*source);
  }
}

void SC_BankerGameEnd::MergeFrom(const SC_BankerGameEnd& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:SC_BankerGameEnd)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  pb_player_.MergeFrom(from.pb_player_);
  if (from.has_pb_table()) {
    mutable_pb_table()->::BankerTable::MergeFrom(from.pb_table());
  }
}

void SC_BankerGameEnd::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:SC_BankerGameEnd)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SC_BankerGameEnd::CopyFrom(const SC_BankerGameEnd& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SC_BankerGameEnd)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SC_BankerGameEnd::IsInitialized() const {
  if (!::google::protobuf::internal::AllAreInitialized(this->pb_player())) return false;
  return true;
}

void SC_BankerGameEnd::Swap(SC_BankerGameEnd* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SC_BankerGameEnd::InternalSwap(SC_BankerGameEnd* other) {
  pb_player_.InternalSwap(&other->pb_player_);
  std::swap(pb_table_, other->pb_table_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SC_BankerGameEnd::GetMetadata() const {
  protobuf_public_5fbanker_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_public_5fbanker_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SC_BankerGameEnd

// repeated .BankerGameEndPlayerInfo pb_player = 1;
int SC_BankerGameEnd::pb_player_size() const {
  return pb_player_.size();
}
void SC_BankerGameEnd::clear_pb_player() {
  pb_player_.Clear();
}
const ::BankerGameEndPlayerInfo& SC_BankerGameEnd::pb_player(int index) const {
  // @@protoc_insertion_point(field_get:SC_BankerGameEnd.pb_player)
  return pb_player_.Get(index);
}
::BankerGameEndPlayerInfo* SC_BankerGameEnd::mutable_pb_player(int index) {
  // @@protoc_insertion_point(field_mutable:SC_BankerGameEnd.pb_player)
  return pb_player_.Mutable(index);
}
::BankerGameEndPlayerInfo* SC_BankerGameEnd::add_pb_player() {
  // @@protoc_insertion_point(field_add:SC_BankerGameEnd.pb_player)
  return pb_player_.Add();
}
::google::protobuf::RepeatedPtrField< ::BankerGameEndPlayerInfo >*
SC_BankerGameEnd::mutable_pb_player() {
  // @@protoc_insertion_point(field_mutable_list:SC_BankerGameEnd.pb_player)
  return &pb_player_;
}
const ::google::protobuf::RepeatedPtrField< ::BankerGameEndPlayerInfo >&
SC_BankerGameEnd::pb_player() const {
  // @@protoc_insertion_point(field_list:SC_BankerGameEnd.pb_player)
  return pb_player_;
}

// optional .BankerTable pb_table = 2;
bool SC_BankerGameEnd::has_pb_table() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void SC_BankerGameEnd::set_has_pb_table() {
  _has_bits_[0] |= 0x00000001u;
}
void SC_BankerGameEnd::clear_has_pb_table() {
  _has_bits_[0] &= ~0x00000001u;
}
void SC_BankerGameEnd::clear_pb_table() {
  if (pb_table_ != NULL) pb_table_->::BankerTable::Clear();
  clear_has_pb_table();
}
const ::BankerTable& SC_BankerGameEnd::pb_table() const {
  // @@protoc_insertion_point(field_get:SC_BankerGameEnd.pb_table)
  return pb_table_ != NULL ? *pb_table_
                         : *::BankerTable::internal_default_instance();
}
::BankerTable* SC_BankerGameEnd::mutable_pb_table() {
  set_has_pb_table();
  if (pb_table_ == NULL) {
    pb_table_ = new ::BankerTable;
  }
  // @@protoc_insertion_point(field_mutable:SC_BankerGameEnd.pb_table)
  return pb_table_;
}
::BankerTable* SC_BankerGameEnd::release_pb_table() {
  // @@protoc_insertion_point(field_release:SC_BankerGameEnd.pb_table)
  clear_has_pb_table();
  ::BankerTable* temp = pb_table_;
  pb_table_ = NULL;
  return temp;
}
void SC_BankerGameEnd::set_allocated_pb_table(::BankerTable* pb_table) {
  delete pb_table_;
  pb_table_ = pb_table;
  if (pb_table) {
    set_has_pb_table();
  } else {
    clear_has_pb_table();
  }
  // @@protoc_insertion_point(field_set_allocated:SC_BankerGameEnd.pb_table)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SC_BankerForceToLeave::kReasonFieldNumber;
const int SC_BankerForceToLeave::kNumFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SC_BankerForceToLeave::SC_BankerForceToLeave()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_public_5fbanker_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:SC_BankerForceToLeave)
}
SC_BankerForceToLeave::SC_BankerForceToLeave(const SC_BankerForceToLeave& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  reason_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_reason()) {
    reason_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.reason_);
  }
  num_ = from.num_;
  // @@protoc_insertion_point(copy_constructor:SC_BankerForceToLeave)
}

void SC_BankerForceToLeave::SharedCtor() {
  _cached_size_ = 0;
  reason_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  num_ = 0;
}

SC_BankerForceToLeave::~SC_BankerForceToLeave() {
  // @@protoc_insertion_point(destructor:SC_BankerForceToLeave)
  SharedDtor();
}

void SC_BankerForceToLeave::SharedDtor() {
  reason_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void SC_BankerForceToLeave::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SC_BankerForceToLeave::descriptor() {
  protobuf_public_5fbanker_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_public_5fbanker_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const SC_BankerForceToLeave& SC_BankerForceToLeave::default_instance() {
  protobuf_public_5fbanker_2eproto::InitDefaults();
  return *internal_default_instance();
}

SC_BankerForceToLeave* SC_BankerForceToLeave::New(::google::protobuf::Arena* arena) const {
  SC_BankerForceToLeave* n = new SC_BankerForceToLeave;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SC_BankerForceToLeave::Clear() {
// @@protoc_insertion_point(message_clear_start:SC_BankerForceToLeave)
  if (has_reason()) {
    GOOGLE_DCHECK(!reason_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
    (*reason_.UnsafeRawStringPointer())->clear();
  }
  num_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool SC_BankerForceToLeave::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:SC_BankerForceToLeave)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string reason = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_reason()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->reason().data(), this->reason().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "SC_BankerForceToLeave.reason");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 num = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_num();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &num_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:SC_BankerForceToLeave)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:SC_BankerForceToLeave)
  return false;
#undef DO_
}

void SC_BankerForceToLeave::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:SC_BankerForceToLeave)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string reason = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->reason().data(), this->reason().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "SC_BankerForceToLeave.reason");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->reason(), output);
  }

  // optional int32 num = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->num(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:SC_BankerForceToLeave)
}

::google::protobuf::uint8* SC_BankerForceToLeave::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:SC_BankerForceToLeave)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string reason = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->reason().data(), this->reason().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "SC_BankerForceToLeave.reason");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->reason(), target);
  }

  // optional int32 num = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->num(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SC_BankerForceToLeave)
  return target;
}

size_t SC_BankerForceToLeave::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SC_BankerForceToLeave)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 3u) {
    // optional string reason = 1;
    if (has_reason()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->reason());
    }

    // optional int32 num = 2;
    if (has_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->num());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SC_BankerForceToLeave::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:SC_BankerForceToLeave)
  GOOGLE_DCHECK_NE(&from, this);
  const SC_BankerForceToLeave* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SC_BankerForceToLeave>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:SC_BankerForceToLeave)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:SC_BankerForceToLeave)
    MergeFrom(*source);
  }
}

void SC_BankerForceToLeave::MergeFrom(const SC_BankerForceToLeave& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:SC_BankerForceToLeave)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_reason();
      reason_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.reason_);
    }
    if (cached_has_bits & 0x00000002u) {
      num_ = from.num_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void SC_BankerForceToLeave::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:SC_BankerForceToLeave)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SC_BankerForceToLeave::CopyFrom(const SC_BankerForceToLeave& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SC_BankerForceToLeave)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SC_BankerForceToLeave::IsInitialized() const {
  return true;
}

void SC_BankerForceToLeave::Swap(SC_BankerForceToLeave* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SC_BankerForceToLeave::InternalSwap(SC_BankerForceToLeave* other) {
  reason_.Swap(&other->reason_);
  std::swap(num_, other->num_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SC_BankerForceToLeave::GetMetadata() const {
  protobuf_public_5fbanker_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_public_5fbanker_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SC_BankerForceToLeave

// optional string reason = 1;
bool SC_BankerForceToLeave::has_reason() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void SC_BankerForceToLeave::set_has_reason() {
  _has_bits_[0] |= 0x00000001u;
}
void SC_BankerForceToLeave::clear_has_reason() {
  _has_bits_[0] &= ~0x00000001u;
}
void SC_BankerForceToLeave::clear_reason() {
  reason_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_reason();
}
const ::std::string& SC_BankerForceToLeave::reason() const {
  // @@protoc_insertion_point(field_get:SC_BankerForceToLeave.reason)
  return reason_.GetNoArena();
}
void SC_BankerForceToLeave::set_reason(const ::std::string& value) {
  set_has_reason();
  reason_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:SC_BankerForceToLeave.reason)
}
#if LANG_CXX11
void SC_BankerForceToLeave::set_reason(::std::string&& value) {
  set_has_reason();
  reason_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:SC_BankerForceToLeave.reason)
}
#endif
void SC_BankerForceToLeave::set_reason(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_reason();
  reason_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:SC_BankerForceToLeave.reason)
}
void SC_BankerForceToLeave::set_reason(const char* value, size_t size) {
  set_has_reason();
  reason_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:SC_BankerForceToLeave.reason)
}
::std::string* SC_BankerForceToLeave::mutable_reason() {
  set_has_reason();
  // @@protoc_insertion_point(field_mutable:SC_BankerForceToLeave.reason)
  return reason_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* SC_BankerForceToLeave::release_reason() {
  // @@protoc_insertion_point(field_release:SC_BankerForceToLeave.reason)
  clear_has_reason();
  return reason_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void SC_BankerForceToLeave::set_allocated_reason(::std::string* reason) {
  if (reason != NULL) {
    set_has_reason();
  } else {
    clear_has_reason();
  }
  reason_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), reason);
  // @@protoc_insertion_point(field_set_allocated:SC_BankerForceToLeave.reason)
}

// optional int32 num = 2;
bool SC_BankerForceToLeave::has_num() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void SC_BankerForceToLeave::set_has_num() {
  _has_bits_[0] |= 0x00000002u;
}
void SC_BankerForceToLeave::clear_has_num() {
  _has_bits_[0] &= ~0x00000002u;
}
void SC_BankerForceToLeave::clear_num() {
  num_ = 0;
  clear_has_num();
}
::google::protobuf::int32 SC_BankerForceToLeave::num() const {
  // @@protoc_insertion_point(field_get:SC_BankerForceToLeave.num)
  return num_;
}
void SC_BankerForceToLeave::set_num(::google::protobuf::int32 value) {
  set_has_num();
  num_ = value;
  // @@protoc_insertion_point(field_set:SC_BankerForceToLeave.num)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SC_BankerReconnectInfo::kPbTableFieldNumber;
const int SC_BankerReconnectInfo::kPbPlayerFieldNumber;
const int SC_BankerReconnectInfo::kCountdownFieldNumber;
const int SC_BankerReconnectInfo::kTotalTimeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SC_BankerReconnectInfo::SC_BankerReconnectInfo()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_public_5fbanker_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:SC_BankerReconnectInfo)
}
SC_BankerReconnectInfo::SC_BankerReconnectInfo(const SC_BankerReconnectInfo& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      pb_player_(from.pb_player_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_pb_table()) {
    pb_table_ = new ::BankerTable(*from.pb_table_);
  } else {
    pb_table_ = NULL;
  }
  ::memcpy(&countdown_, &from.countdown_,
    reinterpret_cast<char*>(&total_time_) -
    reinterpret_cast<char*>(&countdown_) + sizeof(total_time_));
  // @@protoc_insertion_point(copy_constructor:SC_BankerReconnectInfo)
}

void SC_BankerReconnectInfo::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&pb_table_, 0, reinterpret_cast<char*>(&total_time_) -
    reinterpret_cast<char*>(&pb_table_) + sizeof(total_time_));
}

SC_BankerReconnectInfo::~SC_BankerReconnectInfo() {
  // @@protoc_insertion_point(destructor:SC_BankerReconnectInfo)
  SharedDtor();
}

void SC_BankerReconnectInfo::SharedDtor() {
  if (this != internal_default_instance()) {
    delete pb_table_;
  }
}

void SC_BankerReconnectInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SC_BankerReconnectInfo::descriptor() {
  protobuf_public_5fbanker_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_public_5fbanker_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const SC_BankerReconnectInfo& SC_BankerReconnectInfo::default_instance() {
  protobuf_public_5fbanker_2eproto::InitDefaults();
  return *internal_default_instance();
}

SC_BankerReconnectInfo* SC_BankerReconnectInfo::New(::google::protobuf::Arena* arena) const {
  SC_BankerReconnectInfo* n = new SC_BankerReconnectInfo;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SC_BankerReconnectInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:SC_BankerReconnectInfo)
  pb_player_.Clear();
  if (has_pb_table()) {
    GOOGLE_DCHECK(pb_table_ != NULL);
    pb_table_->::BankerTable::Clear();
  }
  if (_has_bits_[0 / 32] & 6u) {
    ::memset(&countdown_, 0, reinterpret_cast<char*>(&total_time_) -
      reinterpret_cast<char*>(&countdown_) + sizeof(total_time_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool SC_BankerReconnectInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:SC_BankerReconnectInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .BankerTable pb_table = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_pb_table()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .BankerReconnectPlayerInfo pb_player = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_pb_player()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 countdown = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {
          set_has_countdown();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &countdown_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 total_time = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u)) {
          set_has_total_time();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &total_time_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:SC_BankerReconnectInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:SC_BankerReconnectInfo)
  return false;
#undef DO_
}

void SC_BankerReconnectInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:SC_BankerReconnectInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .BankerTable pb_table = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->pb_table_, output);
  }

  // repeated .BankerReconnectPlayerInfo pb_player = 2;
  for (unsigned int i = 0, n = this->pb_player_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->pb_player(i), output);
  }

  // optional int32 countdown = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->countdown(), output);
  }

  // optional int32 total_time = 4;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->total_time(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:SC_BankerReconnectInfo)
}

::google::protobuf::uint8* SC_BankerReconnectInfo::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:SC_BankerReconnectInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .BankerTable pb_table = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->pb_table_, deterministic, target);
  }

  // repeated .BankerReconnectPlayerInfo pb_player = 2;
  for (unsigned int i = 0, n = this->pb_player_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, this->pb_player(i), deterministic, target);
  }

  // optional int32 countdown = 3;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->countdown(), target);
  }

  // optional int32 total_time = 4;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->total_time(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SC_BankerReconnectInfo)
  return target;
}

size_t SC_BankerReconnectInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SC_BankerReconnectInfo)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // repeated .BankerReconnectPlayerInfo pb_player = 2;
  {
    unsigned int count = this->pb_player_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->pb_player(i));
    }
  }

  if (_has_bits_[0 / 32] & 7u) {
    // optional .BankerTable pb_table = 1;
    if (has_pb_table()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->pb_table_);
    }

    // optional int32 countdown = 3;
    if (has_countdown()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->countdown());
    }

    // optional int32 total_time = 4;
    if (has_total_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->total_time());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SC_BankerReconnectInfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:SC_BankerReconnectInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const SC_BankerReconnectInfo* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SC_BankerReconnectInfo>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:SC_BankerReconnectInfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:SC_BankerReconnectInfo)
    MergeFrom(*source);
  }
}

void SC_BankerReconnectInfo::MergeFrom(const SC_BankerReconnectInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:SC_BankerReconnectInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  pb_player_.MergeFrom(from.pb_player_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_pb_table()->::BankerTable::MergeFrom(from.pb_table());
    }
    if (cached_has_bits & 0x00000002u) {
      countdown_ = from.countdown_;
    }
    if (cached_has_bits & 0x00000004u) {
      total_time_ = from.total_time_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void SC_BankerReconnectInfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:SC_BankerReconnectInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SC_BankerReconnectInfo::CopyFrom(const SC_BankerReconnectInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SC_BankerReconnectInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SC_BankerReconnectInfo::IsInitialized() const {
  if (!::google::protobuf::internal::AllAreInitialized(this->pb_player())) return false;
  return true;
}

void SC_BankerReconnectInfo::Swap(SC_BankerReconnectInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SC_BankerReconnectInfo::InternalSwap(SC_BankerReconnectInfo* other) {
  pb_player_.InternalSwap(&other->pb_player_);
  std::swap(pb_table_, other->pb_table_);
  std::swap(countdown_, other->countdown_);
  std::swap(total_time_, other->total_time_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SC_BankerReconnectInfo::GetMetadata() const {
  protobuf_public_5fbanker_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_public_5fbanker_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SC_BankerReconnectInfo

// optional .BankerTable pb_table = 1;
bool SC_BankerReconnectInfo::has_pb_table() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void SC_BankerReconnectInfo::set_has_pb_table() {
  _has_bits_[0] |= 0x00000001u;
}
void SC_BankerReconnectInfo::clear_has_pb_table() {
  _has_bits_[0] &= ~0x00000001u;
}
void SC_BankerReconnectInfo::clear_pb_table() {
  if (pb_table_ != NULL) pb_table_->::BankerTable::Clear();
  clear_has_pb_table();
}
const ::BankerTable& SC_BankerReconnectInfo::pb_table() const {
  // @@protoc_insertion_point(field_get:SC_BankerReconnectInfo.pb_table)
  return pb_table_ != NULL ? *pb_table_
                         : *::BankerTable::internal_default_instance();
}
::BankerTable* SC_BankerReconnectInfo::mutable_pb_table() {
  set_has_pb_table();
  if (pb_table_ == NULL) {
    pb_table_ = new ::BankerTable;
  }
  // @@protoc_insertion_point(field_mutable:SC_BankerReconnectInfo.pb_table)
  return pb_table_;
}
::BankerTable* SC_BankerReconnectInfo::release_pb_table() {
  // @@protoc_insertion_point(field_release:SC_BankerReconnectInfo.pb_table)
  clear_has_pb_table();
  ::BankerTable* temp = pb_table_;
  pb_table_ = NULL;
  return temp;
}
void SC_BankerReconnectInfo::set_allocated_pb_table(::BankerTable* pb_table) {
  delete pb_table_;
  pb_table_ = pb_table;
  if (pb_table) {
    set_has_pb_table();
  } else {
    clear_has_pb_table();
  }
  // @@protoc_insertion_point(field_set_allocated:SC_BankerReconnectInfo.pb_table)
}

// repeated .BankerReconnectPlayerInfo pb_player = 2;
int SC_BankerReconnectInfo::pb_player_size() const {
  return pb_player_.size();
}
void SC_BankerReconnectInfo::clear_pb_player() {
  pb_player_.Clear();
}
const ::BankerReconnectPlayerInfo& SC_BankerReconnectInfo::pb_player(int index) const {
  // @@protoc_insertion_point(field_get:SC_BankerReconnectInfo.pb_player)
  return pb_player_.Get(index);
}
::BankerReconnectPlayerInfo* SC_BankerReconnectInfo::mutable_pb_player(int index) {
  // @@protoc_insertion_point(field_mutable:SC_BankerReconnectInfo.pb_player)
  return pb_player_.Mutable(index);
}
::BankerReconnectPlayerInfo* SC_BankerReconnectInfo::add_pb_player() {
  // @@protoc_insertion_point(field_add:SC_BankerReconnectInfo.pb_player)
  return pb_player_.Add();
}
::google::protobuf::RepeatedPtrField< ::BankerReconnectPlayerInfo >*
SC_BankerReconnectInfo::mutable_pb_player() {
  // @@protoc_insertion_point(field_mutable_list:SC_BankerReconnectInfo.pb_player)
  return &pb_player_;
}
const ::google::protobuf::RepeatedPtrField< ::BankerReconnectPlayerInfo >&
SC_BankerReconnectInfo::pb_player() const {
  // @@protoc_insertion_point(field_list:SC_BankerReconnectInfo.pb_player)
  return pb_player_;
}

// optional int32 countdown = 3;
bool SC_BankerReconnectInfo::has_countdown() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void SC_BankerReconnectInfo::set_has_countdown() {
  _has_bits_[0] |= 0x00000002u;
}
void SC_BankerReconnectInfo::clear_has_countdown() {
  _has_bits_[0] &= ~0x00000002u;
}
void SC_BankerReconnectInfo::clear_countdown() {
  countdown_ = 0;
  clear_has_countdown();
}
::google::protobuf::int32 SC_BankerReconnectInfo::countdown() const {
  // @@protoc_insertion_point(field_get:SC_BankerReconnectInfo.countdown)
  return countdown_;
}
void SC_BankerReconnectInfo::set_countdown(::google::protobuf::int32 value) {
  set_has_countdown();
  countdown_ = value;
  // @@protoc_insertion_point(field_set:SC_BankerReconnectInfo.countdown)
}

// optional int32 total_time = 4;
bool SC_BankerReconnectInfo::has_total_time() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void SC_BankerReconnectInfo::set_has_total_time() {
  _has_bits_[0] |= 0x00000004u;
}
void SC_BankerReconnectInfo::clear_has_total_time() {
  _has_bits_[0] &= ~0x00000004u;
}
void SC_BankerReconnectInfo::clear_total_time() {
  total_time_ = 0;
  clear_has_total_time();
}
::google::protobuf::int32 SC_BankerReconnectInfo::total_time() const {
  // @@protoc_insertion_point(field_get:SC_BankerReconnectInfo.total_time)
  return total_time_;
}
void SC_BankerReconnectInfo::set_total_time(::google::protobuf::int32 value) {
  set_has_total_time();
  total_time_ = value;
  // @@protoc_insertion_point(field_set:SC_BankerReconnectInfo.total_time)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SC_BankerPlayerSitDown::kPbInfoFieldNumber;
const int SC_BankerPlayerSitDown::kStateFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SC_BankerPlayerSitDown::SC_BankerPlayerSitDown()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_public_5fbanker_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:SC_BankerPlayerSitDown)
}
SC_BankerPlayerSitDown::SC_BankerPlayerSitDown(const SC_BankerPlayerSitDown& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_pb_info()) {
    pb_info_ = new ::BankerPlayerInfo(*from.pb_info_);
  } else {
    pb_info_ = NULL;
  }
  state_ = from.state_;
  // @@protoc_insertion_point(copy_constructor:SC_BankerPlayerSitDown)
}

void SC_BankerPlayerSitDown::SharedCtor() {
  _cached_size_ = 0;
  pb_info_ = NULL;
  state_ = -1;
}

SC_BankerPlayerSitDown::~SC_BankerPlayerSitDown() {
  // @@protoc_insertion_point(destructor:SC_BankerPlayerSitDown)
  SharedDtor();
}

void SC_BankerPlayerSitDown::SharedDtor() {
  if (this != internal_default_instance()) {
    delete pb_info_;
  }
}

void SC_BankerPlayerSitDown::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SC_BankerPlayerSitDown::descriptor() {
  protobuf_public_5fbanker_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_public_5fbanker_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const SC_BankerPlayerSitDown& SC_BankerPlayerSitDown::default_instance() {
  protobuf_public_5fbanker_2eproto::InitDefaults();
  return *internal_default_instance();
}

SC_BankerPlayerSitDown* SC_BankerPlayerSitDown::New(::google::protobuf::Arena* arena) const {
  SC_BankerPlayerSitDown* n = new SC_BankerPlayerSitDown;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SC_BankerPlayerSitDown::Clear() {
// @@protoc_insertion_point(message_clear_start:SC_BankerPlayerSitDown)
  if (_has_bits_[0 / 32] & 3u) {
    if (has_pb_info()) {
      GOOGLE_DCHECK(pb_info_ != NULL);
      pb_info_->::BankerPlayerInfo::Clear();
    }
    state_ = -1;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool SC_BankerPlayerSitDown::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:SC_BankerPlayerSitDown)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .BankerPlayerInfo pb_info = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_pb_info()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 state = 2 [default = -1];
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_state();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &state_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:SC_BankerPlayerSitDown)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:SC_BankerPlayerSitDown)
  return false;
#undef DO_
}

void SC_BankerPlayerSitDown::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:SC_BankerPlayerSitDown)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .BankerPlayerInfo pb_info = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->pb_info_, output);
  }

  // optional int32 state = 2 [default = -1];
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->state(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:SC_BankerPlayerSitDown)
}

::google::protobuf::uint8* SC_BankerPlayerSitDown::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:SC_BankerPlayerSitDown)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .BankerPlayerInfo pb_info = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->pb_info_, deterministic, target);
  }

  // optional int32 state = 2 [default = -1];
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->state(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SC_BankerPlayerSitDown)
  return target;
}

size_t SC_BankerPlayerSitDown::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SC_BankerPlayerSitDown)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 3u) {
    // optional .BankerPlayerInfo pb_info = 1;
    if (has_pb_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->pb_info_);
    }

    // optional int32 state = 2 [default = -1];
    if (has_state()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->state());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SC_BankerPlayerSitDown::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:SC_BankerPlayerSitDown)
  GOOGLE_DCHECK_NE(&from, this);
  const SC_BankerPlayerSitDown* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SC_BankerPlayerSitDown>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:SC_BankerPlayerSitDown)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:SC_BankerPlayerSitDown)
    MergeFrom(*source);
  }
}

void SC_BankerPlayerSitDown::MergeFrom(const SC_BankerPlayerSitDown& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:SC_BankerPlayerSitDown)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_pb_info()->::BankerPlayerInfo::MergeFrom(from.pb_info());
    }
    if (cached_has_bits & 0x00000002u) {
      state_ = from.state_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void SC_BankerPlayerSitDown::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:SC_BankerPlayerSitDown)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SC_BankerPlayerSitDown::CopyFrom(const SC_BankerPlayerSitDown& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SC_BankerPlayerSitDown)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SC_BankerPlayerSitDown::IsInitialized() const {
  if (has_pb_info()) {
    if (!this->pb_info_->IsInitialized()) return false;
  }
  return true;
}

void SC_BankerPlayerSitDown::Swap(SC_BankerPlayerSitDown* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SC_BankerPlayerSitDown::InternalSwap(SC_BankerPlayerSitDown* other) {
  std::swap(pb_info_, other->pb_info_);
  std::swap(state_, other->state_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SC_BankerPlayerSitDown::GetMetadata() const {
  protobuf_public_5fbanker_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_public_5fbanker_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SC_BankerPlayerSitDown

// optional .BankerPlayerInfo pb_info = 1;
bool SC_BankerPlayerSitDown::has_pb_info() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void SC_BankerPlayerSitDown::set_has_pb_info() {
  _has_bits_[0] |= 0x00000001u;
}
void SC_BankerPlayerSitDown::clear_has_pb_info() {
  _has_bits_[0] &= ~0x00000001u;
}
void SC_BankerPlayerSitDown::clear_pb_info() {
  if (pb_info_ != NULL) pb_info_->::BankerPlayerInfo::Clear();
  clear_has_pb_info();
}
const ::BankerPlayerInfo& SC_BankerPlayerSitDown::pb_info() const {
  // @@protoc_insertion_point(field_get:SC_BankerPlayerSitDown.pb_info)
  return pb_info_ != NULL ? *pb_info_
                         : *::BankerPlayerInfo::internal_default_instance();
}
::BankerPlayerInfo* SC_BankerPlayerSitDown::mutable_pb_info() {
  set_has_pb_info();
  if (pb_info_ == NULL) {
    pb_info_ = new ::BankerPlayerInfo;
  }
  // @@protoc_insertion_point(field_mutable:SC_BankerPlayerSitDown.pb_info)
  return pb_info_;
}
::BankerPlayerInfo* SC_BankerPlayerSitDown::release_pb_info() {
  // @@protoc_insertion_point(field_release:SC_BankerPlayerSitDown.pb_info)
  clear_has_pb_info();
  ::BankerPlayerInfo* temp = pb_info_;
  pb_info_ = NULL;
  return temp;
}
void SC_BankerPlayerSitDown::set_allocated_pb_info(::BankerPlayerInfo* pb_info) {
  delete pb_info_;
  pb_info_ = pb_info;
  if (pb_info) {
    set_has_pb_info();
  } else {
    clear_has_pb_info();
  }
  // @@protoc_insertion_point(field_set_allocated:SC_BankerPlayerSitDown.pb_info)
}

// optional int32 state = 2 [default = -1];
bool SC_BankerPlayerSitDown::has_state() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void SC_BankerPlayerSitDown::set_has_state() {
  _has_bits_[0] |= 0x00000002u;
}
void SC_BankerPlayerSitDown::clear_has_state() {
  _has_bits_[0] &= ~0x00000002u;
}
void SC_BankerPlayerSitDown::clear_state() {
  state_ = -1;
  clear_has_state();
}
::google::protobuf::int32 SC_BankerPlayerSitDown::state() const {
  // @@protoc_insertion_point(field_get:SC_BankerPlayerSitDown.state)
  return state_;
}
void SC_BankerPlayerSitDown::set_state(::google::protobuf::int32 value) {
  set_has_state();
  state_ = value;
  // @@protoc_insertion_point(field_set:SC_BankerPlayerSitDown.state)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SC_BankerStartVote::kChairIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SC_BankerStartVote::SC_BankerStartVote()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_public_5fbanker_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:SC_BankerStartVote)
}
SC_BankerStartVote::SC_BankerStartVote(const SC_BankerStartVote& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  chair_id_ = from.chair_id_;
  // @@protoc_insertion_point(copy_constructor:SC_BankerStartVote)
}

void SC_BankerStartVote::SharedCtor() {
  _cached_size_ = 0;
  chair_id_ = 0;
}

SC_BankerStartVote::~SC_BankerStartVote() {
  // @@protoc_insertion_point(destructor:SC_BankerStartVote)
  SharedDtor();
}

void SC_BankerStartVote::SharedDtor() {
}

void SC_BankerStartVote::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SC_BankerStartVote::descriptor() {
  protobuf_public_5fbanker_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_public_5fbanker_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const SC_BankerStartVote& SC_BankerStartVote::default_instance() {
  protobuf_public_5fbanker_2eproto::InitDefaults();
  return *internal_default_instance();
}

SC_BankerStartVote* SC_BankerStartVote::New(::google::protobuf::Arena* arena) const {
  SC_BankerStartVote* n = new SC_BankerStartVote;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SC_BankerStartVote::Clear() {
// @@protoc_insertion_point(message_clear_start:SC_BankerStartVote)
  chair_id_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool SC_BankerStartVote::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:SC_BankerStartVote)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 chair_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_chair_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &chair_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:SC_BankerStartVote)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:SC_BankerStartVote)
  return false;
#undef DO_
}

void SC_BankerStartVote::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:SC_BankerStartVote)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 chair_id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->chair_id(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:SC_BankerStartVote)
}

::google::protobuf::uint8* SC_BankerStartVote::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:SC_BankerStartVote)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 chair_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->chair_id(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SC_BankerStartVote)
  return target;
}

size_t SC_BankerStartVote::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SC_BankerStartVote)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // optional int32 chair_id = 1;
  if (has_chair_id()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->chair_id());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SC_BankerStartVote::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:SC_BankerStartVote)
  GOOGLE_DCHECK_NE(&from, this);
  const SC_BankerStartVote* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SC_BankerStartVote>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:SC_BankerStartVote)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:SC_BankerStartVote)
    MergeFrom(*source);
  }
}

void SC_BankerStartVote::MergeFrom(const SC_BankerStartVote& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:SC_BankerStartVote)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_chair_id()) {
    set_chair_id(from.chair_id());
  }
}

void SC_BankerStartVote::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:SC_BankerStartVote)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SC_BankerStartVote::CopyFrom(const SC_BankerStartVote& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SC_BankerStartVote)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SC_BankerStartVote::IsInitialized() const {
  return true;
}

void SC_BankerStartVote::Swap(SC_BankerStartVote* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SC_BankerStartVote::InternalSwap(SC_BankerStartVote* other) {
  std::swap(chair_id_, other->chair_id_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SC_BankerStartVote::GetMetadata() const {
  protobuf_public_5fbanker_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_public_5fbanker_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SC_BankerStartVote

// optional int32 chair_id = 1;
bool SC_BankerStartVote::has_chair_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void SC_BankerStartVote::set_has_chair_id() {
  _has_bits_[0] |= 0x00000001u;
}
void SC_BankerStartVote::clear_has_chair_id() {
  _has_bits_[0] &= ~0x00000001u;
}
void SC_BankerStartVote::clear_chair_id() {
  chair_id_ = 0;
  clear_has_chair_id();
}
::google::protobuf::int32 SC_BankerStartVote::chair_id() const {
  // @@protoc_insertion_point(field_get:SC_BankerStartVote.chair_id)
  return chair_id_;
}
void SC_BankerStartVote::set_chair_id(::google::protobuf::int32 value) {
  set_has_chair_id();
  chair_id_ = value;
  // @@protoc_insertion_point(field_set:SC_BankerStartVote.chair_id)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SC_BankerVoteResult::kChairIdFieldNumber;
const int SC_BankerVoteResult::kAgreeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SC_BankerVoteResult::SC_BankerVoteResult()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_public_5fbanker_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:SC_BankerVoteResult)
}
SC_BankerVoteResult::SC_BankerVoteResult(const SC_BankerVoteResult& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&chair_id_, &from.chair_id_,
    reinterpret_cast<char*>(&agree_) -
    reinterpret_cast<char*>(&chair_id_) + sizeof(agree_));
  // @@protoc_insertion_point(copy_constructor:SC_BankerVoteResult)
}

void SC_BankerVoteResult::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&chair_id_, 0, reinterpret_cast<char*>(&agree_) -
    reinterpret_cast<char*>(&chair_id_) + sizeof(agree_));
}

SC_BankerVoteResult::~SC_BankerVoteResult() {
  // @@protoc_insertion_point(destructor:SC_BankerVoteResult)
  SharedDtor();
}

void SC_BankerVoteResult::SharedDtor() {
}

void SC_BankerVoteResult::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SC_BankerVoteResult::descriptor() {
  protobuf_public_5fbanker_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_public_5fbanker_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const SC_BankerVoteResult& SC_BankerVoteResult::default_instance() {
  protobuf_public_5fbanker_2eproto::InitDefaults();
  return *internal_default_instance();
}

SC_BankerVoteResult* SC_BankerVoteResult::New(::google::protobuf::Arena* arena) const {
  SC_BankerVoteResult* n = new SC_BankerVoteResult;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SC_BankerVoteResult::Clear() {
// @@protoc_insertion_point(message_clear_start:SC_BankerVoteResult)
  if (_has_bits_[0 / 32] & 3u) {
    ::memset(&chair_id_, 0, reinterpret_cast<char*>(&agree_) -
      reinterpret_cast<char*>(&chair_id_) + sizeof(agree_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool SC_BankerVoteResult::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:SC_BankerVoteResult)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 chair_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_chair_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &chair_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool agree = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_agree();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &agree_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:SC_BankerVoteResult)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:SC_BankerVoteResult)
  return false;
#undef DO_
}

void SC_BankerVoteResult::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:SC_BankerVoteResult)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 chair_id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->chair_id(), output);
  }

  // optional bool agree = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->agree(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:SC_BankerVoteResult)
}

::google::protobuf::uint8* SC_BankerVoteResult::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:SC_BankerVoteResult)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 chair_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->chair_id(), target);
  }

  // optional bool agree = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->agree(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SC_BankerVoteResult)
  return target;
}

size_t SC_BankerVoteResult::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SC_BankerVoteResult)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 3u) {
    // optional int32 chair_id = 1;
    if (has_chair_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->chair_id());
    }

    // optional bool agree = 2;
    if (has_agree()) {
      total_size += 1 + 1;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SC_BankerVoteResult::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:SC_BankerVoteResult)
  GOOGLE_DCHECK_NE(&from, this);
  const SC_BankerVoteResult* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SC_BankerVoteResult>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:SC_BankerVoteResult)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:SC_BankerVoteResult)
    MergeFrom(*source);
  }
}

void SC_BankerVoteResult::MergeFrom(const SC_BankerVoteResult& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:SC_BankerVoteResult)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      chair_id_ = from.chair_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      agree_ = from.agree_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void SC_BankerVoteResult::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:SC_BankerVoteResult)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SC_BankerVoteResult::CopyFrom(const SC_BankerVoteResult& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SC_BankerVoteResult)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SC_BankerVoteResult::IsInitialized() const {
  return true;
}

void SC_BankerVoteResult::Swap(SC_BankerVoteResult* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SC_BankerVoteResult::InternalSwap(SC_BankerVoteResult* other) {
  std::swap(chair_id_, other->chair_id_);
  std::swap(agree_, other->agree_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SC_BankerVoteResult::GetMetadata() const {
  protobuf_public_5fbanker_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_public_5fbanker_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SC_BankerVoteResult

// optional int32 chair_id = 1;
bool SC_BankerVoteResult::has_chair_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void SC_BankerVoteResult::set_has_chair_id() {
  _has_bits_[0] |= 0x00000001u;
}
void SC_BankerVoteResult::clear_has_chair_id() {
  _has_bits_[0] &= ~0x00000001u;
}
void SC_BankerVoteResult::clear_chair_id() {
  chair_id_ = 0;
  clear_has_chair_id();
}
::google::protobuf::int32 SC_BankerVoteResult::chair_id() const {
  // @@protoc_insertion_point(field_get:SC_BankerVoteResult.chair_id)
  return chair_id_;
}
void SC_BankerVoteResult::set_chair_id(::google::protobuf::int32 value) {
  set_has_chair_id();
  chair_id_ = value;
  // @@protoc_insertion_point(field_set:SC_BankerVoteResult.chair_id)
}

// optional bool agree = 2;
bool SC_BankerVoteResult::has_agree() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void SC_BankerVoteResult::set_has_agree() {
  _has_bits_[0] |= 0x00000002u;
}
void SC_BankerVoteResult::clear_has_agree() {
  _has_bits_[0] &= ~0x00000002u;
}
void SC_BankerVoteResult::clear_agree() {
  agree_ = false;
  clear_has_agree();
}
bool SC_BankerVoteResult::agree() const {
  // @@protoc_insertion_point(field_get:SC_BankerVoteResult.agree)
  return agree_;
}
void SC_BankerVoteResult::set_agree(bool value) {
  set_has_agree();
  agree_ = value;
  // @@protoc_insertion_point(field_set:SC_BankerVoteResult.agree)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SC_ReEanter_Next_Game::kChairIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SC_ReEanter_Next_Game::SC_ReEanter_Next_Game()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_public_5fbanker_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:SC_ReEanter_Next_Game)
}
SC_ReEanter_Next_Game::SC_ReEanter_Next_Game(const SC_ReEanter_Next_Game& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  chair_id_ = from.chair_id_;
  // @@protoc_insertion_point(copy_constructor:SC_ReEanter_Next_Game)
}

void SC_ReEanter_Next_Game::SharedCtor() {
  _cached_size_ = 0;
  chair_id_ = -1;
}

SC_ReEanter_Next_Game::~SC_ReEanter_Next_Game() {
  // @@protoc_insertion_point(destructor:SC_ReEanter_Next_Game)
  SharedDtor();
}

void SC_ReEanter_Next_Game::SharedDtor() {
}

void SC_ReEanter_Next_Game::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SC_ReEanter_Next_Game::descriptor() {
  protobuf_public_5fbanker_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_public_5fbanker_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const SC_ReEanter_Next_Game& SC_ReEanter_Next_Game::default_instance() {
  protobuf_public_5fbanker_2eproto::InitDefaults();
  return *internal_default_instance();
}

SC_ReEanter_Next_Game* SC_ReEanter_Next_Game::New(::google::protobuf::Arena* arena) const {
  SC_ReEanter_Next_Game* n = new SC_ReEanter_Next_Game;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SC_ReEanter_Next_Game::Clear() {
// @@protoc_insertion_point(message_clear_start:SC_ReEanter_Next_Game)
  chair_id_ = -1;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool SC_ReEanter_Next_Game::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:SC_ReEanter_Next_Game)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 chair_id = 1 [default = -1];
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_chair_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &chair_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:SC_ReEanter_Next_Game)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:SC_ReEanter_Next_Game)
  return false;
#undef DO_
}

void SC_ReEanter_Next_Game::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:SC_ReEanter_Next_Game)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 chair_id = 1 [default = -1];
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->chair_id(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:SC_ReEanter_Next_Game)
}

::google::protobuf::uint8* SC_ReEanter_Next_Game::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:SC_ReEanter_Next_Game)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 chair_id = 1 [default = -1];
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->chair_id(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SC_ReEanter_Next_Game)
  return target;
}

size_t SC_ReEanter_Next_Game::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SC_ReEanter_Next_Game)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // optional int32 chair_id = 1 [default = -1];
  if (has_chair_id()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->chair_id());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SC_ReEanter_Next_Game::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:SC_ReEanter_Next_Game)
  GOOGLE_DCHECK_NE(&from, this);
  const SC_ReEanter_Next_Game* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SC_ReEanter_Next_Game>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:SC_ReEanter_Next_Game)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:SC_ReEanter_Next_Game)
    MergeFrom(*source);
  }
}

void SC_ReEanter_Next_Game::MergeFrom(const SC_ReEanter_Next_Game& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:SC_ReEanter_Next_Game)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_chair_id()) {
    set_chair_id(from.chair_id());
  }
}

void SC_ReEanter_Next_Game::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:SC_ReEanter_Next_Game)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SC_ReEanter_Next_Game::CopyFrom(const SC_ReEanter_Next_Game& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SC_ReEanter_Next_Game)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SC_ReEanter_Next_Game::IsInitialized() const {
  return true;
}

void SC_ReEanter_Next_Game::Swap(SC_ReEanter_Next_Game* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SC_ReEanter_Next_Game::InternalSwap(SC_ReEanter_Next_Game* other) {
  std::swap(chair_id_, other->chair_id_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SC_ReEanter_Next_Game::GetMetadata() const {
  protobuf_public_5fbanker_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_public_5fbanker_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SC_ReEanter_Next_Game

// optional int32 chair_id = 1 [default = -1];
bool SC_ReEanter_Next_Game::has_chair_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void SC_ReEanter_Next_Game::set_has_chair_id() {
  _has_bits_[0] |= 0x00000001u;
}
void SC_ReEanter_Next_Game::clear_has_chair_id() {
  _has_bits_[0] &= ~0x00000001u;
}
void SC_ReEanter_Next_Game::clear_chair_id() {
  chair_id_ = -1;
  clear_has_chair_id();
}
::google::protobuf::int32 SC_ReEanter_Next_Game::chair_id() const {
  // @@protoc_insertion_point(field_get:SC_ReEanter_Next_Game.chair_id)
  return chair_id_;
}
void SC_ReEanter_Next_Game::set_chair_id(::google::protobuf::int32 value) {
  set_has_chair_id();
  chair_id_ = value;
  // @@protoc_insertion_point(field_set:SC_ReEanter_Next_Game.chair_id)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SC_Next_Game_Time::kTimeNumFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SC_Next_Game_Time::SC_Next_Game_Time()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_public_5fbanker_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:SC_Next_Game_Time)
}
SC_Next_Game_Time::SC_Next_Game_Time(const SC_Next_Game_Time& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  time_num_ = from.time_num_;
  // @@protoc_insertion_point(copy_constructor:SC_Next_Game_Time)
}

void SC_Next_Game_Time::SharedCtor() {
  _cached_size_ = 0;
  time_num_ = -1;
}

SC_Next_Game_Time::~SC_Next_Game_Time() {
  // @@protoc_insertion_point(destructor:SC_Next_Game_Time)
  SharedDtor();
}

void SC_Next_Game_Time::SharedDtor() {
}

void SC_Next_Game_Time::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SC_Next_Game_Time::descriptor() {
  protobuf_public_5fbanker_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_public_5fbanker_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const SC_Next_Game_Time& SC_Next_Game_Time::default_instance() {
  protobuf_public_5fbanker_2eproto::InitDefaults();
  return *internal_default_instance();
}

SC_Next_Game_Time* SC_Next_Game_Time::New(::google::protobuf::Arena* arena) const {
  SC_Next_Game_Time* n = new SC_Next_Game_Time;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SC_Next_Game_Time::Clear() {
// @@protoc_insertion_point(message_clear_start:SC_Next_Game_Time)
  time_num_ = -1;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool SC_Next_Game_Time::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:SC_Next_Game_Time)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 time_num = 1 [default = -1];
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_time_num();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &time_num_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:SC_Next_Game_Time)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:SC_Next_Game_Time)
  return false;
#undef DO_
}

void SC_Next_Game_Time::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:SC_Next_Game_Time)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 time_num = 1 [default = -1];
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->time_num(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:SC_Next_Game_Time)
}

::google::protobuf::uint8* SC_Next_Game_Time::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:SC_Next_Game_Time)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 time_num = 1 [default = -1];
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->time_num(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SC_Next_Game_Time)
  return target;
}

size_t SC_Next_Game_Time::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SC_Next_Game_Time)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // optional int32 time_num = 1 [default = -1];
  if (has_time_num()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->time_num());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SC_Next_Game_Time::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:SC_Next_Game_Time)
  GOOGLE_DCHECK_NE(&from, this);
  const SC_Next_Game_Time* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SC_Next_Game_Time>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:SC_Next_Game_Time)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:SC_Next_Game_Time)
    MergeFrom(*source);
  }
}

void SC_Next_Game_Time::MergeFrom(const SC_Next_Game_Time& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:SC_Next_Game_Time)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_time_num()) {
    set_time_num(from.time_num());
  }
}

void SC_Next_Game_Time::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:SC_Next_Game_Time)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SC_Next_Game_Time::CopyFrom(const SC_Next_Game_Time& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SC_Next_Game_Time)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SC_Next_Game_Time::IsInitialized() const {
  return true;
}

void SC_Next_Game_Time::Swap(SC_Next_Game_Time* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SC_Next_Game_Time::InternalSwap(SC_Next_Game_Time* other) {
  std::swap(time_num_, other->time_num_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SC_Next_Game_Time::GetMetadata() const {
  protobuf_public_5fbanker_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_public_5fbanker_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SC_Next_Game_Time

// optional int32 time_num = 1 [default = -1];
bool SC_Next_Game_Time::has_time_num() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void SC_Next_Game_Time::set_has_time_num() {
  _has_bits_[0] |= 0x00000001u;
}
void SC_Next_Game_Time::clear_has_time_num() {
  _has_bits_[0] &= ~0x00000001u;
}
void SC_Next_Game_Time::clear_time_num() {
  time_num_ = -1;
  clear_has_time_num();
}
::google::protobuf::int32 SC_Next_Game_Time::time_num() const {
  // @@protoc_insertion_point(field_get:SC_Next_Game_Time.time_num)
  return time_num_;
}
void SC_Next_Game_Time::set_time_num(::google::protobuf::int32 value) {
  set_has_time_num();
  time_num_ = value;
  // @@protoc_insertion_point(field_set:SC_Next_Game_Time.time_num)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CS_BankerEnter::kChairFieldNumber;
const int CS_BankerEnter::kChair1FieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CS_BankerEnter::CS_BankerEnter()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_public_5fbanker_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:CS_BankerEnter)
}
CS_BankerEnter::CS_BankerEnter(const CS_BankerEnter& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&chair_, &from.chair_,
    reinterpret_cast<char*>(&chair1_) -
    reinterpret_cast<char*>(&chair_) + sizeof(chair1_));
  // @@protoc_insertion_point(copy_constructor:CS_BankerEnter)
}

void CS_BankerEnter::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&chair_, 0, reinterpret_cast<char*>(&chair1_) -
    reinterpret_cast<char*>(&chair_) + sizeof(chair1_));
}

CS_BankerEnter::~CS_BankerEnter() {
  // @@protoc_insertion_point(destructor:CS_BankerEnter)
  SharedDtor();
}

void CS_BankerEnter::SharedDtor() {
}

void CS_BankerEnter::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CS_BankerEnter::descriptor() {
  protobuf_public_5fbanker_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_public_5fbanker_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CS_BankerEnter& CS_BankerEnter::default_instance() {
  protobuf_public_5fbanker_2eproto::InitDefaults();
  return *internal_default_instance();
}

CS_BankerEnter* CS_BankerEnter::New(::google::protobuf::Arena* arena) const {
  CS_BankerEnter* n = new CS_BankerEnter;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CS_BankerEnter::Clear() {
// @@protoc_insertion_point(message_clear_start:CS_BankerEnter)
  if (_has_bits_[0 / 32] & 3u) {
    ::memset(&chair_, 0, reinterpret_cast<char*>(&chair1_) -
      reinterpret_cast<char*>(&chair_) + sizeof(chair1_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CS_BankerEnter::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CS_BankerEnter)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 chair = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_chair();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &chair_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 chair1 = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_chair1();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &chair1_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CS_BankerEnter)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CS_BankerEnter)
  return false;
#undef DO_
}

void CS_BankerEnter::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CS_BankerEnter)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 chair = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->chair(), output);
  }

  // optional int32 chair1 = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->chair1(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CS_BankerEnter)
}

::google::protobuf::uint8* CS_BankerEnter::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CS_BankerEnter)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 chair = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->chair(), target);
  }

  // optional int32 chair1 = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->chair1(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CS_BankerEnter)
  return target;
}

size_t CS_BankerEnter::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CS_BankerEnter)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 3u) {
    // optional int32 chair = 1;
    if (has_chair()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->chair());
    }

    // optional int32 chair1 = 2;
    if (has_chair1()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->chair1());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CS_BankerEnter::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CS_BankerEnter)
  GOOGLE_DCHECK_NE(&from, this);
  const CS_BankerEnter* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CS_BankerEnter>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CS_BankerEnter)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CS_BankerEnter)
    MergeFrom(*source);
  }
}

void CS_BankerEnter::MergeFrom(const CS_BankerEnter& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CS_BankerEnter)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      chair_ = from.chair_;
    }
    if (cached_has_bits & 0x00000002u) {
      chair1_ = from.chair1_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CS_BankerEnter::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CS_BankerEnter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CS_BankerEnter::CopyFrom(const CS_BankerEnter& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CS_BankerEnter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CS_BankerEnter::IsInitialized() const {
  return true;
}

void CS_BankerEnter::Swap(CS_BankerEnter* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CS_BankerEnter::InternalSwap(CS_BankerEnter* other) {
  std::swap(chair_, other->chair_);
  std::swap(chair1_, other->chair1_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CS_BankerEnter::GetMetadata() const {
  protobuf_public_5fbanker_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_public_5fbanker_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CS_BankerEnter

// optional int32 chair = 1;
bool CS_BankerEnter::has_chair() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CS_BankerEnter::set_has_chair() {
  _has_bits_[0] |= 0x00000001u;
}
void CS_BankerEnter::clear_has_chair() {
  _has_bits_[0] &= ~0x00000001u;
}
void CS_BankerEnter::clear_chair() {
  chair_ = 0;
  clear_has_chair();
}
::google::protobuf::int32 CS_BankerEnter::chair() const {
  // @@protoc_insertion_point(field_get:CS_BankerEnter.chair)
  return chair_;
}
void CS_BankerEnter::set_chair(::google::protobuf::int32 value) {
  set_has_chair();
  chair_ = value;
  // @@protoc_insertion_point(field_set:CS_BankerEnter.chair)
}

// optional int32 chair1 = 2;
bool CS_BankerEnter::has_chair1() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CS_BankerEnter::set_has_chair1() {
  _has_bits_[0] |= 0x00000002u;
}
void CS_BankerEnter::clear_has_chair1() {
  _has_bits_[0] &= ~0x00000002u;
}
void CS_BankerEnter::clear_chair1() {
  chair1_ = 0;
  clear_has_chair1();
}
::google::protobuf::int32 CS_BankerEnter::chair1() const {
  // @@protoc_insertion_point(field_get:CS_BankerEnter.chair1)
  return chair1_;
}
void CS_BankerEnter::set_chair1(::google::protobuf::int32 value) {
  set_has_chair1();
  chair1_ = value;
  // @@protoc_insertion_point(field_set:CS_BankerEnter.chair1)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CS_BankerLeave::CS_BankerLeave()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_public_5fbanker_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:CS_BankerLeave)
}
CS_BankerLeave::CS_BankerLeave(const CS_BankerLeave& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:CS_BankerLeave)
}

void CS_BankerLeave::SharedCtor() {
  _cached_size_ = 0;
}

CS_BankerLeave::~CS_BankerLeave() {
  // @@protoc_insertion_point(destructor:CS_BankerLeave)
  SharedDtor();
}

void CS_BankerLeave::SharedDtor() {
}

void CS_BankerLeave::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CS_BankerLeave::descriptor() {
  protobuf_public_5fbanker_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_public_5fbanker_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CS_BankerLeave& CS_BankerLeave::default_instance() {
  protobuf_public_5fbanker_2eproto::InitDefaults();
  return *internal_default_instance();
}

CS_BankerLeave* CS_BankerLeave::New(::google::protobuf::Arena* arena) const {
  CS_BankerLeave* n = new CS_BankerLeave;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CS_BankerLeave::Clear() {
// @@protoc_insertion_point(message_clear_start:CS_BankerLeave)
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CS_BankerLeave::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CS_BankerLeave)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:CS_BankerLeave)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CS_BankerLeave)
  return false;
#undef DO_
}

void CS_BankerLeave::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CS_BankerLeave)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CS_BankerLeave)
}

::google::protobuf::uint8* CS_BankerLeave::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CS_BankerLeave)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CS_BankerLeave)
  return target;
}

size_t CS_BankerLeave::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CS_BankerLeave)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CS_BankerLeave::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CS_BankerLeave)
  GOOGLE_DCHECK_NE(&from, this);
  const CS_BankerLeave* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CS_BankerLeave>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CS_BankerLeave)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CS_BankerLeave)
    MergeFrom(*source);
  }
}

void CS_BankerLeave::MergeFrom(const CS_BankerLeave& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CS_BankerLeave)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void CS_BankerLeave::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CS_BankerLeave)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CS_BankerLeave::CopyFrom(const CS_BankerLeave& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CS_BankerLeave)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CS_BankerLeave::IsInitialized() const {
  return true;
}

void CS_BankerLeave::Swap(CS_BankerLeave* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CS_BankerLeave::InternalSwap(CS_BankerLeave* other) {
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CS_BankerLeave::GetMetadata() const {
  protobuf_public_5fbanker_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_public_5fbanker_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CS_BankerLeave

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CS_BankerContend::kRatioFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CS_BankerContend::CS_BankerContend()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_public_5fbanker_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:CS_BankerContend)
}
CS_BankerContend::CS_BankerContend(const CS_BankerContend& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ratio_ = from.ratio_;
  // @@protoc_insertion_point(copy_constructor:CS_BankerContend)
}

void CS_BankerContend::SharedCtor() {
  _cached_size_ = 0;
  ratio_ = 0;
}

CS_BankerContend::~CS_BankerContend() {
  // @@protoc_insertion_point(destructor:CS_BankerContend)
  SharedDtor();
}

void CS_BankerContend::SharedDtor() {
}

void CS_BankerContend::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CS_BankerContend::descriptor() {
  protobuf_public_5fbanker_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_public_5fbanker_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CS_BankerContend& CS_BankerContend::default_instance() {
  protobuf_public_5fbanker_2eproto::InitDefaults();
  return *internal_default_instance();
}

CS_BankerContend* CS_BankerContend::New(::google::protobuf::Arena* arena) const {
  CS_BankerContend* n = new CS_BankerContend;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CS_BankerContend::Clear() {
// @@protoc_insertion_point(message_clear_start:CS_BankerContend)
  ratio_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CS_BankerContend::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CS_BankerContend)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 ratio = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_ratio();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ratio_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CS_BankerContend)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CS_BankerContend)
  return false;
#undef DO_
}

void CS_BankerContend::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CS_BankerContend)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 ratio = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->ratio(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CS_BankerContend)
}

::google::protobuf::uint8* CS_BankerContend::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CS_BankerContend)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 ratio = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->ratio(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CS_BankerContend)
  return target;
}

size_t CS_BankerContend::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CS_BankerContend)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // optional int32 ratio = 1;
  if (has_ratio()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->ratio());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CS_BankerContend::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CS_BankerContend)
  GOOGLE_DCHECK_NE(&from, this);
  const CS_BankerContend* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CS_BankerContend>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CS_BankerContend)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CS_BankerContend)
    MergeFrom(*source);
  }
}

void CS_BankerContend::MergeFrom(const CS_BankerContend& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CS_BankerContend)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_ratio()) {
    set_ratio(from.ratio());
  }
}

void CS_BankerContend::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CS_BankerContend)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CS_BankerContend::CopyFrom(const CS_BankerContend& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CS_BankerContend)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CS_BankerContend::IsInitialized() const {
  return true;
}

void CS_BankerContend::Swap(CS_BankerContend* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CS_BankerContend::InternalSwap(CS_BankerContend* other) {
  std::swap(ratio_, other->ratio_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CS_BankerContend::GetMetadata() const {
  protobuf_public_5fbanker_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_public_5fbanker_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CS_BankerContend

// optional int32 ratio = 1;
bool CS_BankerContend::has_ratio() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CS_BankerContend::set_has_ratio() {
  _has_bits_[0] |= 0x00000001u;
}
void CS_BankerContend::clear_has_ratio() {
  _has_bits_[0] &= ~0x00000001u;
}
void CS_BankerContend::clear_ratio() {
  ratio_ = 0;
  clear_has_ratio();
}
::google::protobuf::int32 CS_BankerContend::ratio() const {
  // @@protoc_insertion_point(field_get:CS_BankerContend.ratio)
  return ratio_;
}
void CS_BankerContend::set_ratio(::google::protobuf::int32 value) {
  set_has_ratio();
  ratio_ = value;
  // @@protoc_insertion_point(field_set:CS_BankerContend.ratio)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CS_BankerPlayerBet::kBetMoneyFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CS_BankerPlayerBet::CS_BankerPlayerBet()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_public_5fbanker_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:CS_BankerPlayerBet)
}
CS_BankerPlayerBet::CS_BankerPlayerBet(const CS_BankerPlayerBet& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  bet_money_ = from.bet_money_;
  // @@protoc_insertion_point(copy_constructor:CS_BankerPlayerBet)
}

void CS_BankerPlayerBet::SharedCtor() {
  _cached_size_ = 0;
  bet_money_ = GOOGLE_LONGLONG(0);
}

CS_BankerPlayerBet::~CS_BankerPlayerBet() {
  // @@protoc_insertion_point(destructor:CS_BankerPlayerBet)
  SharedDtor();
}

void CS_BankerPlayerBet::SharedDtor() {
}

void CS_BankerPlayerBet::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CS_BankerPlayerBet::descriptor() {
  protobuf_public_5fbanker_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_public_5fbanker_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CS_BankerPlayerBet& CS_BankerPlayerBet::default_instance() {
  protobuf_public_5fbanker_2eproto::InitDefaults();
  return *internal_default_instance();
}

CS_BankerPlayerBet* CS_BankerPlayerBet::New(::google::protobuf::Arena* arena) const {
  CS_BankerPlayerBet* n = new CS_BankerPlayerBet;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CS_BankerPlayerBet::Clear() {
// @@protoc_insertion_point(message_clear_start:CS_BankerPlayerBet)
  bet_money_ = GOOGLE_LONGLONG(0);
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CS_BankerPlayerBet::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CS_BankerPlayerBet)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 bet_money = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_bet_money();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &bet_money_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CS_BankerPlayerBet)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CS_BankerPlayerBet)
  return false;
#undef DO_
}

void CS_BankerPlayerBet::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CS_BankerPlayerBet)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int64 bet_money = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->bet_money(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CS_BankerPlayerBet)
}

::google::protobuf::uint8* CS_BankerPlayerBet::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CS_BankerPlayerBet)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int64 bet_money = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->bet_money(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CS_BankerPlayerBet)
  return target;
}

size_t CS_BankerPlayerBet::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CS_BankerPlayerBet)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // required int64 bet_money = 1;
  if (has_bet_money()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->bet_money());
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CS_BankerPlayerBet::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CS_BankerPlayerBet)
  GOOGLE_DCHECK_NE(&from, this);
  const CS_BankerPlayerBet* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CS_BankerPlayerBet>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CS_BankerPlayerBet)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CS_BankerPlayerBet)
    MergeFrom(*source);
  }
}

void CS_BankerPlayerBet::MergeFrom(const CS_BankerPlayerBet& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CS_BankerPlayerBet)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_bet_money()) {
    set_bet_money(from.bet_money());
  }
}

void CS_BankerPlayerBet::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CS_BankerPlayerBet)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CS_BankerPlayerBet::CopyFrom(const CS_BankerPlayerBet& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CS_BankerPlayerBet)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CS_BankerPlayerBet::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  return true;
}

void CS_BankerPlayerBet::Swap(CS_BankerPlayerBet* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CS_BankerPlayerBet::InternalSwap(CS_BankerPlayerBet* other) {
  std::swap(bet_money_, other->bet_money_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CS_BankerPlayerBet::GetMetadata() const {
  protobuf_public_5fbanker_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_public_5fbanker_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CS_BankerPlayerBet

// required int64 bet_money = 1;
bool CS_BankerPlayerBet::has_bet_money() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CS_BankerPlayerBet::set_has_bet_money() {
  _has_bits_[0] |= 0x00000001u;
}
void CS_BankerPlayerBet::clear_has_bet_money() {
  _has_bits_[0] &= ~0x00000001u;
}
void CS_BankerPlayerBet::clear_bet_money() {
  bet_money_ = GOOGLE_LONGLONG(0);
  clear_has_bet_money();
}
::google::protobuf::int64 CS_BankerPlayerBet::bet_money() const {
  // @@protoc_insertion_point(field_get:CS_BankerPlayerBet.bet_money)
  return bet_money_;
}
void CS_BankerPlayerBet::set_bet_money(::google::protobuf::int64 value) {
  set_has_bet_money();
  bet_money_ = value;
  // @@protoc_insertion_point(field_set:CS_BankerPlayerBet.bet_money)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CS_BankerPlayerGuessCards::CS_BankerPlayerGuessCards()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_public_5fbanker_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:CS_BankerPlayerGuessCards)
}
CS_BankerPlayerGuessCards::CS_BankerPlayerGuessCards(const CS_BankerPlayerGuessCards& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:CS_BankerPlayerGuessCards)
}

void CS_BankerPlayerGuessCards::SharedCtor() {
  _cached_size_ = 0;
}

CS_BankerPlayerGuessCards::~CS_BankerPlayerGuessCards() {
  // @@protoc_insertion_point(destructor:CS_BankerPlayerGuessCards)
  SharedDtor();
}

void CS_BankerPlayerGuessCards::SharedDtor() {
}

void CS_BankerPlayerGuessCards::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CS_BankerPlayerGuessCards::descriptor() {
  protobuf_public_5fbanker_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_public_5fbanker_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CS_BankerPlayerGuessCards& CS_BankerPlayerGuessCards::default_instance() {
  protobuf_public_5fbanker_2eproto::InitDefaults();
  return *internal_default_instance();
}

CS_BankerPlayerGuessCards* CS_BankerPlayerGuessCards::New(::google::protobuf::Arena* arena) const {
  CS_BankerPlayerGuessCards* n = new CS_BankerPlayerGuessCards;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CS_BankerPlayerGuessCards::Clear() {
// @@protoc_insertion_point(message_clear_start:CS_BankerPlayerGuessCards)
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CS_BankerPlayerGuessCards::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CS_BankerPlayerGuessCards)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:CS_BankerPlayerGuessCards)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CS_BankerPlayerGuessCards)
  return false;
#undef DO_
}

void CS_BankerPlayerGuessCards::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CS_BankerPlayerGuessCards)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CS_BankerPlayerGuessCards)
}

::google::protobuf::uint8* CS_BankerPlayerGuessCards::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CS_BankerPlayerGuessCards)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CS_BankerPlayerGuessCards)
  return target;
}

size_t CS_BankerPlayerGuessCards::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CS_BankerPlayerGuessCards)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CS_BankerPlayerGuessCards::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CS_BankerPlayerGuessCards)
  GOOGLE_DCHECK_NE(&from, this);
  const CS_BankerPlayerGuessCards* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CS_BankerPlayerGuessCards>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CS_BankerPlayerGuessCards)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CS_BankerPlayerGuessCards)
    MergeFrom(*source);
  }
}

void CS_BankerPlayerGuessCards::MergeFrom(const CS_BankerPlayerGuessCards& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CS_BankerPlayerGuessCards)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void CS_BankerPlayerGuessCards::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CS_BankerPlayerGuessCards)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CS_BankerPlayerGuessCards::CopyFrom(const CS_BankerPlayerGuessCards& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CS_BankerPlayerGuessCards)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CS_BankerPlayerGuessCards::IsInitialized() const {
  return true;
}

void CS_BankerPlayerGuessCards::Swap(CS_BankerPlayerGuessCards* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CS_BankerPlayerGuessCards::InternalSwap(CS_BankerPlayerGuessCards* other) {
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CS_BankerPlayerGuessCards::GetMetadata() const {
  protobuf_public_5fbanker_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_public_5fbanker_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CS_BankerPlayerGuessCards

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CS_BankerNextGame::CS_BankerNextGame()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_public_5fbanker_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:CS_BankerNextGame)
}
CS_BankerNextGame::CS_BankerNextGame(const CS_BankerNextGame& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:CS_BankerNextGame)
}

void CS_BankerNextGame::SharedCtor() {
  _cached_size_ = 0;
}

CS_BankerNextGame::~CS_BankerNextGame() {
  // @@protoc_insertion_point(destructor:CS_BankerNextGame)
  SharedDtor();
}

void CS_BankerNextGame::SharedDtor() {
}

void CS_BankerNextGame::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CS_BankerNextGame::descriptor() {
  protobuf_public_5fbanker_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_public_5fbanker_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CS_BankerNextGame& CS_BankerNextGame::default_instance() {
  protobuf_public_5fbanker_2eproto::InitDefaults();
  return *internal_default_instance();
}

CS_BankerNextGame* CS_BankerNextGame::New(::google::protobuf::Arena* arena) const {
  CS_BankerNextGame* n = new CS_BankerNextGame;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CS_BankerNextGame::Clear() {
// @@protoc_insertion_point(message_clear_start:CS_BankerNextGame)
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CS_BankerNextGame::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CS_BankerNextGame)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:CS_BankerNextGame)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CS_BankerNextGame)
  return false;
#undef DO_
}

void CS_BankerNextGame::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CS_BankerNextGame)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CS_BankerNextGame)
}

::google::protobuf::uint8* CS_BankerNextGame::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CS_BankerNextGame)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CS_BankerNextGame)
  return target;
}

size_t CS_BankerNextGame::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CS_BankerNextGame)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CS_BankerNextGame::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CS_BankerNextGame)
  GOOGLE_DCHECK_NE(&from, this);
  const CS_BankerNextGame* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CS_BankerNextGame>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CS_BankerNextGame)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CS_BankerNextGame)
    MergeFrom(*source);
  }
}

void CS_BankerNextGame::MergeFrom(const CS_BankerNextGame& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CS_BankerNextGame)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void CS_BankerNextGame::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CS_BankerNextGame)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CS_BankerNextGame::CopyFrom(const CS_BankerNextGame& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CS_BankerNextGame)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CS_BankerNextGame::IsInitialized() const {
  return true;
}

void CS_BankerNextGame::Swap(CS_BankerNextGame* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CS_BankerNextGame::InternalSwap(CS_BankerNextGame* other) {
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CS_BankerNextGame::GetMetadata() const {
  protobuf_public_5fbanker_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_public_5fbanker_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CS_BankerNextGame

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CS_BankerVote::kAgreeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CS_BankerVote::CS_BankerVote()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_public_5fbanker_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:CS_BankerVote)
}
CS_BankerVote::CS_BankerVote(const CS_BankerVote& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  agree_ = from.agree_;
  // @@protoc_insertion_point(copy_constructor:CS_BankerVote)
}

void CS_BankerVote::SharedCtor() {
  _cached_size_ = 0;
  agree_ = false;
}

CS_BankerVote::~CS_BankerVote() {
  // @@protoc_insertion_point(destructor:CS_BankerVote)
  SharedDtor();
}

void CS_BankerVote::SharedDtor() {
}

void CS_BankerVote::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CS_BankerVote::descriptor() {
  protobuf_public_5fbanker_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_public_5fbanker_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CS_BankerVote& CS_BankerVote::default_instance() {
  protobuf_public_5fbanker_2eproto::InitDefaults();
  return *internal_default_instance();
}

CS_BankerVote* CS_BankerVote::New(::google::protobuf::Arena* arena) const {
  CS_BankerVote* n = new CS_BankerVote;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CS_BankerVote::Clear() {
// @@protoc_insertion_point(message_clear_start:CS_BankerVote)
  agree_ = false;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CS_BankerVote::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CS_BankerVote)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bool agree = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_agree();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &agree_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CS_BankerVote)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CS_BankerVote)
  return false;
#undef DO_
}

void CS_BankerVote::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CS_BankerVote)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool agree = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->agree(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CS_BankerVote)
}

::google::protobuf::uint8* CS_BankerVote::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CS_BankerVote)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool agree = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->agree(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CS_BankerVote)
  return target;
}

size_t CS_BankerVote::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CS_BankerVote)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // optional bool agree = 1;
  if (has_agree()) {
    total_size += 1 + 1;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CS_BankerVote::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CS_BankerVote)
  GOOGLE_DCHECK_NE(&from, this);
  const CS_BankerVote* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CS_BankerVote>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CS_BankerVote)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CS_BankerVote)
    MergeFrom(*source);
  }
}

void CS_BankerVote::MergeFrom(const CS_BankerVote& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CS_BankerVote)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_agree()) {
    set_agree(from.agree());
  }
}

void CS_BankerVote::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CS_BankerVote)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CS_BankerVote::CopyFrom(const CS_BankerVote& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CS_BankerVote)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CS_BankerVote::IsInitialized() const {
  return true;
}

void CS_BankerVote::Swap(CS_BankerVote* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CS_BankerVote::InternalSwap(CS_BankerVote* other) {
  std::swap(agree_, other->agree_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CS_BankerVote::GetMetadata() const {
  protobuf_public_5fbanker_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_public_5fbanker_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CS_BankerVote

// optional bool agree = 1;
bool CS_BankerVote::has_agree() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CS_BankerVote::set_has_agree() {
  _has_bits_[0] |= 0x00000001u;
}
void CS_BankerVote::clear_has_agree() {
  _has_bits_[0] &= ~0x00000001u;
}
void CS_BankerVote::clear_agree() {
  agree_ = false;
  clear_has_agree();
}
bool CS_BankerVote::agree() const {
  // @@protoc_insertion_point(field_get:CS_BankerVote.agree)
  return agree_;
}
void CS_BankerVote::set_agree(bool value) {
  set_has_agree();
  agree_ = value;
  // @@protoc_insertion_point(field_set:CS_BankerVote.agree)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)
