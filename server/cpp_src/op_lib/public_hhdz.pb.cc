// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: public_hhdz.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "public_hhdz.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
class SC_HongHeiCardDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<SC_HongHeiCard> {
} _SC_HongHeiCard_default_instance_;
class SC_HongHeiOnlinePlayerDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<SC_HongHeiOnlinePlayer> {
} _SC_HongHeiOnlinePlayer_default_instance_;
class SC_HongHeiRecordDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<SC_HongHeiRecord> {
} _SC_HongHeiRecord_default_instance_;
class SC_HongHeiRichPlayerDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<SC_HongHeiRichPlayer> {
} _SC_HongHeiRichPlayer_default_instance_;
class SC_HongHeiStartDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<SC_HongHeiStart> {
} _SC_HongHeiStart_default_instance_;
class CS_HongHeiPlayerBetDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CS_HongHeiPlayerBet> {
} _CS_HongHeiPlayerBet_default_instance_;
class SC_HongHeiPlayerBetDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<SC_HongHeiPlayerBet> {
} _SC_HongHeiPlayerBet_default_instance_;
class SC_HongHeiAllBetDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<SC_HongHeiAllBet> {
} _SC_HongHeiAllBet_default_instance_;
class SC_HongHeiPostCardDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<SC_HongHeiPostCard> {
} _SC_HongHeiPostCard_default_instance_;
class SC_HongHeiPostResultDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<SC_HongHeiPostResult> {
} _SC_HongHeiPostResult_default_instance_;
class Player_bet_infoDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<Player_bet_info> {
} _Player_bet_info_default_instance_;
class SC_HongHeiReConnectDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<SC_HongHeiReConnect> {
} _SC_HongHeiReConnect_default_instance_;
class SC_HongHeiRestDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<SC_HongHeiRest> {
} _SC_HongHeiRest_default_instance_;
class SC_HongHeiPlayerListDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<SC_HongHeiPlayerList> {
} _SC_HongHeiPlayerList_default_instance_;
class SC_HongHeiGameRecordDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<SC_HongHeiGameRecord> {
} _SC_HongHeiGameRecord_default_instance_;
class CS_HongHeiBetStandardDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CS_HongHeiBetStandard> {
} _CS_HongHeiBetStandard_default_instance_;
class SC_HongHeiBetStandardDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<SC_HongHeiBetStandard> {
} _SC_HongHeiBetStandard_default_instance_;
class SC_HongHeiRichListDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<SC_HongHeiRichList> {
} _SC_HongHeiRichList_default_instance_;
class CS_HongHeiGetStateDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CS_HongHeiGetState> {
} _CS_HongHeiGetState_default_instance_;
class SC_HongHeiGetStateDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<SC_HongHeiGetState> {
} _SC_HongHeiGetState_default_instance_;

namespace protobuf_public_5fhhdz_2eproto {


namespace {

::google::protobuf::Metadata file_level_metadata[20];
const ::google::protobuf::EnumDescriptor* file_level_enum_descriptors[15];

}  // namespace

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTableField
    const TableStruct::entries[] = {
  {0, 0, 0, ::google::protobuf::internal::kInvalidMask, 0, 0},
};

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::AuxillaryParseTableField
    const TableStruct::aux[] = {
  ::google::protobuf::internal::AuxillaryParseTableField(),
};
PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTable const
    TableStruct::schema[] = {
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
};

const ::google::protobuf::uint32 TableStruct::offsets[] = {
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SC_HongHeiCard, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SC_HongHeiCard, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SC_HongHeiCard, red_cards_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SC_HongHeiCard, black_cards_),
  ~0u,
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SC_HongHeiOnlinePlayer, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SC_HongHeiOnlinePlayer, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SC_HongHeiOnlinePlayer, header_icon_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SC_HongHeiOnlinePlayer, ip_area_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SC_HongHeiOnlinePlayer, player_money_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SC_HongHeiOnlinePlayer, player_bet_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SC_HongHeiOnlinePlayer, player_win_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SC_HongHeiOnlinePlayer, player_rank_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SC_HongHeiOnlinePlayer, win_lost_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SC_HongHeiOnlinePlayer, win_money_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SC_HongHeiOnlinePlayer, guid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SC_HongHeiOnlinePlayer, chair_id_),
  1,
  0,
  2,
  3,
  4,
  5,
  6,
  7,
  8,
  9,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SC_HongHeiRecord, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SC_HongHeiRecord, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SC_HongHeiRecord, win_color_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SC_HongHeiRecord, win_type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SC_HongHeiRecord, turn_),
  0,
  1,
  2,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SC_HongHeiRichPlayer, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SC_HongHeiRichPlayer, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SC_HongHeiRichPlayer, chair_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SC_HongHeiRichPlayer, money_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SC_HongHeiRichPlayer, tax_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SC_HongHeiRichPlayer, victory_),
  1,
  0,
  3,
  2,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SC_HongHeiStart, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SC_HongHeiStart, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SC_HongHeiStart, start_waittime_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SC_HongHeiStart, playerbets_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SC_HongHeiStart, allbets_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SC_HongHeiStart, table_status_),
  0,
  ~0u,
  ~0u,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CS_HongHeiPlayerBet, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CS_HongHeiPlayerBet, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CS_HongHeiPlayerBet, playerbet_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CS_HongHeiPlayerBet, playerbettype_),
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SC_HongHeiPlayerBet, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SC_HongHeiPlayerBet, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SC_HongHeiPlayerBet, playerbet_result_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SC_HongHeiPlayerBet, allbets_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SC_HongHeiPlayerBet, player_chairid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SC_HongHeiPlayerBet, playerbet_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SC_HongHeiPlayerBet, playerbettype_),
  0,
  ~0u,
  1,
  2,
  3,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SC_HongHeiAllBet, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SC_HongHeiAllBet, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SC_HongHeiAllBet, allbets_),
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SC_HongHeiPostCard, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SC_HongHeiPostCard, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SC_HongHeiPostCard, result_waittime_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SC_HongHeiPostCard, pb_card_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SC_HongHeiPostCard, table_status_),
  1,
  0,
  2,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SC_HongHeiPostResult, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SC_HongHeiPostResult, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SC_HongHeiPostResult, next_waittime_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SC_HongHeiPostResult, chair_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SC_HongHeiPostResult, money_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SC_HongHeiPostResult, tax_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SC_HongHeiPostResult, victory_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SC_HongHeiPostResult, table_status_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SC_HongHeiPostResult, win_area_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SC_HongHeiPostResult, win_type_),
  0,
  1,
  2,
  3,
  4,
  5,
  7,
  6,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Player_bet_info, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Player_bet_info, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Player_bet_info, bet_money_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Player_bet_info, chair_),
  ~0u,
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SC_HongHeiReConnect, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SC_HongHeiReConnect, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SC_HongHeiReConnect, playerbets_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SC_HongHeiReConnect, allbets_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SC_HongHeiReConnect, player_bet_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SC_HongHeiReConnect, pb_card_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SC_HongHeiReConnect, table_status_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SC_HongHeiReConnect, table_waittime_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SC_HongHeiReConnect, pb_player_bet_info_),
  ~0u,
  ~0u,
  1,
  0,
  2,
  3,
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SC_HongHeiRest, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SC_HongHeiRest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SC_HongHeiRest, rest_waittime_),
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SC_HongHeiPlayerList, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SC_HongHeiPlayerList, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SC_HongHeiPlayerList, pb_onlinelist_),
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SC_HongHeiGameRecord, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SC_HongHeiGameRecord, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SC_HongHeiGameRecord, pb_record_),
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CS_HongHeiBetStandard, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CS_HongHeiBetStandard, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SC_HongHeiBetStandard, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SC_HongHeiBetStandard, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SC_HongHeiBetStandard, playerbets_),
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SC_HongHeiRichList, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SC_HongHeiRichList, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SC_HongHeiRichList, pb_richlist_),
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CS_HongHeiGetState, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CS_HongHeiGetState, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SC_HongHeiGetState, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SC_HongHeiGetState, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
};

static const ::google::protobuf::internal::MigrationSchema schemas[] = {
  { 0, 7, sizeof(SC_HongHeiCard)},
  { 9, 24, sizeof(SC_HongHeiOnlinePlayer)},
  { 34, 42, sizeof(SC_HongHeiRecord)},
  { 45, 54, sizeof(SC_HongHeiRichPlayer)},
  { 58, 67, sizeof(SC_HongHeiStart)},
  { 71, 78, sizeof(CS_HongHeiPlayerBet)},
  { 80, 90, sizeof(SC_HongHeiPlayerBet)},
  { 95, 101, sizeof(SC_HongHeiAllBet)},
  { 102, 110, sizeof(SC_HongHeiPostCard)},
  { 113, 126, sizeof(SC_HongHeiPostResult)},
  { 134, 141, sizeof(Player_bet_info)},
  { 143, 155, sizeof(SC_HongHeiReConnect)},
  { 162, 168, sizeof(SC_HongHeiRest)},
  { 169, 175, sizeof(SC_HongHeiPlayerList)},
  { 176, 182, sizeof(SC_HongHeiGameRecord)},
  { 183, 188, sizeof(CS_HongHeiBetStandard)},
  { 188, 194, sizeof(SC_HongHeiBetStandard)},
  { 195, 201, sizeof(SC_HongHeiRichList)},
  { 202, 207, sizeof(CS_HongHeiGetState)},
  { 207, 212, sizeof(SC_HongHeiGetState)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&_SC_HongHeiCard_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_SC_HongHeiOnlinePlayer_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_SC_HongHeiRecord_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_SC_HongHeiRichPlayer_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_SC_HongHeiStart_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CS_HongHeiPlayerBet_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_SC_HongHeiPlayerBet_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_SC_HongHeiAllBet_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_SC_HongHeiPostCard_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_SC_HongHeiPostResult_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_Player_bet_info_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_SC_HongHeiReConnect_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_SC_HongHeiRest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_SC_HongHeiPlayerList_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_SC_HongHeiGameRecord_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CS_HongHeiBetStandard_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_SC_HongHeiBetStandard_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_SC_HongHeiRichList_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CS_HongHeiGetState_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_SC_HongHeiGetState_default_instance_),
};

namespace {

void protobuf_AssignDescriptors() {
  AddDescriptors();
  ::google::protobuf::MessageFactory* factory = NULL;
  AssignDescriptors(
      "public_hhdz.proto", schemas, file_default_instances, TableStruct::offsets, factory,
      file_level_metadata, file_level_enum_descriptors, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 20);
}

}  // namespace

void TableStruct::Shutdown() {
  _SC_HongHeiCard_default_instance_.Shutdown();
  delete file_level_metadata[0].reflection;
  _SC_HongHeiOnlinePlayer_default_instance_.Shutdown();
  delete file_level_metadata[1].reflection;
  _SC_HongHeiRecord_default_instance_.Shutdown();
  delete file_level_metadata[2].reflection;
  _SC_HongHeiRichPlayer_default_instance_.Shutdown();
  delete file_level_metadata[3].reflection;
  _SC_HongHeiStart_default_instance_.Shutdown();
  delete file_level_metadata[4].reflection;
  _CS_HongHeiPlayerBet_default_instance_.Shutdown();
  delete file_level_metadata[5].reflection;
  _SC_HongHeiPlayerBet_default_instance_.Shutdown();
  delete file_level_metadata[6].reflection;
  _SC_HongHeiAllBet_default_instance_.Shutdown();
  delete file_level_metadata[7].reflection;
  _SC_HongHeiPostCard_default_instance_.Shutdown();
  delete file_level_metadata[8].reflection;
  _SC_HongHeiPostResult_default_instance_.Shutdown();
  delete file_level_metadata[9].reflection;
  _Player_bet_info_default_instance_.Shutdown();
  delete file_level_metadata[10].reflection;
  _SC_HongHeiReConnect_default_instance_.Shutdown();
  delete file_level_metadata[11].reflection;
  _SC_HongHeiRest_default_instance_.Shutdown();
  delete file_level_metadata[12].reflection;
  _SC_HongHeiPlayerList_default_instance_.Shutdown();
  delete file_level_metadata[13].reflection;
  _SC_HongHeiGameRecord_default_instance_.Shutdown();
  delete file_level_metadata[14].reflection;
  _CS_HongHeiBetStandard_default_instance_.Shutdown();
  delete file_level_metadata[15].reflection;
  _SC_HongHeiBetStandard_default_instance_.Shutdown();
  delete file_level_metadata[16].reflection;
  _SC_HongHeiRichList_default_instance_.Shutdown();
  delete file_level_metadata[17].reflection;
  _CS_HongHeiGetState_default_instance_.Shutdown();
  delete file_level_metadata[18].reflection;
  _SC_HongHeiGetState_default_instance_.Shutdown();
  delete file_level_metadata[19].reflection;
}

void TableStruct::InitDefaultsImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::internal::InitProtobufDefaults();
  _SC_HongHeiCard_default_instance_.DefaultConstruct();
  _SC_HongHeiOnlinePlayer_default_instance_.DefaultConstruct();
  _SC_HongHeiRecord_default_instance_.DefaultConstruct();
  _SC_HongHeiRichPlayer_default_instance_.DefaultConstruct();
  _SC_HongHeiStart_default_instance_.DefaultConstruct();
  _CS_HongHeiPlayerBet_default_instance_.DefaultConstruct();
  _SC_HongHeiPlayerBet_default_instance_.DefaultConstruct();
  _SC_HongHeiAllBet_default_instance_.DefaultConstruct();
  _SC_HongHeiPostCard_default_instance_.DefaultConstruct();
  _SC_HongHeiPostResult_default_instance_.DefaultConstruct();
  _Player_bet_info_default_instance_.DefaultConstruct();
  _SC_HongHeiReConnect_default_instance_.DefaultConstruct();
  _SC_HongHeiRest_default_instance_.DefaultConstruct();
  _SC_HongHeiPlayerList_default_instance_.DefaultConstruct();
  _SC_HongHeiGameRecord_default_instance_.DefaultConstruct();
  _CS_HongHeiBetStandard_default_instance_.DefaultConstruct();
  _SC_HongHeiBetStandard_default_instance_.DefaultConstruct();
  _SC_HongHeiRichList_default_instance_.DefaultConstruct();
  _CS_HongHeiGetState_default_instance_.DefaultConstruct();
  _SC_HongHeiGetState_default_instance_.DefaultConstruct();
  _SC_HongHeiPostCard_default_instance_.get_mutable()->pb_card_ = const_cast< ::SC_HongHeiCard*>(
      ::SC_HongHeiCard::internal_default_instance());
  _SC_HongHeiReConnect_default_instance_.get_mutable()->pb_card_ = const_cast< ::SC_HongHeiCard*>(
      ::SC_HongHeiCard::internal_default_instance());
}

void InitDefaults() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &TableStruct::InitDefaultsImpl);
}
void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] = {
      "\n\021public_hhdz.proto\"8\n\016SC_HongHeiCard\022\021\n"
      "\tred_cards\030\001 \003(\005\022\023\n\013black_cards\030\002 \003(\005\"\331\001"
      "\n\026SC_HongHeiOnlinePlayer\022\026\n\013header_icon\030"
      "\001 \001(\005:\0010\022\017\n\007ip_area\030\002 \001(\t\022\024\n\014player_mone"
      "y\030\003 \001(\005\022\022\n\nplayer_bet\030\004 \001(\005\022\022\n\nplayer_wi"
      "n\030\005 \001(\005\022\023\n\013player_rank\030\006 \001(\005\022\020\n\010win_lost"
      "\030\007 \001(\005\022\021\n\twin_money\030\010 \001(\005\022\014\n\004guid\030\t \001(\005\022"
      "\020\n\010chair_id\030\n \001(\005\"E\n\020SC_HongHeiRecord\022\021\n"
      "\twin_color\030\001 \001(\005\022\020\n\010win_type\030\002 \001(\005\022\014\n\004tu"
      "rn\030\003 \001(\005\"R\n\024SC_HongHeiRichPlayer\022\r\n\005chai"
      "r\030\001 \001(\005\022\r\n\005money\030\002 \001(\003\022\013\n\003tax\030\003 \001(\003\022\017\n\007v"
      "ictory\030\004 \001(\005\"w\n\017SC_HongHeiStart\022\026\n\016start"
      "_waittime\030\001 \001(\005\022\022\n\nplayerbets\030\002 \003(\005\022\017\n\007a"
      "llbets\030\003 \003(\005\022\024\n\014table_status\030\004 \001(\005\"\021\n\005Ms"
      "gID\022\010\n\002ID\020\310\342\001\"R\n\023CS_HongHeiPlayerBet\022\021\n\t"
      "playerbet\030\001 \001(\003\022\025\n\rplayerbettype\030\002 \001(\005\"\021"
      "\n\005MsgID\022\010\n\002ID\020\311\342\001\"\225\001\n\023SC_HongHeiPlayerBe"
      "t\022\030\n\020playerbet_result\030\001 \001(\005\022\017\n\007allbets\030\002"
      " \003(\005\022\026\n\016player_chairid\030\003 \001(\005\022\021\n\tplayerbe"
      "t\030\004 \001(\005\022\025\n\rplayerbettype\030\005 \001(\005\"\021\n\005MsgID\022"
      "\010\n\002ID\020\312\342\001\"6\n\020SC_HongHeiAllBet\022\017\n\007allbets"
      "\030\001 \003(\005\"\021\n\005MsgID\022\010\n\002ID\020\313\342\001\"x\n\022SC_HongHeiP"
      "ostCard\022\027\n\017result_waittime\030\001 \001(\005\022 \n\007pb_c"
      "ard\030\002 \001(\0132\017.SC_HongHeiCard\022\024\n\014table_stat"
      "us\030\003 \001(\005\"\021\n\005MsgID\022\010\n\002ID\020\314\342\001\"\266\001\n\024SC_HongH"
      "eiPostResult\022\025\n\rnext_waittime\030\001 \001(\005\022\r\n\005c"
      "hair\030\002 \001(\005\022\r\n\005money\030\003 \001(\003\022\013\n\003tax\030\004 \001(\003\022\017"
      "\n\007victory\030\005 \001(\005\022\024\n\014table_status\030\006 \001(\005\022\020\n"
      "\010win_area\030\007 \001(\005\022\020\n\010win_type\030\010 \001(\003\"\021\n\005Msg"
      "ID\022\010\n\002ID\020\315\342\001\"3\n\017Player_bet_info\022\021\n\tbet_m"
      "oney\030\001 \003(\003\022\r\n\005chair\030\002 \001(\005\"\337\001\n\023SC_HongHei"
      "ReConnect\022\022\n\nplayerbets\030\001 \003(\005\022\017\n\007allbets"
      "\030\002 \003(\005\022\022\n\nplayer_bet\030\003 \001(\005\022 \n\007pb_card\030\004 "
      "\001(\0132\017.SC_HongHeiCard\022\024\n\014table_status\030\005 \001"
      "(\005\022\026\n\016table_waittime\030\006 \001(\005\022,\n\022pb_player_"
      "bet_info\030\007 \003(\0132\020.Player_bet_info\"\021\n\005MsgI"
      "D\022\010\n\002ID\020\316\342\001\":\n\016SC_HongHeiRest\022\025\n\rrest_wa"
      "ittime\030\001 \001(\005\"\021\n\005MsgID\022\010\n\002ID\020\317\342\001\"Y\n\024SC_Ho"
      "ngHeiPlayerList\022.\n\rpb_onlinelist\030\001 \003(\0132\027"
      ".SC_HongHeiOnlinePlayer\"\021\n\005MsgID\022\010\n\002ID\020\320"
      "\342\001\"O\n\024SC_HongHeiGameRecord\022$\n\tpb_record\030"
      "\001 \003(\0132\021.SC_HongHeiRecord\"\021\n\005MsgID\022\010\n\002ID\020"
      "\321\342\001\"*\n\025CS_HongHeiBetStandard\"\021\n\005MsgID\022\010\n"
      "\002ID\020\322\342\001\">\n\025SC_HongHeiBetStandard\022\022\n\nplay"
      "erbets\030\001 \003(\005\"\021\n\005MsgID\022\010\n\002ID\020\323\342\001\"S\n\022SC_Ho"
      "ngHeiRichList\022*\n\013pb_richlist\030\001 \003(\0132\025.SC_"
      "HongHeiRichPlayer\"\021\n\005MsgID\022\010\n\002ID\020\324\342\001\"\'\n\022"
      "CS_HongHeiGetState\"\021\n\005MsgID\022\010\n\002ID\020\325\342\001\"\'\n"
      "\022SC_HongHeiGetState\"\021\n\005MsgID\022\010\n\002ID\020\326\342\001"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 1958);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "public_hhdz.proto", &protobuf_RegisterTypes);
  ::google::protobuf::internal::OnShutdown(&TableStruct::Shutdown);
}

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;

}  // namespace protobuf_public_5fhhdz_2eproto

const ::google::protobuf::EnumDescriptor* SC_HongHeiStart_MsgID_descriptor() {
  protobuf_public_5fhhdz_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_public_5fhhdz_2eproto::file_level_enum_descriptors[0];
}
bool SC_HongHeiStart_MsgID_IsValid(int value) {
  switch (value) {
    case 29000:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const SC_HongHeiStart_MsgID SC_HongHeiStart::ID;
const SC_HongHeiStart_MsgID SC_HongHeiStart::MsgID_MIN;
const SC_HongHeiStart_MsgID SC_HongHeiStart::MsgID_MAX;
const int SC_HongHeiStart::MsgID_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* CS_HongHeiPlayerBet_MsgID_descriptor() {
  protobuf_public_5fhhdz_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_public_5fhhdz_2eproto::file_level_enum_descriptors[1];
}
bool CS_HongHeiPlayerBet_MsgID_IsValid(int value) {
  switch (value) {
    case 29001:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const CS_HongHeiPlayerBet_MsgID CS_HongHeiPlayerBet::ID;
const CS_HongHeiPlayerBet_MsgID CS_HongHeiPlayerBet::MsgID_MIN;
const CS_HongHeiPlayerBet_MsgID CS_HongHeiPlayerBet::MsgID_MAX;
const int CS_HongHeiPlayerBet::MsgID_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* SC_HongHeiPlayerBet_MsgID_descriptor() {
  protobuf_public_5fhhdz_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_public_5fhhdz_2eproto::file_level_enum_descriptors[2];
}
bool SC_HongHeiPlayerBet_MsgID_IsValid(int value) {
  switch (value) {
    case 29002:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const SC_HongHeiPlayerBet_MsgID SC_HongHeiPlayerBet::ID;
const SC_HongHeiPlayerBet_MsgID SC_HongHeiPlayerBet::MsgID_MIN;
const SC_HongHeiPlayerBet_MsgID SC_HongHeiPlayerBet::MsgID_MAX;
const int SC_HongHeiPlayerBet::MsgID_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* SC_HongHeiAllBet_MsgID_descriptor() {
  protobuf_public_5fhhdz_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_public_5fhhdz_2eproto::file_level_enum_descriptors[3];
}
bool SC_HongHeiAllBet_MsgID_IsValid(int value) {
  switch (value) {
    case 29003:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const SC_HongHeiAllBet_MsgID SC_HongHeiAllBet::ID;
const SC_HongHeiAllBet_MsgID SC_HongHeiAllBet::MsgID_MIN;
const SC_HongHeiAllBet_MsgID SC_HongHeiAllBet::MsgID_MAX;
const int SC_HongHeiAllBet::MsgID_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* SC_HongHeiPostCard_MsgID_descriptor() {
  protobuf_public_5fhhdz_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_public_5fhhdz_2eproto::file_level_enum_descriptors[4];
}
bool SC_HongHeiPostCard_MsgID_IsValid(int value) {
  switch (value) {
    case 29004:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const SC_HongHeiPostCard_MsgID SC_HongHeiPostCard::ID;
const SC_HongHeiPostCard_MsgID SC_HongHeiPostCard::MsgID_MIN;
const SC_HongHeiPostCard_MsgID SC_HongHeiPostCard::MsgID_MAX;
const int SC_HongHeiPostCard::MsgID_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* SC_HongHeiPostResult_MsgID_descriptor() {
  protobuf_public_5fhhdz_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_public_5fhhdz_2eproto::file_level_enum_descriptors[5];
}
bool SC_HongHeiPostResult_MsgID_IsValid(int value) {
  switch (value) {
    case 29005:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const SC_HongHeiPostResult_MsgID SC_HongHeiPostResult::ID;
const SC_HongHeiPostResult_MsgID SC_HongHeiPostResult::MsgID_MIN;
const SC_HongHeiPostResult_MsgID SC_HongHeiPostResult::MsgID_MAX;
const int SC_HongHeiPostResult::MsgID_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* SC_HongHeiReConnect_MsgID_descriptor() {
  protobuf_public_5fhhdz_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_public_5fhhdz_2eproto::file_level_enum_descriptors[6];
}
bool SC_HongHeiReConnect_MsgID_IsValid(int value) {
  switch (value) {
    case 29006:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const SC_HongHeiReConnect_MsgID SC_HongHeiReConnect::ID;
const SC_HongHeiReConnect_MsgID SC_HongHeiReConnect::MsgID_MIN;
const SC_HongHeiReConnect_MsgID SC_HongHeiReConnect::MsgID_MAX;
const int SC_HongHeiReConnect::MsgID_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* SC_HongHeiRest_MsgID_descriptor() {
  protobuf_public_5fhhdz_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_public_5fhhdz_2eproto::file_level_enum_descriptors[7];
}
bool SC_HongHeiRest_MsgID_IsValid(int value) {
  switch (value) {
    case 29007:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const SC_HongHeiRest_MsgID SC_HongHeiRest::ID;
const SC_HongHeiRest_MsgID SC_HongHeiRest::MsgID_MIN;
const SC_HongHeiRest_MsgID SC_HongHeiRest::MsgID_MAX;
const int SC_HongHeiRest::MsgID_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* SC_HongHeiPlayerList_MsgID_descriptor() {
  protobuf_public_5fhhdz_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_public_5fhhdz_2eproto::file_level_enum_descriptors[8];
}
bool SC_HongHeiPlayerList_MsgID_IsValid(int value) {
  switch (value) {
    case 29008:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const SC_HongHeiPlayerList_MsgID SC_HongHeiPlayerList::ID;
const SC_HongHeiPlayerList_MsgID SC_HongHeiPlayerList::MsgID_MIN;
const SC_HongHeiPlayerList_MsgID SC_HongHeiPlayerList::MsgID_MAX;
const int SC_HongHeiPlayerList::MsgID_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* SC_HongHeiGameRecord_MsgID_descriptor() {
  protobuf_public_5fhhdz_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_public_5fhhdz_2eproto::file_level_enum_descriptors[9];
}
bool SC_HongHeiGameRecord_MsgID_IsValid(int value) {
  switch (value) {
    case 29009:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const SC_HongHeiGameRecord_MsgID SC_HongHeiGameRecord::ID;
const SC_HongHeiGameRecord_MsgID SC_HongHeiGameRecord::MsgID_MIN;
const SC_HongHeiGameRecord_MsgID SC_HongHeiGameRecord::MsgID_MAX;
const int SC_HongHeiGameRecord::MsgID_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* CS_HongHeiBetStandard_MsgID_descriptor() {
  protobuf_public_5fhhdz_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_public_5fhhdz_2eproto::file_level_enum_descriptors[10];
}
bool CS_HongHeiBetStandard_MsgID_IsValid(int value) {
  switch (value) {
    case 29010:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const CS_HongHeiBetStandard_MsgID CS_HongHeiBetStandard::ID;
const CS_HongHeiBetStandard_MsgID CS_HongHeiBetStandard::MsgID_MIN;
const CS_HongHeiBetStandard_MsgID CS_HongHeiBetStandard::MsgID_MAX;
const int CS_HongHeiBetStandard::MsgID_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* SC_HongHeiBetStandard_MsgID_descriptor() {
  protobuf_public_5fhhdz_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_public_5fhhdz_2eproto::file_level_enum_descriptors[11];
}
bool SC_HongHeiBetStandard_MsgID_IsValid(int value) {
  switch (value) {
    case 29011:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const SC_HongHeiBetStandard_MsgID SC_HongHeiBetStandard::ID;
const SC_HongHeiBetStandard_MsgID SC_HongHeiBetStandard::MsgID_MIN;
const SC_HongHeiBetStandard_MsgID SC_HongHeiBetStandard::MsgID_MAX;
const int SC_HongHeiBetStandard::MsgID_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* SC_HongHeiRichList_MsgID_descriptor() {
  protobuf_public_5fhhdz_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_public_5fhhdz_2eproto::file_level_enum_descriptors[12];
}
bool SC_HongHeiRichList_MsgID_IsValid(int value) {
  switch (value) {
    case 29012:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const SC_HongHeiRichList_MsgID SC_HongHeiRichList::ID;
const SC_HongHeiRichList_MsgID SC_HongHeiRichList::MsgID_MIN;
const SC_HongHeiRichList_MsgID SC_HongHeiRichList::MsgID_MAX;
const int SC_HongHeiRichList::MsgID_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* CS_HongHeiGetState_MsgID_descriptor() {
  protobuf_public_5fhhdz_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_public_5fhhdz_2eproto::file_level_enum_descriptors[13];
}
bool CS_HongHeiGetState_MsgID_IsValid(int value) {
  switch (value) {
    case 29013:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const CS_HongHeiGetState_MsgID CS_HongHeiGetState::ID;
const CS_HongHeiGetState_MsgID CS_HongHeiGetState::MsgID_MIN;
const CS_HongHeiGetState_MsgID CS_HongHeiGetState::MsgID_MAX;
const int CS_HongHeiGetState::MsgID_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* SC_HongHeiGetState_MsgID_descriptor() {
  protobuf_public_5fhhdz_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_public_5fhhdz_2eproto::file_level_enum_descriptors[14];
}
bool SC_HongHeiGetState_MsgID_IsValid(int value) {
  switch (value) {
    case 29014:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const SC_HongHeiGetState_MsgID SC_HongHeiGetState::ID;
const SC_HongHeiGetState_MsgID SC_HongHeiGetState::MsgID_MIN;
const SC_HongHeiGetState_MsgID SC_HongHeiGetState::MsgID_MAX;
const int SC_HongHeiGetState::MsgID_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SC_HongHeiCard::kRedCardsFieldNumber;
const int SC_HongHeiCard::kBlackCardsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SC_HongHeiCard::SC_HongHeiCard()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_public_5fhhdz_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:SC_HongHeiCard)
}
SC_HongHeiCard::SC_HongHeiCard(const SC_HongHeiCard& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      red_cards_(from.red_cards_),
      black_cards_(from.black_cards_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:SC_HongHeiCard)
}

void SC_HongHeiCard::SharedCtor() {
  _cached_size_ = 0;
}

SC_HongHeiCard::~SC_HongHeiCard() {
  // @@protoc_insertion_point(destructor:SC_HongHeiCard)
  SharedDtor();
}

void SC_HongHeiCard::SharedDtor() {
}

void SC_HongHeiCard::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SC_HongHeiCard::descriptor() {
  protobuf_public_5fhhdz_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_public_5fhhdz_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const SC_HongHeiCard& SC_HongHeiCard::default_instance() {
  protobuf_public_5fhhdz_2eproto::InitDefaults();
  return *internal_default_instance();
}

SC_HongHeiCard* SC_HongHeiCard::New(::google::protobuf::Arena* arena) const {
  SC_HongHeiCard* n = new SC_HongHeiCard;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SC_HongHeiCard::Clear() {
// @@protoc_insertion_point(message_clear_start:SC_HongHeiCard)
  red_cards_.Clear();
  black_cards_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool SC_HongHeiCard::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:SC_HongHeiCard)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated int32 red_cards = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 8u, input, this->mutable_red_cards())));
        } else if (static_cast< ::google::protobuf::uint8>(tag) ==
                   static_cast< ::google::protobuf::uint8>(10u)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_red_cards())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated int32 black_cards = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 16u, input, this->mutable_black_cards())));
        } else if (static_cast< ::google::protobuf::uint8>(tag) ==
                   static_cast< ::google::protobuf::uint8>(18u)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_black_cards())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:SC_HongHeiCard)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:SC_HongHeiCard)
  return false;
#undef DO_
}

void SC_HongHeiCard::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:SC_HongHeiCard)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated int32 red_cards = 1;
  for (int i = 0, n = this->red_cards_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      1, this->red_cards(i), output);
  }

  // repeated int32 black_cards = 2;
  for (int i = 0, n = this->black_cards_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      2, this->black_cards(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:SC_HongHeiCard)
}

::google::protobuf::uint8* SC_HongHeiCard::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:SC_HongHeiCard)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated int32 red_cards = 1;
  target = ::google::protobuf::internal::WireFormatLite::
    WriteInt32ToArray(1, this->red_cards_, target);

  // repeated int32 black_cards = 2;
  target = ::google::protobuf::internal::WireFormatLite::
    WriteInt32ToArray(2, this->black_cards_, target);

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SC_HongHeiCard)
  return target;
}

size_t SC_HongHeiCard::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SC_HongHeiCard)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // repeated int32 red_cards = 1;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      Int32Size(this->red_cards_);
    total_size += 1 *
                  ::google::protobuf::internal::FromIntSize(this->red_cards_size());
    total_size += data_size;
  }

  // repeated int32 black_cards = 2;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      Int32Size(this->black_cards_);
    total_size += 1 *
                  ::google::protobuf::internal::FromIntSize(this->black_cards_size());
    total_size += data_size;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SC_HongHeiCard::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:SC_HongHeiCard)
  GOOGLE_DCHECK_NE(&from, this);
  const SC_HongHeiCard* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SC_HongHeiCard>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:SC_HongHeiCard)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:SC_HongHeiCard)
    MergeFrom(*source);
  }
}

void SC_HongHeiCard::MergeFrom(const SC_HongHeiCard& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:SC_HongHeiCard)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  red_cards_.MergeFrom(from.red_cards_);
  black_cards_.MergeFrom(from.black_cards_);
}

void SC_HongHeiCard::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:SC_HongHeiCard)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SC_HongHeiCard::CopyFrom(const SC_HongHeiCard& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SC_HongHeiCard)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SC_HongHeiCard::IsInitialized() const {
  return true;
}

void SC_HongHeiCard::Swap(SC_HongHeiCard* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SC_HongHeiCard::InternalSwap(SC_HongHeiCard* other) {
  red_cards_.InternalSwap(&other->red_cards_);
  black_cards_.InternalSwap(&other->black_cards_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SC_HongHeiCard::GetMetadata() const {
  protobuf_public_5fhhdz_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_public_5fhhdz_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SC_HongHeiCard

// repeated int32 red_cards = 1;
int SC_HongHeiCard::red_cards_size() const {
  return red_cards_.size();
}
void SC_HongHeiCard::clear_red_cards() {
  red_cards_.Clear();
}
::google::protobuf::int32 SC_HongHeiCard::red_cards(int index) const {
  // @@protoc_insertion_point(field_get:SC_HongHeiCard.red_cards)
  return red_cards_.Get(index);
}
void SC_HongHeiCard::set_red_cards(int index, ::google::protobuf::int32 value) {
  red_cards_.Set(index, value);
  // @@protoc_insertion_point(field_set:SC_HongHeiCard.red_cards)
}
void SC_HongHeiCard::add_red_cards(::google::protobuf::int32 value) {
  red_cards_.Add(value);
  // @@protoc_insertion_point(field_add:SC_HongHeiCard.red_cards)
}
const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
SC_HongHeiCard::red_cards() const {
  // @@protoc_insertion_point(field_list:SC_HongHeiCard.red_cards)
  return red_cards_;
}
::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
SC_HongHeiCard::mutable_red_cards() {
  // @@protoc_insertion_point(field_mutable_list:SC_HongHeiCard.red_cards)
  return &red_cards_;
}

// repeated int32 black_cards = 2;
int SC_HongHeiCard::black_cards_size() const {
  return black_cards_.size();
}
void SC_HongHeiCard::clear_black_cards() {
  black_cards_.Clear();
}
::google::protobuf::int32 SC_HongHeiCard::black_cards(int index) const {
  // @@protoc_insertion_point(field_get:SC_HongHeiCard.black_cards)
  return black_cards_.Get(index);
}
void SC_HongHeiCard::set_black_cards(int index, ::google::protobuf::int32 value) {
  black_cards_.Set(index, value);
  // @@protoc_insertion_point(field_set:SC_HongHeiCard.black_cards)
}
void SC_HongHeiCard::add_black_cards(::google::protobuf::int32 value) {
  black_cards_.Add(value);
  // @@protoc_insertion_point(field_add:SC_HongHeiCard.black_cards)
}
const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
SC_HongHeiCard::black_cards() const {
  // @@protoc_insertion_point(field_list:SC_HongHeiCard.black_cards)
  return black_cards_;
}
::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
SC_HongHeiCard::mutable_black_cards() {
  // @@protoc_insertion_point(field_mutable_list:SC_HongHeiCard.black_cards)
  return &black_cards_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SC_HongHeiOnlinePlayer::kHeaderIconFieldNumber;
const int SC_HongHeiOnlinePlayer::kIpAreaFieldNumber;
const int SC_HongHeiOnlinePlayer::kPlayerMoneyFieldNumber;
const int SC_HongHeiOnlinePlayer::kPlayerBetFieldNumber;
const int SC_HongHeiOnlinePlayer::kPlayerWinFieldNumber;
const int SC_HongHeiOnlinePlayer::kPlayerRankFieldNumber;
const int SC_HongHeiOnlinePlayer::kWinLostFieldNumber;
const int SC_HongHeiOnlinePlayer::kWinMoneyFieldNumber;
const int SC_HongHeiOnlinePlayer::kGuidFieldNumber;
const int SC_HongHeiOnlinePlayer::kChairIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SC_HongHeiOnlinePlayer::SC_HongHeiOnlinePlayer()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_public_5fhhdz_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:SC_HongHeiOnlinePlayer)
}
SC_HongHeiOnlinePlayer::SC_HongHeiOnlinePlayer(const SC_HongHeiOnlinePlayer& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ip_area_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_ip_area()) {
    ip_area_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.ip_area_);
  }
  ::memcpy(&header_icon_, &from.header_icon_,
    reinterpret_cast<char*>(&chair_id_) -
    reinterpret_cast<char*>(&header_icon_) + sizeof(chair_id_));
  // @@protoc_insertion_point(copy_constructor:SC_HongHeiOnlinePlayer)
}

void SC_HongHeiOnlinePlayer::SharedCtor() {
  _cached_size_ = 0;
  ip_area_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&header_icon_, 0, reinterpret_cast<char*>(&chair_id_) -
    reinterpret_cast<char*>(&header_icon_) + sizeof(chair_id_));
}

SC_HongHeiOnlinePlayer::~SC_HongHeiOnlinePlayer() {
  // @@protoc_insertion_point(destructor:SC_HongHeiOnlinePlayer)
  SharedDtor();
}

void SC_HongHeiOnlinePlayer::SharedDtor() {
  ip_area_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void SC_HongHeiOnlinePlayer::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SC_HongHeiOnlinePlayer::descriptor() {
  protobuf_public_5fhhdz_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_public_5fhhdz_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const SC_HongHeiOnlinePlayer& SC_HongHeiOnlinePlayer::default_instance() {
  protobuf_public_5fhhdz_2eproto::InitDefaults();
  return *internal_default_instance();
}

SC_HongHeiOnlinePlayer* SC_HongHeiOnlinePlayer::New(::google::protobuf::Arena* arena) const {
  SC_HongHeiOnlinePlayer* n = new SC_HongHeiOnlinePlayer;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SC_HongHeiOnlinePlayer::Clear() {
// @@protoc_insertion_point(message_clear_start:SC_HongHeiOnlinePlayer)
  if (has_ip_area()) {
    GOOGLE_DCHECK(!ip_area_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
    (*ip_area_.UnsafeRawStringPointer())->clear();
  }
  if (_has_bits_[0 / 32] & 254u) {
    ::memset(&header_icon_, 0, reinterpret_cast<char*>(&win_money_) -
      reinterpret_cast<char*>(&header_icon_) + sizeof(win_money_));
  }
  if (_has_bits_[8 / 32] & 768u) {
    ::memset(&guid_, 0, reinterpret_cast<char*>(&chair_id_) -
      reinterpret_cast<char*>(&guid_) + sizeof(chair_id_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool SC_HongHeiOnlinePlayer::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:SC_HongHeiOnlinePlayer)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 header_icon = 1 [default = 0];
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_header_icon();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &header_icon_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string ip_area = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_ip_area()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->ip_area().data(), this->ip_area().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "SC_HongHeiOnlinePlayer.ip_area");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 player_money = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {
          set_has_player_money();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &player_money_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 player_bet = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u)) {
          set_has_player_bet();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &player_bet_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 player_win = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u)) {
          set_has_player_win();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &player_win_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 player_rank = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u)) {
          set_has_player_rank();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &player_rank_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 win_lost = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u)) {
          set_has_win_lost();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &win_lost_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 win_money = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(64u)) {
          set_has_win_money();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &win_money_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 guid = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(72u)) {
          set_has_guid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &guid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 chair_id = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(80u)) {
          set_has_chair_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &chair_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:SC_HongHeiOnlinePlayer)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:SC_HongHeiOnlinePlayer)
  return false;
#undef DO_
}

void SC_HongHeiOnlinePlayer::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:SC_HongHeiOnlinePlayer)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 header_icon = 1 [default = 0];
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->header_icon(), output);
  }

  // optional string ip_area = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->ip_area().data(), this->ip_area().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "SC_HongHeiOnlinePlayer.ip_area");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->ip_area(), output);
  }

  // optional int32 player_money = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->player_money(), output);
  }

  // optional int32 player_bet = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->player_bet(), output);
  }

  // optional int32 player_win = 5;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->player_win(), output);
  }

  // optional int32 player_rank = 6;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->player_rank(), output);
  }

  // optional int32 win_lost = 7;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->win_lost(), output);
  }

  // optional int32 win_money = 8;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->win_money(), output);
  }

  // optional int32 guid = 9;
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->guid(), output);
  }

  // optional int32 chair_id = 10;
  if (cached_has_bits & 0x00000200u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->chair_id(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:SC_HongHeiOnlinePlayer)
}

::google::protobuf::uint8* SC_HongHeiOnlinePlayer::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:SC_HongHeiOnlinePlayer)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 header_icon = 1 [default = 0];
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->header_icon(), target);
  }

  // optional string ip_area = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->ip_area().data(), this->ip_area().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "SC_HongHeiOnlinePlayer.ip_area");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->ip_area(), target);
  }

  // optional int32 player_money = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->player_money(), target);
  }

  // optional int32 player_bet = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->player_bet(), target);
  }

  // optional int32 player_win = 5;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->player_win(), target);
  }

  // optional int32 player_rank = 6;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->player_rank(), target);
  }

  // optional int32 win_lost = 7;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->win_lost(), target);
  }

  // optional int32 win_money = 8;
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->win_money(), target);
  }

  // optional int32 guid = 9;
  if (cached_has_bits & 0x00000100u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->guid(), target);
  }

  // optional int32 chair_id = 10;
  if (cached_has_bits & 0x00000200u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(10, this->chair_id(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SC_HongHeiOnlinePlayer)
  return target;
}

size_t SC_HongHeiOnlinePlayer::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SC_HongHeiOnlinePlayer)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 255u) {
    // optional string ip_area = 2;
    if (has_ip_area()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->ip_area());
    }

    // optional int32 header_icon = 1 [default = 0];
    if (has_header_icon()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->header_icon());
    }

    // optional int32 player_money = 3;
    if (has_player_money()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->player_money());
    }

    // optional int32 player_bet = 4;
    if (has_player_bet()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->player_bet());
    }

    // optional int32 player_win = 5;
    if (has_player_win()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->player_win());
    }

    // optional int32 player_rank = 6;
    if (has_player_rank()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->player_rank());
    }

    // optional int32 win_lost = 7;
    if (has_win_lost()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->win_lost());
    }

    // optional int32 win_money = 8;
    if (has_win_money()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->win_money());
    }

  }
  if (_has_bits_[8 / 32] & 768u) {
    // optional int32 guid = 9;
    if (has_guid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->guid());
    }

    // optional int32 chair_id = 10;
    if (has_chair_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->chair_id());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SC_HongHeiOnlinePlayer::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:SC_HongHeiOnlinePlayer)
  GOOGLE_DCHECK_NE(&from, this);
  const SC_HongHeiOnlinePlayer* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SC_HongHeiOnlinePlayer>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:SC_HongHeiOnlinePlayer)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:SC_HongHeiOnlinePlayer)
    MergeFrom(*source);
  }
}

void SC_HongHeiOnlinePlayer::MergeFrom(const SC_HongHeiOnlinePlayer& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:SC_HongHeiOnlinePlayer)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_ip_area();
      ip_area_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.ip_area_);
    }
    if (cached_has_bits & 0x00000002u) {
      header_icon_ = from.header_icon_;
    }
    if (cached_has_bits & 0x00000004u) {
      player_money_ = from.player_money_;
    }
    if (cached_has_bits & 0x00000008u) {
      player_bet_ = from.player_bet_;
    }
    if (cached_has_bits & 0x00000010u) {
      player_win_ = from.player_win_;
    }
    if (cached_has_bits & 0x00000020u) {
      player_rank_ = from.player_rank_;
    }
    if (cached_has_bits & 0x00000040u) {
      win_lost_ = from.win_lost_;
    }
    if (cached_has_bits & 0x00000080u) {
      win_money_ = from.win_money_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 768u) {
    if (cached_has_bits & 0x00000100u) {
      guid_ = from.guid_;
    }
    if (cached_has_bits & 0x00000200u) {
      chair_id_ = from.chair_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void SC_HongHeiOnlinePlayer::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:SC_HongHeiOnlinePlayer)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SC_HongHeiOnlinePlayer::CopyFrom(const SC_HongHeiOnlinePlayer& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SC_HongHeiOnlinePlayer)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SC_HongHeiOnlinePlayer::IsInitialized() const {
  return true;
}

void SC_HongHeiOnlinePlayer::Swap(SC_HongHeiOnlinePlayer* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SC_HongHeiOnlinePlayer::InternalSwap(SC_HongHeiOnlinePlayer* other) {
  ip_area_.Swap(&other->ip_area_);
  std::swap(header_icon_, other->header_icon_);
  std::swap(player_money_, other->player_money_);
  std::swap(player_bet_, other->player_bet_);
  std::swap(player_win_, other->player_win_);
  std::swap(player_rank_, other->player_rank_);
  std::swap(win_lost_, other->win_lost_);
  std::swap(win_money_, other->win_money_);
  std::swap(guid_, other->guid_);
  std::swap(chair_id_, other->chair_id_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SC_HongHeiOnlinePlayer::GetMetadata() const {
  protobuf_public_5fhhdz_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_public_5fhhdz_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SC_HongHeiOnlinePlayer

// optional int32 header_icon = 1 [default = 0];
bool SC_HongHeiOnlinePlayer::has_header_icon() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void SC_HongHeiOnlinePlayer::set_has_header_icon() {
  _has_bits_[0] |= 0x00000002u;
}
void SC_HongHeiOnlinePlayer::clear_has_header_icon() {
  _has_bits_[0] &= ~0x00000002u;
}
void SC_HongHeiOnlinePlayer::clear_header_icon() {
  header_icon_ = 0;
  clear_has_header_icon();
}
::google::protobuf::int32 SC_HongHeiOnlinePlayer::header_icon() const {
  // @@protoc_insertion_point(field_get:SC_HongHeiOnlinePlayer.header_icon)
  return header_icon_;
}
void SC_HongHeiOnlinePlayer::set_header_icon(::google::protobuf::int32 value) {
  set_has_header_icon();
  header_icon_ = value;
  // @@protoc_insertion_point(field_set:SC_HongHeiOnlinePlayer.header_icon)
}

// optional string ip_area = 2;
bool SC_HongHeiOnlinePlayer::has_ip_area() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void SC_HongHeiOnlinePlayer::set_has_ip_area() {
  _has_bits_[0] |= 0x00000001u;
}
void SC_HongHeiOnlinePlayer::clear_has_ip_area() {
  _has_bits_[0] &= ~0x00000001u;
}
void SC_HongHeiOnlinePlayer::clear_ip_area() {
  ip_area_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_ip_area();
}
const ::std::string& SC_HongHeiOnlinePlayer::ip_area() const {
  // @@protoc_insertion_point(field_get:SC_HongHeiOnlinePlayer.ip_area)
  return ip_area_.GetNoArena();
}
void SC_HongHeiOnlinePlayer::set_ip_area(const ::std::string& value) {
  set_has_ip_area();
  ip_area_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:SC_HongHeiOnlinePlayer.ip_area)
}
#if LANG_CXX11
void SC_HongHeiOnlinePlayer::set_ip_area(::std::string&& value) {
  set_has_ip_area();
  ip_area_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:SC_HongHeiOnlinePlayer.ip_area)
}
#endif
void SC_HongHeiOnlinePlayer::set_ip_area(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_ip_area();
  ip_area_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:SC_HongHeiOnlinePlayer.ip_area)
}
void SC_HongHeiOnlinePlayer::set_ip_area(const char* value, size_t size) {
  set_has_ip_area();
  ip_area_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:SC_HongHeiOnlinePlayer.ip_area)
}
::std::string* SC_HongHeiOnlinePlayer::mutable_ip_area() {
  set_has_ip_area();
  // @@protoc_insertion_point(field_mutable:SC_HongHeiOnlinePlayer.ip_area)
  return ip_area_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* SC_HongHeiOnlinePlayer::release_ip_area() {
  // @@protoc_insertion_point(field_release:SC_HongHeiOnlinePlayer.ip_area)
  clear_has_ip_area();
  return ip_area_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void SC_HongHeiOnlinePlayer::set_allocated_ip_area(::std::string* ip_area) {
  if (ip_area != NULL) {
    set_has_ip_area();
  } else {
    clear_has_ip_area();
  }
  ip_area_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ip_area);
  // @@protoc_insertion_point(field_set_allocated:SC_HongHeiOnlinePlayer.ip_area)
}

// optional int32 player_money = 3;
bool SC_HongHeiOnlinePlayer::has_player_money() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void SC_HongHeiOnlinePlayer::set_has_player_money() {
  _has_bits_[0] |= 0x00000004u;
}
void SC_HongHeiOnlinePlayer::clear_has_player_money() {
  _has_bits_[0] &= ~0x00000004u;
}
void SC_HongHeiOnlinePlayer::clear_player_money() {
  player_money_ = 0;
  clear_has_player_money();
}
::google::protobuf::int32 SC_HongHeiOnlinePlayer::player_money() const {
  // @@protoc_insertion_point(field_get:SC_HongHeiOnlinePlayer.player_money)
  return player_money_;
}
void SC_HongHeiOnlinePlayer::set_player_money(::google::protobuf::int32 value) {
  set_has_player_money();
  player_money_ = value;
  // @@protoc_insertion_point(field_set:SC_HongHeiOnlinePlayer.player_money)
}

// optional int32 player_bet = 4;
bool SC_HongHeiOnlinePlayer::has_player_bet() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void SC_HongHeiOnlinePlayer::set_has_player_bet() {
  _has_bits_[0] |= 0x00000008u;
}
void SC_HongHeiOnlinePlayer::clear_has_player_bet() {
  _has_bits_[0] &= ~0x00000008u;
}
void SC_HongHeiOnlinePlayer::clear_player_bet() {
  player_bet_ = 0;
  clear_has_player_bet();
}
::google::protobuf::int32 SC_HongHeiOnlinePlayer::player_bet() const {
  // @@protoc_insertion_point(field_get:SC_HongHeiOnlinePlayer.player_bet)
  return player_bet_;
}
void SC_HongHeiOnlinePlayer::set_player_bet(::google::protobuf::int32 value) {
  set_has_player_bet();
  player_bet_ = value;
  // @@protoc_insertion_point(field_set:SC_HongHeiOnlinePlayer.player_bet)
}

// optional int32 player_win = 5;
bool SC_HongHeiOnlinePlayer::has_player_win() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void SC_HongHeiOnlinePlayer::set_has_player_win() {
  _has_bits_[0] |= 0x00000010u;
}
void SC_HongHeiOnlinePlayer::clear_has_player_win() {
  _has_bits_[0] &= ~0x00000010u;
}
void SC_HongHeiOnlinePlayer::clear_player_win() {
  player_win_ = 0;
  clear_has_player_win();
}
::google::protobuf::int32 SC_HongHeiOnlinePlayer::player_win() const {
  // @@protoc_insertion_point(field_get:SC_HongHeiOnlinePlayer.player_win)
  return player_win_;
}
void SC_HongHeiOnlinePlayer::set_player_win(::google::protobuf::int32 value) {
  set_has_player_win();
  player_win_ = value;
  // @@protoc_insertion_point(field_set:SC_HongHeiOnlinePlayer.player_win)
}

// optional int32 player_rank = 6;
bool SC_HongHeiOnlinePlayer::has_player_rank() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void SC_HongHeiOnlinePlayer::set_has_player_rank() {
  _has_bits_[0] |= 0x00000020u;
}
void SC_HongHeiOnlinePlayer::clear_has_player_rank() {
  _has_bits_[0] &= ~0x00000020u;
}
void SC_HongHeiOnlinePlayer::clear_player_rank() {
  player_rank_ = 0;
  clear_has_player_rank();
}
::google::protobuf::int32 SC_HongHeiOnlinePlayer::player_rank() const {
  // @@protoc_insertion_point(field_get:SC_HongHeiOnlinePlayer.player_rank)
  return player_rank_;
}
void SC_HongHeiOnlinePlayer::set_player_rank(::google::protobuf::int32 value) {
  set_has_player_rank();
  player_rank_ = value;
  // @@protoc_insertion_point(field_set:SC_HongHeiOnlinePlayer.player_rank)
}

// optional int32 win_lost = 7;
bool SC_HongHeiOnlinePlayer::has_win_lost() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void SC_HongHeiOnlinePlayer::set_has_win_lost() {
  _has_bits_[0] |= 0x00000040u;
}
void SC_HongHeiOnlinePlayer::clear_has_win_lost() {
  _has_bits_[0] &= ~0x00000040u;
}
void SC_HongHeiOnlinePlayer::clear_win_lost() {
  win_lost_ = 0;
  clear_has_win_lost();
}
::google::protobuf::int32 SC_HongHeiOnlinePlayer::win_lost() const {
  // @@protoc_insertion_point(field_get:SC_HongHeiOnlinePlayer.win_lost)
  return win_lost_;
}
void SC_HongHeiOnlinePlayer::set_win_lost(::google::protobuf::int32 value) {
  set_has_win_lost();
  win_lost_ = value;
  // @@protoc_insertion_point(field_set:SC_HongHeiOnlinePlayer.win_lost)
}

// optional int32 win_money = 8;
bool SC_HongHeiOnlinePlayer::has_win_money() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void SC_HongHeiOnlinePlayer::set_has_win_money() {
  _has_bits_[0] |= 0x00000080u;
}
void SC_HongHeiOnlinePlayer::clear_has_win_money() {
  _has_bits_[0] &= ~0x00000080u;
}
void SC_HongHeiOnlinePlayer::clear_win_money() {
  win_money_ = 0;
  clear_has_win_money();
}
::google::protobuf::int32 SC_HongHeiOnlinePlayer::win_money() const {
  // @@protoc_insertion_point(field_get:SC_HongHeiOnlinePlayer.win_money)
  return win_money_;
}
void SC_HongHeiOnlinePlayer::set_win_money(::google::protobuf::int32 value) {
  set_has_win_money();
  win_money_ = value;
  // @@protoc_insertion_point(field_set:SC_HongHeiOnlinePlayer.win_money)
}

// optional int32 guid = 9;
bool SC_HongHeiOnlinePlayer::has_guid() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
void SC_HongHeiOnlinePlayer::set_has_guid() {
  _has_bits_[0] |= 0x00000100u;
}
void SC_HongHeiOnlinePlayer::clear_has_guid() {
  _has_bits_[0] &= ~0x00000100u;
}
void SC_HongHeiOnlinePlayer::clear_guid() {
  guid_ = 0;
  clear_has_guid();
}
::google::protobuf::int32 SC_HongHeiOnlinePlayer::guid() const {
  // @@protoc_insertion_point(field_get:SC_HongHeiOnlinePlayer.guid)
  return guid_;
}
void SC_HongHeiOnlinePlayer::set_guid(::google::protobuf::int32 value) {
  set_has_guid();
  guid_ = value;
  // @@protoc_insertion_point(field_set:SC_HongHeiOnlinePlayer.guid)
}

// optional int32 chair_id = 10;
bool SC_HongHeiOnlinePlayer::has_chair_id() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
void SC_HongHeiOnlinePlayer::set_has_chair_id() {
  _has_bits_[0] |= 0x00000200u;
}
void SC_HongHeiOnlinePlayer::clear_has_chair_id() {
  _has_bits_[0] &= ~0x00000200u;
}
void SC_HongHeiOnlinePlayer::clear_chair_id() {
  chair_id_ = 0;
  clear_has_chair_id();
}
::google::protobuf::int32 SC_HongHeiOnlinePlayer::chair_id() const {
  // @@protoc_insertion_point(field_get:SC_HongHeiOnlinePlayer.chair_id)
  return chair_id_;
}
void SC_HongHeiOnlinePlayer::set_chair_id(::google::protobuf::int32 value) {
  set_has_chair_id();
  chair_id_ = value;
  // @@protoc_insertion_point(field_set:SC_HongHeiOnlinePlayer.chair_id)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SC_HongHeiRecord::kWinColorFieldNumber;
const int SC_HongHeiRecord::kWinTypeFieldNumber;
const int SC_HongHeiRecord::kTurnFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SC_HongHeiRecord::SC_HongHeiRecord()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_public_5fhhdz_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:SC_HongHeiRecord)
}
SC_HongHeiRecord::SC_HongHeiRecord(const SC_HongHeiRecord& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&win_color_, &from.win_color_,
    reinterpret_cast<char*>(&turn_) -
    reinterpret_cast<char*>(&win_color_) + sizeof(turn_));
  // @@protoc_insertion_point(copy_constructor:SC_HongHeiRecord)
}

void SC_HongHeiRecord::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&win_color_, 0, reinterpret_cast<char*>(&turn_) -
    reinterpret_cast<char*>(&win_color_) + sizeof(turn_));
}

SC_HongHeiRecord::~SC_HongHeiRecord() {
  // @@protoc_insertion_point(destructor:SC_HongHeiRecord)
  SharedDtor();
}

void SC_HongHeiRecord::SharedDtor() {
}

void SC_HongHeiRecord::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SC_HongHeiRecord::descriptor() {
  protobuf_public_5fhhdz_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_public_5fhhdz_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const SC_HongHeiRecord& SC_HongHeiRecord::default_instance() {
  protobuf_public_5fhhdz_2eproto::InitDefaults();
  return *internal_default_instance();
}

SC_HongHeiRecord* SC_HongHeiRecord::New(::google::protobuf::Arena* arena) const {
  SC_HongHeiRecord* n = new SC_HongHeiRecord;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SC_HongHeiRecord::Clear() {
// @@protoc_insertion_point(message_clear_start:SC_HongHeiRecord)
  if (_has_bits_[0 / 32] & 7u) {
    ::memset(&win_color_, 0, reinterpret_cast<char*>(&turn_) -
      reinterpret_cast<char*>(&win_color_) + sizeof(turn_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool SC_HongHeiRecord::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:SC_HongHeiRecord)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 win_color = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_win_color();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &win_color_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 win_type = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_win_type();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &win_type_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 turn = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {
          set_has_turn();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &turn_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:SC_HongHeiRecord)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:SC_HongHeiRecord)
  return false;
#undef DO_
}

void SC_HongHeiRecord::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:SC_HongHeiRecord)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 win_color = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->win_color(), output);
  }

  // optional int32 win_type = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->win_type(), output);
  }

  // optional int32 turn = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->turn(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:SC_HongHeiRecord)
}

::google::protobuf::uint8* SC_HongHeiRecord::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:SC_HongHeiRecord)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 win_color = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->win_color(), target);
  }

  // optional int32 win_type = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->win_type(), target);
  }

  // optional int32 turn = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->turn(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SC_HongHeiRecord)
  return target;
}

size_t SC_HongHeiRecord::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SC_HongHeiRecord)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 7u) {
    // optional int32 win_color = 1;
    if (has_win_color()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->win_color());
    }

    // optional int32 win_type = 2;
    if (has_win_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->win_type());
    }

    // optional int32 turn = 3;
    if (has_turn()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->turn());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SC_HongHeiRecord::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:SC_HongHeiRecord)
  GOOGLE_DCHECK_NE(&from, this);
  const SC_HongHeiRecord* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SC_HongHeiRecord>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:SC_HongHeiRecord)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:SC_HongHeiRecord)
    MergeFrom(*source);
  }
}

void SC_HongHeiRecord::MergeFrom(const SC_HongHeiRecord& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:SC_HongHeiRecord)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      win_color_ = from.win_color_;
    }
    if (cached_has_bits & 0x00000002u) {
      win_type_ = from.win_type_;
    }
    if (cached_has_bits & 0x00000004u) {
      turn_ = from.turn_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void SC_HongHeiRecord::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:SC_HongHeiRecord)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SC_HongHeiRecord::CopyFrom(const SC_HongHeiRecord& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SC_HongHeiRecord)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SC_HongHeiRecord::IsInitialized() const {
  return true;
}

void SC_HongHeiRecord::Swap(SC_HongHeiRecord* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SC_HongHeiRecord::InternalSwap(SC_HongHeiRecord* other) {
  std::swap(win_color_, other->win_color_);
  std::swap(win_type_, other->win_type_);
  std::swap(turn_, other->turn_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SC_HongHeiRecord::GetMetadata() const {
  protobuf_public_5fhhdz_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_public_5fhhdz_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SC_HongHeiRecord

// optional int32 win_color = 1;
bool SC_HongHeiRecord::has_win_color() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void SC_HongHeiRecord::set_has_win_color() {
  _has_bits_[0] |= 0x00000001u;
}
void SC_HongHeiRecord::clear_has_win_color() {
  _has_bits_[0] &= ~0x00000001u;
}
void SC_HongHeiRecord::clear_win_color() {
  win_color_ = 0;
  clear_has_win_color();
}
::google::protobuf::int32 SC_HongHeiRecord::win_color() const {
  // @@protoc_insertion_point(field_get:SC_HongHeiRecord.win_color)
  return win_color_;
}
void SC_HongHeiRecord::set_win_color(::google::protobuf::int32 value) {
  set_has_win_color();
  win_color_ = value;
  // @@protoc_insertion_point(field_set:SC_HongHeiRecord.win_color)
}

// optional int32 win_type = 2;
bool SC_HongHeiRecord::has_win_type() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void SC_HongHeiRecord::set_has_win_type() {
  _has_bits_[0] |= 0x00000002u;
}
void SC_HongHeiRecord::clear_has_win_type() {
  _has_bits_[0] &= ~0x00000002u;
}
void SC_HongHeiRecord::clear_win_type() {
  win_type_ = 0;
  clear_has_win_type();
}
::google::protobuf::int32 SC_HongHeiRecord::win_type() const {
  // @@protoc_insertion_point(field_get:SC_HongHeiRecord.win_type)
  return win_type_;
}
void SC_HongHeiRecord::set_win_type(::google::protobuf::int32 value) {
  set_has_win_type();
  win_type_ = value;
  // @@protoc_insertion_point(field_set:SC_HongHeiRecord.win_type)
}

// optional int32 turn = 3;
bool SC_HongHeiRecord::has_turn() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void SC_HongHeiRecord::set_has_turn() {
  _has_bits_[0] |= 0x00000004u;
}
void SC_HongHeiRecord::clear_has_turn() {
  _has_bits_[0] &= ~0x00000004u;
}
void SC_HongHeiRecord::clear_turn() {
  turn_ = 0;
  clear_has_turn();
}
::google::protobuf::int32 SC_HongHeiRecord::turn() const {
  // @@protoc_insertion_point(field_get:SC_HongHeiRecord.turn)
  return turn_;
}
void SC_HongHeiRecord::set_turn(::google::protobuf::int32 value) {
  set_has_turn();
  turn_ = value;
  // @@protoc_insertion_point(field_set:SC_HongHeiRecord.turn)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SC_HongHeiRichPlayer::kChairFieldNumber;
const int SC_HongHeiRichPlayer::kMoneyFieldNumber;
const int SC_HongHeiRichPlayer::kTaxFieldNumber;
const int SC_HongHeiRichPlayer::kVictoryFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SC_HongHeiRichPlayer::SC_HongHeiRichPlayer()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_public_5fhhdz_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:SC_HongHeiRichPlayer)
}
SC_HongHeiRichPlayer::SC_HongHeiRichPlayer(const SC_HongHeiRichPlayer& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&money_, &from.money_,
    reinterpret_cast<char*>(&tax_) -
    reinterpret_cast<char*>(&money_) + sizeof(tax_));
  // @@protoc_insertion_point(copy_constructor:SC_HongHeiRichPlayer)
}

void SC_HongHeiRichPlayer::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&money_, 0, reinterpret_cast<char*>(&tax_) -
    reinterpret_cast<char*>(&money_) + sizeof(tax_));
}

SC_HongHeiRichPlayer::~SC_HongHeiRichPlayer() {
  // @@protoc_insertion_point(destructor:SC_HongHeiRichPlayer)
  SharedDtor();
}

void SC_HongHeiRichPlayer::SharedDtor() {
}

void SC_HongHeiRichPlayer::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SC_HongHeiRichPlayer::descriptor() {
  protobuf_public_5fhhdz_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_public_5fhhdz_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const SC_HongHeiRichPlayer& SC_HongHeiRichPlayer::default_instance() {
  protobuf_public_5fhhdz_2eproto::InitDefaults();
  return *internal_default_instance();
}

SC_HongHeiRichPlayer* SC_HongHeiRichPlayer::New(::google::protobuf::Arena* arena) const {
  SC_HongHeiRichPlayer* n = new SC_HongHeiRichPlayer;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SC_HongHeiRichPlayer::Clear() {
// @@protoc_insertion_point(message_clear_start:SC_HongHeiRichPlayer)
  if (_has_bits_[0 / 32] & 15u) {
    ::memset(&money_, 0, reinterpret_cast<char*>(&tax_) -
      reinterpret_cast<char*>(&money_) + sizeof(tax_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool SC_HongHeiRichPlayer::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:SC_HongHeiRichPlayer)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 chair = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_chair();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &chair_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 money = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_money();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &money_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 tax = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {
          set_has_tax();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &tax_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 victory = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u)) {
          set_has_victory();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &victory_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:SC_HongHeiRichPlayer)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:SC_HongHeiRichPlayer)
  return false;
#undef DO_
}

void SC_HongHeiRichPlayer::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:SC_HongHeiRichPlayer)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 chair = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->chair(), output);
  }

  // optional int64 money = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->money(), output);
  }

  // optional int64 tax = 3;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->tax(), output);
  }

  // optional int32 victory = 4;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->victory(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:SC_HongHeiRichPlayer)
}

::google::protobuf::uint8* SC_HongHeiRichPlayer::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:SC_HongHeiRichPlayer)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 chair = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->chair(), target);
  }

  // optional int64 money = 2;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->money(), target);
  }

  // optional int64 tax = 3;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->tax(), target);
  }

  // optional int32 victory = 4;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->victory(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SC_HongHeiRichPlayer)
  return target;
}

size_t SC_HongHeiRichPlayer::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SC_HongHeiRichPlayer)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 15u) {
    // optional int64 money = 2;
    if (has_money()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->money());
    }

    // optional int32 chair = 1;
    if (has_chair()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->chair());
    }

    // optional int32 victory = 4;
    if (has_victory()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->victory());
    }

    // optional int64 tax = 3;
    if (has_tax()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->tax());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SC_HongHeiRichPlayer::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:SC_HongHeiRichPlayer)
  GOOGLE_DCHECK_NE(&from, this);
  const SC_HongHeiRichPlayer* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SC_HongHeiRichPlayer>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:SC_HongHeiRichPlayer)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:SC_HongHeiRichPlayer)
    MergeFrom(*source);
  }
}

void SC_HongHeiRichPlayer::MergeFrom(const SC_HongHeiRichPlayer& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:SC_HongHeiRichPlayer)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 15u) {
    if (cached_has_bits & 0x00000001u) {
      money_ = from.money_;
    }
    if (cached_has_bits & 0x00000002u) {
      chair_ = from.chair_;
    }
    if (cached_has_bits & 0x00000004u) {
      victory_ = from.victory_;
    }
    if (cached_has_bits & 0x00000008u) {
      tax_ = from.tax_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void SC_HongHeiRichPlayer::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:SC_HongHeiRichPlayer)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SC_HongHeiRichPlayer::CopyFrom(const SC_HongHeiRichPlayer& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SC_HongHeiRichPlayer)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SC_HongHeiRichPlayer::IsInitialized() const {
  return true;
}

void SC_HongHeiRichPlayer::Swap(SC_HongHeiRichPlayer* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SC_HongHeiRichPlayer::InternalSwap(SC_HongHeiRichPlayer* other) {
  std::swap(money_, other->money_);
  std::swap(chair_, other->chair_);
  std::swap(victory_, other->victory_);
  std::swap(tax_, other->tax_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SC_HongHeiRichPlayer::GetMetadata() const {
  protobuf_public_5fhhdz_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_public_5fhhdz_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SC_HongHeiRichPlayer

// optional int32 chair = 1;
bool SC_HongHeiRichPlayer::has_chair() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void SC_HongHeiRichPlayer::set_has_chair() {
  _has_bits_[0] |= 0x00000002u;
}
void SC_HongHeiRichPlayer::clear_has_chair() {
  _has_bits_[0] &= ~0x00000002u;
}
void SC_HongHeiRichPlayer::clear_chair() {
  chair_ = 0;
  clear_has_chair();
}
::google::protobuf::int32 SC_HongHeiRichPlayer::chair() const {
  // @@protoc_insertion_point(field_get:SC_HongHeiRichPlayer.chair)
  return chair_;
}
void SC_HongHeiRichPlayer::set_chair(::google::protobuf::int32 value) {
  set_has_chair();
  chair_ = value;
  // @@protoc_insertion_point(field_set:SC_HongHeiRichPlayer.chair)
}

// optional int64 money = 2;
bool SC_HongHeiRichPlayer::has_money() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void SC_HongHeiRichPlayer::set_has_money() {
  _has_bits_[0] |= 0x00000001u;
}
void SC_HongHeiRichPlayer::clear_has_money() {
  _has_bits_[0] &= ~0x00000001u;
}
void SC_HongHeiRichPlayer::clear_money() {
  money_ = GOOGLE_LONGLONG(0);
  clear_has_money();
}
::google::protobuf::int64 SC_HongHeiRichPlayer::money() const {
  // @@protoc_insertion_point(field_get:SC_HongHeiRichPlayer.money)
  return money_;
}
void SC_HongHeiRichPlayer::set_money(::google::protobuf::int64 value) {
  set_has_money();
  money_ = value;
  // @@protoc_insertion_point(field_set:SC_HongHeiRichPlayer.money)
}

// optional int64 tax = 3;
bool SC_HongHeiRichPlayer::has_tax() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void SC_HongHeiRichPlayer::set_has_tax() {
  _has_bits_[0] |= 0x00000008u;
}
void SC_HongHeiRichPlayer::clear_has_tax() {
  _has_bits_[0] &= ~0x00000008u;
}
void SC_HongHeiRichPlayer::clear_tax() {
  tax_ = GOOGLE_LONGLONG(0);
  clear_has_tax();
}
::google::protobuf::int64 SC_HongHeiRichPlayer::tax() const {
  // @@protoc_insertion_point(field_get:SC_HongHeiRichPlayer.tax)
  return tax_;
}
void SC_HongHeiRichPlayer::set_tax(::google::protobuf::int64 value) {
  set_has_tax();
  tax_ = value;
  // @@protoc_insertion_point(field_set:SC_HongHeiRichPlayer.tax)
}

// optional int32 victory = 4;
bool SC_HongHeiRichPlayer::has_victory() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void SC_HongHeiRichPlayer::set_has_victory() {
  _has_bits_[0] |= 0x00000004u;
}
void SC_HongHeiRichPlayer::clear_has_victory() {
  _has_bits_[0] &= ~0x00000004u;
}
void SC_HongHeiRichPlayer::clear_victory() {
  victory_ = 0;
  clear_has_victory();
}
::google::protobuf::int32 SC_HongHeiRichPlayer::victory() const {
  // @@protoc_insertion_point(field_get:SC_HongHeiRichPlayer.victory)
  return victory_;
}
void SC_HongHeiRichPlayer::set_victory(::google::protobuf::int32 value) {
  set_has_victory();
  victory_ = value;
  // @@protoc_insertion_point(field_set:SC_HongHeiRichPlayer.victory)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SC_HongHeiStart::kStartWaittimeFieldNumber;
const int SC_HongHeiStart::kPlayerbetsFieldNumber;
const int SC_HongHeiStart::kAllbetsFieldNumber;
const int SC_HongHeiStart::kTableStatusFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SC_HongHeiStart::SC_HongHeiStart()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_public_5fhhdz_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:SC_HongHeiStart)
}
SC_HongHeiStart::SC_HongHeiStart(const SC_HongHeiStart& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      playerbets_(from.playerbets_),
      allbets_(from.allbets_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&start_waittime_, &from.start_waittime_,
    reinterpret_cast<char*>(&table_status_) -
    reinterpret_cast<char*>(&start_waittime_) + sizeof(table_status_));
  // @@protoc_insertion_point(copy_constructor:SC_HongHeiStart)
}

void SC_HongHeiStart::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&start_waittime_, 0, reinterpret_cast<char*>(&table_status_) -
    reinterpret_cast<char*>(&start_waittime_) + sizeof(table_status_));
}

SC_HongHeiStart::~SC_HongHeiStart() {
  // @@protoc_insertion_point(destructor:SC_HongHeiStart)
  SharedDtor();
}

void SC_HongHeiStart::SharedDtor() {
}

void SC_HongHeiStart::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SC_HongHeiStart::descriptor() {
  protobuf_public_5fhhdz_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_public_5fhhdz_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const SC_HongHeiStart& SC_HongHeiStart::default_instance() {
  protobuf_public_5fhhdz_2eproto::InitDefaults();
  return *internal_default_instance();
}

SC_HongHeiStart* SC_HongHeiStart::New(::google::protobuf::Arena* arena) const {
  SC_HongHeiStart* n = new SC_HongHeiStart;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SC_HongHeiStart::Clear() {
// @@protoc_insertion_point(message_clear_start:SC_HongHeiStart)
  playerbets_.Clear();
  allbets_.Clear();
  if (_has_bits_[0 / 32] & 3u) {
    ::memset(&start_waittime_, 0, reinterpret_cast<char*>(&table_status_) -
      reinterpret_cast<char*>(&start_waittime_) + sizeof(table_status_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool SC_HongHeiStart::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:SC_HongHeiStart)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 start_waittime = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_start_waittime();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &start_waittime_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated int32 playerbets = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 16u, input, this->mutable_playerbets())));
        } else if (static_cast< ::google::protobuf::uint8>(tag) ==
                   static_cast< ::google::protobuf::uint8>(18u)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_playerbets())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated int32 allbets = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 24u, input, this->mutable_allbets())));
        } else if (static_cast< ::google::protobuf::uint8>(tag) ==
                   static_cast< ::google::protobuf::uint8>(26u)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_allbets())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 table_status = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u)) {
          set_has_table_status();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &table_status_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:SC_HongHeiStart)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:SC_HongHeiStart)
  return false;
#undef DO_
}

void SC_HongHeiStart::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:SC_HongHeiStart)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 start_waittime = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->start_waittime(), output);
  }

  // repeated int32 playerbets = 2;
  for (int i = 0, n = this->playerbets_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      2, this->playerbets(i), output);
  }

  // repeated int32 allbets = 3;
  for (int i = 0, n = this->allbets_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      3, this->allbets(i), output);
  }

  // optional int32 table_status = 4;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->table_status(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:SC_HongHeiStart)
}

::google::protobuf::uint8* SC_HongHeiStart::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:SC_HongHeiStart)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 start_waittime = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->start_waittime(), target);
  }

  // repeated int32 playerbets = 2;
  target = ::google::protobuf::internal::WireFormatLite::
    WriteInt32ToArray(2, this->playerbets_, target);

  // repeated int32 allbets = 3;
  target = ::google::protobuf::internal::WireFormatLite::
    WriteInt32ToArray(3, this->allbets_, target);

  // optional int32 table_status = 4;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->table_status(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SC_HongHeiStart)
  return target;
}

size_t SC_HongHeiStart::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SC_HongHeiStart)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // repeated int32 playerbets = 2;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      Int32Size(this->playerbets_);
    total_size += 1 *
                  ::google::protobuf::internal::FromIntSize(this->playerbets_size());
    total_size += data_size;
  }

  // repeated int32 allbets = 3;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      Int32Size(this->allbets_);
    total_size += 1 *
                  ::google::protobuf::internal::FromIntSize(this->allbets_size());
    total_size += data_size;
  }

  if (_has_bits_[0 / 32] & 3u) {
    // optional int32 start_waittime = 1;
    if (has_start_waittime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->start_waittime());
    }

    // optional int32 table_status = 4;
    if (has_table_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->table_status());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SC_HongHeiStart::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:SC_HongHeiStart)
  GOOGLE_DCHECK_NE(&from, this);
  const SC_HongHeiStart* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SC_HongHeiStart>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:SC_HongHeiStart)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:SC_HongHeiStart)
    MergeFrom(*source);
  }
}

void SC_HongHeiStart::MergeFrom(const SC_HongHeiStart& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:SC_HongHeiStart)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  playerbets_.MergeFrom(from.playerbets_);
  allbets_.MergeFrom(from.allbets_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      start_waittime_ = from.start_waittime_;
    }
    if (cached_has_bits & 0x00000002u) {
      table_status_ = from.table_status_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void SC_HongHeiStart::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:SC_HongHeiStart)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SC_HongHeiStart::CopyFrom(const SC_HongHeiStart& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SC_HongHeiStart)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SC_HongHeiStart::IsInitialized() const {
  return true;
}

void SC_HongHeiStart::Swap(SC_HongHeiStart* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SC_HongHeiStart::InternalSwap(SC_HongHeiStart* other) {
  playerbets_.InternalSwap(&other->playerbets_);
  allbets_.InternalSwap(&other->allbets_);
  std::swap(start_waittime_, other->start_waittime_);
  std::swap(table_status_, other->table_status_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SC_HongHeiStart::GetMetadata() const {
  protobuf_public_5fhhdz_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_public_5fhhdz_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SC_HongHeiStart

// optional int32 start_waittime = 1;
bool SC_HongHeiStart::has_start_waittime() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void SC_HongHeiStart::set_has_start_waittime() {
  _has_bits_[0] |= 0x00000001u;
}
void SC_HongHeiStart::clear_has_start_waittime() {
  _has_bits_[0] &= ~0x00000001u;
}
void SC_HongHeiStart::clear_start_waittime() {
  start_waittime_ = 0;
  clear_has_start_waittime();
}
::google::protobuf::int32 SC_HongHeiStart::start_waittime() const {
  // @@protoc_insertion_point(field_get:SC_HongHeiStart.start_waittime)
  return start_waittime_;
}
void SC_HongHeiStart::set_start_waittime(::google::protobuf::int32 value) {
  set_has_start_waittime();
  start_waittime_ = value;
  // @@protoc_insertion_point(field_set:SC_HongHeiStart.start_waittime)
}

// repeated int32 playerbets = 2;
int SC_HongHeiStart::playerbets_size() const {
  return playerbets_.size();
}
void SC_HongHeiStart::clear_playerbets() {
  playerbets_.Clear();
}
::google::protobuf::int32 SC_HongHeiStart::playerbets(int index) const {
  // @@protoc_insertion_point(field_get:SC_HongHeiStart.playerbets)
  return playerbets_.Get(index);
}
void SC_HongHeiStart::set_playerbets(int index, ::google::protobuf::int32 value) {
  playerbets_.Set(index, value);
  // @@protoc_insertion_point(field_set:SC_HongHeiStart.playerbets)
}
void SC_HongHeiStart::add_playerbets(::google::protobuf::int32 value) {
  playerbets_.Add(value);
  // @@protoc_insertion_point(field_add:SC_HongHeiStart.playerbets)
}
const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
SC_HongHeiStart::playerbets() const {
  // @@protoc_insertion_point(field_list:SC_HongHeiStart.playerbets)
  return playerbets_;
}
::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
SC_HongHeiStart::mutable_playerbets() {
  // @@protoc_insertion_point(field_mutable_list:SC_HongHeiStart.playerbets)
  return &playerbets_;
}

// repeated int32 allbets = 3;
int SC_HongHeiStart::allbets_size() const {
  return allbets_.size();
}
void SC_HongHeiStart::clear_allbets() {
  allbets_.Clear();
}
::google::protobuf::int32 SC_HongHeiStart::allbets(int index) const {
  // @@protoc_insertion_point(field_get:SC_HongHeiStart.allbets)
  return allbets_.Get(index);
}
void SC_HongHeiStart::set_allbets(int index, ::google::protobuf::int32 value) {
  allbets_.Set(index, value);
  // @@protoc_insertion_point(field_set:SC_HongHeiStart.allbets)
}
void SC_HongHeiStart::add_allbets(::google::protobuf::int32 value) {
  allbets_.Add(value);
  // @@protoc_insertion_point(field_add:SC_HongHeiStart.allbets)
}
const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
SC_HongHeiStart::allbets() const {
  // @@protoc_insertion_point(field_list:SC_HongHeiStart.allbets)
  return allbets_;
}
::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
SC_HongHeiStart::mutable_allbets() {
  // @@protoc_insertion_point(field_mutable_list:SC_HongHeiStart.allbets)
  return &allbets_;
}

// optional int32 table_status = 4;
bool SC_HongHeiStart::has_table_status() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void SC_HongHeiStart::set_has_table_status() {
  _has_bits_[0] |= 0x00000002u;
}
void SC_HongHeiStart::clear_has_table_status() {
  _has_bits_[0] &= ~0x00000002u;
}
void SC_HongHeiStart::clear_table_status() {
  table_status_ = 0;
  clear_has_table_status();
}
::google::protobuf::int32 SC_HongHeiStart::table_status() const {
  // @@protoc_insertion_point(field_get:SC_HongHeiStart.table_status)
  return table_status_;
}
void SC_HongHeiStart::set_table_status(::google::protobuf::int32 value) {
  set_has_table_status();
  table_status_ = value;
  // @@protoc_insertion_point(field_set:SC_HongHeiStart.table_status)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CS_HongHeiPlayerBet::kPlayerbetFieldNumber;
const int CS_HongHeiPlayerBet::kPlayerbettypeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CS_HongHeiPlayerBet::CS_HongHeiPlayerBet()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_public_5fhhdz_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:CS_HongHeiPlayerBet)
}
CS_HongHeiPlayerBet::CS_HongHeiPlayerBet(const CS_HongHeiPlayerBet& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&playerbet_, &from.playerbet_,
    reinterpret_cast<char*>(&playerbettype_) -
    reinterpret_cast<char*>(&playerbet_) + sizeof(playerbettype_));
  // @@protoc_insertion_point(copy_constructor:CS_HongHeiPlayerBet)
}

void CS_HongHeiPlayerBet::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&playerbet_, 0, reinterpret_cast<char*>(&playerbettype_) -
    reinterpret_cast<char*>(&playerbet_) + sizeof(playerbettype_));
}

CS_HongHeiPlayerBet::~CS_HongHeiPlayerBet() {
  // @@protoc_insertion_point(destructor:CS_HongHeiPlayerBet)
  SharedDtor();
}

void CS_HongHeiPlayerBet::SharedDtor() {
}

void CS_HongHeiPlayerBet::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CS_HongHeiPlayerBet::descriptor() {
  protobuf_public_5fhhdz_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_public_5fhhdz_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CS_HongHeiPlayerBet& CS_HongHeiPlayerBet::default_instance() {
  protobuf_public_5fhhdz_2eproto::InitDefaults();
  return *internal_default_instance();
}

CS_HongHeiPlayerBet* CS_HongHeiPlayerBet::New(::google::protobuf::Arena* arena) const {
  CS_HongHeiPlayerBet* n = new CS_HongHeiPlayerBet;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CS_HongHeiPlayerBet::Clear() {
// @@protoc_insertion_point(message_clear_start:CS_HongHeiPlayerBet)
  if (_has_bits_[0 / 32] & 3u) {
    ::memset(&playerbet_, 0, reinterpret_cast<char*>(&playerbettype_) -
      reinterpret_cast<char*>(&playerbet_) + sizeof(playerbettype_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CS_HongHeiPlayerBet::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CS_HongHeiPlayerBet)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 playerbet = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_playerbet();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &playerbet_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 playerbettype = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_playerbettype();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &playerbettype_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CS_HongHeiPlayerBet)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CS_HongHeiPlayerBet)
  return false;
#undef DO_
}

void CS_HongHeiPlayerBet::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CS_HongHeiPlayerBet)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int64 playerbet = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->playerbet(), output);
  }

  // optional int32 playerbettype = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->playerbettype(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CS_HongHeiPlayerBet)
}

::google::protobuf::uint8* CS_HongHeiPlayerBet::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CS_HongHeiPlayerBet)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int64 playerbet = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->playerbet(), target);
  }

  // optional int32 playerbettype = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->playerbettype(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CS_HongHeiPlayerBet)
  return target;
}

size_t CS_HongHeiPlayerBet::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CS_HongHeiPlayerBet)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 3u) {
    // optional int64 playerbet = 1;
    if (has_playerbet()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->playerbet());
    }

    // optional int32 playerbettype = 2;
    if (has_playerbettype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->playerbettype());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CS_HongHeiPlayerBet::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CS_HongHeiPlayerBet)
  GOOGLE_DCHECK_NE(&from, this);
  const CS_HongHeiPlayerBet* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CS_HongHeiPlayerBet>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CS_HongHeiPlayerBet)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CS_HongHeiPlayerBet)
    MergeFrom(*source);
  }
}

void CS_HongHeiPlayerBet::MergeFrom(const CS_HongHeiPlayerBet& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CS_HongHeiPlayerBet)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      playerbet_ = from.playerbet_;
    }
    if (cached_has_bits & 0x00000002u) {
      playerbettype_ = from.playerbettype_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CS_HongHeiPlayerBet::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CS_HongHeiPlayerBet)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CS_HongHeiPlayerBet::CopyFrom(const CS_HongHeiPlayerBet& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CS_HongHeiPlayerBet)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CS_HongHeiPlayerBet::IsInitialized() const {
  return true;
}

void CS_HongHeiPlayerBet::Swap(CS_HongHeiPlayerBet* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CS_HongHeiPlayerBet::InternalSwap(CS_HongHeiPlayerBet* other) {
  std::swap(playerbet_, other->playerbet_);
  std::swap(playerbettype_, other->playerbettype_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CS_HongHeiPlayerBet::GetMetadata() const {
  protobuf_public_5fhhdz_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_public_5fhhdz_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CS_HongHeiPlayerBet

// optional int64 playerbet = 1;
bool CS_HongHeiPlayerBet::has_playerbet() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CS_HongHeiPlayerBet::set_has_playerbet() {
  _has_bits_[0] |= 0x00000001u;
}
void CS_HongHeiPlayerBet::clear_has_playerbet() {
  _has_bits_[0] &= ~0x00000001u;
}
void CS_HongHeiPlayerBet::clear_playerbet() {
  playerbet_ = GOOGLE_LONGLONG(0);
  clear_has_playerbet();
}
::google::protobuf::int64 CS_HongHeiPlayerBet::playerbet() const {
  // @@protoc_insertion_point(field_get:CS_HongHeiPlayerBet.playerbet)
  return playerbet_;
}
void CS_HongHeiPlayerBet::set_playerbet(::google::protobuf::int64 value) {
  set_has_playerbet();
  playerbet_ = value;
  // @@protoc_insertion_point(field_set:CS_HongHeiPlayerBet.playerbet)
}

// optional int32 playerbettype = 2;
bool CS_HongHeiPlayerBet::has_playerbettype() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CS_HongHeiPlayerBet::set_has_playerbettype() {
  _has_bits_[0] |= 0x00000002u;
}
void CS_HongHeiPlayerBet::clear_has_playerbettype() {
  _has_bits_[0] &= ~0x00000002u;
}
void CS_HongHeiPlayerBet::clear_playerbettype() {
  playerbettype_ = 0;
  clear_has_playerbettype();
}
::google::protobuf::int32 CS_HongHeiPlayerBet::playerbettype() const {
  // @@protoc_insertion_point(field_get:CS_HongHeiPlayerBet.playerbettype)
  return playerbettype_;
}
void CS_HongHeiPlayerBet::set_playerbettype(::google::protobuf::int32 value) {
  set_has_playerbettype();
  playerbettype_ = value;
  // @@protoc_insertion_point(field_set:CS_HongHeiPlayerBet.playerbettype)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SC_HongHeiPlayerBet::kPlayerbetResultFieldNumber;
const int SC_HongHeiPlayerBet::kAllbetsFieldNumber;
const int SC_HongHeiPlayerBet::kPlayerChairidFieldNumber;
const int SC_HongHeiPlayerBet::kPlayerbetFieldNumber;
const int SC_HongHeiPlayerBet::kPlayerbettypeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SC_HongHeiPlayerBet::SC_HongHeiPlayerBet()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_public_5fhhdz_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:SC_HongHeiPlayerBet)
}
SC_HongHeiPlayerBet::SC_HongHeiPlayerBet(const SC_HongHeiPlayerBet& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      allbets_(from.allbets_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&playerbet_result_, &from.playerbet_result_,
    reinterpret_cast<char*>(&playerbettype_) -
    reinterpret_cast<char*>(&playerbet_result_) + sizeof(playerbettype_));
  // @@protoc_insertion_point(copy_constructor:SC_HongHeiPlayerBet)
}

void SC_HongHeiPlayerBet::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&playerbet_result_, 0, reinterpret_cast<char*>(&playerbettype_) -
    reinterpret_cast<char*>(&playerbet_result_) + sizeof(playerbettype_));
}

SC_HongHeiPlayerBet::~SC_HongHeiPlayerBet() {
  // @@protoc_insertion_point(destructor:SC_HongHeiPlayerBet)
  SharedDtor();
}

void SC_HongHeiPlayerBet::SharedDtor() {
}

void SC_HongHeiPlayerBet::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SC_HongHeiPlayerBet::descriptor() {
  protobuf_public_5fhhdz_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_public_5fhhdz_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const SC_HongHeiPlayerBet& SC_HongHeiPlayerBet::default_instance() {
  protobuf_public_5fhhdz_2eproto::InitDefaults();
  return *internal_default_instance();
}

SC_HongHeiPlayerBet* SC_HongHeiPlayerBet::New(::google::protobuf::Arena* arena) const {
  SC_HongHeiPlayerBet* n = new SC_HongHeiPlayerBet;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SC_HongHeiPlayerBet::Clear() {
// @@protoc_insertion_point(message_clear_start:SC_HongHeiPlayerBet)
  allbets_.Clear();
  if (_has_bits_[0 / 32] & 15u) {
    ::memset(&playerbet_result_, 0, reinterpret_cast<char*>(&playerbettype_) -
      reinterpret_cast<char*>(&playerbet_result_) + sizeof(playerbettype_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool SC_HongHeiPlayerBet::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:SC_HongHeiPlayerBet)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 playerbet_result = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_playerbet_result();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &playerbet_result_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated int32 allbets = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 16u, input, this->mutable_allbets())));
        } else if (static_cast< ::google::protobuf::uint8>(tag) ==
                   static_cast< ::google::protobuf::uint8>(18u)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_allbets())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 player_chairid = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {
          set_has_player_chairid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &player_chairid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 playerbet = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u)) {
          set_has_playerbet();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &playerbet_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 playerbettype = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u)) {
          set_has_playerbettype();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &playerbettype_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:SC_HongHeiPlayerBet)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:SC_HongHeiPlayerBet)
  return false;
#undef DO_
}

void SC_HongHeiPlayerBet::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:SC_HongHeiPlayerBet)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 playerbet_result = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->playerbet_result(), output);
  }

  // repeated int32 allbets = 2;
  for (int i = 0, n = this->allbets_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      2, this->allbets(i), output);
  }

  // optional int32 player_chairid = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->player_chairid(), output);
  }

  // optional int32 playerbet = 4;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->playerbet(), output);
  }

  // optional int32 playerbettype = 5;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->playerbettype(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:SC_HongHeiPlayerBet)
}

::google::protobuf::uint8* SC_HongHeiPlayerBet::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:SC_HongHeiPlayerBet)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 playerbet_result = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->playerbet_result(), target);
  }

  // repeated int32 allbets = 2;
  target = ::google::protobuf::internal::WireFormatLite::
    WriteInt32ToArray(2, this->allbets_, target);

  // optional int32 player_chairid = 3;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->player_chairid(), target);
  }

  // optional int32 playerbet = 4;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->playerbet(), target);
  }

  // optional int32 playerbettype = 5;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->playerbettype(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SC_HongHeiPlayerBet)
  return target;
}

size_t SC_HongHeiPlayerBet::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SC_HongHeiPlayerBet)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // repeated int32 allbets = 2;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      Int32Size(this->allbets_);
    total_size += 1 *
                  ::google::protobuf::internal::FromIntSize(this->allbets_size());
    total_size += data_size;
  }

  if (_has_bits_[0 / 32] & 15u) {
    // optional int32 playerbet_result = 1;
    if (has_playerbet_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->playerbet_result());
    }

    // optional int32 player_chairid = 3;
    if (has_player_chairid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->player_chairid());
    }

    // optional int32 playerbet = 4;
    if (has_playerbet()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->playerbet());
    }

    // optional int32 playerbettype = 5;
    if (has_playerbettype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->playerbettype());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SC_HongHeiPlayerBet::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:SC_HongHeiPlayerBet)
  GOOGLE_DCHECK_NE(&from, this);
  const SC_HongHeiPlayerBet* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SC_HongHeiPlayerBet>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:SC_HongHeiPlayerBet)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:SC_HongHeiPlayerBet)
    MergeFrom(*source);
  }
}

void SC_HongHeiPlayerBet::MergeFrom(const SC_HongHeiPlayerBet& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:SC_HongHeiPlayerBet)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  allbets_.MergeFrom(from.allbets_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 15u) {
    if (cached_has_bits & 0x00000001u) {
      playerbet_result_ = from.playerbet_result_;
    }
    if (cached_has_bits & 0x00000002u) {
      player_chairid_ = from.player_chairid_;
    }
    if (cached_has_bits & 0x00000004u) {
      playerbet_ = from.playerbet_;
    }
    if (cached_has_bits & 0x00000008u) {
      playerbettype_ = from.playerbettype_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void SC_HongHeiPlayerBet::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:SC_HongHeiPlayerBet)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SC_HongHeiPlayerBet::CopyFrom(const SC_HongHeiPlayerBet& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SC_HongHeiPlayerBet)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SC_HongHeiPlayerBet::IsInitialized() const {
  return true;
}

void SC_HongHeiPlayerBet::Swap(SC_HongHeiPlayerBet* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SC_HongHeiPlayerBet::InternalSwap(SC_HongHeiPlayerBet* other) {
  allbets_.InternalSwap(&other->allbets_);
  std::swap(playerbet_result_, other->playerbet_result_);
  std::swap(player_chairid_, other->player_chairid_);
  std::swap(playerbet_, other->playerbet_);
  std::swap(playerbettype_, other->playerbettype_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SC_HongHeiPlayerBet::GetMetadata() const {
  protobuf_public_5fhhdz_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_public_5fhhdz_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SC_HongHeiPlayerBet

// optional int32 playerbet_result = 1;
bool SC_HongHeiPlayerBet::has_playerbet_result() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void SC_HongHeiPlayerBet::set_has_playerbet_result() {
  _has_bits_[0] |= 0x00000001u;
}
void SC_HongHeiPlayerBet::clear_has_playerbet_result() {
  _has_bits_[0] &= ~0x00000001u;
}
void SC_HongHeiPlayerBet::clear_playerbet_result() {
  playerbet_result_ = 0;
  clear_has_playerbet_result();
}
::google::protobuf::int32 SC_HongHeiPlayerBet::playerbet_result() const {
  // @@protoc_insertion_point(field_get:SC_HongHeiPlayerBet.playerbet_result)
  return playerbet_result_;
}
void SC_HongHeiPlayerBet::set_playerbet_result(::google::protobuf::int32 value) {
  set_has_playerbet_result();
  playerbet_result_ = value;
  // @@protoc_insertion_point(field_set:SC_HongHeiPlayerBet.playerbet_result)
}

// repeated int32 allbets = 2;
int SC_HongHeiPlayerBet::allbets_size() const {
  return allbets_.size();
}
void SC_HongHeiPlayerBet::clear_allbets() {
  allbets_.Clear();
}
::google::protobuf::int32 SC_HongHeiPlayerBet::allbets(int index) const {
  // @@protoc_insertion_point(field_get:SC_HongHeiPlayerBet.allbets)
  return allbets_.Get(index);
}
void SC_HongHeiPlayerBet::set_allbets(int index, ::google::protobuf::int32 value) {
  allbets_.Set(index, value);
  // @@protoc_insertion_point(field_set:SC_HongHeiPlayerBet.allbets)
}
void SC_HongHeiPlayerBet::add_allbets(::google::protobuf::int32 value) {
  allbets_.Add(value);
  // @@protoc_insertion_point(field_add:SC_HongHeiPlayerBet.allbets)
}
const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
SC_HongHeiPlayerBet::allbets() const {
  // @@protoc_insertion_point(field_list:SC_HongHeiPlayerBet.allbets)
  return allbets_;
}
::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
SC_HongHeiPlayerBet::mutable_allbets() {
  // @@protoc_insertion_point(field_mutable_list:SC_HongHeiPlayerBet.allbets)
  return &allbets_;
}

// optional int32 player_chairid = 3;
bool SC_HongHeiPlayerBet::has_player_chairid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void SC_HongHeiPlayerBet::set_has_player_chairid() {
  _has_bits_[0] |= 0x00000002u;
}
void SC_HongHeiPlayerBet::clear_has_player_chairid() {
  _has_bits_[0] &= ~0x00000002u;
}
void SC_HongHeiPlayerBet::clear_player_chairid() {
  player_chairid_ = 0;
  clear_has_player_chairid();
}
::google::protobuf::int32 SC_HongHeiPlayerBet::player_chairid() const {
  // @@protoc_insertion_point(field_get:SC_HongHeiPlayerBet.player_chairid)
  return player_chairid_;
}
void SC_HongHeiPlayerBet::set_player_chairid(::google::protobuf::int32 value) {
  set_has_player_chairid();
  player_chairid_ = value;
  // @@protoc_insertion_point(field_set:SC_HongHeiPlayerBet.player_chairid)
}

// optional int32 playerbet = 4;
bool SC_HongHeiPlayerBet::has_playerbet() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void SC_HongHeiPlayerBet::set_has_playerbet() {
  _has_bits_[0] |= 0x00000004u;
}
void SC_HongHeiPlayerBet::clear_has_playerbet() {
  _has_bits_[0] &= ~0x00000004u;
}
void SC_HongHeiPlayerBet::clear_playerbet() {
  playerbet_ = 0;
  clear_has_playerbet();
}
::google::protobuf::int32 SC_HongHeiPlayerBet::playerbet() const {
  // @@protoc_insertion_point(field_get:SC_HongHeiPlayerBet.playerbet)
  return playerbet_;
}
void SC_HongHeiPlayerBet::set_playerbet(::google::protobuf::int32 value) {
  set_has_playerbet();
  playerbet_ = value;
  // @@protoc_insertion_point(field_set:SC_HongHeiPlayerBet.playerbet)
}

// optional int32 playerbettype = 5;
bool SC_HongHeiPlayerBet::has_playerbettype() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void SC_HongHeiPlayerBet::set_has_playerbettype() {
  _has_bits_[0] |= 0x00000008u;
}
void SC_HongHeiPlayerBet::clear_has_playerbettype() {
  _has_bits_[0] &= ~0x00000008u;
}
void SC_HongHeiPlayerBet::clear_playerbettype() {
  playerbettype_ = 0;
  clear_has_playerbettype();
}
::google::protobuf::int32 SC_HongHeiPlayerBet::playerbettype() const {
  // @@protoc_insertion_point(field_get:SC_HongHeiPlayerBet.playerbettype)
  return playerbettype_;
}
void SC_HongHeiPlayerBet::set_playerbettype(::google::protobuf::int32 value) {
  set_has_playerbettype();
  playerbettype_ = value;
  // @@protoc_insertion_point(field_set:SC_HongHeiPlayerBet.playerbettype)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SC_HongHeiAllBet::kAllbetsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SC_HongHeiAllBet::SC_HongHeiAllBet()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_public_5fhhdz_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:SC_HongHeiAllBet)
}
SC_HongHeiAllBet::SC_HongHeiAllBet(const SC_HongHeiAllBet& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      allbets_(from.allbets_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:SC_HongHeiAllBet)
}

void SC_HongHeiAllBet::SharedCtor() {
  _cached_size_ = 0;
}

SC_HongHeiAllBet::~SC_HongHeiAllBet() {
  // @@protoc_insertion_point(destructor:SC_HongHeiAllBet)
  SharedDtor();
}

void SC_HongHeiAllBet::SharedDtor() {
}

void SC_HongHeiAllBet::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SC_HongHeiAllBet::descriptor() {
  protobuf_public_5fhhdz_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_public_5fhhdz_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const SC_HongHeiAllBet& SC_HongHeiAllBet::default_instance() {
  protobuf_public_5fhhdz_2eproto::InitDefaults();
  return *internal_default_instance();
}

SC_HongHeiAllBet* SC_HongHeiAllBet::New(::google::protobuf::Arena* arena) const {
  SC_HongHeiAllBet* n = new SC_HongHeiAllBet;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SC_HongHeiAllBet::Clear() {
// @@protoc_insertion_point(message_clear_start:SC_HongHeiAllBet)
  allbets_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool SC_HongHeiAllBet::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:SC_HongHeiAllBet)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated int32 allbets = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 8u, input, this->mutable_allbets())));
        } else if (static_cast< ::google::protobuf::uint8>(tag) ==
                   static_cast< ::google::protobuf::uint8>(10u)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_allbets())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:SC_HongHeiAllBet)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:SC_HongHeiAllBet)
  return false;
#undef DO_
}

void SC_HongHeiAllBet::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:SC_HongHeiAllBet)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated int32 allbets = 1;
  for (int i = 0, n = this->allbets_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      1, this->allbets(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:SC_HongHeiAllBet)
}

::google::protobuf::uint8* SC_HongHeiAllBet::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:SC_HongHeiAllBet)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated int32 allbets = 1;
  target = ::google::protobuf::internal::WireFormatLite::
    WriteInt32ToArray(1, this->allbets_, target);

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SC_HongHeiAllBet)
  return target;
}

size_t SC_HongHeiAllBet::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SC_HongHeiAllBet)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // repeated int32 allbets = 1;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      Int32Size(this->allbets_);
    total_size += 1 *
                  ::google::protobuf::internal::FromIntSize(this->allbets_size());
    total_size += data_size;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SC_HongHeiAllBet::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:SC_HongHeiAllBet)
  GOOGLE_DCHECK_NE(&from, this);
  const SC_HongHeiAllBet* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SC_HongHeiAllBet>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:SC_HongHeiAllBet)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:SC_HongHeiAllBet)
    MergeFrom(*source);
  }
}

void SC_HongHeiAllBet::MergeFrom(const SC_HongHeiAllBet& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:SC_HongHeiAllBet)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  allbets_.MergeFrom(from.allbets_);
}

void SC_HongHeiAllBet::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:SC_HongHeiAllBet)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SC_HongHeiAllBet::CopyFrom(const SC_HongHeiAllBet& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SC_HongHeiAllBet)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SC_HongHeiAllBet::IsInitialized() const {
  return true;
}

void SC_HongHeiAllBet::Swap(SC_HongHeiAllBet* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SC_HongHeiAllBet::InternalSwap(SC_HongHeiAllBet* other) {
  allbets_.InternalSwap(&other->allbets_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SC_HongHeiAllBet::GetMetadata() const {
  protobuf_public_5fhhdz_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_public_5fhhdz_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SC_HongHeiAllBet

// repeated int32 allbets = 1;
int SC_HongHeiAllBet::allbets_size() const {
  return allbets_.size();
}
void SC_HongHeiAllBet::clear_allbets() {
  allbets_.Clear();
}
::google::protobuf::int32 SC_HongHeiAllBet::allbets(int index) const {
  // @@protoc_insertion_point(field_get:SC_HongHeiAllBet.allbets)
  return allbets_.Get(index);
}
void SC_HongHeiAllBet::set_allbets(int index, ::google::protobuf::int32 value) {
  allbets_.Set(index, value);
  // @@protoc_insertion_point(field_set:SC_HongHeiAllBet.allbets)
}
void SC_HongHeiAllBet::add_allbets(::google::protobuf::int32 value) {
  allbets_.Add(value);
  // @@protoc_insertion_point(field_add:SC_HongHeiAllBet.allbets)
}
const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
SC_HongHeiAllBet::allbets() const {
  // @@protoc_insertion_point(field_list:SC_HongHeiAllBet.allbets)
  return allbets_;
}
::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
SC_HongHeiAllBet::mutable_allbets() {
  // @@protoc_insertion_point(field_mutable_list:SC_HongHeiAllBet.allbets)
  return &allbets_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SC_HongHeiPostCard::kResultWaittimeFieldNumber;
const int SC_HongHeiPostCard::kPbCardFieldNumber;
const int SC_HongHeiPostCard::kTableStatusFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SC_HongHeiPostCard::SC_HongHeiPostCard()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_public_5fhhdz_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:SC_HongHeiPostCard)
}
SC_HongHeiPostCard::SC_HongHeiPostCard(const SC_HongHeiPostCard& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_pb_card()) {
    pb_card_ = new ::SC_HongHeiCard(*from.pb_card_);
  } else {
    pb_card_ = NULL;
  }
  ::memcpy(&result_waittime_, &from.result_waittime_,
    reinterpret_cast<char*>(&table_status_) -
    reinterpret_cast<char*>(&result_waittime_) + sizeof(table_status_));
  // @@protoc_insertion_point(copy_constructor:SC_HongHeiPostCard)
}

void SC_HongHeiPostCard::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&pb_card_, 0, reinterpret_cast<char*>(&table_status_) -
    reinterpret_cast<char*>(&pb_card_) + sizeof(table_status_));
}

SC_HongHeiPostCard::~SC_HongHeiPostCard() {
  // @@protoc_insertion_point(destructor:SC_HongHeiPostCard)
  SharedDtor();
}

void SC_HongHeiPostCard::SharedDtor() {
  if (this != internal_default_instance()) {
    delete pb_card_;
  }
}

void SC_HongHeiPostCard::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SC_HongHeiPostCard::descriptor() {
  protobuf_public_5fhhdz_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_public_5fhhdz_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const SC_HongHeiPostCard& SC_HongHeiPostCard::default_instance() {
  protobuf_public_5fhhdz_2eproto::InitDefaults();
  return *internal_default_instance();
}

SC_HongHeiPostCard* SC_HongHeiPostCard::New(::google::protobuf::Arena* arena) const {
  SC_HongHeiPostCard* n = new SC_HongHeiPostCard;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SC_HongHeiPostCard::Clear() {
// @@protoc_insertion_point(message_clear_start:SC_HongHeiPostCard)
  if (has_pb_card()) {
    GOOGLE_DCHECK(pb_card_ != NULL);
    pb_card_->::SC_HongHeiCard::Clear();
  }
  if (_has_bits_[0 / 32] & 6u) {
    ::memset(&result_waittime_, 0, reinterpret_cast<char*>(&table_status_) -
      reinterpret_cast<char*>(&result_waittime_) + sizeof(table_status_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool SC_HongHeiPostCard::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:SC_HongHeiPostCard)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 result_waittime = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_result_waittime();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &result_waittime_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .SC_HongHeiCard pb_card = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_pb_card()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 table_status = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {
          set_has_table_status();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &table_status_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:SC_HongHeiPostCard)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:SC_HongHeiPostCard)
  return false;
#undef DO_
}

void SC_HongHeiPostCard::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:SC_HongHeiPostCard)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 result_waittime = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->result_waittime(), output);
  }

  // optional .SC_HongHeiCard pb_card = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->pb_card_, output);
  }

  // optional int32 table_status = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->table_status(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:SC_HongHeiPostCard)
}

::google::protobuf::uint8* SC_HongHeiPostCard::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:SC_HongHeiPostCard)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 result_waittime = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->result_waittime(), target);
  }

  // optional .SC_HongHeiCard pb_card = 2;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->pb_card_, deterministic, target);
  }

  // optional int32 table_status = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->table_status(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SC_HongHeiPostCard)
  return target;
}

size_t SC_HongHeiPostCard::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SC_HongHeiPostCard)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 7u) {
    // optional .SC_HongHeiCard pb_card = 2;
    if (has_pb_card()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->pb_card_);
    }

    // optional int32 result_waittime = 1;
    if (has_result_waittime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->result_waittime());
    }

    // optional int32 table_status = 3;
    if (has_table_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->table_status());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SC_HongHeiPostCard::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:SC_HongHeiPostCard)
  GOOGLE_DCHECK_NE(&from, this);
  const SC_HongHeiPostCard* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SC_HongHeiPostCard>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:SC_HongHeiPostCard)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:SC_HongHeiPostCard)
    MergeFrom(*source);
  }
}

void SC_HongHeiPostCard::MergeFrom(const SC_HongHeiPostCard& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:SC_HongHeiPostCard)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_pb_card()->::SC_HongHeiCard::MergeFrom(from.pb_card());
    }
    if (cached_has_bits & 0x00000002u) {
      result_waittime_ = from.result_waittime_;
    }
    if (cached_has_bits & 0x00000004u) {
      table_status_ = from.table_status_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void SC_HongHeiPostCard::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:SC_HongHeiPostCard)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SC_HongHeiPostCard::CopyFrom(const SC_HongHeiPostCard& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SC_HongHeiPostCard)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SC_HongHeiPostCard::IsInitialized() const {
  return true;
}

void SC_HongHeiPostCard::Swap(SC_HongHeiPostCard* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SC_HongHeiPostCard::InternalSwap(SC_HongHeiPostCard* other) {
  std::swap(pb_card_, other->pb_card_);
  std::swap(result_waittime_, other->result_waittime_);
  std::swap(table_status_, other->table_status_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SC_HongHeiPostCard::GetMetadata() const {
  protobuf_public_5fhhdz_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_public_5fhhdz_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SC_HongHeiPostCard

// optional int32 result_waittime = 1;
bool SC_HongHeiPostCard::has_result_waittime() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void SC_HongHeiPostCard::set_has_result_waittime() {
  _has_bits_[0] |= 0x00000002u;
}
void SC_HongHeiPostCard::clear_has_result_waittime() {
  _has_bits_[0] &= ~0x00000002u;
}
void SC_HongHeiPostCard::clear_result_waittime() {
  result_waittime_ = 0;
  clear_has_result_waittime();
}
::google::protobuf::int32 SC_HongHeiPostCard::result_waittime() const {
  // @@protoc_insertion_point(field_get:SC_HongHeiPostCard.result_waittime)
  return result_waittime_;
}
void SC_HongHeiPostCard::set_result_waittime(::google::protobuf::int32 value) {
  set_has_result_waittime();
  result_waittime_ = value;
  // @@protoc_insertion_point(field_set:SC_HongHeiPostCard.result_waittime)
}

// optional .SC_HongHeiCard pb_card = 2;
bool SC_HongHeiPostCard::has_pb_card() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void SC_HongHeiPostCard::set_has_pb_card() {
  _has_bits_[0] |= 0x00000001u;
}
void SC_HongHeiPostCard::clear_has_pb_card() {
  _has_bits_[0] &= ~0x00000001u;
}
void SC_HongHeiPostCard::clear_pb_card() {
  if (pb_card_ != NULL) pb_card_->::SC_HongHeiCard::Clear();
  clear_has_pb_card();
}
const ::SC_HongHeiCard& SC_HongHeiPostCard::pb_card() const {
  // @@protoc_insertion_point(field_get:SC_HongHeiPostCard.pb_card)
  return pb_card_ != NULL ? *pb_card_
                         : *::SC_HongHeiCard::internal_default_instance();
}
::SC_HongHeiCard* SC_HongHeiPostCard::mutable_pb_card() {
  set_has_pb_card();
  if (pb_card_ == NULL) {
    pb_card_ = new ::SC_HongHeiCard;
  }
  // @@protoc_insertion_point(field_mutable:SC_HongHeiPostCard.pb_card)
  return pb_card_;
}
::SC_HongHeiCard* SC_HongHeiPostCard::release_pb_card() {
  // @@protoc_insertion_point(field_release:SC_HongHeiPostCard.pb_card)
  clear_has_pb_card();
  ::SC_HongHeiCard* temp = pb_card_;
  pb_card_ = NULL;
  return temp;
}
void SC_HongHeiPostCard::set_allocated_pb_card(::SC_HongHeiCard* pb_card) {
  delete pb_card_;
  pb_card_ = pb_card;
  if (pb_card) {
    set_has_pb_card();
  } else {
    clear_has_pb_card();
  }
  // @@protoc_insertion_point(field_set_allocated:SC_HongHeiPostCard.pb_card)
}

// optional int32 table_status = 3;
bool SC_HongHeiPostCard::has_table_status() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void SC_HongHeiPostCard::set_has_table_status() {
  _has_bits_[0] |= 0x00000004u;
}
void SC_HongHeiPostCard::clear_has_table_status() {
  _has_bits_[0] &= ~0x00000004u;
}
void SC_HongHeiPostCard::clear_table_status() {
  table_status_ = 0;
  clear_has_table_status();
}
::google::protobuf::int32 SC_HongHeiPostCard::table_status() const {
  // @@protoc_insertion_point(field_get:SC_HongHeiPostCard.table_status)
  return table_status_;
}
void SC_HongHeiPostCard::set_table_status(::google::protobuf::int32 value) {
  set_has_table_status();
  table_status_ = value;
  // @@protoc_insertion_point(field_set:SC_HongHeiPostCard.table_status)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SC_HongHeiPostResult::kNextWaittimeFieldNumber;
const int SC_HongHeiPostResult::kChairFieldNumber;
const int SC_HongHeiPostResult::kMoneyFieldNumber;
const int SC_HongHeiPostResult::kTaxFieldNumber;
const int SC_HongHeiPostResult::kVictoryFieldNumber;
const int SC_HongHeiPostResult::kTableStatusFieldNumber;
const int SC_HongHeiPostResult::kWinAreaFieldNumber;
const int SC_HongHeiPostResult::kWinTypeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SC_HongHeiPostResult::SC_HongHeiPostResult()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_public_5fhhdz_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:SC_HongHeiPostResult)
}
SC_HongHeiPostResult::SC_HongHeiPostResult(const SC_HongHeiPostResult& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&next_waittime_, &from.next_waittime_,
    reinterpret_cast<char*>(&win_area_) -
    reinterpret_cast<char*>(&next_waittime_) + sizeof(win_area_));
  // @@protoc_insertion_point(copy_constructor:SC_HongHeiPostResult)
}

void SC_HongHeiPostResult::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&next_waittime_, 0, reinterpret_cast<char*>(&win_area_) -
    reinterpret_cast<char*>(&next_waittime_) + sizeof(win_area_));
}

SC_HongHeiPostResult::~SC_HongHeiPostResult() {
  // @@protoc_insertion_point(destructor:SC_HongHeiPostResult)
  SharedDtor();
}

void SC_HongHeiPostResult::SharedDtor() {
}

void SC_HongHeiPostResult::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SC_HongHeiPostResult::descriptor() {
  protobuf_public_5fhhdz_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_public_5fhhdz_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const SC_HongHeiPostResult& SC_HongHeiPostResult::default_instance() {
  protobuf_public_5fhhdz_2eproto::InitDefaults();
  return *internal_default_instance();
}

SC_HongHeiPostResult* SC_HongHeiPostResult::New(::google::protobuf::Arena* arena) const {
  SC_HongHeiPostResult* n = new SC_HongHeiPostResult;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SC_HongHeiPostResult::Clear() {
// @@protoc_insertion_point(message_clear_start:SC_HongHeiPostResult)
  if (_has_bits_[0 / 32] & 255u) {
    ::memset(&next_waittime_, 0, reinterpret_cast<char*>(&win_area_) -
      reinterpret_cast<char*>(&next_waittime_) + sizeof(win_area_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool SC_HongHeiPostResult::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:SC_HongHeiPostResult)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 next_waittime = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_next_waittime();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &next_waittime_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 chair = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_chair();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &chair_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 money = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {
          set_has_money();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &money_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 tax = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u)) {
          set_has_tax();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &tax_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 victory = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u)) {
          set_has_victory();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &victory_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 table_status = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u)) {
          set_has_table_status();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &table_status_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 win_area = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u)) {
          set_has_win_area();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &win_area_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 win_type = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(64u)) {
          set_has_win_type();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &win_type_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:SC_HongHeiPostResult)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:SC_HongHeiPostResult)
  return false;
#undef DO_
}

void SC_HongHeiPostResult::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:SC_HongHeiPostResult)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 next_waittime = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->next_waittime(), output);
  }

  // optional int32 chair = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->chair(), output);
  }

  // optional int64 money = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->money(), output);
  }

  // optional int64 tax = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(4, this->tax(), output);
  }

  // optional int32 victory = 5;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->victory(), output);
  }

  // optional int32 table_status = 6;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->table_status(), output);
  }

  // optional int32 win_area = 7;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->win_area(), output);
  }

  // optional int64 win_type = 8;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(8, this->win_type(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:SC_HongHeiPostResult)
}

::google::protobuf::uint8* SC_HongHeiPostResult::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:SC_HongHeiPostResult)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 next_waittime = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->next_waittime(), target);
  }

  // optional int32 chair = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->chair(), target);
  }

  // optional int64 money = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->money(), target);
  }

  // optional int64 tax = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(4, this->tax(), target);
  }

  // optional int32 victory = 5;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->victory(), target);
  }

  // optional int32 table_status = 6;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->table_status(), target);
  }

  // optional int32 win_area = 7;
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->win_area(), target);
  }

  // optional int64 win_type = 8;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(8, this->win_type(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SC_HongHeiPostResult)
  return target;
}

size_t SC_HongHeiPostResult::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SC_HongHeiPostResult)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 255u) {
    // optional int32 next_waittime = 1;
    if (has_next_waittime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->next_waittime());
    }

    // optional int32 chair = 2;
    if (has_chair()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->chair());
    }

    // optional int64 money = 3;
    if (has_money()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->money());
    }

    // optional int64 tax = 4;
    if (has_tax()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->tax());
    }

    // optional int32 victory = 5;
    if (has_victory()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->victory());
    }

    // optional int32 table_status = 6;
    if (has_table_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->table_status());
    }

    // optional int64 win_type = 8;
    if (has_win_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->win_type());
    }

    // optional int32 win_area = 7;
    if (has_win_area()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->win_area());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SC_HongHeiPostResult::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:SC_HongHeiPostResult)
  GOOGLE_DCHECK_NE(&from, this);
  const SC_HongHeiPostResult* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SC_HongHeiPostResult>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:SC_HongHeiPostResult)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:SC_HongHeiPostResult)
    MergeFrom(*source);
  }
}

void SC_HongHeiPostResult::MergeFrom(const SC_HongHeiPostResult& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:SC_HongHeiPostResult)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      next_waittime_ = from.next_waittime_;
    }
    if (cached_has_bits & 0x00000002u) {
      chair_ = from.chair_;
    }
    if (cached_has_bits & 0x00000004u) {
      money_ = from.money_;
    }
    if (cached_has_bits & 0x00000008u) {
      tax_ = from.tax_;
    }
    if (cached_has_bits & 0x00000010u) {
      victory_ = from.victory_;
    }
    if (cached_has_bits & 0x00000020u) {
      table_status_ = from.table_status_;
    }
    if (cached_has_bits & 0x00000040u) {
      win_type_ = from.win_type_;
    }
    if (cached_has_bits & 0x00000080u) {
      win_area_ = from.win_area_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void SC_HongHeiPostResult::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:SC_HongHeiPostResult)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SC_HongHeiPostResult::CopyFrom(const SC_HongHeiPostResult& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SC_HongHeiPostResult)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SC_HongHeiPostResult::IsInitialized() const {
  return true;
}

void SC_HongHeiPostResult::Swap(SC_HongHeiPostResult* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SC_HongHeiPostResult::InternalSwap(SC_HongHeiPostResult* other) {
  std::swap(next_waittime_, other->next_waittime_);
  std::swap(chair_, other->chair_);
  std::swap(money_, other->money_);
  std::swap(tax_, other->tax_);
  std::swap(victory_, other->victory_);
  std::swap(table_status_, other->table_status_);
  std::swap(win_type_, other->win_type_);
  std::swap(win_area_, other->win_area_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SC_HongHeiPostResult::GetMetadata() const {
  protobuf_public_5fhhdz_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_public_5fhhdz_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SC_HongHeiPostResult

// optional int32 next_waittime = 1;
bool SC_HongHeiPostResult::has_next_waittime() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void SC_HongHeiPostResult::set_has_next_waittime() {
  _has_bits_[0] |= 0x00000001u;
}
void SC_HongHeiPostResult::clear_has_next_waittime() {
  _has_bits_[0] &= ~0x00000001u;
}
void SC_HongHeiPostResult::clear_next_waittime() {
  next_waittime_ = 0;
  clear_has_next_waittime();
}
::google::protobuf::int32 SC_HongHeiPostResult::next_waittime() const {
  // @@protoc_insertion_point(field_get:SC_HongHeiPostResult.next_waittime)
  return next_waittime_;
}
void SC_HongHeiPostResult::set_next_waittime(::google::protobuf::int32 value) {
  set_has_next_waittime();
  next_waittime_ = value;
  // @@protoc_insertion_point(field_set:SC_HongHeiPostResult.next_waittime)
}

// optional int32 chair = 2;
bool SC_HongHeiPostResult::has_chair() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void SC_HongHeiPostResult::set_has_chair() {
  _has_bits_[0] |= 0x00000002u;
}
void SC_HongHeiPostResult::clear_has_chair() {
  _has_bits_[0] &= ~0x00000002u;
}
void SC_HongHeiPostResult::clear_chair() {
  chair_ = 0;
  clear_has_chair();
}
::google::protobuf::int32 SC_HongHeiPostResult::chair() const {
  // @@protoc_insertion_point(field_get:SC_HongHeiPostResult.chair)
  return chair_;
}
void SC_HongHeiPostResult::set_chair(::google::protobuf::int32 value) {
  set_has_chair();
  chair_ = value;
  // @@protoc_insertion_point(field_set:SC_HongHeiPostResult.chair)
}

// optional int64 money = 3;
bool SC_HongHeiPostResult::has_money() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void SC_HongHeiPostResult::set_has_money() {
  _has_bits_[0] |= 0x00000004u;
}
void SC_HongHeiPostResult::clear_has_money() {
  _has_bits_[0] &= ~0x00000004u;
}
void SC_HongHeiPostResult::clear_money() {
  money_ = GOOGLE_LONGLONG(0);
  clear_has_money();
}
::google::protobuf::int64 SC_HongHeiPostResult::money() const {
  // @@protoc_insertion_point(field_get:SC_HongHeiPostResult.money)
  return money_;
}
void SC_HongHeiPostResult::set_money(::google::protobuf::int64 value) {
  set_has_money();
  money_ = value;
  // @@protoc_insertion_point(field_set:SC_HongHeiPostResult.money)
}

// optional int64 tax = 4;
bool SC_HongHeiPostResult::has_tax() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void SC_HongHeiPostResult::set_has_tax() {
  _has_bits_[0] |= 0x00000008u;
}
void SC_HongHeiPostResult::clear_has_tax() {
  _has_bits_[0] &= ~0x00000008u;
}
void SC_HongHeiPostResult::clear_tax() {
  tax_ = GOOGLE_LONGLONG(0);
  clear_has_tax();
}
::google::protobuf::int64 SC_HongHeiPostResult::tax() const {
  // @@protoc_insertion_point(field_get:SC_HongHeiPostResult.tax)
  return tax_;
}
void SC_HongHeiPostResult::set_tax(::google::protobuf::int64 value) {
  set_has_tax();
  tax_ = value;
  // @@protoc_insertion_point(field_set:SC_HongHeiPostResult.tax)
}

// optional int32 victory = 5;
bool SC_HongHeiPostResult::has_victory() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void SC_HongHeiPostResult::set_has_victory() {
  _has_bits_[0] |= 0x00000010u;
}
void SC_HongHeiPostResult::clear_has_victory() {
  _has_bits_[0] &= ~0x00000010u;
}
void SC_HongHeiPostResult::clear_victory() {
  victory_ = 0;
  clear_has_victory();
}
::google::protobuf::int32 SC_HongHeiPostResult::victory() const {
  // @@protoc_insertion_point(field_get:SC_HongHeiPostResult.victory)
  return victory_;
}
void SC_HongHeiPostResult::set_victory(::google::protobuf::int32 value) {
  set_has_victory();
  victory_ = value;
  // @@protoc_insertion_point(field_set:SC_HongHeiPostResult.victory)
}

// optional int32 table_status = 6;
bool SC_HongHeiPostResult::has_table_status() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void SC_HongHeiPostResult::set_has_table_status() {
  _has_bits_[0] |= 0x00000020u;
}
void SC_HongHeiPostResult::clear_has_table_status() {
  _has_bits_[0] &= ~0x00000020u;
}
void SC_HongHeiPostResult::clear_table_status() {
  table_status_ = 0;
  clear_has_table_status();
}
::google::protobuf::int32 SC_HongHeiPostResult::table_status() const {
  // @@protoc_insertion_point(field_get:SC_HongHeiPostResult.table_status)
  return table_status_;
}
void SC_HongHeiPostResult::set_table_status(::google::protobuf::int32 value) {
  set_has_table_status();
  table_status_ = value;
  // @@protoc_insertion_point(field_set:SC_HongHeiPostResult.table_status)
}

// optional int32 win_area = 7;
bool SC_HongHeiPostResult::has_win_area() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void SC_HongHeiPostResult::set_has_win_area() {
  _has_bits_[0] |= 0x00000080u;
}
void SC_HongHeiPostResult::clear_has_win_area() {
  _has_bits_[0] &= ~0x00000080u;
}
void SC_HongHeiPostResult::clear_win_area() {
  win_area_ = 0;
  clear_has_win_area();
}
::google::protobuf::int32 SC_HongHeiPostResult::win_area() const {
  // @@protoc_insertion_point(field_get:SC_HongHeiPostResult.win_area)
  return win_area_;
}
void SC_HongHeiPostResult::set_win_area(::google::protobuf::int32 value) {
  set_has_win_area();
  win_area_ = value;
  // @@protoc_insertion_point(field_set:SC_HongHeiPostResult.win_area)
}

// optional int64 win_type = 8;
bool SC_HongHeiPostResult::has_win_type() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void SC_HongHeiPostResult::set_has_win_type() {
  _has_bits_[0] |= 0x00000040u;
}
void SC_HongHeiPostResult::clear_has_win_type() {
  _has_bits_[0] &= ~0x00000040u;
}
void SC_HongHeiPostResult::clear_win_type() {
  win_type_ = GOOGLE_LONGLONG(0);
  clear_has_win_type();
}
::google::protobuf::int64 SC_HongHeiPostResult::win_type() const {
  // @@protoc_insertion_point(field_get:SC_HongHeiPostResult.win_type)
  return win_type_;
}
void SC_HongHeiPostResult::set_win_type(::google::protobuf::int64 value) {
  set_has_win_type();
  win_type_ = value;
  // @@protoc_insertion_point(field_set:SC_HongHeiPostResult.win_type)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Player_bet_info::kBetMoneyFieldNumber;
const int Player_bet_info::kChairFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Player_bet_info::Player_bet_info()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_public_5fhhdz_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:Player_bet_info)
}
Player_bet_info::Player_bet_info(const Player_bet_info& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      bet_money_(from.bet_money_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  chair_ = from.chair_;
  // @@protoc_insertion_point(copy_constructor:Player_bet_info)
}

void Player_bet_info::SharedCtor() {
  _cached_size_ = 0;
  chair_ = 0;
}

Player_bet_info::~Player_bet_info() {
  // @@protoc_insertion_point(destructor:Player_bet_info)
  SharedDtor();
}

void Player_bet_info::SharedDtor() {
}

void Player_bet_info::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Player_bet_info::descriptor() {
  protobuf_public_5fhhdz_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_public_5fhhdz_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Player_bet_info& Player_bet_info::default_instance() {
  protobuf_public_5fhhdz_2eproto::InitDefaults();
  return *internal_default_instance();
}

Player_bet_info* Player_bet_info::New(::google::protobuf::Arena* arena) const {
  Player_bet_info* n = new Player_bet_info;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Player_bet_info::Clear() {
// @@protoc_insertion_point(message_clear_start:Player_bet_info)
  bet_money_.Clear();
  chair_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool Player_bet_info::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Player_bet_info)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated int64 bet_money = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 1, 8u, input, this->mutable_bet_money())));
        } else if (static_cast< ::google::protobuf::uint8>(tag) ==
                   static_cast< ::google::protobuf::uint8>(10u)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, this->mutable_bet_money())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 chair = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_chair();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &chair_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Player_bet_info)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Player_bet_info)
  return false;
#undef DO_
}

void Player_bet_info::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Player_bet_info)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated int64 bet_money = 1;
  for (int i = 0, n = this->bet_money_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(
      1, this->bet_money(i), output);
  }

  cached_has_bits = _has_bits_[0];
  // optional int32 chair = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->chair(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Player_bet_info)
}

::google::protobuf::uint8* Player_bet_info::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Player_bet_info)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated int64 bet_money = 1;
  target = ::google::protobuf::internal::WireFormatLite::
    WriteInt64ToArray(1, this->bet_money_, target);

  cached_has_bits = _has_bits_[0];
  // optional int32 chair = 2;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->chair(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Player_bet_info)
  return target;
}

size_t Player_bet_info::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Player_bet_info)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // repeated int64 bet_money = 1;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      Int64Size(this->bet_money_);
    total_size += 1 *
                  ::google::protobuf::internal::FromIntSize(this->bet_money_size());
    total_size += data_size;
  }

  // optional int32 chair = 2;
  if (has_chair()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->chair());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Player_bet_info::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Player_bet_info)
  GOOGLE_DCHECK_NE(&from, this);
  const Player_bet_info* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Player_bet_info>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Player_bet_info)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Player_bet_info)
    MergeFrom(*source);
  }
}

void Player_bet_info::MergeFrom(const Player_bet_info& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Player_bet_info)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  bet_money_.MergeFrom(from.bet_money_);
  if (from.has_chair()) {
    set_chair(from.chair());
  }
}

void Player_bet_info::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Player_bet_info)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Player_bet_info::CopyFrom(const Player_bet_info& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Player_bet_info)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Player_bet_info::IsInitialized() const {
  return true;
}

void Player_bet_info::Swap(Player_bet_info* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Player_bet_info::InternalSwap(Player_bet_info* other) {
  bet_money_.InternalSwap(&other->bet_money_);
  std::swap(chair_, other->chair_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Player_bet_info::GetMetadata() const {
  protobuf_public_5fhhdz_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_public_5fhhdz_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Player_bet_info

// repeated int64 bet_money = 1;
int Player_bet_info::bet_money_size() const {
  return bet_money_.size();
}
void Player_bet_info::clear_bet_money() {
  bet_money_.Clear();
}
::google::protobuf::int64 Player_bet_info::bet_money(int index) const {
  // @@protoc_insertion_point(field_get:Player_bet_info.bet_money)
  return bet_money_.Get(index);
}
void Player_bet_info::set_bet_money(int index, ::google::protobuf::int64 value) {
  bet_money_.Set(index, value);
  // @@protoc_insertion_point(field_set:Player_bet_info.bet_money)
}
void Player_bet_info::add_bet_money(::google::protobuf::int64 value) {
  bet_money_.Add(value);
  // @@protoc_insertion_point(field_add:Player_bet_info.bet_money)
}
const ::google::protobuf::RepeatedField< ::google::protobuf::int64 >&
Player_bet_info::bet_money() const {
  // @@protoc_insertion_point(field_list:Player_bet_info.bet_money)
  return bet_money_;
}
::google::protobuf::RepeatedField< ::google::protobuf::int64 >*
Player_bet_info::mutable_bet_money() {
  // @@protoc_insertion_point(field_mutable_list:Player_bet_info.bet_money)
  return &bet_money_;
}

// optional int32 chair = 2;
bool Player_bet_info::has_chair() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void Player_bet_info::set_has_chair() {
  _has_bits_[0] |= 0x00000001u;
}
void Player_bet_info::clear_has_chair() {
  _has_bits_[0] &= ~0x00000001u;
}
void Player_bet_info::clear_chair() {
  chair_ = 0;
  clear_has_chair();
}
::google::protobuf::int32 Player_bet_info::chair() const {
  // @@protoc_insertion_point(field_get:Player_bet_info.chair)
  return chair_;
}
void Player_bet_info::set_chair(::google::protobuf::int32 value) {
  set_has_chair();
  chair_ = value;
  // @@protoc_insertion_point(field_set:Player_bet_info.chair)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SC_HongHeiReConnect::kPlayerbetsFieldNumber;
const int SC_HongHeiReConnect::kAllbetsFieldNumber;
const int SC_HongHeiReConnect::kPlayerBetFieldNumber;
const int SC_HongHeiReConnect::kPbCardFieldNumber;
const int SC_HongHeiReConnect::kTableStatusFieldNumber;
const int SC_HongHeiReConnect::kTableWaittimeFieldNumber;
const int SC_HongHeiReConnect::kPbPlayerBetInfoFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SC_HongHeiReConnect::SC_HongHeiReConnect()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_public_5fhhdz_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:SC_HongHeiReConnect)
}
SC_HongHeiReConnect::SC_HongHeiReConnect(const SC_HongHeiReConnect& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      playerbets_(from.playerbets_),
      allbets_(from.allbets_),
      pb_player_bet_info_(from.pb_player_bet_info_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_pb_card()) {
    pb_card_ = new ::SC_HongHeiCard(*from.pb_card_);
  } else {
    pb_card_ = NULL;
  }
  ::memcpy(&player_bet_, &from.player_bet_,
    reinterpret_cast<char*>(&table_waittime_) -
    reinterpret_cast<char*>(&player_bet_) + sizeof(table_waittime_));
  // @@protoc_insertion_point(copy_constructor:SC_HongHeiReConnect)
}

void SC_HongHeiReConnect::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&pb_card_, 0, reinterpret_cast<char*>(&table_waittime_) -
    reinterpret_cast<char*>(&pb_card_) + sizeof(table_waittime_));
}

SC_HongHeiReConnect::~SC_HongHeiReConnect() {
  // @@protoc_insertion_point(destructor:SC_HongHeiReConnect)
  SharedDtor();
}

void SC_HongHeiReConnect::SharedDtor() {
  if (this != internal_default_instance()) {
    delete pb_card_;
  }
}

void SC_HongHeiReConnect::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SC_HongHeiReConnect::descriptor() {
  protobuf_public_5fhhdz_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_public_5fhhdz_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const SC_HongHeiReConnect& SC_HongHeiReConnect::default_instance() {
  protobuf_public_5fhhdz_2eproto::InitDefaults();
  return *internal_default_instance();
}

SC_HongHeiReConnect* SC_HongHeiReConnect::New(::google::protobuf::Arena* arena) const {
  SC_HongHeiReConnect* n = new SC_HongHeiReConnect;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SC_HongHeiReConnect::Clear() {
// @@protoc_insertion_point(message_clear_start:SC_HongHeiReConnect)
  playerbets_.Clear();
  allbets_.Clear();
  pb_player_bet_info_.Clear();
  if (has_pb_card()) {
    GOOGLE_DCHECK(pb_card_ != NULL);
    pb_card_->::SC_HongHeiCard::Clear();
  }
  if (_has_bits_[0 / 32] & 14u) {
    ::memset(&player_bet_, 0, reinterpret_cast<char*>(&table_waittime_) -
      reinterpret_cast<char*>(&player_bet_) + sizeof(table_waittime_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool SC_HongHeiReConnect::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:SC_HongHeiReConnect)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated int32 playerbets = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 8u, input, this->mutable_playerbets())));
        } else if (static_cast< ::google::protobuf::uint8>(tag) ==
                   static_cast< ::google::protobuf::uint8>(10u)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_playerbets())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated int32 allbets = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 16u, input, this->mutable_allbets())));
        } else if (static_cast< ::google::protobuf::uint8>(tag) ==
                   static_cast< ::google::protobuf::uint8>(18u)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_allbets())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 player_bet = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {
          set_has_player_bet();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &player_bet_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .SC_HongHeiCard pb_card = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_pb_card()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 table_status = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u)) {
          set_has_table_status();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &table_status_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 table_waittime = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u)) {
          set_has_table_waittime();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &table_waittime_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .Player_bet_info pb_player_bet_info = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(58u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_pb_player_bet_info()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:SC_HongHeiReConnect)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:SC_HongHeiReConnect)
  return false;
#undef DO_
}

void SC_HongHeiReConnect::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:SC_HongHeiReConnect)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated int32 playerbets = 1;
  for (int i = 0, n = this->playerbets_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      1, this->playerbets(i), output);
  }

  // repeated int32 allbets = 2;
  for (int i = 0, n = this->allbets_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      2, this->allbets(i), output);
  }

  cached_has_bits = _has_bits_[0];
  // optional int32 player_bet = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->player_bet(), output);
  }

  // optional .SC_HongHeiCard pb_card = 4;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, *this->pb_card_, output);
  }

  // optional int32 table_status = 5;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->table_status(), output);
  }

  // optional int32 table_waittime = 6;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->table_waittime(), output);
  }

  // repeated .Player_bet_info pb_player_bet_info = 7;
  for (unsigned int i = 0, n = this->pb_player_bet_info_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->pb_player_bet_info(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:SC_HongHeiReConnect)
}

::google::protobuf::uint8* SC_HongHeiReConnect::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:SC_HongHeiReConnect)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated int32 playerbets = 1;
  target = ::google::protobuf::internal::WireFormatLite::
    WriteInt32ToArray(1, this->playerbets_, target);

  // repeated int32 allbets = 2;
  target = ::google::protobuf::internal::WireFormatLite::
    WriteInt32ToArray(2, this->allbets_, target);

  cached_has_bits = _has_bits_[0];
  // optional int32 player_bet = 3;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->player_bet(), target);
  }

  // optional .SC_HongHeiCard pb_card = 4;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        4, *this->pb_card_, deterministic, target);
  }

  // optional int32 table_status = 5;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->table_status(), target);
  }

  // optional int32 table_waittime = 6;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->table_waittime(), target);
  }

  // repeated .Player_bet_info pb_player_bet_info = 7;
  for (unsigned int i = 0, n = this->pb_player_bet_info_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        7, this->pb_player_bet_info(i), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SC_HongHeiReConnect)
  return target;
}

size_t SC_HongHeiReConnect::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SC_HongHeiReConnect)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // repeated int32 playerbets = 1;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      Int32Size(this->playerbets_);
    total_size += 1 *
                  ::google::protobuf::internal::FromIntSize(this->playerbets_size());
    total_size += data_size;
  }

  // repeated int32 allbets = 2;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      Int32Size(this->allbets_);
    total_size += 1 *
                  ::google::protobuf::internal::FromIntSize(this->allbets_size());
    total_size += data_size;
  }

  // repeated .Player_bet_info pb_player_bet_info = 7;
  {
    unsigned int count = this->pb_player_bet_info_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->pb_player_bet_info(i));
    }
  }

  if (_has_bits_[0 / 32] & 15u) {
    // optional .SC_HongHeiCard pb_card = 4;
    if (has_pb_card()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->pb_card_);
    }

    // optional int32 player_bet = 3;
    if (has_player_bet()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->player_bet());
    }

    // optional int32 table_status = 5;
    if (has_table_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->table_status());
    }

    // optional int32 table_waittime = 6;
    if (has_table_waittime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->table_waittime());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SC_HongHeiReConnect::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:SC_HongHeiReConnect)
  GOOGLE_DCHECK_NE(&from, this);
  const SC_HongHeiReConnect* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SC_HongHeiReConnect>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:SC_HongHeiReConnect)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:SC_HongHeiReConnect)
    MergeFrom(*source);
  }
}

void SC_HongHeiReConnect::MergeFrom(const SC_HongHeiReConnect& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:SC_HongHeiReConnect)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  playerbets_.MergeFrom(from.playerbets_);
  allbets_.MergeFrom(from.allbets_);
  pb_player_bet_info_.MergeFrom(from.pb_player_bet_info_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 15u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_pb_card()->::SC_HongHeiCard::MergeFrom(from.pb_card());
    }
    if (cached_has_bits & 0x00000002u) {
      player_bet_ = from.player_bet_;
    }
    if (cached_has_bits & 0x00000004u) {
      table_status_ = from.table_status_;
    }
    if (cached_has_bits & 0x00000008u) {
      table_waittime_ = from.table_waittime_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void SC_HongHeiReConnect::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:SC_HongHeiReConnect)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SC_HongHeiReConnect::CopyFrom(const SC_HongHeiReConnect& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SC_HongHeiReConnect)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SC_HongHeiReConnect::IsInitialized() const {
  return true;
}

void SC_HongHeiReConnect::Swap(SC_HongHeiReConnect* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SC_HongHeiReConnect::InternalSwap(SC_HongHeiReConnect* other) {
  playerbets_.InternalSwap(&other->playerbets_);
  allbets_.InternalSwap(&other->allbets_);
  pb_player_bet_info_.InternalSwap(&other->pb_player_bet_info_);
  std::swap(pb_card_, other->pb_card_);
  std::swap(player_bet_, other->player_bet_);
  std::swap(table_status_, other->table_status_);
  std::swap(table_waittime_, other->table_waittime_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SC_HongHeiReConnect::GetMetadata() const {
  protobuf_public_5fhhdz_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_public_5fhhdz_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SC_HongHeiReConnect

// repeated int32 playerbets = 1;
int SC_HongHeiReConnect::playerbets_size() const {
  return playerbets_.size();
}
void SC_HongHeiReConnect::clear_playerbets() {
  playerbets_.Clear();
}
::google::protobuf::int32 SC_HongHeiReConnect::playerbets(int index) const {
  // @@protoc_insertion_point(field_get:SC_HongHeiReConnect.playerbets)
  return playerbets_.Get(index);
}
void SC_HongHeiReConnect::set_playerbets(int index, ::google::protobuf::int32 value) {
  playerbets_.Set(index, value);
  // @@protoc_insertion_point(field_set:SC_HongHeiReConnect.playerbets)
}
void SC_HongHeiReConnect::add_playerbets(::google::protobuf::int32 value) {
  playerbets_.Add(value);
  // @@protoc_insertion_point(field_add:SC_HongHeiReConnect.playerbets)
}
const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
SC_HongHeiReConnect::playerbets() const {
  // @@protoc_insertion_point(field_list:SC_HongHeiReConnect.playerbets)
  return playerbets_;
}
::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
SC_HongHeiReConnect::mutable_playerbets() {
  // @@protoc_insertion_point(field_mutable_list:SC_HongHeiReConnect.playerbets)
  return &playerbets_;
}

// repeated int32 allbets = 2;
int SC_HongHeiReConnect::allbets_size() const {
  return allbets_.size();
}
void SC_HongHeiReConnect::clear_allbets() {
  allbets_.Clear();
}
::google::protobuf::int32 SC_HongHeiReConnect::allbets(int index) const {
  // @@protoc_insertion_point(field_get:SC_HongHeiReConnect.allbets)
  return allbets_.Get(index);
}
void SC_HongHeiReConnect::set_allbets(int index, ::google::protobuf::int32 value) {
  allbets_.Set(index, value);
  // @@protoc_insertion_point(field_set:SC_HongHeiReConnect.allbets)
}
void SC_HongHeiReConnect::add_allbets(::google::protobuf::int32 value) {
  allbets_.Add(value);
  // @@protoc_insertion_point(field_add:SC_HongHeiReConnect.allbets)
}
const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
SC_HongHeiReConnect::allbets() const {
  // @@protoc_insertion_point(field_list:SC_HongHeiReConnect.allbets)
  return allbets_;
}
::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
SC_HongHeiReConnect::mutable_allbets() {
  // @@protoc_insertion_point(field_mutable_list:SC_HongHeiReConnect.allbets)
  return &allbets_;
}

// optional int32 player_bet = 3;
bool SC_HongHeiReConnect::has_player_bet() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void SC_HongHeiReConnect::set_has_player_bet() {
  _has_bits_[0] |= 0x00000002u;
}
void SC_HongHeiReConnect::clear_has_player_bet() {
  _has_bits_[0] &= ~0x00000002u;
}
void SC_HongHeiReConnect::clear_player_bet() {
  player_bet_ = 0;
  clear_has_player_bet();
}
::google::protobuf::int32 SC_HongHeiReConnect::player_bet() const {
  // @@protoc_insertion_point(field_get:SC_HongHeiReConnect.player_bet)
  return player_bet_;
}
void SC_HongHeiReConnect::set_player_bet(::google::protobuf::int32 value) {
  set_has_player_bet();
  player_bet_ = value;
  // @@protoc_insertion_point(field_set:SC_HongHeiReConnect.player_bet)
}

// optional .SC_HongHeiCard pb_card = 4;
bool SC_HongHeiReConnect::has_pb_card() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void SC_HongHeiReConnect::set_has_pb_card() {
  _has_bits_[0] |= 0x00000001u;
}
void SC_HongHeiReConnect::clear_has_pb_card() {
  _has_bits_[0] &= ~0x00000001u;
}
void SC_HongHeiReConnect::clear_pb_card() {
  if (pb_card_ != NULL) pb_card_->::SC_HongHeiCard::Clear();
  clear_has_pb_card();
}
const ::SC_HongHeiCard& SC_HongHeiReConnect::pb_card() const {
  // @@protoc_insertion_point(field_get:SC_HongHeiReConnect.pb_card)
  return pb_card_ != NULL ? *pb_card_
                         : *::SC_HongHeiCard::internal_default_instance();
}
::SC_HongHeiCard* SC_HongHeiReConnect::mutable_pb_card() {
  set_has_pb_card();
  if (pb_card_ == NULL) {
    pb_card_ = new ::SC_HongHeiCard;
  }
  // @@protoc_insertion_point(field_mutable:SC_HongHeiReConnect.pb_card)
  return pb_card_;
}
::SC_HongHeiCard* SC_HongHeiReConnect::release_pb_card() {
  // @@protoc_insertion_point(field_release:SC_HongHeiReConnect.pb_card)
  clear_has_pb_card();
  ::SC_HongHeiCard* temp = pb_card_;
  pb_card_ = NULL;
  return temp;
}
void SC_HongHeiReConnect::set_allocated_pb_card(::SC_HongHeiCard* pb_card) {
  delete pb_card_;
  pb_card_ = pb_card;
  if (pb_card) {
    set_has_pb_card();
  } else {
    clear_has_pb_card();
  }
  // @@protoc_insertion_point(field_set_allocated:SC_HongHeiReConnect.pb_card)
}

// optional int32 table_status = 5;
bool SC_HongHeiReConnect::has_table_status() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void SC_HongHeiReConnect::set_has_table_status() {
  _has_bits_[0] |= 0x00000004u;
}
void SC_HongHeiReConnect::clear_has_table_status() {
  _has_bits_[0] &= ~0x00000004u;
}
void SC_HongHeiReConnect::clear_table_status() {
  table_status_ = 0;
  clear_has_table_status();
}
::google::protobuf::int32 SC_HongHeiReConnect::table_status() const {
  // @@protoc_insertion_point(field_get:SC_HongHeiReConnect.table_status)
  return table_status_;
}
void SC_HongHeiReConnect::set_table_status(::google::protobuf::int32 value) {
  set_has_table_status();
  table_status_ = value;
  // @@protoc_insertion_point(field_set:SC_HongHeiReConnect.table_status)
}

// optional int32 table_waittime = 6;
bool SC_HongHeiReConnect::has_table_waittime() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void SC_HongHeiReConnect::set_has_table_waittime() {
  _has_bits_[0] |= 0x00000008u;
}
void SC_HongHeiReConnect::clear_has_table_waittime() {
  _has_bits_[0] &= ~0x00000008u;
}
void SC_HongHeiReConnect::clear_table_waittime() {
  table_waittime_ = 0;
  clear_has_table_waittime();
}
::google::protobuf::int32 SC_HongHeiReConnect::table_waittime() const {
  // @@protoc_insertion_point(field_get:SC_HongHeiReConnect.table_waittime)
  return table_waittime_;
}
void SC_HongHeiReConnect::set_table_waittime(::google::protobuf::int32 value) {
  set_has_table_waittime();
  table_waittime_ = value;
  // @@protoc_insertion_point(field_set:SC_HongHeiReConnect.table_waittime)
}

// repeated .Player_bet_info pb_player_bet_info = 7;
int SC_HongHeiReConnect::pb_player_bet_info_size() const {
  return pb_player_bet_info_.size();
}
void SC_HongHeiReConnect::clear_pb_player_bet_info() {
  pb_player_bet_info_.Clear();
}
const ::Player_bet_info& SC_HongHeiReConnect::pb_player_bet_info(int index) const {
  // @@protoc_insertion_point(field_get:SC_HongHeiReConnect.pb_player_bet_info)
  return pb_player_bet_info_.Get(index);
}
::Player_bet_info* SC_HongHeiReConnect::mutable_pb_player_bet_info(int index) {
  // @@protoc_insertion_point(field_mutable:SC_HongHeiReConnect.pb_player_bet_info)
  return pb_player_bet_info_.Mutable(index);
}
::Player_bet_info* SC_HongHeiReConnect::add_pb_player_bet_info() {
  // @@protoc_insertion_point(field_add:SC_HongHeiReConnect.pb_player_bet_info)
  return pb_player_bet_info_.Add();
}
::google::protobuf::RepeatedPtrField< ::Player_bet_info >*
SC_HongHeiReConnect::mutable_pb_player_bet_info() {
  // @@protoc_insertion_point(field_mutable_list:SC_HongHeiReConnect.pb_player_bet_info)
  return &pb_player_bet_info_;
}
const ::google::protobuf::RepeatedPtrField< ::Player_bet_info >&
SC_HongHeiReConnect::pb_player_bet_info() const {
  // @@protoc_insertion_point(field_list:SC_HongHeiReConnect.pb_player_bet_info)
  return pb_player_bet_info_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SC_HongHeiRest::kRestWaittimeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SC_HongHeiRest::SC_HongHeiRest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_public_5fhhdz_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:SC_HongHeiRest)
}
SC_HongHeiRest::SC_HongHeiRest(const SC_HongHeiRest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  rest_waittime_ = from.rest_waittime_;
  // @@protoc_insertion_point(copy_constructor:SC_HongHeiRest)
}

void SC_HongHeiRest::SharedCtor() {
  _cached_size_ = 0;
  rest_waittime_ = 0;
}

SC_HongHeiRest::~SC_HongHeiRest() {
  // @@protoc_insertion_point(destructor:SC_HongHeiRest)
  SharedDtor();
}

void SC_HongHeiRest::SharedDtor() {
}

void SC_HongHeiRest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SC_HongHeiRest::descriptor() {
  protobuf_public_5fhhdz_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_public_5fhhdz_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const SC_HongHeiRest& SC_HongHeiRest::default_instance() {
  protobuf_public_5fhhdz_2eproto::InitDefaults();
  return *internal_default_instance();
}

SC_HongHeiRest* SC_HongHeiRest::New(::google::protobuf::Arena* arena) const {
  SC_HongHeiRest* n = new SC_HongHeiRest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SC_HongHeiRest::Clear() {
// @@protoc_insertion_point(message_clear_start:SC_HongHeiRest)
  rest_waittime_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool SC_HongHeiRest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:SC_HongHeiRest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 rest_waittime = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_rest_waittime();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &rest_waittime_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:SC_HongHeiRest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:SC_HongHeiRest)
  return false;
#undef DO_
}

void SC_HongHeiRest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:SC_HongHeiRest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 rest_waittime = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->rest_waittime(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:SC_HongHeiRest)
}

::google::protobuf::uint8* SC_HongHeiRest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:SC_HongHeiRest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 rest_waittime = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->rest_waittime(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SC_HongHeiRest)
  return target;
}

size_t SC_HongHeiRest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SC_HongHeiRest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // optional int32 rest_waittime = 1;
  if (has_rest_waittime()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->rest_waittime());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SC_HongHeiRest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:SC_HongHeiRest)
  GOOGLE_DCHECK_NE(&from, this);
  const SC_HongHeiRest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SC_HongHeiRest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:SC_HongHeiRest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:SC_HongHeiRest)
    MergeFrom(*source);
  }
}

void SC_HongHeiRest::MergeFrom(const SC_HongHeiRest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:SC_HongHeiRest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_rest_waittime()) {
    set_rest_waittime(from.rest_waittime());
  }
}

void SC_HongHeiRest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:SC_HongHeiRest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SC_HongHeiRest::CopyFrom(const SC_HongHeiRest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SC_HongHeiRest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SC_HongHeiRest::IsInitialized() const {
  return true;
}

void SC_HongHeiRest::Swap(SC_HongHeiRest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SC_HongHeiRest::InternalSwap(SC_HongHeiRest* other) {
  std::swap(rest_waittime_, other->rest_waittime_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SC_HongHeiRest::GetMetadata() const {
  protobuf_public_5fhhdz_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_public_5fhhdz_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SC_HongHeiRest

// optional int32 rest_waittime = 1;
bool SC_HongHeiRest::has_rest_waittime() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void SC_HongHeiRest::set_has_rest_waittime() {
  _has_bits_[0] |= 0x00000001u;
}
void SC_HongHeiRest::clear_has_rest_waittime() {
  _has_bits_[0] &= ~0x00000001u;
}
void SC_HongHeiRest::clear_rest_waittime() {
  rest_waittime_ = 0;
  clear_has_rest_waittime();
}
::google::protobuf::int32 SC_HongHeiRest::rest_waittime() const {
  // @@protoc_insertion_point(field_get:SC_HongHeiRest.rest_waittime)
  return rest_waittime_;
}
void SC_HongHeiRest::set_rest_waittime(::google::protobuf::int32 value) {
  set_has_rest_waittime();
  rest_waittime_ = value;
  // @@protoc_insertion_point(field_set:SC_HongHeiRest.rest_waittime)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SC_HongHeiPlayerList::kPbOnlinelistFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SC_HongHeiPlayerList::SC_HongHeiPlayerList()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_public_5fhhdz_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:SC_HongHeiPlayerList)
}
SC_HongHeiPlayerList::SC_HongHeiPlayerList(const SC_HongHeiPlayerList& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      pb_onlinelist_(from.pb_onlinelist_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:SC_HongHeiPlayerList)
}

void SC_HongHeiPlayerList::SharedCtor() {
  _cached_size_ = 0;
}

SC_HongHeiPlayerList::~SC_HongHeiPlayerList() {
  // @@protoc_insertion_point(destructor:SC_HongHeiPlayerList)
  SharedDtor();
}

void SC_HongHeiPlayerList::SharedDtor() {
}

void SC_HongHeiPlayerList::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SC_HongHeiPlayerList::descriptor() {
  protobuf_public_5fhhdz_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_public_5fhhdz_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const SC_HongHeiPlayerList& SC_HongHeiPlayerList::default_instance() {
  protobuf_public_5fhhdz_2eproto::InitDefaults();
  return *internal_default_instance();
}

SC_HongHeiPlayerList* SC_HongHeiPlayerList::New(::google::protobuf::Arena* arena) const {
  SC_HongHeiPlayerList* n = new SC_HongHeiPlayerList;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SC_HongHeiPlayerList::Clear() {
// @@protoc_insertion_point(message_clear_start:SC_HongHeiPlayerList)
  pb_onlinelist_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool SC_HongHeiPlayerList::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:SC_HongHeiPlayerList)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .SC_HongHeiOnlinePlayer pb_onlinelist = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_pb_onlinelist()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:SC_HongHeiPlayerList)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:SC_HongHeiPlayerList)
  return false;
#undef DO_
}

void SC_HongHeiPlayerList::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:SC_HongHeiPlayerList)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .SC_HongHeiOnlinePlayer pb_onlinelist = 1;
  for (unsigned int i = 0, n = this->pb_onlinelist_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->pb_onlinelist(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:SC_HongHeiPlayerList)
}

::google::protobuf::uint8* SC_HongHeiPlayerList::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:SC_HongHeiPlayerList)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .SC_HongHeiOnlinePlayer pb_onlinelist = 1;
  for (unsigned int i = 0, n = this->pb_onlinelist_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, this->pb_onlinelist(i), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SC_HongHeiPlayerList)
  return target;
}

size_t SC_HongHeiPlayerList::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SC_HongHeiPlayerList)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // repeated .SC_HongHeiOnlinePlayer pb_onlinelist = 1;
  {
    unsigned int count = this->pb_onlinelist_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->pb_onlinelist(i));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SC_HongHeiPlayerList::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:SC_HongHeiPlayerList)
  GOOGLE_DCHECK_NE(&from, this);
  const SC_HongHeiPlayerList* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SC_HongHeiPlayerList>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:SC_HongHeiPlayerList)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:SC_HongHeiPlayerList)
    MergeFrom(*source);
  }
}

void SC_HongHeiPlayerList::MergeFrom(const SC_HongHeiPlayerList& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:SC_HongHeiPlayerList)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  pb_onlinelist_.MergeFrom(from.pb_onlinelist_);
}

void SC_HongHeiPlayerList::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:SC_HongHeiPlayerList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SC_HongHeiPlayerList::CopyFrom(const SC_HongHeiPlayerList& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SC_HongHeiPlayerList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SC_HongHeiPlayerList::IsInitialized() const {
  return true;
}

void SC_HongHeiPlayerList::Swap(SC_HongHeiPlayerList* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SC_HongHeiPlayerList::InternalSwap(SC_HongHeiPlayerList* other) {
  pb_onlinelist_.InternalSwap(&other->pb_onlinelist_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SC_HongHeiPlayerList::GetMetadata() const {
  protobuf_public_5fhhdz_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_public_5fhhdz_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SC_HongHeiPlayerList

// repeated .SC_HongHeiOnlinePlayer pb_onlinelist = 1;
int SC_HongHeiPlayerList::pb_onlinelist_size() const {
  return pb_onlinelist_.size();
}
void SC_HongHeiPlayerList::clear_pb_onlinelist() {
  pb_onlinelist_.Clear();
}
const ::SC_HongHeiOnlinePlayer& SC_HongHeiPlayerList::pb_onlinelist(int index) const {
  // @@protoc_insertion_point(field_get:SC_HongHeiPlayerList.pb_onlinelist)
  return pb_onlinelist_.Get(index);
}
::SC_HongHeiOnlinePlayer* SC_HongHeiPlayerList::mutable_pb_onlinelist(int index) {
  // @@protoc_insertion_point(field_mutable:SC_HongHeiPlayerList.pb_onlinelist)
  return pb_onlinelist_.Mutable(index);
}
::SC_HongHeiOnlinePlayer* SC_HongHeiPlayerList::add_pb_onlinelist() {
  // @@protoc_insertion_point(field_add:SC_HongHeiPlayerList.pb_onlinelist)
  return pb_onlinelist_.Add();
}
::google::protobuf::RepeatedPtrField< ::SC_HongHeiOnlinePlayer >*
SC_HongHeiPlayerList::mutable_pb_onlinelist() {
  // @@protoc_insertion_point(field_mutable_list:SC_HongHeiPlayerList.pb_onlinelist)
  return &pb_onlinelist_;
}
const ::google::protobuf::RepeatedPtrField< ::SC_HongHeiOnlinePlayer >&
SC_HongHeiPlayerList::pb_onlinelist() const {
  // @@protoc_insertion_point(field_list:SC_HongHeiPlayerList.pb_onlinelist)
  return pb_onlinelist_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SC_HongHeiGameRecord::kPbRecordFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SC_HongHeiGameRecord::SC_HongHeiGameRecord()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_public_5fhhdz_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:SC_HongHeiGameRecord)
}
SC_HongHeiGameRecord::SC_HongHeiGameRecord(const SC_HongHeiGameRecord& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      pb_record_(from.pb_record_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:SC_HongHeiGameRecord)
}

void SC_HongHeiGameRecord::SharedCtor() {
  _cached_size_ = 0;
}

SC_HongHeiGameRecord::~SC_HongHeiGameRecord() {
  // @@protoc_insertion_point(destructor:SC_HongHeiGameRecord)
  SharedDtor();
}

void SC_HongHeiGameRecord::SharedDtor() {
}

void SC_HongHeiGameRecord::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SC_HongHeiGameRecord::descriptor() {
  protobuf_public_5fhhdz_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_public_5fhhdz_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const SC_HongHeiGameRecord& SC_HongHeiGameRecord::default_instance() {
  protobuf_public_5fhhdz_2eproto::InitDefaults();
  return *internal_default_instance();
}

SC_HongHeiGameRecord* SC_HongHeiGameRecord::New(::google::protobuf::Arena* arena) const {
  SC_HongHeiGameRecord* n = new SC_HongHeiGameRecord;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SC_HongHeiGameRecord::Clear() {
// @@protoc_insertion_point(message_clear_start:SC_HongHeiGameRecord)
  pb_record_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool SC_HongHeiGameRecord::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:SC_HongHeiGameRecord)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .SC_HongHeiRecord pb_record = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_pb_record()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:SC_HongHeiGameRecord)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:SC_HongHeiGameRecord)
  return false;
#undef DO_
}

void SC_HongHeiGameRecord::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:SC_HongHeiGameRecord)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .SC_HongHeiRecord pb_record = 1;
  for (unsigned int i = 0, n = this->pb_record_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->pb_record(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:SC_HongHeiGameRecord)
}

::google::protobuf::uint8* SC_HongHeiGameRecord::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:SC_HongHeiGameRecord)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .SC_HongHeiRecord pb_record = 1;
  for (unsigned int i = 0, n = this->pb_record_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, this->pb_record(i), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SC_HongHeiGameRecord)
  return target;
}

size_t SC_HongHeiGameRecord::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SC_HongHeiGameRecord)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // repeated .SC_HongHeiRecord pb_record = 1;
  {
    unsigned int count = this->pb_record_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->pb_record(i));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SC_HongHeiGameRecord::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:SC_HongHeiGameRecord)
  GOOGLE_DCHECK_NE(&from, this);
  const SC_HongHeiGameRecord* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SC_HongHeiGameRecord>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:SC_HongHeiGameRecord)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:SC_HongHeiGameRecord)
    MergeFrom(*source);
  }
}

void SC_HongHeiGameRecord::MergeFrom(const SC_HongHeiGameRecord& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:SC_HongHeiGameRecord)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  pb_record_.MergeFrom(from.pb_record_);
}

void SC_HongHeiGameRecord::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:SC_HongHeiGameRecord)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SC_HongHeiGameRecord::CopyFrom(const SC_HongHeiGameRecord& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SC_HongHeiGameRecord)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SC_HongHeiGameRecord::IsInitialized() const {
  return true;
}

void SC_HongHeiGameRecord::Swap(SC_HongHeiGameRecord* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SC_HongHeiGameRecord::InternalSwap(SC_HongHeiGameRecord* other) {
  pb_record_.InternalSwap(&other->pb_record_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SC_HongHeiGameRecord::GetMetadata() const {
  protobuf_public_5fhhdz_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_public_5fhhdz_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SC_HongHeiGameRecord

// repeated .SC_HongHeiRecord pb_record = 1;
int SC_HongHeiGameRecord::pb_record_size() const {
  return pb_record_.size();
}
void SC_HongHeiGameRecord::clear_pb_record() {
  pb_record_.Clear();
}
const ::SC_HongHeiRecord& SC_HongHeiGameRecord::pb_record(int index) const {
  // @@protoc_insertion_point(field_get:SC_HongHeiGameRecord.pb_record)
  return pb_record_.Get(index);
}
::SC_HongHeiRecord* SC_HongHeiGameRecord::mutable_pb_record(int index) {
  // @@protoc_insertion_point(field_mutable:SC_HongHeiGameRecord.pb_record)
  return pb_record_.Mutable(index);
}
::SC_HongHeiRecord* SC_HongHeiGameRecord::add_pb_record() {
  // @@protoc_insertion_point(field_add:SC_HongHeiGameRecord.pb_record)
  return pb_record_.Add();
}
::google::protobuf::RepeatedPtrField< ::SC_HongHeiRecord >*
SC_HongHeiGameRecord::mutable_pb_record() {
  // @@protoc_insertion_point(field_mutable_list:SC_HongHeiGameRecord.pb_record)
  return &pb_record_;
}
const ::google::protobuf::RepeatedPtrField< ::SC_HongHeiRecord >&
SC_HongHeiGameRecord::pb_record() const {
  // @@protoc_insertion_point(field_list:SC_HongHeiGameRecord.pb_record)
  return pb_record_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CS_HongHeiBetStandard::CS_HongHeiBetStandard()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_public_5fhhdz_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:CS_HongHeiBetStandard)
}
CS_HongHeiBetStandard::CS_HongHeiBetStandard(const CS_HongHeiBetStandard& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:CS_HongHeiBetStandard)
}

void CS_HongHeiBetStandard::SharedCtor() {
  _cached_size_ = 0;
}

CS_HongHeiBetStandard::~CS_HongHeiBetStandard() {
  // @@protoc_insertion_point(destructor:CS_HongHeiBetStandard)
  SharedDtor();
}

void CS_HongHeiBetStandard::SharedDtor() {
}

void CS_HongHeiBetStandard::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CS_HongHeiBetStandard::descriptor() {
  protobuf_public_5fhhdz_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_public_5fhhdz_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CS_HongHeiBetStandard& CS_HongHeiBetStandard::default_instance() {
  protobuf_public_5fhhdz_2eproto::InitDefaults();
  return *internal_default_instance();
}

CS_HongHeiBetStandard* CS_HongHeiBetStandard::New(::google::protobuf::Arena* arena) const {
  CS_HongHeiBetStandard* n = new CS_HongHeiBetStandard;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CS_HongHeiBetStandard::Clear() {
// @@protoc_insertion_point(message_clear_start:CS_HongHeiBetStandard)
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CS_HongHeiBetStandard::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CS_HongHeiBetStandard)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:CS_HongHeiBetStandard)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CS_HongHeiBetStandard)
  return false;
#undef DO_
}

void CS_HongHeiBetStandard::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CS_HongHeiBetStandard)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CS_HongHeiBetStandard)
}

::google::protobuf::uint8* CS_HongHeiBetStandard::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CS_HongHeiBetStandard)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CS_HongHeiBetStandard)
  return target;
}

size_t CS_HongHeiBetStandard::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CS_HongHeiBetStandard)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CS_HongHeiBetStandard::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CS_HongHeiBetStandard)
  GOOGLE_DCHECK_NE(&from, this);
  const CS_HongHeiBetStandard* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CS_HongHeiBetStandard>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CS_HongHeiBetStandard)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CS_HongHeiBetStandard)
    MergeFrom(*source);
  }
}

void CS_HongHeiBetStandard::MergeFrom(const CS_HongHeiBetStandard& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CS_HongHeiBetStandard)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void CS_HongHeiBetStandard::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CS_HongHeiBetStandard)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CS_HongHeiBetStandard::CopyFrom(const CS_HongHeiBetStandard& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CS_HongHeiBetStandard)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CS_HongHeiBetStandard::IsInitialized() const {
  return true;
}

void CS_HongHeiBetStandard::Swap(CS_HongHeiBetStandard* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CS_HongHeiBetStandard::InternalSwap(CS_HongHeiBetStandard* other) {
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CS_HongHeiBetStandard::GetMetadata() const {
  protobuf_public_5fhhdz_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_public_5fhhdz_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CS_HongHeiBetStandard

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SC_HongHeiBetStandard::kPlayerbetsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SC_HongHeiBetStandard::SC_HongHeiBetStandard()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_public_5fhhdz_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:SC_HongHeiBetStandard)
}
SC_HongHeiBetStandard::SC_HongHeiBetStandard(const SC_HongHeiBetStandard& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      playerbets_(from.playerbets_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:SC_HongHeiBetStandard)
}

void SC_HongHeiBetStandard::SharedCtor() {
  _cached_size_ = 0;
}

SC_HongHeiBetStandard::~SC_HongHeiBetStandard() {
  // @@protoc_insertion_point(destructor:SC_HongHeiBetStandard)
  SharedDtor();
}

void SC_HongHeiBetStandard::SharedDtor() {
}

void SC_HongHeiBetStandard::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SC_HongHeiBetStandard::descriptor() {
  protobuf_public_5fhhdz_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_public_5fhhdz_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const SC_HongHeiBetStandard& SC_HongHeiBetStandard::default_instance() {
  protobuf_public_5fhhdz_2eproto::InitDefaults();
  return *internal_default_instance();
}

SC_HongHeiBetStandard* SC_HongHeiBetStandard::New(::google::protobuf::Arena* arena) const {
  SC_HongHeiBetStandard* n = new SC_HongHeiBetStandard;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SC_HongHeiBetStandard::Clear() {
// @@protoc_insertion_point(message_clear_start:SC_HongHeiBetStandard)
  playerbets_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool SC_HongHeiBetStandard::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:SC_HongHeiBetStandard)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated int32 playerbets = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 8u, input, this->mutable_playerbets())));
        } else if (static_cast< ::google::protobuf::uint8>(tag) ==
                   static_cast< ::google::protobuf::uint8>(10u)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_playerbets())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:SC_HongHeiBetStandard)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:SC_HongHeiBetStandard)
  return false;
#undef DO_
}

void SC_HongHeiBetStandard::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:SC_HongHeiBetStandard)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated int32 playerbets = 1;
  for (int i = 0, n = this->playerbets_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      1, this->playerbets(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:SC_HongHeiBetStandard)
}

::google::protobuf::uint8* SC_HongHeiBetStandard::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:SC_HongHeiBetStandard)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated int32 playerbets = 1;
  target = ::google::protobuf::internal::WireFormatLite::
    WriteInt32ToArray(1, this->playerbets_, target);

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SC_HongHeiBetStandard)
  return target;
}

size_t SC_HongHeiBetStandard::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SC_HongHeiBetStandard)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // repeated int32 playerbets = 1;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      Int32Size(this->playerbets_);
    total_size += 1 *
                  ::google::protobuf::internal::FromIntSize(this->playerbets_size());
    total_size += data_size;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SC_HongHeiBetStandard::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:SC_HongHeiBetStandard)
  GOOGLE_DCHECK_NE(&from, this);
  const SC_HongHeiBetStandard* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SC_HongHeiBetStandard>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:SC_HongHeiBetStandard)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:SC_HongHeiBetStandard)
    MergeFrom(*source);
  }
}

void SC_HongHeiBetStandard::MergeFrom(const SC_HongHeiBetStandard& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:SC_HongHeiBetStandard)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  playerbets_.MergeFrom(from.playerbets_);
}

void SC_HongHeiBetStandard::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:SC_HongHeiBetStandard)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SC_HongHeiBetStandard::CopyFrom(const SC_HongHeiBetStandard& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SC_HongHeiBetStandard)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SC_HongHeiBetStandard::IsInitialized() const {
  return true;
}

void SC_HongHeiBetStandard::Swap(SC_HongHeiBetStandard* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SC_HongHeiBetStandard::InternalSwap(SC_HongHeiBetStandard* other) {
  playerbets_.InternalSwap(&other->playerbets_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SC_HongHeiBetStandard::GetMetadata() const {
  protobuf_public_5fhhdz_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_public_5fhhdz_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SC_HongHeiBetStandard

// repeated int32 playerbets = 1;
int SC_HongHeiBetStandard::playerbets_size() const {
  return playerbets_.size();
}
void SC_HongHeiBetStandard::clear_playerbets() {
  playerbets_.Clear();
}
::google::protobuf::int32 SC_HongHeiBetStandard::playerbets(int index) const {
  // @@protoc_insertion_point(field_get:SC_HongHeiBetStandard.playerbets)
  return playerbets_.Get(index);
}
void SC_HongHeiBetStandard::set_playerbets(int index, ::google::protobuf::int32 value) {
  playerbets_.Set(index, value);
  // @@protoc_insertion_point(field_set:SC_HongHeiBetStandard.playerbets)
}
void SC_HongHeiBetStandard::add_playerbets(::google::protobuf::int32 value) {
  playerbets_.Add(value);
  // @@protoc_insertion_point(field_add:SC_HongHeiBetStandard.playerbets)
}
const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
SC_HongHeiBetStandard::playerbets() const {
  // @@protoc_insertion_point(field_list:SC_HongHeiBetStandard.playerbets)
  return playerbets_;
}
::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
SC_HongHeiBetStandard::mutable_playerbets() {
  // @@protoc_insertion_point(field_mutable_list:SC_HongHeiBetStandard.playerbets)
  return &playerbets_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SC_HongHeiRichList::kPbRichlistFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SC_HongHeiRichList::SC_HongHeiRichList()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_public_5fhhdz_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:SC_HongHeiRichList)
}
SC_HongHeiRichList::SC_HongHeiRichList(const SC_HongHeiRichList& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      pb_richlist_(from.pb_richlist_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:SC_HongHeiRichList)
}

void SC_HongHeiRichList::SharedCtor() {
  _cached_size_ = 0;
}

SC_HongHeiRichList::~SC_HongHeiRichList() {
  // @@protoc_insertion_point(destructor:SC_HongHeiRichList)
  SharedDtor();
}

void SC_HongHeiRichList::SharedDtor() {
}

void SC_HongHeiRichList::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SC_HongHeiRichList::descriptor() {
  protobuf_public_5fhhdz_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_public_5fhhdz_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const SC_HongHeiRichList& SC_HongHeiRichList::default_instance() {
  protobuf_public_5fhhdz_2eproto::InitDefaults();
  return *internal_default_instance();
}

SC_HongHeiRichList* SC_HongHeiRichList::New(::google::protobuf::Arena* arena) const {
  SC_HongHeiRichList* n = new SC_HongHeiRichList;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SC_HongHeiRichList::Clear() {
// @@protoc_insertion_point(message_clear_start:SC_HongHeiRichList)
  pb_richlist_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool SC_HongHeiRichList::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:SC_HongHeiRichList)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .SC_HongHeiRichPlayer pb_richlist = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_pb_richlist()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:SC_HongHeiRichList)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:SC_HongHeiRichList)
  return false;
#undef DO_
}

void SC_HongHeiRichList::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:SC_HongHeiRichList)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .SC_HongHeiRichPlayer pb_richlist = 1;
  for (unsigned int i = 0, n = this->pb_richlist_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->pb_richlist(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:SC_HongHeiRichList)
}

::google::protobuf::uint8* SC_HongHeiRichList::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:SC_HongHeiRichList)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .SC_HongHeiRichPlayer pb_richlist = 1;
  for (unsigned int i = 0, n = this->pb_richlist_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, this->pb_richlist(i), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SC_HongHeiRichList)
  return target;
}

size_t SC_HongHeiRichList::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SC_HongHeiRichList)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // repeated .SC_HongHeiRichPlayer pb_richlist = 1;
  {
    unsigned int count = this->pb_richlist_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->pb_richlist(i));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SC_HongHeiRichList::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:SC_HongHeiRichList)
  GOOGLE_DCHECK_NE(&from, this);
  const SC_HongHeiRichList* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SC_HongHeiRichList>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:SC_HongHeiRichList)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:SC_HongHeiRichList)
    MergeFrom(*source);
  }
}

void SC_HongHeiRichList::MergeFrom(const SC_HongHeiRichList& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:SC_HongHeiRichList)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  pb_richlist_.MergeFrom(from.pb_richlist_);
}

void SC_HongHeiRichList::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:SC_HongHeiRichList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SC_HongHeiRichList::CopyFrom(const SC_HongHeiRichList& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SC_HongHeiRichList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SC_HongHeiRichList::IsInitialized() const {
  return true;
}

void SC_HongHeiRichList::Swap(SC_HongHeiRichList* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SC_HongHeiRichList::InternalSwap(SC_HongHeiRichList* other) {
  pb_richlist_.InternalSwap(&other->pb_richlist_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SC_HongHeiRichList::GetMetadata() const {
  protobuf_public_5fhhdz_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_public_5fhhdz_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SC_HongHeiRichList

// repeated .SC_HongHeiRichPlayer pb_richlist = 1;
int SC_HongHeiRichList::pb_richlist_size() const {
  return pb_richlist_.size();
}
void SC_HongHeiRichList::clear_pb_richlist() {
  pb_richlist_.Clear();
}
const ::SC_HongHeiRichPlayer& SC_HongHeiRichList::pb_richlist(int index) const {
  // @@protoc_insertion_point(field_get:SC_HongHeiRichList.pb_richlist)
  return pb_richlist_.Get(index);
}
::SC_HongHeiRichPlayer* SC_HongHeiRichList::mutable_pb_richlist(int index) {
  // @@protoc_insertion_point(field_mutable:SC_HongHeiRichList.pb_richlist)
  return pb_richlist_.Mutable(index);
}
::SC_HongHeiRichPlayer* SC_HongHeiRichList::add_pb_richlist() {
  // @@protoc_insertion_point(field_add:SC_HongHeiRichList.pb_richlist)
  return pb_richlist_.Add();
}
::google::protobuf::RepeatedPtrField< ::SC_HongHeiRichPlayer >*
SC_HongHeiRichList::mutable_pb_richlist() {
  // @@protoc_insertion_point(field_mutable_list:SC_HongHeiRichList.pb_richlist)
  return &pb_richlist_;
}
const ::google::protobuf::RepeatedPtrField< ::SC_HongHeiRichPlayer >&
SC_HongHeiRichList::pb_richlist() const {
  // @@protoc_insertion_point(field_list:SC_HongHeiRichList.pb_richlist)
  return pb_richlist_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CS_HongHeiGetState::CS_HongHeiGetState()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_public_5fhhdz_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:CS_HongHeiGetState)
}
CS_HongHeiGetState::CS_HongHeiGetState(const CS_HongHeiGetState& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:CS_HongHeiGetState)
}

void CS_HongHeiGetState::SharedCtor() {
  _cached_size_ = 0;
}

CS_HongHeiGetState::~CS_HongHeiGetState() {
  // @@protoc_insertion_point(destructor:CS_HongHeiGetState)
  SharedDtor();
}

void CS_HongHeiGetState::SharedDtor() {
}

void CS_HongHeiGetState::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CS_HongHeiGetState::descriptor() {
  protobuf_public_5fhhdz_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_public_5fhhdz_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CS_HongHeiGetState& CS_HongHeiGetState::default_instance() {
  protobuf_public_5fhhdz_2eproto::InitDefaults();
  return *internal_default_instance();
}

CS_HongHeiGetState* CS_HongHeiGetState::New(::google::protobuf::Arena* arena) const {
  CS_HongHeiGetState* n = new CS_HongHeiGetState;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CS_HongHeiGetState::Clear() {
// @@protoc_insertion_point(message_clear_start:CS_HongHeiGetState)
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CS_HongHeiGetState::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CS_HongHeiGetState)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:CS_HongHeiGetState)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CS_HongHeiGetState)
  return false;
#undef DO_
}

void CS_HongHeiGetState::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CS_HongHeiGetState)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CS_HongHeiGetState)
}

::google::protobuf::uint8* CS_HongHeiGetState::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CS_HongHeiGetState)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CS_HongHeiGetState)
  return target;
}

size_t CS_HongHeiGetState::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CS_HongHeiGetState)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CS_HongHeiGetState::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CS_HongHeiGetState)
  GOOGLE_DCHECK_NE(&from, this);
  const CS_HongHeiGetState* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CS_HongHeiGetState>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CS_HongHeiGetState)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CS_HongHeiGetState)
    MergeFrom(*source);
  }
}

void CS_HongHeiGetState::MergeFrom(const CS_HongHeiGetState& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CS_HongHeiGetState)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void CS_HongHeiGetState::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CS_HongHeiGetState)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CS_HongHeiGetState::CopyFrom(const CS_HongHeiGetState& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CS_HongHeiGetState)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CS_HongHeiGetState::IsInitialized() const {
  return true;
}

void CS_HongHeiGetState::Swap(CS_HongHeiGetState* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CS_HongHeiGetState::InternalSwap(CS_HongHeiGetState* other) {
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CS_HongHeiGetState::GetMetadata() const {
  protobuf_public_5fhhdz_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_public_5fhhdz_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CS_HongHeiGetState

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SC_HongHeiGetState::SC_HongHeiGetState()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_public_5fhhdz_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:SC_HongHeiGetState)
}
SC_HongHeiGetState::SC_HongHeiGetState(const SC_HongHeiGetState& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:SC_HongHeiGetState)
}

void SC_HongHeiGetState::SharedCtor() {
  _cached_size_ = 0;
}

SC_HongHeiGetState::~SC_HongHeiGetState() {
  // @@protoc_insertion_point(destructor:SC_HongHeiGetState)
  SharedDtor();
}

void SC_HongHeiGetState::SharedDtor() {
}

void SC_HongHeiGetState::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SC_HongHeiGetState::descriptor() {
  protobuf_public_5fhhdz_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_public_5fhhdz_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const SC_HongHeiGetState& SC_HongHeiGetState::default_instance() {
  protobuf_public_5fhhdz_2eproto::InitDefaults();
  return *internal_default_instance();
}

SC_HongHeiGetState* SC_HongHeiGetState::New(::google::protobuf::Arena* arena) const {
  SC_HongHeiGetState* n = new SC_HongHeiGetState;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SC_HongHeiGetState::Clear() {
// @@protoc_insertion_point(message_clear_start:SC_HongHeiGetState)
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool SC_HongHeiGetState::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:SC_HongHeiGetState)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:SC_HongHeiGetState)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:SC_HongHeiGetState)
  return false;
#undef DO_
}

void SC_HongHeiGetState::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:SC_HongHeiGetState)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:SC_HongHeiGetState)
}

::google::protobuf::uint8* SC_HongHeiGetState::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:SC_HongHeiGetState)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SC_HongHeiGetState)
  return target;
}

size_t SC_HongHeiGetState::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SC_HongHeiGetState)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SC_HongHeiGetState::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:SC_HongHeiGetState)
  GOOGLE_DCHECK_NE(&from, this);
  const SC_HongHeiGetState* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SC_HongHeiGetState>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:SC_HongHeiGetState)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:SC_HongHeiGetState)
    MergeFrom(*source);
  }
}

void SC_HongHeiGetState::MergeFrom(const SC_HongHeiGetState& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:SC_HongHeiGetState)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void SC_HongHeiGetState::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:SC_HongHeiGetState)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SC_HongHeiGetState::CopyFrom(const SC_HongHeiGetState& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SC_HongHeiGetState)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SC_HongHeiGetState::IsInitialized() const {
  return true;
}

void SC_HongHeiGetState::Swap(SC_HongHeiGetState* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SC_HongHeiGetState::InternalSwap(SC_HongHeiGetState* other) {
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SC_HongHeiGetState::GetMetadata() const {
  protobuf_public_5fhhdz_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_public_5fhhdz_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SC_HongHeiGetState

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)
