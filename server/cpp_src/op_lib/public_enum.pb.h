// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: public_enum.proto

#ifndef PROTOBUF_public_5fenum_2eproto__INCLUDED
#define PROTOBUF_public_5fenum_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3003000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3003000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
// @@protoc_insertion_point(includes)

namespace protobuf_public_5fenum_2eproto {
// Internal implementation detail -- do not call these.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[];
  static const ::google::protobuf::uint32 offsets[];
  static void InitDefaultsImpl();
  static void Shutdown();
};
void AddDescriptors();
void InitDefaults();
}  // namespace protobuf_public_5fenum_2eproto

enum REG_ACCOUNT_RESULT {
  REG_ACCOUNT_RESULT_SUCCESS = 0,
  REG_ACCOUNT_RESULT_FAILED = 1
};
bool REG_ACCOUNT_RESULT_IsValid(int value);
const REG_ACCOUNT_RESULT REG_ACCOUNT_RESULT_MIN = REG_ACCOUNT_RESULT_SUCCESS;
const REG_ACCOUNT_RESULT REG_ACCOUNT_RESULT_MAX = REG_ACCOUNT_RESULT_FAILED;
const int REG_ACCOUNT_RESULT_ARRAYSIZE = REG_ACCOUNT_RESULT_MAX + 1;

const ::google::protobuf::EnumDescriptor* REG_ACCOUNT_RESULT_descriptor();
inline const ::std::string& REG_ACCOUNT_RESULT_Name(REG_ACCOUNT_RESULT value) {
  return ::google::protobuf::internal::NameOfEnum(
    REG_ACCOUNT_RESULT_descriptor(), value);
}
inline bool REG_ACCOUNT_RESULT_Parse(
    const ::std::string& name, REG_ACCOUNT_RESULT* value) {
  return ::google::protobuf::internal::ParseNamedEnum<REG_ACCOUNT_RESULT>(
    REG_ACCOUNT_RESULT_descriptor(), name, value);
}
enum LOGIN_RESULT {
  LOGIN_RESULT_SUCCESS = 0,
  LOGIN_RESULT_REPEAT_LOGIN = 1,
  LOGIN_RESULT_DB_ERR = 2,
  LOGIN_RESULT_ACCOUNT_PASSWORD_ERR = 3,
  LOGIN_RESULT_NO_DEFAULT_LOBBY = 4,
  LOGIN_RESULT_SMS_CLOSED = 5,
  LOGIN_RESULT_SMS_REPEATED = 6,
  LOGIN_RESULT_RESET_ACCOUNT_FAILED = 7,
  LOGIN_RESULT_SMS_FAILED = 8,
  LOGIN_RESULT_ALIYUN_FAILED = 9,
  LOGIN_RESULT_SET_PASSWORD_FAILED = 10,
  LOGIN_RESULT_SET_NICKNAME_FAILED = 11,
  LOGIN_RESULT_SET_PASSWORD_GUEST = 12,
  LOGIN_RESULT_SAME_PASSWORD = 13,
  LOGIN_RESULT_LOGIN_VALIDATEBOX_FAIL = 14,
  LOGIN_RESULT_ACCOUNT_DISABLED = 15,
  LOGIN_RESULT_RESET_ACCOUNT_DUP_ACC = 16,
  LOGIN_RESULT_RESET_ACCOUNT_DUP_NICKNAME = 17,
  LOGIN_RESULT_SET_NICKNAME_DUP_NICKNAME = 18,
  LOGIN_RESULT_SET_ACCOUNT_OR_PASSWORD_EMPTY = 19,
  LOGIN_RESULT_PASSWORD_SIZE_LIMIT = 20,
  LOGIN_RESULT_PASSWORD_CHAR_LIMIT = 21,
  LOGIN_RESULT_ACCOUNT_SIZE_LIMIT = 22,
  LOGIN_RESULT_ACCOUNT_CHAR_LIMIT = 23,
  LOGIN_RESULT_SMS_ERR = 24,
  LOGIN_RESULT_NICKNAME_EMPTY = 25,
  LOGIN_RESULT_NICKNAME_LIMIT = 26,
  LOGIN_RESULT_ACCOUNT_EMPTY = 27,
  LOGIN_RESULT_TEL_LEN_ERR = 28,
  LOGIN_RESULT_TEL_ERR = 29,
  LOGIN_RESULT_TEL_USED = 30,
  LOGIN_RESULT_REDIS_ERROR = 31,
  LOGIN_RESULT_MAINTAIN = 32,
  LOGIN_RESULT_FREQUENTLY_LOGIN = 33,
  LOGIN_RESULT_UNCOMPLETED_LOGIN = 34,
  LOGIN_RESULT_LOGIN_QUQUE = 35
};
bool LOGIN_RESULT_IsValid(int value);
const LOGIN_RESULT LOGIN_RESULT_MIN = LOGIN_RESULT_SUCCESS;
const LOGIN_RESULT LOGIN_RESULT_MAX = LOGIN_RESULT_LOGIN_QUQUE;
const int LOGIN_RESULT_ARRAYSIZE = LOGIN_RESULT_MAX + 1;

const ::google::protobuf::EnumDescriptor* LOGIN_RESULT_descriptor();
inline const ::std::string& LOGIN_RESULT_Name(LOGIN_RESULT value) {
  return ::google::protobuf::internal::NameOfEnum(
    LOGIN_RESULT_descriptor(), value);
}
inline bool LOGIN_RESULT_Parse(
    const ::std::string& name, LOGIN_RESULT* value) {
  return ::google::protobuf::internal::ParseNamedEnum<LOGIN_RESULT>(
    LOGIN_RESULT_descriptor(), name, value);
}
enum BANK_OPT_RESULT {
  BANK_OPT_RESULT_SUCCESS = 0,
  BANK_OPT_RESULT_PASSWORD_HAS_BEEN_SET = 1,
  BANK_OPT_RESULT_PASSWORD_IS_NOT_SET = 2,
  BANK_OPT_RESULT_OLD_PASSWORD_ERR = 3,
  BANK_OPT_RESULT_ALREADY_LOGGED = 4,
  BANK_OPT_RESULT_LOGIN_FAILED = 5,
  BANK_OPT_RESULT_NOT_LOGIN = 6,
  BANK_OPT_RESULT_MONEY_ERR = 7,
  BANK_OPT_RESULT_TRANSFER_ACCOUNT = 8,
  BANK_OPT_RESULT_FORBID_IN_GAMEING = 9
};
bool BANK_OPT_RESULT_IsValid(int value);
const BANK_OPT_RESULT BANK_OPT_RESULT_MIN = BANK_OPT_RESULT_SUCCESS;
const BANK_OPT_RESULT BANK_OPT_RESULT_MAX = BANK_OPT_RESULT_FORBID_IN_GAMEING;
const int BANK_OPT_RESULT_ARRAYSIZE = BANK_OPT_RESULT_MAX + 1;

const ::google::protobuf::EnumDescriptor* BANK_OPT_RESULT_descriptor();
inline const ::std::string& BANK_OPT_RESULT_Name(BANK_OPT_RESULT value) {
  return ::google::protobuf::internal::NameOfEnum(
    BANK_OPT_RESULT_descriptor(), value);
}
inline bool BANK_OPT_RESULT_Parse(
    const ::std::string& name, BANK_OPT_RESULT* value) {
  return ::google::protobuf::internal::ParseNamedEnum<BANK_OPT_RESULT>(
    BANK_OPT_RESULT_descriptor(), name, value);
}
enum BANK_STATEMENT_OPT_TYPE {
  BANK_STATEMENT_OPT_TYPE_DEPOSIT = 0,
  BANK_STATEMENT_OPT_TYPE_DRAW = 1,
  BANK_STATEMENT_OPT_TYPE_TRANSFER_OUT = 2,
  BANK_STATEMENT_OPT_TYPE_TRANSFER_IN = 3,
  BANK_STATEMENT_OPT_TYPE_REWARD_LOGIN = 4,
  BANK_STATEMENT_OPT_TYPE_REWARD_ONLINE = 5,
  BANK_STATEMENT_OPT_TYPE_RELIEF_PAYMENT = 6
};
bool BANK_STATEMENT_OPT_TYPE_IsValid(int value);
const BANK_STATEMENT_OPT_TYPE BANK_STATEMENT_OPT_TYPE_MIN = BANK_STATEMENT_OPT_TYPE_DEPOSIT;
const BANK_STATEMENT_OPT_TYPE BANK_STATEMENT_OPT_TYPE_MAX = BANK_STATEMENT_OPT_TYPE_RELIEF_PAYMENT;
const int BANK_STATEMENT_OPT_TYPE_ARRAYSIZE = BANK_STATEMENT_OPT_TYPE_MAX + 1;

const ::google::protobuf::EnumDescriptor* BANK_STATEMENT_OPT_TYPE_descriptor();
inline const ::std::string& BANK_STATEMENT_OPT_TYPE_Name(BANK_STATEMENT_OPT_TYPE value) {
  return ::google::protobuf::internal::NameOfEnum(
    BANK_STATEMENT_OPT_TYPE_descriptor(), value);
}
inline bool BANK_STATEMENT_OPT_TYPE_Parse(
    const ::std::string& name, BANK_STATEMENT_OPT_TYPE* value) {
  return ::google::protobuf::internal::ParseNamedEnum<BANK_STATEMENT_OPT_TYPE>(
    BANK_STATEMENT_OPT_TYPE_descriptor(), name, value);
}
enum ITEM_OPERATE_RESULT {
  ITEM_OPERATE_RESULT_SUCCESS = 0,
  ITEM_OPERATE_RESULT_ITEMID_ERR = 1,
  ITEM_OPERATE_RESULT_NUM_ERR = 2,
  ITEM_OPERATE_RESULT_MONEY_NOT_ENOUGH = 3,
  ITEM_OPERATE_RESULT_DEL_FAILED = 4,
  ITEM_OPERATE_RESULT_USE_FAILED = 5
};
bool ITEM_OPERATE_RESULT_IsValid(int value);
const ITEM_OPERATE_RESULT ITEM_OPERATE_RESULT_MIN = ITEM_OPERATE_RESULT_SUCCESS;
const ITEM_OPERATE_RESULT ITEM_OPERATE_RESULT_MAX = ITEM_OPERATE_RESULT_USE_FAILED;
const int ITEM_OPERATE_RESULT_ARRAYSIZE = ITEM_OPERATE_RESULT_MAX + 1;

const ::google::protobuf::EnumDescriptor* ITEM_OPERATE_RESULT_descriptor();
inline const ::std::string& ITEM_OPERATE_RESULT_Name(ITEM_OPERATE_RESULT value) {
  return ::google::protobuf::internal::NameOfEnum(
    ITEM_OPERATE_RESULT_descriptor(), value);
}
inline bool ITEM_OPERATE_RESULT_Parse(
    const ::std::string& name, ITEM_OPERATE_RESULT* value) {
  return ::google::protobuf::internal::ParseNamedEnum<ITEM_OPERATE_RESULT>(
    ITEM_OPERATE_RESULT_descriptor(), name, value);
}
enum ITEM_PRICE_TYPE {
  ITEM_PRICE_TYPE_GOLD = 0
};
bool ITEM_PRICE_TYPE_IsValid(int value);
const ITEM_PRICE_TYPE ITEM_PRICE_TYPE_MIN = ITEM_PRICE_TYPE_GOLD;
const ITEM_PRICE_TYPE ITEM_PRICE_TYPE_MAX = ITEM_PRICE_TYPE_GOLD;
const int ITEM_PRICE_TYPE_ARRAYSIZE = ITEM_PRICE_TYPE_MAX + 1;

const ::google::protobuf::EnumDescriptor* ITEM_PRICE_TYPE_descriptor();
inline const ::std::string& ITEM_PRICE_TYPE_Name(ITEM_PRICE_TYPE value) {
  return ::google::protobuf::internal::NameOfEnum(
    ITEM_PRICE_TYPE_descriptor(), value);
}
inline bool ITEM_PRICE_TYPE_Parse(
    const ::std::string& name, ITEM_PRICE_TYPE* value) {
  return ::google::protobuf::internal::ParseNamedEnum<ITEM_PRICE_TYPE>(
    ITEM_PRICE_TYPE_descriptor(), name, value);
}
enum ITEM_TYPE {
  ITEM_TYPE_MONEY = 0,
  ITEM_TYPE_BOX = 1
};
bool ITEM_TYPE_IsValid(int value);
const ITEM_TYPE ITEM_TYPE_MIN = ITEM_TYPE_MONEY;
const ITEM_TYPE ITEM_TYPE_MAX = ITEM_TYPE_BOX;
const int ITEM_TYPE_ARRAYSIZE = ITEM_TYPE_MAX + 1;

const ::google::protobuf::EnumDescriptor* ITEM_TYPE_descriptor();
inline const ::std::string& ITEM_TYPE_Name(ITEM_TYPE value) {
  return ::google::protobuf::internal::NameOfEnum(
    ITEM_TYPE_descriptor(), value);
}
inline bool ITEM_TYPE_Parse(
    const ::std::string& name, ITEM_TYPE* value) {
  return ::google::protobuf::internal::ParseNamedEnum<ITEM_TYPE>(
    ITEM_TYPE_descriptor(), name, value);
}
enum RECEIVE_REWARD_RESULT {
  RECEIVE_REWARD_RESULT_SUCCESS = 0,
  RECEIVE_REWARD_RESULT_ERR_MONEY = 1,
  RECEIVE_REWARD_RESULT_ERR_REPEATED = 2,
  RECEIVE_REWARD_RESULT_ERR_FIND_LOGIN_AWARD = 3,
  RECEIVE_REWARD_RESULT_ERR_FIND_ONLINE_AWARD = 4,
  RECEIVE_REWARD_RESULT_ERR_ONLINE_AWARD_CD = 5,
  RECEIVE_REWARD_RESULT_ERR_COUNT_LIMIT = 6,
  RECEIVE_REWARD_RESULT_ERR_MONEY_LIMIT = 7
};
bool RECEIVE_REWARD_RESULT_IsValid(int value);
const RECEIVE_REWARD_RESULT RECEIVE_REWARD_RESULT_MIN = RECEIVE_REWARD_RESULT_SUCCESS;
const RECEIVE_REWARD_RESULT RECEIVE_REWARD_RESULT_MAX = RECEIVE_REWARD_RESULT_ERR_MONEY_LIMIT;
const int RECEIVE_REWARD_RESULT_ARRAYSIZE = RECEIVE_REWARD_RESULT_MAX + 1;

const ::google::protobuf::EnumDescriptor* RECEIVE_REWARD_RESULT_descriptor();
inline const ::std::string& RECEIVE_REWARD_RESULT_Name(RECEIVE_REWARD_RESULT value) {
  return ::google::protobuf::internal::NameOfEnum(
    RECEIVE_REWARD_RESULT_descriptor(), value);
}
inline bool RECEIVE_REWARD_RESULT_Parse(
    const ::std::string& name, RECEIVE_REWARD_RESULT* value) {
  return ::google::protobuf::internal::ParseNamedEnum<RECEIVE_REWARD_RESULT>(
    RECEIVE_REWARD_RESULT_descriptor(), name, value);
}
enum MAIL_OPT_RESULT {
  MAIL_OPT_RESULT_SUCCESS = 0,
  MAIL_OPT_RESULT_FIND_FAILED = 1,
  MAIL_OPT_RESULT_NO_RECEIVER = 2,
  MAIL_OPT_RESULT_EXPIRATION = 3,
  MAIL_OPT_RESULT_NO_ATTACHMENT = 4,
  MAIL_OPT_RESULT_HAS_ATTACHMENT = 5
};
bool MAIL_OPT_RESULT_IsValid(int value);
const MAIL_OPT_RESULT MAIL_OPT_RESULT_MIN = MAIL_OPT_RESULT_SUCCESS;
const MAIL_OPT_RESULT MAIL_OPT_RESULT_MAX = MAIL_OPT_RESULT_HAS_ATTACHMENT;
const int MAIL_OPT_RESULT_ARRAYSIZE = MAIL_OPT_RESULT_MAX + 1;

const ::google::protobuf::EnumDescriptor* MAIL_OPT_RESULT_descriptor();
inline const ::std::string& MAIL_OPT_RESULT_Name(MAIL_OPT_RESULT value) {
  return ::google::protobuf::internal::NameOfEnum(
    MAIL_OPT_RESULT_descriptor(), value);
}
inline bool MAIL_OPT_RESULT_Parse(
    const ::std::string& name, MAIL_OPT_RESULT* value) {
  return ::google::protobuf::internal::ParseNamedEnum<MAIL_OPT_RESULT>(
    MAIL_OPT_RESULT_descriptor(), name, value);
}
enum RANK_TYPE {
  RANK_TYPE_FORTUNE = 1,
  RANK_TYPE_DAILY_EARNINGS = 2,
  RANK_TYPE_WEEKLY_EARNINGS = 3,
  RANK_TYPE_MONTHLY_EARNINGS = 4
};
bool RANK_TYPE_IsValid(int value);
const RANK_TYPE RANK_TYPE_MIN = RANK_TYPE_FORTUNE;
const RANK_TYPE RANK_TYPE_MAX = RANK_TYPE_MONTHLY_EARNINGS;
const int RANK_TYPE_ARRAYSIZE = RANK_TYPE_MAX + 1;

const ::google::protobuf::EnumDescriptor* RANK_TYPE_descriptor();
inline const ::std::string& RANK_TYPE_Name(RANK_TYPE value) {
  return ::google::protobuf::internal::NameOfEnum(
    RANK_TYPE_descriptor(), value);
}
inline bool RANK_TYPE_Parse(
    const ::std::string& name, RANK_TYPE* value) {
  return ::google::protobuf::internal::ParseNamedEnum<RANK_TYPE>(
    RANK_TYPE_descriptor(), name, value);
}
enum GAME_SERVER_RESULT {
  GAME_SERVER_RESULT_SUCCESS = 0,
  GAME_SERVER_RESULT_IN_GAME = 1,
  GAME_SERVER_RESULT_IN_ROOM = 2,
  GAME_SERVER_RESULT_OUT_ROOM = 3,
  GAME_SERVER_RESULT_NOT_FIND_ROOM = 4,
  GAME_SERVER_RESULT_NOT_FIND_TABLE = 5,
  GAME_SERVER_RESULT_NOT_FIND_CHAIR = 6,
  GAME_SERVER_RESULT_PLAYER_ON_CHAIR = 7,
  GAME_SERVER_RESULT_CHAIR_HAVE_PLAYER = 8,
  GAME_SERVER_RESULT_PLAYER_NO_CHAIR = 9,
  GAME_SERVER_RESULT_OHTER_ON_CHAIR = 10,
  GAME_SERVER_RESULT_NO_GAME_SERVER = 11,
  GAME_SERVER_RESULT_ROOM_LIMIT = 12,
  GAME_SERVER_RESULT_FREEZEACCOUNT = 13,
  GAME_SERVER_RESULT_MAINTAIN = 14,
  GAME_SERVER_RESULT_CREATE_PRIVATE_ROOM_CHAIR = 15,
  GAME_SERVER_RESULT_CREATE_PRIVATE_ROOM_ALL = 16,
  GAME_SERVER_RESULT_CREATE_PRIVATE_ROOM_BANK = 17,
  GAME_SERVER_RESULT_CREATE_PRIVATE_ROOM_MONEY = 18,
  GAME_SERVER_RESULT_JOIN_PRIVATE_ROOM_ALL = 19,
  GAME_SERVER_RESULT_JOIN_PRIVATE_ROOM_BANK = 20,
  GAME_SERVER_RESULT_JOIN_PRIVATE_ROOM_MONEY = 21,
  GAME_SERVER_RESULT_PRIVATE_ROOM_NOT_FOUND = 22,
  GAME_SERVER_RESULT_READY_FAILED = 23,
  GAME_SERVER_RESULT_PRIVATE_ROOM_FULL = 24,
  GAME_SERVER_RESULT_ALIBABA_CLOSE = 25,
  GAME_SERVER_RESULT_CASH_BANKCLOSE = 26
};
bool GAME_SERVER_RESULT_IsValid(int value);
const GAME_SERVER_RESULT GAME_SERVER_RESULT_MIN = GAME_SERVER_RESULT_SUCCESS;
const GAME_SERVER_RESULT GAME_SERVER_RESULT_MAX = GAME_SERVER_RESULT_CASH_BANKCLOSE;
const int GAME_SERVER_RESULT_ARRAYSIZE = GAME_SERVER_RESULT_MAX + 1;

const ::google::protobuf::EnumDescriptor* GAME_SERVER_RESULT_descriptor();
inline const ::std::string& GAME_SERVER_RESULT_Name(GAME_SERVER_RESULT value) {
  return ::google::protobuf::internal::NameOfEnum(
    GAME_SERVER_RESULT_descriptor(), value);
}
inline bool GAME_SERVER_RESULT_Parse(
    const ::std::string& name, GAME_SERVER_RESULT* value) {
  return ::google::protobuf::internal::ParseNamedEnum<GAME_SERVER_RESULT>(
    GAME_SERVER_RESULT_descriptor(), name, value);
}
enum GM_ANDROID_OPT {
  GM_ANDROID_ADD_ACTIVE = 1,
  GM_ANDROID_SUB_ACTIVE = 2,
  GM_ANDROID_ADD_PASSIVE = 3,
  GM_ANDROID_SUB_PASSIVE = 4
};
bool GM_ANDROID_OPT_IsValid(int value);
const GM_ANDROID_OPT GM_ANDROID_OPT_MIN = GM_ANDROID_ADD_ACTIVE;
const GM_ANDROID_OPT GM_ANDROID_OPT_MAX = GM_ANDROID_SUB_PASSIVE;
const int GM_ANDROID_OPT_ARRAYSIZE = GM_ANDROID_OPT_MAX + 1;

const ::google::protobuf::EnumDescriptor* GM_ANDROID_OPT_descriptor();
inline const ::std::string& GM_ANDROID_OPT_Name(GM_ANDROID_OPT value) {
  return ::google::protobuf::internal::NameOfEnum(
    GM_ANDROID_OPT_descriptor(), value);
}
inline bool GM_ANDROID_OPT_Parse(
    const ::std::string& name, GM_ANDROID_OPT* value) {
  return ::google::protobuf::internal::ParseNamedEnum<GM_ANDROID_OPT>(
    GM_ANDROID_OPT_descriptor(), name, value);
}
enum LOG_MONEY_OPT_TYPE {
  LOG_MONEY_OPT_TYPE_BUY_ITEM = 1,
  LOG_MONEY_OPT_TYPE_BOX = 2,
  LOG_MONEY_OPT_TYPE_REWARD_LOGIN = 3,
  LOG_MONEY_OPT_TYPE_REWARD_ONLINE = 4,
  LOG_MONEY_OPT_TYPE_RELIEF_PAYMENT = 5,
  LOG_MONEY_OPT_TYPE_LAND = 6,
  LOG_MONEY_OPT_TYPE_ZHAJINHUA = 7,
  LOG_MONEY_OPT_TYPE_SHOWHAND = 8,
  LOG_MONEY_OPT_TYPE_OX = 9,
  LOG_MONEY_OPT_TYPE_FURIT = 10,
  LOG_MONEY_OPT_TYPE_BENZ_BMW = 11,
  LOG_MONEY_OPT_TYPE_TEXAS = 12,
  LOG_MONEY_OPT_TYPE_BUYU = 13,
  LOG_MONEY_OPT_TYPE_SLOTMA = 14,
  LOG_MONEY_OPT_TYPE_RESET_ACCOUNT = 15,
  LOG_MONEY_OPT_TYPE_CASH_MONEY = 16,
  LOG_MONEY_OPT_TYPE_RECHARGE_MONEY = 17,
  LOG_MONEY_OPT_TYPE_GM = 18,
  LOG_MONEY_OPT_TYPE_INVITE = 19,
  LOG_MONEY_OPT_TYPE_CASH_MONEY_FALSE = 20,
  LOG_MONEY_OPT_TYPE_CREATE_PRIVATE_ROOM = 21,
  LOG_MONEY_OPT_TYPE_BANKER_OX = 22,
  LOG_MONEY_OPT_TYPE_FORTUNE_SLOTS = 23,
  LOG_MONEY_OPT_TYPE_MAAJAN = 24,
  LOG_MONEY_OPT_TYPE_CLASSIC_OX = 25,
  LOG_MONEY_OPT_TYPE_POINT21 = 26,
  LOG_MONEY_OPT_TYPE_SANGONG = 27,
  LOG_MONEY_OPT_TYPE_HONGHEI = 28,
  LOG_MONEY_OPT_TYPE_CHANNEL_ZK = 29,
  LOG_MONEY_OPT_TYPE_PLAYER_PROMOTION = 30,
  LOG_MONEY_OPT_TYPE_LONGHU = 31
};
bool LOG_MONEY_OPT_TYPE_IsValid(int value);
const LOG_MONEY_OPT_TYPE LOG_MONEY_OPT_TYPE_MIN = LOG_MONEY_OPT_TYPE_BUY_ITEM;
const LOG_MONEY_OPT_TYPE LOG_MONEY_OPT_TYPE_MAX = LOG_MONEY_OPT_TYPE_LONGHU;
const int LOG_MONEY_OPT_TYPE_ARRAYSIZE = LOG_MONEY_OPT_TYPE_MAX + 1;

const ::google::protobuf::EnumDescriptor* LOG_MONEY_OPT_TYPE_descriptor();
inline const ::std::string& LOG_MONEY_OPT_TYPE_Name(LOG_MONEY_OPT_TYPE value) {
  return ::google::protobuf::internal::NameOfEnum(
    LOG_MONEY_OPT_TYPE_descriptor(), value);
}
inline bool LOG_MONEY_OPT_TYPE_Parse(
    const ::std::string& name, LOG_MONEY_OPT_TYPE* value) {
  return ::google::protobuf::internal::ParseNamedEnum<LOG_MONEY_OPT_TYPE>(
    LOG_MONEY_OPT_TYPE_descriptor(), name, value);
}
enum GAME_READY_MODE {
  GAME_READY_MODE_NONE = 1,
  GAME_READY_MODE_ALL = 2,
  GAME_READY_MODE_PART = 3
};
bool GAME_READY_MODE_IsValid(int value);
const GAME_READY_MODE GAME_READY_MODE_MIN = GAME_READY_MODE_NONE;
const GAME_READY_MODE GAME_READY_MODE_MAX = GAME_READY_MODE_PART;
const int GAME_READY_MODE_ARRAYSIZE = GAME_READY_MODE_MAX + 1;

const ::google::protobuf::EnumDescriptor* GAME_READY_MODE_descriptor();
inline const ::std::string& GAME_READY_MODE_Name(GAME_READY_MODE value) {
  return ::google::protobuf::internal::NameOfEnum(
    GAME_READY_MODE_descriptor(), value);
}
inline bool GAME_READY_MODE_Parse(
    const ::std::string& name, GAME_READY_MODE* value) {
  return ::google::protobuf::internal::ParseNamedEnum<GAME_READY_MODE>(
    GAME_READY_MODE_descriptor(), name, value);
}
enum GAME_BAND_ALIPAY {
  GAME_BAND_ALIPAY_SUCCESS = 0,
  GAME_BAND_ALIPAY_CHECK_ERROR = 1,
  GAME_BAND_ALIPAY_REPEAT_BAND = 2,
  GAME_BAND_ALIPAY_DB_ERROR = 3
};
bool GAME_BAND_ALIPAY_IsValid(int value);
const GAME_BAND_ALIPAY GAME_BAND_ALIPAY_MIN = GAME_BAND_ALIPAY_SUCCESS;
const GAME_BAND_ALIPAY GAME_BAND_ALIPAY_MAX = GAME_BAND_ALIPAY_DB_ERROR;
const int GAME_BAND_ALIPAY_ARRAYSIZE = GAME_BAND_ALIPAY_MAX + 1;

const ::google::protobuf::EnumDescriptor* GAME_BAND_ALIPAY_descriptor();
inline const ::std::string& GAME_BAND_ALIPAY_Name(GAME_BAND_ALIPAY value) {
  return ::google::protobuf::internal::NameOfEnum(
    GAME_BAND_ALIPAY_descriptor(), value);
}
inline bool GAME_BAND_ALIPAY_Parse(
    const ::std::string& name, GAME_BAND_ALIPAY* value) {
  return ::google::protobuf::internal::ParseNamedEnum<GAME_BAND_ALIPAY>(
    GAME_BAND_ALIPAY_descriptor(), name, value);
}
enum GMmessageRetCode {
  GMmessageRetCode_Success = 1,
  GMmessageRetCode_SocketConnectFail = 0,
  GMmessageRetCode_GmCommandError = 2,
  GMmessageRetCode_GmParamMiss = 3,
  GMmessageRetCode_MsgPlayerOffline = 101,
  GMmessageRetCode_MsgDBFaild = 102,
  GMmessageRetCode_MsgGameIdnoFind = 103,
  GMmessageRetCode_MsgGateDataError = 104,
  GMmessageRetCode_Msgnofindsession = 105,
  GMmessageRetCode_MsgParamMiss = 106,
  GMmessageRetCode_MsgTypeError = 107,
  GMmessageRetCode_FBParamMiss = 121,
  GMmessageRetCode_FBPlayerOffline = 122,
  GMmessageRetCode_FBGateDataError = 123,
  GMmessageRetCode_DelMsgDBError = 125,
  GMmessageRetCode_ATMoneyParamError = 130,
  GMmessageRetCode_ATGameServerNofindPlayer = 131,
  GMmessageRetCode_ATNotEnoughMoney = 132,
  GMmessageRetCode_ATJudgmentPlayerOnlineError = 133,
  GMmessageRetCode_ATDB_NoFind_Player = 134,
  GMmessageRetCode_ATDB_NotData = 135,
  GMmessageRetCode_ATChangMoney_DB_Error = 136,
  GMmessageRetCode_ATCantTransfer = 137,
  GMmessageRetCode_ATnofindUser = 138,
  GMmessageRetCode_ATtypeError = 140,
  GMmessageRetCode_PLGameServerNofindPlayer = 141,
  GMmessageRetCode_PLNotEnoughMoney = 142,
  GMmessageRetCode_PLJudgmentPlayerOnlineError = 143,
  GMmessageRetCode_PLDB_NoFind_Player = 144,
  GMmessageRetCode_PLDB_NotData = 145,
  GMmessageRetCode_PLChangMoney_DB_Error = 146,
  GMmessageRetCode_PLCantTransfer = 147,
  GMmessageRetCode_PLnofindUser = 148,
  GMmessageRetCode_AT_PL_onePlayer = 149,
  GMmessageRetCode_EditAliPayFail = 160,
  GMmessageRetCode_FreezeAccountOnLineFaild = 165,
  GMmessageRetCode_FreezeAccountGameFaild = 166,
  GMmessageRetCode_DBRquestError = 999
};
bool GMmessageRetCode_IsValid(int value);
const GMmessageRetCode GMmessageRetCode_MIN = GMmessageRetCode_SocketConnectFail;
const GMmessageRetCode GMmessageRetCode_MAX = GMmessageRetCode_DBRquestError;
const int GMmessageRetCode_ARRAYSIZE = GMmessageRetCode_MAX + 1;

const ::google::protobuf::EnumDescriptor* GMmessageRetCode_descriptor();
inline const ::std::string& GMmessageRetCode_Name(GMmessageRetCode value) {
  return ::google::protobuf::internal::NameOfEnum(
    GMmessageRetCode_descriptor(), value);
}
inline bool GMmessageRetCode_Parse(
    const ::std::string& name, GMmessageRetCode* value) {
  return ::google::protobuf::internal::ParseNamedEnum<GMmessageRetCode>(
    GMmessageRetCode_descriptor(), name, value);
}
enum ChangeMoneyRecode {
  ChangMoney_Success = 0,
  ChangMoney_GameServerNofindPlayer = 1,
  ChangMoney_NotEnoughMoney = 2,
  ChangMoney_JudgmentPlayerOnlineError = 3,
  ChangMoney_DB_NoFind_Player = 4,
  ChangMoney_DB_NotData = 5,
  ChangMoney_DB_Error = 6
};
bool ChangeMoneyRecode_IsValid(int value);
const ChangeMoneyRecode ChangeMoneyRecode_MIN = ChangMoney_Success;
const ChangeMoneyRecode ChangeMoneyRecode_MAX = ChangMoney_DB_Error;
const int ChangeMoneyRecode_ARRAYSIZE = ChangeMoneyRecode_MAX + 1;

const ::google::protobuf::EnumDescriptor* ChangeMoneyRecode_descriptor();
inline const ::std::string& ChangeMoneyRecode_Name(ChangeMoneyRecode value) {
  return ::google::protobuf::internal::NameOfEnum(
    ChangeMoneyRecode_descriptor(), value);
}
inline bool ChangeMoneyRecode_Parse(
    const ::std::string& name, ChangeMoneyRecode* value) {
  return ::google::protobuf::internal::ParseNamedEnum<ChangeMoneyRecode>(
    ChangeMoneyRecode_descriptor(), name, value);
}
// ===================================================================


// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)


#ifndef SWIG
namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::REG_ACCOUNT_RESULT> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::REG_ACCOUNT_RESULT>() {
  return ::REG_ACCOUNT_RESULT_descriptor();
}
template <> struct is_proto_enum< ::LOGIN_RESULT> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::LOGIN_RESULT>() {
  return ::LOGIN_RESULT_descriptor();
}
template <> struct is_proto_enum< ::BANK_OPT_RESULT> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::BANK_OPT_RESULT>() {
  return ::BANK_OPT_RESULT_descriptor();
}
template <> struct is_proto_enum< ::BANK_STATEMENT_OPT_TYPE> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::BANK_STATEMENT_OPT_TYPE>() {
  return ::BANK_STATEMENT_OPT_TYPE_descriptor();
}
template <> struct is_proto_enum< ::ITEM_OPERATE_RESULT> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::ITEM_OPERATE_RESULT>() {
  return ::ITEM_OPERATE_RESULT_descriptor();
}
template <> struct is_proto_enum< ::ITEM_PRICE_TYPE> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::ITEM_PRICE_TYPE>() {
  return ::ITEM_PRICE_TYPE_descriptor();
}
template <> struct is_proto_enum< ::ITEM_TYPE> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::ITEM_TYPE>() {
  return ::ITEM_TYPE_descriptor();
}
template <> struct is_proto_enum< ::RECEIVE_REWARD_RESULT> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::RECEIVE_REWARD_RESULT>() {
  return ::RECEIVE_REWARD_RESULT_descriptor();
}
template <> struct is_proto_enum< ::MAIL_OPT_RESULT> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::MAIL_OPT_RESULT>() {
  return ::MAIL_OPT_RESULT_descriptor();
}
template <> struct is_proto_enum< ::RANK_TYPE> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::RANK_TYPE>() {
  return ::RANK_TYPE_descriptor();
}
template <> struct is_proto_enum< ::GAME_SERVER_RESULT> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::GAME_SERVER_RESULT>() {
  return ::GAME_SERVER_RESULT_descriptor();
}
template <> struct is_proto_enum< ::GM_ANDROID_OPT> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::GM_ANDROID_OPT>() {
  return ::GM_ANDROID_OPT_descriptor();
}
template <> struct is_proto_enum< ::LOG_MONEY_OPT_TYPE> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::LOG_MONEY_OPT_TYPE>() {
  return ::LOG_MONEY_OPT_TYPE_descriptor();
}
template <> struct is_proto_enum< ::GAME_READY_MODE> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::GAME_READY_MODE>() {
  return ::GAME_READY_MODE_descriptor();
}
template <> struct is_proto_enum< ::GAME_BAND_ALIPAY> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::GAME_BAND_ALIPAY>() {
  return ::GAME_BAND_ALIPAY_descriptor();
}
template <> struct is_proto_enum< ::GMmessageRetCode> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::GMmessageRetCode>() {
  return ::GMmessageRetCode_descriptor();
}
template <> struct is_proto_enum< ::ChangeMoneyRecode> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::ChangeMoneyRecode>() {
  return ::ChangeMoneyRecode_descriptor();
}

}  // namespace protobuf
}  // namespace google
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_public_5fenum_2eproto__INCLUDED
